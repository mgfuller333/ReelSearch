"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-comments-section";
exports.ids = ["vendor-chunks/react-comments-section"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-comments-section/dist/index.modern.js":
/*!******************************************************************!*\
  !*** ./node_modules/react-comments-section/dist/index.modern.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CommentSection: () => (/* binding */ CommentSection$1)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var emoji_picker_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! emoji-picker-react */ \"(ssr)/./node_modules/emoji-picker-react/dist/index.js\");\n/* harmony import */ var emoji_picker_react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(emoji_picker_react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_draft_wysiwyg_dist_react_draft_wysiwyg_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-draft-wysiwyg/dist/react-draft-wysiwyg.css */ \"(ssr)/./node_modules/react-draft-wysiwyg/dist/react-draft-wysiwyg.css\");\n/* harmony import */ var draft_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! draft-js */ \"(ssr)/./node_modules/draft-js/lib/Draft.js\");\n/* harmony import */ var draft_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(draft_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react_draft_wysiwyg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-draft-wysiwyg */ \"(ssr)/./node_modules/react-draft-wysiwyg/dist/react-draft-wysiwyg.js\");\n/* harmony import */ var react_draft_wysiwyg__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_draft_wysiwyg__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var draftjs_to_html__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! draftjs-to-html */ \"(ssr)/./node_modules/draftjs-to-html/lib/draftjs-to-html.js\");\n/* harmony import */ var draftjs_to_html__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(draftjs_to_html__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var html_to_draftjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! html-to-draftjs */ \"(ssr)/./node_modules/html-to-draftjs/dist/html-to-draftjs.js\");\n/* harmony import */ var html_to_draftjs__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(html_to_draftjs__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _szhsin_react_menu__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @szhsin/react-menu */ \"(ssr)/./node_modules/@szhsin/react-menu/dist/es/components/Menu.js\");\n/* harmony import */ var _szhsin_react_menu__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @szhsin/react-menu */ \"(ssr)/./node_modules/@szhsin/react-menu/dist/es/components/MenuItem.js\");\n/* harmony import */ var _szhsin_react_menu_dist_core_css__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @szhsin/react-menu/dist/core.css */ \"(ssr)/./node_modules/@szhsin/react-menu/dist/core.css\");\n/* harmony import */ var react_responsive_modal_styles_css__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-responsive-modal/styles.css */ \"(ssr)/./node_modules/react-responsive-modal/styles.css\");\n/* harmony import */ var react_responsive_modal__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-responsive-modal */ \"(ssr)/./node_modules/react-responsive-modal/dist/react-responsive-modal.esm.js\");\n\n\n\n\n\n\n\n\n\n\n\nvar commonjsGlobal = typeof globalThis !== \"undefined\" ? globalThis :  false ? 0 : typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : {};\nfunction createCommonjsModule(fn, module) {\n    return module = {\n        exports: {}\n    }, fn(module, module.exports), module.exports;\n}\nvar lodash = createCommonjsModule(function(module, exports) {\n    (function() {\n        /** Used as a safe reference for `undefined` in pre-ES5 environments. */ var undefined$1;\n        /** Used as the semantic version number. */ var VERSION = \"4.17.21\";\n        /** Used as the size to enable large array optimizations. */ var LARGE_ARRAY_SIZE = 200;\n        /** Error message constants. */ var CORE_ERROR_TEXT = \"Unsupported core-js use. Try https://npms.io/search?q=ponyfill.\", FUNC_ERROR_TEXT = \"Expected a function\", INVALID_TEMPL_VAR_ERROR_TEXT = \"Invalid `variable` option passed into `_.template`\";\n        /** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = \"__lodash_hash_undefined__\";\n        /** Used as the maximum memoize cache size. */ var MAX_MEMOIZE_SIZE = 500;\n        /** Used as the internal argument placeholder. */ var PLACEHOLDER = \"__lodash_placeholder__\";\n        /** Used to compose bitmasks for cloning. */ var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;\n        /** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;\n        /** Used to compose bitmasks for function metadata. */ var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;\n        /** Used as default options for `_.truncate`. */ var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = \"...\";\n        /** Used to detect hot functions by number of calls within a span of milliseconds. */ var HOT_COUNT = 800, HOT_SPAN = 16;\n        /** Used to indicate the type of lazy iteratees. */ var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;\n        /** Used as references for various `Number` constants. */ var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 1.7976931348623157e+308, NAN = 0 / 0;\n        /** Used as references for the maximum length and index of an array. */ var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n        /** Used to associate wrap methods with their bit flags. */ var wrapFlags = [\n            [\n                \"ary\",\n                WRAP_ARY_FLAG\n            ],\n            [\n                \"bind\",\n                WRAP_BIND_FLAG\n            ],\n            [\n                \"bindKey\",\n                WRAP_BIND_KEY_FLAG\n            ],\n            [\n                \"curry\",\n                WRAP_CURRY_FLAG\n            ],\n            [\n                \"curryRight\",\n                WRAP_CURRY_RIGHT_FLAG\n            ],\n            [\n                \"flip\",\n                WRAP_FLIP_FLAG\n            ],\n            [\n                \"partial\",\n                WRAP_PARTIAL_FLAG\n            ],\n            [\n                \"partialRight\",\n                WRAP_PARTIAL_RIGHT_FLAG\n            ],\n            [\n                \"rearg\",\n                WRAP_REARG_FLAG\n            ]\n        ];\n        /** `Object#toString` result references. */ var argsTag = \"[object Arguments]\", arrayTag = \"[object Array]\", asyncTag = \"[object AsyncFunction]\", boolTag = \"[object Boolean]\", dateTag = \"[object Date]\", domExcTag = \"[object DOMException]\", errorTag = \"[object Error]\", funcTag = \"[object Function]\", genTag = \"[object GeneratorFunction]\", mapTag = \"[object Map]\", numberTag = \"[object Number]\", nullTag = \"[object Null]\", objectTag = \"[object Object]\", promiseTag = \"[object Promise]\", proxyTag = \"[object Proxy]\", regexpTag = \"[object RegExp]\", setTag = \"[object Set]\", stringTag = \"[object String]\", symbolTag = \"[object Symbol]\", undefinedTag = \"[object Undefined]\", weakMapTag = \"[object WeakMap]\", weakSetTag = \"[object WeakSet]\";\n        var arrayBufferTag = \"[object ArrayBuffer]\", dataViewTag = \"[object DataView]\", float32Tag = \"[object Float32Array]\", float64Tag = \"[object Float64Array]\", int8Tag = \"[object Int8Array]\", int16Tag = \"[object Int16Array]\", int32Tag = \"[object Int32Array]\", uint8Tag = \"[object Uint8Array]\", uint8ClampedTag = \"[object Uint8ClampedArray]\", uint16Tag = \"[object Uint16Array]\", uint32Tag = \"[object Uint32Array]\";\n        /** Used to match empty string literals in compiled template source. */ var reEmptyStringLeading = /\\b__p \\+= '';/g, reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g, reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n        /** Used to match HTML entities and HTML characters. */ var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>\"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n        /** Used to match template delimiters. */ var reEscape = /<%-([\\s\\S]+?)%>/g, reEvaluate = /<%([\\s\\S]+?)%>/g, reInterpolate = /<%=([\\s\\S]+?)%>/g;\n        /** Used to match property names within property paths. */ var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/, reIsPlainProp = /^\\w*$/, rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n        /**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n   */ var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);\n        /** Used to match leading whitespace. */ var reTrimStart = /^\\s+/;\n        /** Used to match a single whitespace character. */ var reWhitespace = /\\s/;\n        /** Used to match wrap detail comments. */ var reWrapComment = /\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/, reWrapDetails = /\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/, reSplitDetails = /,? & /;\n        /** Used to match words composed of alphanumeric characters. */ var reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n        /**\n   * Used to validate the `validate` option in `_.template` variable.\n   *\n   * Forbids characters which could potentially change the meaning of the function argument definition:\n   * - \"(),\" (modification of function parameters)\n   * - \"=\" (default value)\n   * - \"[]{}\" (destructuring of function parameters)\n   * - \"/\" (beginning of a comment)\n   * - whitespace\n   */ var reForbiddenIdentifierChars = /[()=,{}\\[\\]\\/\\s]/;\n        /** Used to match backslashes in property paths. */ var reEscapeChar = /\\\\(\\\\)?/g;\n        /**\n   * Used to match\n   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).\n   */ var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n        /** Used to match `RegExp` flags from their coerced string values. */ var reFlags = /\\w*$/;\n        /** Used to detect bad signed hexadecimal string values. */ var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n        /** Used to detect binary string values. */ var reIsBinary = /^0b[01]+$/i;\n        /** Used to detect host constructors (Safari). */ var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n        /** Used to detect octal string values. */ var reIsOctal = /^0o[0-7]+$/i;\n        /** Used to detect unsigned integer values. */ var reIsUint = /^(?:0|[1-9]\\d*)$/;\n        /** Used to match Latin Unicode letters (excluding mathematical operators). */ var reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n        /** Used to ensure capturing order of template delimiters. */ var reNoMatch = /($^)/;\n        /** Used to match unescaped characters in compiled string literals. */ var reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\n        /** Used to compose unicode character classes. */ var rsAstralRange = \"\\ud800-\\udfff\", rsComboMarksRange = \"\\\\u0300-\\\\u036f\", reComboHalfMarksRange = \"\\\\ufe20-\\\\ufe2f\", rsComboSymbolsRange = \"\\\\u20d0-\\\\u20ff\", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = \"\\\\u2700-\\\\u27bf\", rsLowerRange = \"a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff\", rsMathOpRange = \"\\\\xac\\\\xb1\\\\xd7\\\\xf7\", rsNonCharRange = \"\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf\", rsPunctuationRange = \"\\\\u2000-\\\\u206f\", rsSpaceRange = \" \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000\", rsUpperRange = \"A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde\", rsVarRange = \"\\\\ufe0e\\\\ufe0f\", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n        /** Used to compose unicode capture groups. */ var rsApos = \"['’]\", rsAstral = \"[\" + rsAstralRange + \"]\", rsBreak = \"[\" + rsBreakRange + \"]\", rsCombo = \"[\" + rsComboRange + \"]\", rsDigits = \"\\\\d+\", rsDingbat = \"[\" + rsDingbatRange + \"]\", rsLower = \"[\" + rsLowerRange + \"]\", rsMisc = \"[^\" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + \"]\", rsFitz = \"\\ud83c[\\udffb-\\udfff]\", rsModifier = \"(?:\" + rsCombo + \"|\" + rsFitz + \")\", rsNonAstral = \"[^\" + rsAstralRange + \"]\", rsRegional = \"(?:\\ud83c[\\udde6-\\uddff]){2}\", rsSurrPair = \"[\\ud800-\\udbff][\\udc00-\\udfff]\", rsUpper = \"[\" + rsUpperRange + \"]\", rsZWJ = \"\\\\u200d\";\n        /** Used to compose unicode regexes. */ var rsMiscLower = \"(?:\" + rsLower + \"|\" + rsMisc + \")\", rsMiscUpper = \"(?:\" + rsUpper + \"|\" + rsMisc + \")\", rsOptContrLower = \"(?:\" + rsApos + \"(?:d|ll|m|re|s|t|ve))?\", rsOptContrUpper = \"(?:\" + rsApos + \"(?:D|LL|M|RE|S|T|VE))?\", reOptMod = rsModifier + \"?\", rsOptVar = \"[\" + rsVarRange + \"]?\", rsOptJoin = \"(?:\" + rsZWJ + \"(?:\" + [\n            rsNonAstral,\n            rsRegional,\n            rsSurrPair\n        ].join(\"|\") + \")\" + rsOptVar + reOptMod + \")*\", rsOrdLower = \"\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])\", rsOrdUpper = \"\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])\", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = \"(?:\" + [\n            rsDingbat,\n            rsRegional,\n            rsSurrPair\n        ].join(\"|\") + \")\" + rsSeq, rsSymbol = \"(?:\" + [\n            rsNonAstral + rsCombo + \"?\",\n            rsCombo,\n            rsRegional,\n            rsSurrPair,\n            rsAstral\n        ].join(\"|\") + \")\";\n        /** Used to match apostrophes. */ var reApos = RegExp(rsApos, \"g\");\n        /**\n   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n   */ var reComboMark = RegExp(rsCombo, \"g\");\n        /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */ var reUnicode = RegExp(rsFitz + \"(?=\" + rsFitz + \")|\" + rsSymbol + rsSeq, \"g\");\n        /** Used to match complex or compound words. */ var reUnicodeWord = RegExp([\n            rsUpper + \"?\" + rsLower + \"+\" + rsOptContrLower + \"(?=\" + [\n                rsBreak,\n                rsUpper,\n                \"$\"\n            ].join(\"|\") + \")\",\n            rsMiscUpper + \"+\" + rsOptContrUpper + \"(?=\" + [\n                rsBreak,\n                rsUpper + rsMiscLower,\n                \"$\"\n            ].join(\"|\") + \")\",\n            rsUpper + \"?\" + rsMiscLower + \"+\" + rsOptContrLower,\n            rsUpper + \"+\" + rsOptContrUpper,\n            rsOrdUpper,\n            rsOrdLower,\n            rsDigits,\n            rsEmoji\n        ].join(\"|\"), \"g\");\n        /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */ var reHasUnicode = RegExp(\"[\" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + \"]\");\n        /** Used to detect strings that need a more robust regexp to match words. */ var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n        /** Used to assign default `context` object properties. */ var contextProps = [\n            \"Array\",\n            \"Buffer\",\n            \"DataView\",\n            \"Date\",\n            \"Error\",\n            \"Float32Array\",\n            \"Float64Array\",\n            \"Function\",\n            \"Int8Array\",\n            \"Int16Array\",\n            \"Int32Array\",\n            \"Map\",\n            \"Math\",\n            \"Object\",\n            \"Promise\",\n            \"RegExp\",\n            \"Set\",\n            \"String\",\n            \"Symbol\",\n            \"TypeError\",\n            \"Uint8Array\",\n            \"Uint8ClampedArray\",\n            \"Uint16Array\",\n            \"Uint32Array\",\n            \"WeakMap\",\n            \"_\",\n            \"clearTimeout\",\n            \"isFinite\",\n            \"parseInt\",\n            \"setTimeout\"\n        ];\n        /** Used to make template sourceURLs easier to identify. */ var templateCounter = -1;\n        /** Used to identify `toStringTag` values of typed arrays. */ var typedArrayTags = {};\n        typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;\n        typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;\n        /** Used to identify `toStringTag` values supported by `_.clone`. */ var cloneableTags = {};\n        cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\n        cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;\n        /** Used to map Latin Unicode letters to basic Latin letters. */ var deburredLetters = {\n            // Latin-1 Supplement block.\n            \"\\xc0\": \"A\",\n            \"\\xc1\": \"A\",\n            \"\\xc2\": \"A\",\n            \"\\xc3\": \"A\",\n            \"\\xc4\": \"A\",\n            \"\\xc5\": \"A\",\n            \"\\xe0\": \"a\",\n            \"\\xe1\": \"a\",\n            \"\\xe2\": \"a\",\n            \"\\xe3\": \"a\",\n            \"\\xe4\": \"a\",\n            \"\\xe5\": \"a\",\n            \"\\xc7\": \"C\",\n            \"\\xe7\": \"c\",\n            \"\\xd0\": \"D\",\n            \"\\xf0\": \"d\",\n            \"\\xc8\": \"E\",\n            \"\\xc9\": \"E\",\n            \"\\xca\": \"E\",\n            \"\\xcb\": \"E\",\n            \"\\xe8\": \"e\",\n            \"\\xe9\": \"e\",\n            \"\\xea\": \"e\",\n            \"\\xeb\": \"e\",\n            \"\\xcc\": \"I\",\n            \"\\xcd\": \"I\",\n            \"\\xce\": \"I\",\n            \"\\xcf\": \"I\",\n            \"\\xec\": \"i\",\n            \"\\xed\": \"i\",\n            \"\\xee\": \"i\",\n            \"\\xef\": \"i\",\n            \"\\xd1\": \"N\",\n            \"\\xf1\": \"n\",\n            \"\\xd2\": \"O\",\n            \"\\xd3\": \"O\",\n            \"\\xd4\": \"O\",\n            \"\\xd5\": \"O\",\n            \"\\xd6\": \"O\",\n            \"\\xd8\": \"O\",\n            \"\\xf2\": \"o\",\n            \"\\xf3\": \"o\",\n            \"\\xf4\": \"o\",\n            \"\\xf5\": \"o\",\n            \"\\xf6\": \"o\",\n            \"\\xf8\": \"o\",\n            \"\\xd9\": \"U\",\n            \"\\xda\": \"U\",\n            \"\\xdb\": \"U\",\n            \"\\xdc\": \"U\",\n            \"\\xf9\": \"u\",\n            \"\\xfa\": \"u\",\n            \"\\xfb\": \"u\",\n            \"\\xfc\": \"u\",\n            \"\\xdd\": \"Y\",\n            \"\\xfd\": \"y\",\n            \"\\xff\": \"y\",\n            \"\\xc6\": \"Ae\",\n            \"\\xe6\": \"ae\",\n            \"\\xde\": \"Th\",\n            \"\\xfe\": \"th\",\n            \"\\xdf\": \"ss\",\n            // Latin Extended-A block.\n            \"Ā\": \"A\",\n            \"Ă\": \"A\",\n            \"Ą\": \"A\",\n            \"ā\": \"a\",\n            \"ă\": \"a\",\n            \"ą\": \"a\",\n            \"Ć\": \"C\",\n            \"Ĉ\": \"C\",\n            \"Ċ\": \"C\",\n            \"Č\": \"C\",\n            \"ć\": \"c\",\n            \"ĉ\": \"c\",\n            \"ċ\": \"c\",\n            \"č\": \"c\",\n            \"Ď\": \"D\",\n            \"Đ\": \"D\",\n            \"ď\": \"d\",\n            \"đ\": \"d\",\n            \"Ē\": \"E\",\n            \"Ĕ\": \"E\",\n            \"Ė\": \"E\",\n            \"Ę\": \"E\",\n            \"Ě\": \"E\",\n            \"ē\": \"e\",\n            \"ĕ\": \"e\",\n            \"ė\": \"e\",\n            \"ę\": \"e\",\n            \"ě\": \"e\",\n            \"Ĝ\": \"G\",\n            \"Ğ\": \"G\",\n            \"Ġ\": \"G\",\n            \"Ģ\": \"G\",\n            \"ĝ\": \"g\",\n            \"ğ\": \"g\",\n            \"ġ\": \"g\",\n            \"ģ\": \"g\",\n            \"Ĥ\": \"H\",\n            \"Ħ\": \"H\",\n            \"ĥ\": \"h\",\n            \"ħ\": \"h\",\n            \"Ĩ\": \"I\",\n            \"Ī\": \"I\",\n            \"Ĭ\": \"I\",\n            \"Į\": \"I\",\n            \"İ\": \"I\",\n            \"ĩ\": \"i\",\n            \"ī\": \"i\",\n            \"ĭ\": \"i\",\n            \"į\": \"i\",\n            \"ı\": \"i\",\n            \"Ĵ\": \"J\",\n            \"ĵ\": \"j\",\n            \"Ķ\": \"K\",\n            \"ķ\": \"k\",\n            \"ĸ\": \"k\",\n            \"Ĺ\": \"L\",\n            \"Ļ\": \"L\",\n            \"Ľ\": \"L\",\n            \"Ŀ\": \"L\",\n            \"Ł\": \"L\",\n            \"ĺ\": \"l\",\n            \"ļ\": \"l\",\n            \"ľ\": \"l\",\n            \"ŀ\": \"l\",\n            \"ł\": \"l\",\n            \"Ń\": \"N\",\n            \"Ņ\": \"N\",\n            \"Ň\": \"N\",\n            \"Ŋ\": \"N\",\n            \"ń\": \"n\",\n            \"ņ\": \"n\",\n            \"ň\": \"n\",\n            \"ŋ\": \"n\",\n            \"Ō\": \"O\",\n            \"Ŏ\": \"O\",\n            \"Ő\": \"O\",\n            \"ō\": \"o\",\n            \"ŏ\": \"o\",\n            \"ő\": \"o\",\n            \"Ŕ\": \"R\",\n            \"Ŗ\": \"R\",\n            \"Ř\": \"R\",\n            \"ŕ\": \"r\",\n            \"ŗ\": \"r\",\n            \"ř\": \"r\",\n            \"Ś\": \"S\",\n            \"Ŝ\": \"S\",\n            \"Ş\": \"S\",\n            \"Š\": \"S\",\n            \"ś\": \"s\",\n            \"ŝ\": \"s\",\n            \"ş\": \"s\",\n            \"š\": \"s\",\n            \"Ţ\": \"T\",\n            \"Ť\": \"T\",\n            \"Ŧ\": \"T\",\n            \"ţ\": \"t\",\n            \"ť\": \"t\",\n            \"ŧ\": \"t\",\n            \"Ũ\": \"U\",\n            \"Ū\": \"U\",\n            \"Ŭ\": \"U\",\n            \"Ů\": \"U\",\n            \"Ű\": \"U\",\n            \"Ų\": \"U\",\n            \"ũ\": \"u\",\n            \"ū\": \"u\",\n            \"ŭ\": \"u\",\n            \"ů\": \"u\",\n            \"ű\": \"u\",\n            \"ų\": \"u\",\n            \"Ŵ\": \"W\",\n            \"ŵ\": \"w\",\n            \"Ŷ\": \"Y\",\n            \"ŷ\": \"y\",\n            \"Ÿ\": \"Y\",\n            \"Ź\": \"Z\",\n            \"Ż\": \"Z\",\n            \"Ž\": \"Z\",\n            \"ź\": \"z\",\n            \"ż\": \"z\",\n            \"ž\": \"z\",\n            \"Ĳ\": \"IJ\",\n            \"ĳ\": \"ij\",\n            \"Œ\": \"Oe\",\n            \"œ\": \"oe\",\n            \"ŉ\": \"'n\",\n            \"ſ\": \"s\"\n        };\n        /** Used to map characters to HTML entities. */ var htmlEscapes = {\n            \"&\": \"&amp;\",\n            \"<\": \"&lt;\",\n            \">\": \"&gt;\",\n            '\"': \"&quot;\",\n            \"'\": \"&#39;\"\n        };\n        /** Used to map HTML entities to characters. */ var htmlUnescapes = {\n            \"&amp;\": \"&\",\n            \"&lt;\": \"<\",\n            \"&gt;\": \">\",\n            \"&quot;\": '\"',\n            \"&#39;\": \"'\"\n        };\n        /** Used to escape characters for inclusion in compiled string literals. */ var stringEscapes = {\n            \"\\\\\": \"\\\\\",\n            \"'\": \"'\",\n            \"\\n\": \"n\",\n            \"\\r\": \"r\",\n            \"\\u2028\": \"u2028\",\n            \"\\u2029\": \"u2029\"\n        };\n        /** Built-in method references without a dependency on `root`. */ var freeParseFloat = parseFloat, freeParseInt = parseInt;\n        /** Detect free variable `global` from Node.js. */ var freeGlobal = typeof commonjsGlobal == \"object\" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n        /** Detect free variable `self`. */ var freeSelf = typeof self == \"object\" && self && self.Object === Object && self;\n        /** Used as a reference to the global object. */ var root = freeGlobal || freeSelf || Function(\"return this\")();\n        /** Detect free variable `exports`. */ var freeExports = exports && !exports.nodeType && exports;\n        /** Detect free variable `module`. */ var freeModule = freeExports && \"object\" == \"object\" && module && !module.nodeType && module;\n        /** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;\n        /** Detect free variable `process` from Node.js. */ var freeProcess = moduleExports && freeGlobal.process;\n        /** Used to access faster Node.js helpers. */ var nodeUtil = function() {\n            try {\n                // Use `util.types` for Node.js 10+.\n                var types = freeModule && freeModule.require && freeModule.require(\"util\").types;\n                if (types) {\n                    return types;\n                }\n                // Legacy `process.binding('util')` for Node.js < 10.\n                return freeProcess && freeProcess.binding && freeProcess.binding(\"util\");\n            } catch (e) {}\n        }();\n        /* Node.js helper references. */ var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n        /*--------------------------------------------------------------------------*/ /**\n   * A faster alternative to `Function#apply`, this function invokes `func`\n   * with the `this` binding of `thisArg` and the arguments of `args`.\n   *\n   * @private\n   * @param {Function} func The function to invoke.\n   * @param {*} thisArg The `this` binding of `func`.\n   * @param {Array} args The arguments to invoke `func` with.\n   * @returns {*} Returns the result of `func`.\n   */ function apply(func, thisArg, args) {\n            switch(args.length){\n                case 0:\n                    return func.call(thisArg);\n                case 1:\n                    return func.call(thisArg, args[0]);\n                case 2:\n                    return func.call(thisArg, args[0], args[1]);\n                case 3:\n                    return func.call(thisArg, args[0], args[1], args[2]);\n            }\n            return func.apply(thisArg, args);\n        }\n        /**\n   * A specialized version of `baseAggregator` for arrays.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} setter The function to set `accumulator` values.\n   * @param {Function} iteratee The iteratee to transform keys.\n   * @param {Object} accumulator The initial aggregated object.\n   * @returns {Function} Returns `accumulator`.\n   */ function arrayAggregator(array, setter, iteratee, accumulator) {\n            var index = -1, length = array == null ? 0 : array.length;\n            while(++index < length){\n                var value = array[index];\n                setter(accumulator, value, iteratee(value), array);\n            }\n            return accumulator;\n        }\n        /**\n   * A specialized version of `_.forEach` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */ function arrayEach(array, iteratee) {\n            var index = -1, length = array == null ? 0 : array.length;\n            while(++index < length){\n                if (iteratee(array[index], index, array) === false) {\n                    break;\n                }\n            }\n            return array;\n        }\n        /**\n   * A specialized version of `_.forEachRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */ function arrayEachRight(array, iteratee) {\n            var length = array == null ? 0 : array.length;\n            while(length--){\n                if (iteratee(array[length], length, array) === false) {\n                    break;\n                }\n            }\n            return array;\n        }\n        /**\n   * A specialized version of `_.every` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if all elements pass the predicate check,\n   *  else `false`.\n   */ function arrayEvery(array, predicate) {\n            var index = -1, length = array == null ? 0 : array.length;\n            while(++index < length){\n                if (!predicate(array[index], index, array)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        /**\n   * A specialized version of `_.filter` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   */ function arrayFilter(array, predicate) {\n            var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];\n            while(++index < length){\n                var value = array[index];\n                if (predicate(value, index, array)) {\n                    result[resIndex++] = value;\n                }\n            }\n            return result;\n        }\n        /**\n   * A specialized version of `_.includes` for arrays without support for\n   * specifying an index to search from.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */ function arrayIncludes(array, value) {\n            var length = array == null ? 0 : array.length;\n            return !!length && baseIndexOf(array, value, 0) > -1;\n        }\n        /**\n   * This function is like `arrayIncludes` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */ function arrayIncludesWith(array, value, comparator) {\n            var index = -1, length = array == null ? 0 : array.length;\n            while(++index < length){\n                if (comparator(value, array[index])) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        /**\n   * A specialized version of `_.map` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */ function arrayMap(array, iteratee) {\n            var index = -1, length = array == null ? 0 : array.length, result = Array(length);\n            while(++index < length){\n                result[index] = iteratee(array[index], index, array);\n            }\n            return result;\n        }\n        /**\n   * Appends the elements of `values` to `array`.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {Array} values The values to append.\n   * @returns {Array} Returns `array`.\n   */ function arrayPush(array, values) {\n            var index = -1, length = values.length, offset = array.length;\n            while(++index < length){\n                array[offset + index] = values[index];\n            }\n            return array;\n        }\n        /**\n   * A specialized version of `_.reduce` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the first element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */ function arrayReduce(array, iteratee, accumulator, initAccum) {\n            var index = -1, length = array == null ? 0 : array.length;\n            if (initAccum && length) {\n                accumulator = array[++index];\n            }\n            while(++index < length){\n                accumulator = iteratee(accumulator, array[index], index, array);\n            }\n            return accumulator;\n        }\n        /**\n   * A specialized version of `_.reduceRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the last element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */ function arrayReduceRight(array, iteratee, accumulator, initAccum) {\n            var length = array == null ? 0 : array.length;\n            if (initAccum && length) {\n                accumulator = array[--length];\n            }\n            while(length--){\n                accumulator = iteratee(accumulator, array[length], length, array);\n            }\n            return accumulator;\n        }\n        /**\n   * A specialized version of `_.some` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\n   *  else `false`.\n   */ function arraySome(array, predicate) {\n            var index = -1, length = array == null ? 0 : array.length;\n            while(++index < length){\n                if (predicate(array[index], index, array)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        /**\n   * Gets the size of an ASCII `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */ var asciiSize = baseProperty(\"length\");\n        /**\n   * Converts an ASCII `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */ function asciiToArray(string) {\n            return string.split(\"\");\n        }\n        /**\n   * Splits an ASCII `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */ function asciiWords(string) {\n            return string.match(reAsciiWord) || [];\n        }\n        /**\n   * The base implementation of methods like `_.findKey` and `_.findLastKey`,\n   * without support for iteratee shorthands, which iterates over `collection`\n   * using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the found element or its key, else `undefined`.\n   */ function baseFindKey(collection, predicate, eachFunc) {\n            var result;\n            eachFunc(collection, function(value, key, collection) {\n                if (predicate(value, key, collection)) {\n                    result = key;\n                    return false;\n                }\n            });\n            return result;\n        }\n        /**\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without\n   * support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {number} fromIndex The index to search from.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */ function baseFindIndex(array, predicate, fromIndex, fromRight) {\n            var length = array.length, index = fromIndex + (fromRight ? 1 : -1);\n            while(fromRight ? index-- : ++index < length){\n                if (predicate(array[index], index, array)) {\n                    return index;\n                }\n            }\n            return -1;\n        }\n        /**\n   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */ function baseIndexOf(array, value, fromIndex) {\n            return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);\n        }\n        /**\n   * This function is like `baseIndexOf` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */ function baseIndexOfWith(array, value, fromIndex, comparator) {\n            var index = fromIndex - 1, length = array.length;\n            while(++index < length){\n                if (comparator(array[index], value)) {\n                    return index;\n                }\n            }\n            return -1;\n        }\n        /**\n   * The base implementation of `_.isNaN` without support for number objects.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n   */ function baseIsNaN(value) {\n            return value !== value;\n        }\n        /**\n   * The base implementation of `_.mean` and `_.meanBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the mean.\n   */ function baseMean(array, iteratee) {\n            var length = array == null ? 0 : array.length;\n            return length ? baseSum(array, iteratee) / length : NAN;\n        }\n        /**\n   * The base implementation of `_.property` without support for deep paths.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */ function baseProperty(key) {\n            return function(object) {\n                return object == null ? undefined$1 : object[key];\n            };\n        }\n        /**\n   * The base implementation of `_.propertyOf` without support for deep paths.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Function} Returns the new accessor function.\n   */ function basePropertyOf(object) {\n            return function(key) {\n                return object == null ? undefined$1 : object[key];\n            };\n        }\n        /**\n   * The base implementation of `_.reduce` and `_.reduceRight`, without support\n   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} accumulator The initial value.\n   * @param {boolean} initAccum Specify using the first or last element of\n   *  `collection` as the initial value.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the accumulated value.\n   */ function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n            eachFunc(collection, function(value, index, collection) {\n                accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);\n            });\n            return accumulator;\n        }\n        /**\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\n   * sort order of `array` and replaces criteria objects with their corresponding\n   * values.\n   *\n   * @private\n   * @param {Array} array The array to sort.\n   * @param {Function} comparer The function to define sort order.\n   * @returns {Array} Returns `array`.\n   */ function baseSortBy(array, comparer) {\n            var length = array.length;\n            array.sort(comparer);\n            while(length--){\n                array[length] = array[length].value;\n            }\n            return array;\n        }\n        /**\n   * The base implementation of `_.sum` and `_.sumBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the sum.\n   */ function baseSum(array, iteratee) {\n            var result, index = -1, length = array.length;\n            while(++index < length){\n                var current = iteratee(array[index]);\n                if (current !== undefined$1) {\n                    result = result === undefined$1 ? current : result + current;\n                }\n            }\n            return result;\n        }\n        /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */ function baseTimes(n, iteratee) {\n            var index = -1, result = Array(n);\n            while(++index < n){\n                result[index] = iteratee(index);\n            }\n            return result;\n        }\n        /**\n   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\n   * of key-value pairs for `object` corresponding to the property names of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the key-value pairs.\n   */ function baseToPairs(object, props) {\n            return arrayMap(props, function(key) {\n                return [\n                    key,\n                    object[key]\n                ];\n            });\n        }\n        /**\n   * The base implementation of `_.trim`.\n   *\n   * @private\n   * @param {string} string The string to trim.\n   * @returns {string} Returns the trimmed string.\n   */ function baseTrim(string) {\n            return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, \"\") : string;\n        }\n        /**\n   * The base implementation of `_.unary` without support for storing metadata.\n   *\n   * @private\n   * @param {Function} func The function to cap arguments for.\n   * @returns {Function} Returns the new capped function.\n   */ function baseUnary(func) {\n            return function(value) {\n                return func(value);\n            };\n        }\n        /**\n   * The base implementation of `_.values` and `_.valuesIn` which creates an\n   * array of `object` property values corresponding to the property names\n   * of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the array of property values.\n   */ function baseValues(object, props) {\n            return arrayMap(props, function(key) {\n                return object[key];\n            });\n        }\n        /**\n   * Checks if a `cache` value for `key` exists.\n   *\n   * @private\n   * @param {Object} cache The cache to query.\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */ function cacheHas(cache, key) {\n            return cache.has(key);\n        }\n        /**\n   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the first unmatched string symbol.\n   */ function charsStartIndex(strSymbols, chrSymbols) {\n            var index = -1, length = strSymbols.length;\n            while(++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1){}\n            return index;\n        }\n        /**\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the last unmatched string symbol.\n   */ function charsEndIndex(strSymbols, chrSymbols) {\n            var index = strSymbols.length;\n            while(index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1){}\n            return index;\n        }\n        /**\n   * Gets the number of `placeholder` occurrences in `array`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} placeholder The placeholder to search for.\n   * @returns {number} Returns the placeholder count.\n   */ function countHolders(array, placeholder) {\n            var length = array.length, result = 0;\n            while(length--){\n                if (array[length] === placeholder) {\n                    ++result;\n                }\n            }\n            return result;\n        }\n        /**\n   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n   * letters to basic Latin letters.\n   *\n   * @private\n   * @param {string} letter The matched letter to deburr.\n   * @returns {string} Returns the deburred letter.\n   */ var deburrLetter = basePropertyOf(deburredLetters);\n        /**\n   * Used by `_.escape` to convert characters to HTML entities.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */ var escapeHtmlChar = basePropertyOf(htmlEscapes);\n        /**\n   * Used by `_.template` to escape characters for inclusion in compiled string literals.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */ function escapeStringChar(chr) {\n            return \"\\\\\" + stringEscapes[chr];\n        }\n        /**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */ function getValue(object, key) {\n            return object == null ? undefined$1 : object[key];\n        }\n        /**\n   * Checks if `string` contains Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n   */ function hasUnicode(string) {\n            return reHasUnicode.test(string);\n        }\n        /**\n   * Checks if `string` contains a word composed of Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a word is found, else `false`.\n   */ function hasUnicodeWord(string) {\n            return reHasUnicodeWord.test(string);\n        }\n        /**\n   * Converts `iterator` to an array.\n   *\n   * @private\n   * @param {Object} iterator The iterator to convert.\n   * @returns {Array} Returns the converted array.\n   */ function iteratorToArray(iterator) {\n            var data, result = [];\n            while(!(data = iterator.next()).done){\n                result.push(data.value);\n            }\n            return result;\n        }\n        /**\n   * Converts `map` to its key-value pairs.\n   *\n   * @private\n   * @param {Object} map The map to convert.\n   * @returns {Array} Returns the key-value pairs.\n   */ function mapToArray(map) {\n            var index = -1, result = Array(map.size);\n            map.forEach(function(value, key) {\n                result[++index] = [\n                    key,\n                    value\n                ];\n            });\n            return result;\n        }\n        /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */ function overArg(func, transform) {\n            return function(arg) {\n                return func(transform(arg));\n            };\n        }\n        /**\n   * Replaces all `placeholder` elements in `array` with an internal placeholder\n   * and returns an array of their indexes.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {*} placeholder The placeholder to replace.\n   * @returns {Array} Returns the new array of placeholder indexes.\n   */ function replaceHolders(array, placeholder) {\n            var index = -1, length = array.length, resIndex = 0, result = [];\n            while(++index < length){\n                var value = array[index];\n                if (value === placeholder || value === PLACEHOLDER) {\n                    array[index] = PLACEHOLDER;\n                    result[resIndex++] = index;\n                }\n            }\n            return result;\n        }\n        /**\n   * Converts `set` to an array of its values.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the values.\n   */ function setToArray(set) {\n            var index = -1, result = Array(set.size);\n            set.forEach(function(value) {\n                result[++index] = value;\n            });\n            return result;\n        }\n        /**\n   * Converts `set` to its value-value pairs.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the value-value pairs.\n   */ function setToPairs(set) {\n            var index = -1, result = Array(set.size);\n            set.forEach(function(value) {\n                result[++index] = [\n                    value,\n                    value\n                ];\n            });\n            return result;\n        }\n        /**\n   * A specialized version of `_.indexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */ function strictIndexOf(array, value, fromIndex) {\n            var index = fromIndex - 1, length = array.length;\n            while(++index < length){\n                if (array[index] === value) {\n                    return index;\n                }\n            }\n            return -1;\n        }\n        /**\n   * A specialized version of `_.lastIndexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */ function strictLastIndexOf(array, value, fromIndex) {\n            var index = fromIndex + 1;\n            while(index--){\n                if (array[index] === value) {\n                    return index;\n                }\n            }\n            return index;\n        }\n        /**\n   * Gets the number of symbols in `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the string size.\n   */ function stringSize(string) {\n            return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);\n        }\n        /**\n   * Converts `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */ function stringToArray(string) {\n            return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);\n        }\n        /**\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n   * character of `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the index of the last non-whitespace character.\n   */ function trimmedEndIndex(string) {\n            var index = string.length;\n            while(index-- && reWhitespace.test(string.charAt(index))){}\n            return index;\n        }\n        /**\n   * Used by `_.unescape` to convert HTML entities to characters.\n   *\n   * @private\n   * @param {string} chr The matched character to unescape.\n   * @returns {string} Returns the unescaped character.\n   */ var unescapeHtmlChar = basePropertyOf(htmlUnescapes);\n        /**\n   * Gets the size of a Unicode `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */ function unicodeSize(string) {\n            var result = reUnicode.lastIndex = 0;\n            while(reUnicode.test(string)){\n                ++result;\n            }\n            return result;\n        }\n        /**\n   * Converts a Unicode `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */ function unicodeToArray(string) {\n            return string.match(reUnicode) || [];\n        }\n        /**\n   * Splits a Unicode `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */ function unicodeWords(string) {\n            return string.match(reUnicodeWord) || [];\n        }\n        /*--------------------------------------------------------------------------*/ /**\n   * Create a new pristine `lodash` function using the `context` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 1.1.0\n   * @category Util\n   * @param {Object} [context=root] The context object.\n   * @returns {Function} Returns a new `lodash` function.\n   * @example\n   *\n   * _.mixin({ 'foo': _.constant('foo') });\n   *\n   * var lodash = _.runInContext();\n   * lodash.mixin({ 'bar': lodash.constant('bar') });\n   *\n   * _.isFunction(_.foo);\n   * // => true\n   * _.isFunction(_.bar);\n   * // => false\n   *\n   * lodash.isFunction(lodash.foo);\n   * // => false\n   * lodash.isFunction(lodash.bar);\n   * // => true\n   *\n   * // Create a suped-up `defer` in Node.js.\n   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\n   */ var runInContext = function runInContext(context) {\n            context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));\n            /** Built-in constructor references. */ var Array1 = context.Array, Date1 = context.Date, Error = context.Error, Function1 = context.Function, Math1 = context.Math, Object1 = context.Object, RegExp1 = context.RegExp, String = context.String, TypeError = context.TypeError;\n            /** Used for built-in method references. */ var arrayProto = Array1.prototype, funcProto = Function1.prototype, objectProto = Object1.prototype;\n            /** Used to detect overreaching core-js shims. */ var coreJsData = context[\"__core-js_shared__\"];\n            /** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;\n            /** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;\n            /** Used to generate unique IDs. */ var idCounter = 0;\n            /** Used to detect methods masquerading as native. */ var maskSrcKey = function() {\n                var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || \"\");\n                return uid ? \"Symbol(src)_1.\" + uid : \"\";\n            }();\n            /**\n     * Used to resolve the\n     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n     * of values.\n     */ var nativeObjectToString = objectProto.toString;\n            /** Used to infer the `Object` constructor. */ var objectCtorString = funcToString.call(Object1);\n            /** Used to restore the original `_` reference in `_.noConflict`. */ var oldDash = root._;\n            /** Used to detect if a method is native. */ var reIsNative = RegExp1(\"^\" + funcToString.call(hasOwnProperty).replace(reRegExpChar, \"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, \"$1.*?\") + \"$\");\n            /** Built-in value references. */ var Buffer = moduleExports ? context.Buffer : undefined$1, Symbol = context.Symbol, Uint8Array = context.Uint8Array, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined$1, getPrototype = overArg(Object1.getPrototypeOf, Object1), objectCreate = Object1.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined$1, symIterator = Symbol ? Symbol.iterator : undefined$1, symToStringTag = Symbol ? Symbol.toStringTag : undefined$1;\n            var defineProperty = function() {\n                try {\n                    var func = getNative(Object1, \"defineProperty\");\n                    func({}, \"\", {});\n                    return func;\n                } catch (e) {}\n            }();\n            /** Mocked built-ins. */ var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date1 && Date1.now !== root.Date.now && Date1.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;\n            /* Built-in method references for those with the same name as other `lodash` methods. */ var nativeCeil = Math1.ceil, nativeFloor = Math1.floor, nativeGetSymbols = Object1.getOwnPropertySymbols, nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined$1, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object1.keys, Object1), nativeMax = Math1.max, nativeMin = Math1.min, nativeNow = Date1.now, nativeParseInt = context.parseInt, nativeRandom = Math1.random, nativeReverse = arrayProto.reverse;\n            /* Built-in method references that are verified to be native. */ var DataView = getNative(context, \"DataView\"), Map = getNative(context, \"Map\"), Promise1 = getNative(context, \"Promise\"), Set = getNative(context, \"Set\"), WeakMap = getNative(context, \"WeakMap\"), nativeCreate = getNative(Object1, \"create\");\n            /** Used to store function metadata. */ var metaMap = WeakMap && new WeakMap;\n            /** Used to lookup unminified function names. */ var realNames = {};\n            /** Used to detect maps, sets, and weakmaps. */ var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map), promiseCtorString = toSource(Promise1), setCtorString = toSource(Set), weakMapCtorString = toSource(WeakMap);\n            /** Used to convert symbols to primitives and strings. */ var symbolProto = Symbol ? Symbol.prototype : undefined$1, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1, symbolToString = symbolProto ? symbolProto.toString : undefined$1;\n            /*------------------------------------------------------------------------*/ /**\n     * Creates a `lodash` object which wraps `value` to enable implicit method\n     * chain sequences. Methods that operate on and return arrays, collections,\n     * and functions can be chained together. Methods that retrieve a single value\n     * or may return a primitive value will automatically end the chain sequence\n     * and return the unwrapped value. Otherwise, the value must be unwrapped\n     * with `_#value`.\n     *\n     * Explicit chain sequences, which must be unwrapped with `_#value`, may be\n     * enabled using `_.chain`.\n     *\n     * The execution of chained methods is lazy, that is, it's deferred until\n     * `_#value` is implicitly or explicitly called.\n     *\n     * Lazy evaluation allows several methods to support shortcut fusion.\n     * Shortcut fusion is an optimization to merge iteratee calls; this avoids\n     * the creation of intermediate arrays and can greatly reduce the number of\n     * iteratee executions. Sections of a chain sequence qualify for shortcut\n     * fusion if the section is applied to an array and iteratees accept only\n     * one argument. The heuristic for whether a section qualifies for shortcut\n     * fusion is subject to change.\n     *\n     * Chaining is supported in custom builds as long as the `_#value` method is\n     * directly or indirectly included in the build.\n     *\n     * In addition to lodash methods, wrappers have `Array` and `String` methods.\n     *\n     * The wrapper `Array` methods are:\n     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\n     *\n     * The wrapper `String` methods are:\n     * `replace` and `split`\n     *\n     * The wrapper methods that support shortcut fusion are:\n     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\n     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\n     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\n     *\n     * The chainable wrapper methods are:\n     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\n     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\n     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\n     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,\n     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,\n     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,\n     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,\n     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,\n     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,\n     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,\n     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,\n     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,\n     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,\n     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,\n     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,\n     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,\n     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,\n     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,\n     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,\n     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,\n     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,\n     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,\n     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,\n     * `zipObject`, `zipObjectDeep`, and `zipWith`\n     *\n     * The wrapper methods that are **not** chainable by default are:\n     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\n     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,\n     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,\n     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\n     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,\n     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,\n     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,\n     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,\n     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,\n     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,\n     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,\n     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,\n     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,\n     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,\n     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,\n     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,\n     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,\n     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,\n     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,\n     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,\n     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,\n     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,\n     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,\n     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,\n     * `upperFirst`, `value`, and `words`\n     *\n     * @name _\n     * @constructor\n     * @category Seq\n     * @param {*} value The value to wrap in a `lodash` instance.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2, 3]);\n     *\n     * // Returns an unwrapped value.\n     * wrapped.reduce(_.add);\n     * // => 6\n     *\n     * // Returns a wrapped value.\n     * var squares = wrapped.map(square);\n     *\n     * _.isArray(squares);\n     * // => false\n     *\n     * _.isArray(squares.value());\n     * // => true\n     */ function lodash(value) {\n                if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\n                    if (value instanceof LodashWrapper) {\n                        return value;\n                    }\n                    if (hasOwnProperty.call(value, \"__wrapped__\")) {\n                        return wrapperClone(value);\n                    }\n                }\n                return new LodashWrapper(value);\n            }\n            /**\n     * The base implementation of `_.create` without support for assigning\n     * properties to the created object.\n     *\n     * @private\n     * @param {Object} proto The object to inherit from.\n     * @returns {Object} Returns the new object.\n     */ var baseCreate = function() {\n                function object() {}\n                return function(proto) {\n                    if (!isObject(proto)) {\n                        return {};\n                    }\n                    if (objectCreate) {\n                        return objectCreate(proto);\n                    }\n                    object.prototype = proto;\n                    var result = new object;\n                    object.prototype = undefined$1;\n                    return result;\n                };\n            }();\n            /**\n     * The function whose prototype chain sequence wrappers inherit from.\n     *\n     * @private\n     */ function baseLodash() {\n            // No operation performed.\n            }\n            /**\n     * The base constructor for creating `lodash` wrapper objects.\n     *\n     * @private\n     * @param {*} value The value to wrap.\n     * @param {boolean} [chainAll] Enable explicit method chain sequences.\n     */ function LodashWrapper(value, chainAll) {\n                this.__wrapped__ = value;\n                this.__actions__ = [];\n                this.__chain__ = !!chainAll;\n                this.__index__ = 0;\n                this.__values__ = undefined$1;\n            }\n            /**\n     * By default, the template delimiters used by lodash are like those in\n     * embedded Ruby (ERB) as well as ES2015 template strings. Change the\n     * following template settings to use alternative delimiters.\n     *\n     * @static\n     * @memberOf _\n     * @type {Object}\n     */ lodash.templateSettings = {\n                /**\n       * Used to detect `data` property values to be HTML-escaped.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */ \"escape\": reEscape,\n                /**\n       * Used to detect code to be evaluated.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */ \"evaluate\": reEvaluate,\n                /**\n       * Used to detect `data` property values to inject.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */ \"interpolate\": reInterpolate,\n                /**\n       * Used to reference the data object in the template text.\n       *\n       * @memberOf _.templateSettings\n       * @type {string}\n       */ \"variable\": \"\",\n                /**\n       * Used to import variables into the compiled template.\n       *\n       * @memberOf _.templateSettings\n       * @type {Object}\n       */ \"imports\": {\n                    /**\n         * A reference to the `lodash` function.\n         *\n         * @memberOf _.templateSettings.imports\n         * @type {Function}\n         */ \"_\": lodash\n                }\n            };\n            // Ensure wrappers are instances of `baseLodash`.\n            lodash.prototype = baseLodash.prototype;\n            lodash.prototype.constructor = lodash;\n            LodashWrapper.prototype = baseCreate(baseLodash.prototype);\n            LodashWrapper.prototype.constructor = LodashWrapper;\n            /*------------------------------------------------------------------------*/ /**\n     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.\n     *\n     * @private\n     * @constructor\n     * @param {*} value The value to wrap.\n     */ function LazyWrapper(value) {\n                this.__wrapped__ = value;\n                this.__actions__ = [];\n                this.__dir__ = 1;\n                this.__filtered__ = false;\n                this.__iteratees__ = [];\n                this.__takeCount__ = MAX_ARRAY_LENGTH;\n                this.__views__ = [];\n            }\n            /**\n     * Creates a clone of the lazy wrapper object.\n     *\n     * @private\n     * @name clone\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the cloned `LazyWrapper` object.\n     */ function lazyClone() {\n                var result = new LazyWrapper(this.__wrapped__);\n                result.__actions__ = copyArray(this.__actions__);\n                result.__dir__ = this.__dir__;\n                result.__filtered__ = this.__filtered__;\n                result.__iteratees__ = copyArray(this.__iteratees__);\n                result.__takeCount__ = this.__takeCount__;\n                result.__views__ = copyArray(this.__views__);\n                return result;\n            }\n            /**\n     * Reverses the direction of lazy iteration.\n     *\n     * @private\n     * @name reverse\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the new reversed `LazyWrapper` object.\n     */ function lazyReverse() {\n                if (this.__filtered__) {\n                    var result = new LazyWrapper(this);\n                    result.__dir__ = -1;\n                    result.__filtered__ = true;\n                } else {\n                    result = this.clone();\n                    result.__dir__ *= -1;\n                }\n                return result;\n            }\n            /**\n     * Extracts the unwrapped value from its lazy wrapper.\n     *\n     * @private\n     * @name value\n     * @memberOf LazyWrapper\n     * @returns {*} Returns the unwrapped value.\n     */ function lazyValue() {\n                var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);\n                if (!isArr || !isRight && arrLength == length && takeCount == length) {\n                    return baseWrapperValue(array, this.__actions__);\n                }\n                var result = [];\n                outer: while(length-- && resIndex < takeCount){\n                    index += dir;\n                    var iterIndex = -1, value = array[index];\n                    while(++iterIndex < iterLength){\n                        var data = iteratees[iterIndex], iteratee = data.iteratee, type = data.type, computed = iteratee(value);\n                        if (type == LAZY_MAP_FLAG) {\n                            value = computed;\n                        } else if (!computed) {\n                            if (type == LAZY_FILTER_FLAG) {\n                                continue outer;\n                            } else {\n                                break outer;\n                            }\n                        }\n                    }\n                    result[resIndex++] = value;\n                }\n                return result;\n            }\n            // Ensure `LazyWrapper` is an instance of `baseLodash`.\n            LazyWrapper.prototype = baseCreate(baseLodash.prototype);\n            LazyWrapper.prototype.constructor = LazyWrapper;\n            /*------------------------------------------------------------------------*/ /**\n     * Creates a hash object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */ function Hash(entries) {\n                var index = -1, length = entries == null ? 0 : entries.length;\n                this.clear();\n                while(++index < length){\n                    var entry = entries[index];\n                    this.set(entry[0], entry[1]);\n                }\n            }\n            /**\n     * Removes all key-value entries from the hash.\n     *\n     * @private\n     * @name clear\n     * @memberOf Hash\n     */ function hashClear() {\n                this.__data__ = nativeCreate ? nativeCreate(null) : {};\n                this.size = 0;\n            }\n            /**\n     * Removes `key` and its value from the hash.\n     *\n     * @private\n     * @name delete\n     * @memberOf Hash\n     * @param {Object} hash The hash to modify.\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */ function hashDelete(key) {\n                var result = this.has(key) && delete this.__data__[key];\n                this.size -= result ? 1 : 0;\n                return result;\n            }\n            /**\n     * Gets the hash value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Hash\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */ function hashGet(key) {\n                var data = this.__data__;\n                if (nativeCreate) {\n                    var result = data[key];\n                    return result === HASH_UNDEFINED ? undefined$1 : result;\n                }\n                return hasOwnProperty.call(data, key) ? data[key] : undefined$1;\n            }\n            /**\n     * Checks if a hash value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Hash\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */ function hashHas(key) {\n                var data = this.__data__;\n                return nativeCreate ? data[key] !== undefined$1 : hasOwnProperty.call(data, key);\n            }\n            /**\n     * Sets the hash `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Hash\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the hash instance.\n     */ function hashSet(key, value) {\n                var data = this.__data__;\n                this.size += this.has(key) ? 0 : 1;\n                data[key] = nativeCreate && value === undefined$1 ? HASH_UNDEFINED : value;\n                return this;\n            }\n            // Add methods to `Hash`.\n            Hash.prototype.clear = hashClear;\n            Hash.prototype[\"delete\"] = hashDelete;\n            Hash.prototype.get = hashGet;\n            Hash.prototype.has = hashHas;\n            Hash.prototype.set = hashSet;\n            /*------------------------------------------------------------------------*/ /**\n     * Creates an list cache object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */ function ListCache(entries) {\n                var index = -1, length = entries == null ? 0 : entries.length;\n                this.clear();\n                while(++index < length){\n                    var entry = entries[index];\n                    this.set(entry[0], entry[1]);\n                }\n            }\n            /**\n     * Removes all key-value entries from the list cache.\n     *\n     * @private\n     * @name clear\n     * @memberOf ListCache\n     */ function listCacheClear() {\n                this.__data__ = [];\n                this.size = 0;\n            }\n            /**\n     * Removes `key` and its value from the list cache.\n     *\n     * @private\n     * @name delete\n     * @memberOf ListCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */ function listCacheDelete(key) {\n                var data = this.__data__, index = assocIndexOf(data, key);\n                if (index < 0) {\n                    return false;\n                }\n                var lastIndex = data.length - 1;\n                if (index == lastIndex) {\n                    data.pop();\n                } else {\n                    splice.call(data, index, 1);\n                }\n                --this.size;\n                return true;\n            }\n            /**\n     * Gets the list cache value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf ListCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */ function listCacheGet(key) {\n                var data = this.__data__, index = assocIndexOf(data, key);\n                return index < 0 ? undefined$1 : data[index][1];\n            }\n            /**\n     * Checks if a list cache value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf ListCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */ function listCacheHas(key) {\n                return assocIndexOf(this.__data__, key) > -1;\n            }\n            /**\n     * Sets the list cache `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf ListCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the list cache instance.\n     */ function listCacheSet(key, value) {\n                var data = this.__data__, index = assocIndexOf(data, key);\n                if (index < 0) {\n                    ++this.size;\n                    data.push([\n                        key,\n                        value\n                    ]);\n                } else {\n                    data[index][1] = value;\n                }\n                return this;\n            }\n            // Add methods to `ListCache`.\n            ListCache.prototype.clear = listCacheClear;\n            ListCache.prototype[\"delete\"] = listCacheDelete;\n            ListCache.prototype.get = listCacheGet;\n            ListCache.prototype.has = listCacheHas;\n            ListCache.prototype.set = listCacheSet;\n            /*------------------------------------------------------------------------*/ /**\n     * Creates a map cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */ function MapCache(entries) {\n                var index = -1, length = entries == null ? 0 : entries.length;\n                this.clear();\n                while(++index < length){\n                    var entry = entries[index];\n                    this.set(entry[0], entry[1]);\n                }\n            }\n            /**\n     * Removes all key-value entries from the map.\n     *\n     * @private\n     * @name clear\n     * @memberOf MapCache\n     */ function mapCacheClear() {\n                this.size = 0;\n                this.__data__ = {\n                    \"hash\": new Hash,\n                    \"map\": new (Map || ListCache),\n                    \"string\": new Hash\n                };\n            }\n            /**\n     * Removes `key` and its value from the map.\n     *\n     * @private\n     * @name delete\n     * @memberOf MapCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */ function mapCacheDelete(key) {\n                var result = getMapData(this, key)[\"delete\"](key);\n                this.size -= result ? 1 : 0;\n                return result;\n            }\n            /**\n     * Gets the map value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf MapCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */ function mapCacheGet(key) {\n                return getMapData(this, key).get(key);\n            }\n            /**\n     * Checks if a map value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf MapCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */ function mapCacheHas(key) {\n                return getMapData(this, key).has(key);\n            }\n            /**\n     * Sets the map `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf MapCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the map cache instance.\n     */ function mapCacheSet(key, value) {\n                var data = getMapData(this, key), size = data.size;\n                data.set(key, value);\n                this.size += data.size == size ? 0 : 1;\n                return this;\n            }\n            // Add methods to `MapCache`.\n            MapCache.prototype.clear = mapCacheClear;\n            MapCache.prototype[\"delete\"] = mapCacheDelete;\n            MapCache.prototype.get = mapCacheGet;\n            MapCache.prototype.has = mapCacheHas;\n            MapCache.prototype.set = mapCacheSet;\n            /*------------------------------------------------------------------------*/ /**\n     *\n     * Creates an array cache object to store unique values.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [values] The values to cache.\n     */ function SetCache(values) {\n                var index = -1, length = values == null ? 0 : values.length;\n                this.__data__ = new MapCache;\n                while(++index < length){\n                    this.add(values[index]);\n                }\n            }\n            /**\n     * Adds `value` to the array cache.\n     *\n     * @private\n     * @name add\n     * @memberOf SetCache\n     * @alias push\n     * @param {*} value The value to cache.\n     * @returns {Object} Returns the cache instance.\n     */ function setCacheAdd(value) {\n                this.__data__.set(value, HASH_UNDEFINED);\n                return this;\n            }\n            /**\n     * Checks if `value` is in the array cache.\n     *\n     * @private\n     * @name has\n     * @memberOf SetCache\n     * @param {*} value The value to search for.\n     * @returns {number} Returns `true` if `value` is found, else `false`.\n     */ function setCacheHas(value) {\n                return this.__data__.has(value);\n            }\n            // Add methods to `SetCache`.\n            SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n            SetCache.prototype.has = setCacheHas;\n            /*------------------------------------------------------------------------*/ /**\n     * Creates a stack cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */ function Stack(entries) {\n                var data = this.__data__ = new ListCache(entries);\n                this.size = data.size;\n            }\n            /**\n     * Removes all key-value entries from the stack.\n     *\n     * @private\n     * @name clear\n     * @memberOf Stack\n     */ function stackClear() {\n                this.__data__ = new ListCache;\n                this.size = 0;\n            }\n            /**\n     * Removes `key` and its value from the stack.\n     *\n     * @private\n     * @name delete\n     * @memberOf Stack\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */ function stackDelete(key) {\n                var data = this.__data__, result = data[\"delete\"](key);\n                this.size = data.size;\n                return result;\n            }\n            /**\n     * Gets the stack value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Stack\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */ function stackGet(key) {\n                return this.__data__.get(key);\n            }\n            /**\n     * Checks if a stack value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Stack\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */ function stackHas(key) {\n                return this.__data__.has(key);\n            }\n            /**\n     * Sets the stack `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Stack\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the stack cache instance.\n     */ function stackSet(key, value) {\n                var data = this.__data__;\n                if (data instanceof ListCache) {\n                    var pairs = data.__data__;\n                    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {\n                        pairs.push([\n                            key,\n                            value\n                        ]);\n                        this.size = ++data.size;\n                        return this;\n                    }\n                    data = this.__data__ = new MapCache(pairs);\n                }\n                data.set(key, value);\n                this.size = data.size;\n                return this;\n            }\n            // Add methods to `Stack`.\n            Stack.prototype.clear = stackClear;\n            Stack.prototype[\"delete\"] = stackDelete;\n            Stack.prototype.get = stackGet;\n            Stack.prototype.has = stackHas;\n            Stack.prototype.set = stackSet;\n            /*------------------------------------------------------------------------*/ /**\n     * Creates an array of the enumerable property names of the array-like `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @param {boolean} inherited Specify returning inherited property names.\n     * @returns {Array} Returns the array of property names.\n     */ function arrayLikeKeys(value, inherited) {\n                var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;\n                for(var key in value){\n                    if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.\n                    (key == \"length\" || // Node.js 0.10 has enumerable non-index properties on buffers.\n                    isBuff && (key == \"offset\" || key == \"parent\") || // PhantomJS 2 has enumerable non-index properties on typed arrays.\n                    isType && (key == \"buffer\" || key == \"byteLength\" || key == \"byteOffset\") || // Skip index properties.\n                    isIndex(key, length)))) {\n                        result.push(key);\n                    }\n                }\n                return result;\n            }\n            /**\n     * A specialized version of `_.sample` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @returns {*} Returns the random element.\n     */ function arraySample(array) {\n                var length = array.length;\n                return length ? array[baseRandom(0, length - 1)] : undefined$1;\n            }\n            /**\n     * A specialized version of `_.sampleSize` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */ function arraySampleSize(array, n) {\n                return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));\n            }\n            /**\n     * A specialized version of `_.shuffle` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */ function arrayShuffle(array) {\n                return shuffleSelf(copyArray(array));\n            }\n            /**\n     * This function is like `assignValue` except that it doesn't assign\n     * `undefined` values.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */ function assignMergeValue(object, key, value) {\n                if (value !== undefined$1 && !eq(object[key], value) || value === undefined$1 && !(key in object)) {\n                    baseAssignValue(object, key, value);\n                }\n            }\n            /**\n     * Assigns `value` to `key` of `object` if the existing value is not equivalent\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */ function assignValue(object, key, value) {\n                var objValue = object[key];\n                if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined$1 && !(key in object)) {\n                    baseAssignValue(object, key, value);\n                }\n            }\n            /**\n     * Gets the index at which the `key` is found in `array` of key-value pairs.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {*} key The key to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     */ function assocIndexOf(array, key) {\n                var length = array.length;\n                while(length--){\n                    if (eq(array[length][0], key)) {\n                        return length;\n                    }\n                }\n                return -1;\n            }\n            /**\n     * Aggregates elements of `collection` on `accumulator` with keys transformed\n     * by `iteratee` and values set by `setter`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform keys.\n     * @param {Object} accumulator The initial aggregated object.\n     * @returns {Function} Returns `accumulator`.\n     */ function baseAggregator(collection, setter, iteratee, accumulator) {\n                baseEach(collection, function(value, key, collection) {\n                    setter(accumulator, value, iteratee(value), collection);\n                });\n                return accumulator;\n            }\n            /**\n     * The base implementation of `_.assign` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */ function baseAssign(object, source) {\n                return object && copyObject(source, keys(source), object);\n            }\n            /**\n     * The base implementation of `_.assignIn` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */ function baseAssignIn(object, source) {\n                return object && copyObject(source, keysIn(source), object);\n            }\n            /**\n     * The base implementation of `assignValue` and `assignMergeValue` without\n     * value checks.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */ function baseAssignValue(object, key, value) {\n                if (key == \"__proto__\" && defineProperty) {\n                    defineProperty(object, key, {\n                        \"configurable\": true,\n                        \"enumerable\": true,\n                        \"value\": value,\n                        \"writable\": true\n                    });\n                } else {\n                    object[key] = value;\n                }\n            }\n            /**\n     * The base implementation of `_.at` without support for individual paths.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Array} Returns the picked elements.\n     */ function baseAt(object, paths) {\n                var index = -1, length = paths.length, result = Array1(length), skip = object == null;\n                while(++index < length){\n                    result[index] = skip ? undefined$1 : get(object, paths[index]);\n                }\n                return result;\n            }\n            /**\n     * The base implementation of `_.clamp` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     */ function baseClamp(number, lower, upper) {\n                if (number === number) {\n                    if (upper !== undefined$1) {\n                        number = number <= upper ? number : upper;\n                    }\n                    if (lower !== undefined$1) {\n                        number = number >= lower ? number : lower;\n                    }\n                }\n                return number;\n            }\n            /**\n     * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n     * traversed objects.\n     *\n     * @private\n     * @param {*} value The value to clone.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Deep clone\n     *  2 - Flatten inherited properties\n     *  4 - Clone symbols\n     * @param {Function} [customizer] The function to customize cloning.\n     * @param {string} [key] The key of `value`.\n     * @param {Object} [object] The parent object of `value`.\n     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n     * @returns {*} Returns the cloned value.\n     */ function baseClone(value, bitmask, customizer, key, object, stack) {\n                var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;\n                if (customizer) {\n                    result = object ? customizer(value, key, object, stack) : customizer(value);\n                }\n                if (result !== undefined$1) {\n                    return result;\n                }\n                if (!isObject(value)) {\n                    return value;\n                }\n                var isArr = isArray(value);\n                if (isArr) {\n                    result = initCloneArray(value);\n                    if (!isDeep) {\n                        return copyArray(value, result);\n                    }\n                } else {\n                    var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;\n                    if (isBuffer(value)) {\n                        return cloneBuffer(value, isDeep);\n                    }\n                    if (tag == objectTag || tag == argsTag || isFunc && !object) {\n                        result = isFlat || isFunc ? {} : initCloneObject(value);\n                        if (!isDeep) {\n                            return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));\n                        }\n                    } else {\n                        if (!cloneableTags[tag]) {\n                            return object ? value : {};\n                        }\n                        result = initCloneByTag(value, tag, isDeep);\n                    }\n                }\n                // Check for circular references and return its corresponding clone.\n                stack || (stack = new Stack);\n                var stacked = stack.get(value);\n                if (stacked) {\n                    return stacked;\n                }\n                stack.set(value, result);\n                if (isSet(value)) {\n                    value.forEach(function(subValue) {\n                        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n                    });\n                } else if (isMap(value)) {\n                    value.forEach(function(subValue, key) {\n                        result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n                    });\n                }\n                var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;\n                var props = isArr ? undefined$1 : keysFunc(value);\n                arrayEach(props || value, function(subValue, key) {\n                    if (props) {\n                        key = subValue;\n                        subValue = value[key];\n                    }\n                    // Recursively populate clone (susceptible to call stack limits).\n                    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n                });\n                return result;\n            }\n            /**\n     * The base implementation of `_.conforms` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     */ function baseConforms(source) {\n                var props = keys(source);\n                return function(object) {\n                    return baseConformsTo(object, source, props);\n                };\n            }\n            /**\n     * The base implementation of `_.conformsTo` which accepts `props` to check.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     */ function baseConformsTo(object, source, props) {\n                var length = props.length;\n                if (object == null) {\n                    return !length;\n                }\n                object = Object1(object);\n                while(length--){\n                    var key = props[length], predicate = source[key], value = object[key];\n                    if (value === undefined$1 && !(key in object) || !predicate(value)) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            /**\n     * The base implementation of `_.delay` and `_.defer` which accepts `args`\n     * to provide to `func`.\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {Array} args The arguments to provide to `func`.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */ function baseDelay(func, wait, args) {\n                if (typeof func != \"function\") {\n                    throw new TypeError(FUNC_ERROR_TEXT);\n                }\n                return setTimeout(function() {\n                    func.apply(undefined$1, args);\n                }, wait);\n            }\n            /**\n     * The base implementation of methods like `_.difference` without support\n     * for excluding multiple arrays or iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Array} values The values to exclude.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     */ function baseDifference(array, values, iteratee, comparator) {\n                var index = -1, includes = arrayIncludes, isCommon = true, length = array.length, result = [], valuesLength = values.length;\n                if (!length) {\n                    return result;\n                }\n                if (iteratee) {\n                    values = arrayMap(values, baseUnary(iteratee));\n                }\n                if (comparator) {\n                    includes = arrayIncludesWith;\n                    isCommon = false;\n                } else if (values.length >= LARGE_ARRAY_SIZE) {\n                    includes = cacheHas;\n                    isCommon = false;\n                    values = new SetCache(values);\n                }\n                outer: while(++index < length){\n                    var value = array[index], computed = iteratee == null ? value : iteratee(value);\n                    value = comparator || value !== 0 ? value : 0;\n                    if (isCommon && computed === computed) {\n                        var valuesIndex = valuesLength;\n                        while(valuesIndex--){\n                            if (values[valuesIndex] === computed) {\n                                continue outer;\n                            }\n                        }\n                        result.push(value);\n                    } else if (!includes(values, computed, comparator)) {\n                        result.push(value);\n                    }\n                }\n                return result;\n            }\n            /**\n     * The base implementation of `_.forEach` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */ var baseEach = createBaseEach(baseForOwn);\n            /**\n     * The base implementation of `_.forEachRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */ var baseEachRight = createBaseEach(baseForOwnRight, true);\n            /**\n     * The base implementation of `_.every` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`\n     */ function baseEvery(collection, predicate) {\n                var result = true;\n                baseEach(collection, function(value, index, collection) {\n                    result = !!predicate(value, index, collection);\n                    return result;\n                });\n                return result;\n            }\n            /**\n     * The base implementation of methods like `_.max` and `_.min` which accepts a\n     * `comparator` to determine the extremum value.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The iteratee invoked per iteration.\n     * @param {Function} comparator The comparator used to compare values.\n     * @returns {*} Returns the extremum value.\n     */ function baseExtremum(array, iteratee, comparator) {\n                var index = -1, length = array.length;\n                while(++index < length){\n                    var value = array[index], current = iteratee(value);\n                    if (current != null && (computed === undefined$1 ? current === current && !isSymbol(current) : comparator(current, computed))) {\n                        var computed = current, result = value;\n                    }\n                }\n                return result;\n            }\n            /**\n     * The base implementation of `_.fill` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     */ function baseFill(array, value, start, end) {\n                var length = array.length;\n                start = toInteger(start);\n                if (start < 0) {\n                    start = -start > length ? 0 : length + start;\n                }\n                end = end === undefined$1 || end > length ? length : toInteger(end);\n                if (end < 0) {\n                    end += length;\n                }\n                end = start > end ? 0 : toLength(end);\n                while(start < end){\n                    array[start++] = value;\n                }\n                return array;\n            }\n            /**\n     * The base implementation of `_.filter` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     */ function baseFilter(collection, predicate) {\n                var result = [];\n                baseEach(collection, function(value, index, collection) {\n                    if (predicate(value, index, collection)) {\n                        result.push(value);\n                    }\n                });\n                return result;\n            }\n            /**\n     * The base implementation of `_.flatten` with support for restricting flattening.\n     *\n     * @private\n     * @param {Array} array The array to flatten.\n     * @param {number} depth The maximum recursion depth.\n     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n     * @param {Array} [result=[]] The initial result value.\n     * @returns {Array} Returns the new flattened array.\n     */ function baseFlatten(array, depth, predicate, isStrict, result) {\n                var index = -1, length = array.length;\n                predicate || (predicate = isFlattenable);\n                result || (result = []);\n                while(++index < length){\n                    var value = array[index];\n                    if (depth > 0 && predicate(value)) {\n                        if (depth > 1) {\n                            // Recursively flatten arrays (susceptible to call stack limits).\n                            baseFlatten(value, depth - 1, predicate, isStrict, result);\n                        } else {\n                            arrayPush(result, value);\n                        }\n                    } else if (!isStrict) {\n                        result[result.length] = value;\n                    }\n                }\n                return result;\n            }\n            /**\n     * The base implementation of `baseForOwn` which iterates over `object`\n     * properties returned by `keysFunc` and invokes `iteratee` for each property.\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */ var baseFor = createBaseFor();\n            /**\n     * This function is like `baseFor` except that it iterates over properties\n     * in the opposite order.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */ var baseForRight = createBaseFor(true);\n            /**\n     * The base implementation of `_.forOwn` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */ function baseForOwn(object, iteratee) {\n                return object && baseFor(object, iteratee, keys);\n            }\n            /**\n     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */ function baseForOwnRight(object, iteratee) {\n                return object && baseForRight(object, iteratee, keys);\n            }\n            /**\n     * The base implementation of `_.functions` which creates an array of\n     * `object` function property names filtered from `props`.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Array} props The property names to filter.\n     * @returns {Array} Returns the function names.\n     */ function baseFunctions(object, props) {\n                return arrayFilter(props, function(key) {\n                    return isFunction(object[key]);\n                });\n            }\n            /**\n     * The base implementation of `_.get` without support for default values.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @returns {*} Returns the resolved value.\n     */ function baseGet(object, path) {\n                path = castPath(path, object);\n                var index = 0, length = path.length;\n                while(object != null && index < length){\n                    object = object[toKey(path[index++])];\n                }\n                return index && index == length ? object : undefined$1;\n            }\n            /**\n     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n     * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @param {Function} symbolsFunc The function to get the symbols of `object`.\n     * @returns {Array} Returns the array of property names and symbols.\n     */ function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n                var result = keysFunc(object);\n                return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n            }\n            /**\n     * The base implementation of `getTag` without fallbacks for buggy environments.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */ function baseGetTag(value) {\n                if (value == null) {\n                    return value === undefined$1 ? undefinedTag : nullTag;\n                }\n                return symToStringTag && symToStringTag in Object1(value) ? getRawTag(value) : objectToString(value);\n            }\n            /**\n     * The base implementation of `_.gt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     */ function baseGt(value, other) {\n                return value > other;\n            }\n            /**\n     * The base implementation of `_.has` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */ function baseHas(object, key) {\n                return object != null && hasOwnProperty.call(object, key);\n            }\n            /**\n     * The base implementation of `_.hasIn` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */ function baseHasIn(object, key) {\n                return object != null && key in Object1(object);\n            }\n            /**\n     * The base implementation of `_.inRange` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to check.\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     */ function baseInRange(number, start, end) {\n                return number >= nativeMin(start, end) && number < nativeMax(start, end);\n            }\n            /**\n     * The base implementation of methods like `_.intersection`, without support\n     * for iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of shared values.\n     */ function baseIntersection(arrays, iteratee, comparator) {\n                var includes = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array1(othLength), maxLength = Infinity, result = [];\n                while(othIndex--){\n                    var array = arrays[othIndex];\n                    if (othIndex && iteratee) {\n                        array = arrayMap(array, baseUnary(iteratee));\n                    }\n                    maxLength = nativeMin(array.length, maxLength);\n                    caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined$1;\n                }\n                array = arrays[0];\n                var index = -1, seen = caches[0];\n                outer: while(++index < length && result.length < maxLength){\n                    var value = array[index], computed = iteratee ? iteratee(value) : value;\n                    value = comparator || value !== 0 ? value : 0;\n                    if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {\n                        othIndex = othLength;\n                        while(--othIndex){\n                            var cache = caches[othIndex];\n                            if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {\n                                continue outer;\n                            }\n                        }\n                        if (seen) {\n                            seen.push(computed);\n                        }\n                        result.push(value);\n                    }\n                }\n                return result;\n            }\n            /**\n     * The base implementation of `_.invert` and `_.invertBy` which inverts\n     * `object` with values transformed by `iteratee` and set by `setter`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform values.\n     * @param {Object} accumulator The initial inverted object.\n     * @returns {Function} Returns `accumulator`.\n     */ function baseInverter(object, setter, iteratee, accumulator) {\n                baseForOwn(object, function(value, key, object) {\n                    setter(accumulator, iteratee(value), key, object);\n                });\n                return accumulator;\n            }\n            /**\n     * The base implementation of `_.invoke` without support for individual\n     * method arguments.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {Array} args The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     */ function baseInvoke(object, path, args) {\n                path = castPath(path, object);\n                object = parent(object, path);\n                var func = object == null ? object : object[toKey(last(path))];\n                return func == null ? undefined$1 : apply(func, object, args);\n            }\n            /**\n     * The base implementation of `_.isArguments`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     */ function baseIsArguments(value) {\n                return isObjectLike(value) && baseGetTag(value) == argsTag;\n            }\n            /**\n     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     */ function baseIsArrayBuffer(value) {\n                return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;\n            }\n            /**\n     * The base implementation of `_.isDate` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     */ function baseIsDate(value) {\n                return isObjectLike(value) && baseGetTag(value) == dateTag;\n            }\n            /**\n     * The base implementation of `_.isEqual` which supports partial comparisons\n     * and tracks traversed objects.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Unordered comparison\n     *  2 - Partial comparison\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     */ function baseIsEqual(value, other, bitmask, customizer, stack) {\n                if (value === other) {\n                    return true;\n                }\n                if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {\n                    return value !== value && other !== other;\n                }\n                return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n            }\n            /**\n     * A specialized version of `baseIsEqual` for arrays and objects which performs\n     * deep comparisons and tracks traversed objects enabling objects with circular\n     * references to be compared.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */ function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n                var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);\n                objTag = objTag == argsTag ? objectTag : objTag;\n                othTag = othTag == argsTag ? objectTag : othTag;\n                var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;\n                if (isSameTag && isBuffer(object)) {\n                    if (!isBuffer(other)) {\n                        return false;\n                    }\n                    objIsArr = true;\n                    objIsObj = false;\n                }\n                if (isSameTag && !objIsObj) {\n                    stack || (stack = new Stack);\n                    return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n                }\n                if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n                    var objIsWrapped = objIsObj && hasOwnProperty.call(object, \"__wrapped__\"), othIsWrapped = othIsObj && hasOwnProperty.call(other, \"__wrapped__\");\n                    if (objIsWrapped || othIsWrapped) {\n                        var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;\n                        stack || (stack = new Stack);\n                        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n                    }\n                }\n                if (!isSameTag) {\n                    return false;\n                }\n                stack || (stack = new Stack);\n                return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n            }\n            /**\n     * The base implementation of `_.isMap` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     */ function baseIsMap(value) {\n                return isObjectLike(value) && getTag(value) == mapTag;\n            }\n            /**\n     * The base implementation of `_.isMatch` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Array} matchData The property names, values, and compare flags to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     */ function baseIsMatch(object, source, matchData, customizer) {\n                var index = matchData.length, length = index, noCustomizer = !customizer;\n                if (object == null) {\n                    return !length;\n                }\n                object = Object1(object);\n                while(index--){\n                    var data = matchData[index];\n                    if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {\n                        return false;\n                    }\n                }\n                while(++index < length){\n                    data = matchData[index];\n                    var key = data[0], objValue = object[key], srcValue = data[1];\n                    if (noCustomizer && data[2]) {\n                        if (objValue === undefined$1 && !(key in object)) {\n                            return false;\n                        }\n                    } else {\n                        var stack = new Stack;\n                        if (customizer) {\n                            var result = customizer(objValue, srcValue, key, object, source, stack);\n                        }\n                        if (!(result === undefined$1 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            }\n            /**\n     * The base implementation of `_.isNative` without bad shim checks.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     */ function baseIsNative(value) {\n                if (!isObject(value) || isMasked(value)) {\n                    return false;\n                }\n                var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n                return pattern.test(toSource(value));\n            }\n            /**\n     * The base implementation of `_.isRegExp` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     */ function baseIsRegExp(value) {\n                return isObjectLike(value) && baseGetTag(value) == regexpTag;\n            }\n            /**\n     * The base implementation of `_.isSet` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     */ function baseIsSet(value) {\n                return isObjectLike(value) && getTag(value) == setTag;\n            }\n            /**\n     * The base implementation of `_.isTypedArray` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     */ function baseIsTypedArray(value) {\n                return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n            }\n            /**\n     * The base implementation of `_.iteratee`.\n     *\n     * @private\n     * @param {*} [value=_.identity] The value to convert to an iteratee.\n     * @returns {Function} Returns the iteratee.\n     */ function baseIteratee(value) {\n                // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n                // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n                if (typeof value == \"function\") {\n                    return value;\n                }\n                if (value == null) {\n                    return identity;\n                }\n                if (typeof value == \"object\") {\n                    return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);\n                }\n                return property(value);\n            }\n            /**\n     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */ function baseKeys(object) {\n                if (!isPrototype(object)) {\n                    return nativeKeys(object);\n                }\n                var result = [];\n                for(var key in Object1(object)){\n                    if (hasOwnProperty.call(object, key) && key != \"constructor\") {\n                        result.push(key);\n                    }\n                }\n                return result;\n            }\n            /**\n     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */ function baseKeysIn(object) {\n                if (!isObject(object)) {\n                    return nativeKeysIn(object);\n                }\n                var isProto = isPrototype(object), result = [];\n                for(var key in object){\n                    if (!(key == \"constructor\" && (isProto || !hasOwnProperty.call(object, key)))) {\n                        result.push(key);\n                    }\n                }\n                return result;\n            }\n            /**\n     * The base implementation of `_.lt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     */ function baseLt(value, other) {\n                return value < other;\n            }\n            /**\n     * The base implementation of `_.map` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     */ function baseMap(collection, iteratee) {\n                var index = -1, result = isArrayLike(collection) ? Array1(collection.length) : [];\n                baseEach(collection, function(value, key, collection) {\n                    result[++index] = iteratee(value, key, collection);\n                });\n                return result;\n            }\n            /**\n     * The base implementation of `_.matches` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     */ function baseMatches(source) {\n                var matchData = getMatchData(source);\n                if (matchData.length == 1 && matchData[0][2]) {\n                    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n                }\n                return function(object) {\n                    return object === source || baseIsMatch(object, source, matchData);\n                };\n            }\n            /**\n     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n     *\n     * @private\n     * @param {string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */ function baseMatchesProperty(path, srcValue) {\n                if (isKey(path) && isStrictComparable(srcValue)) {\n                    return matchesStrictComparable(toKey(path), srcValue);\n                }\n                return function(object) {\n                    var objValue = get(object, path);\n                    return objValue === undefined$1 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n                };\n            }\n            /**\n     * The base implementation of `_.merge` without support for multiple sources.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} [customizer] The function to customize merged values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */ function baseMerge(object, source, srcIndex, customizer, stack) {\n                if (object === source) {\n                    return;\n                }\n                baseFor(source, function(srcValue, key) {\n                    stack || (stack = new Stack);\n                    if (isObject(srcValue)) {\n                        baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n                    } else {\n                        var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + \"\", object, source, stack) : undefined$1;\n                        if (newValue === undefined$1) {\n                            newValue = srcValue;\n                        }\n                        assignMergeValue(object, key, newValue);\n                    }\n                }, keysIn);\n            }\n            /**\n     * A specialized version of `baseMerge` for arrays and objects which performs\n     * deep merges and tracks traversed objects enabling objects with circular\n     * references to be merged.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {string} key The key of the value to merge.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} mergeFunc The function to merge values.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */ function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n                var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);\n                if (stacked) {\n                    assignMergeValue(object, key, stacked);\n                    return;\n                }\n                var newValue = customizer ? customizer(objValue, srcValue, key + \"\", object, source, stack) : undefined$1;\n                var isCommon = newValue === undefined$1;\n                if (isCommon) {\n                    var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n                    newValue = srcValue;\n                    if (isArr || isBuff || isTyped) {\n                        if (isArray(objValue)) {\n                            newValue = objValue;\n                        } else if (isArrayLikeObject(objValue)) {\n                            newValue = copyArray(objValue);\n                        } else if (isBuff) {\n                            isCommon = false;\n                            newValue = cloneBuffer(srcValue, true);\n                        } else if (isTyped) {\n                            isCommon = false;\n                            newValue = cloneTypedArray(srcValue, true);\n                        } else {\n                            newValue = [];\n                        }\n                    } else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n                        newValue = objValue;\n                        if (isArguments(objValue)) {\n                            newValue = toPlainObject(objValue);\n                        } else if (!isObject(objValue) || isFunction(objValue)) {\n                            newValue = initCloneObject(srcValue);\n                        }\n                    } else {\n                        isCommon = false;\n                    }\n                }\n                if (isCommon) {\n                    // Recursively merge objects and arrays (susceptible to call stack limits).\n                    stack.set(srcValue, newValue);\n                    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n                    stack[\"delete\"](srcValue);\n                }\n                assignMergeValue(object, key, newValue);\n            }\n            /**\n     * The base implementation of `_.nth` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {number} n The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     */ function baseNth(array, n) {\n                var length = array.length;\n                if (!length) {\n                    return;\n                }\n                n += n < 0 ? length : 0;\n                return isIndex(n, length) ? array[n] : undefined$1;\n            }\n            /**\n     * The base implementation of `_.orderBy` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n     * @param {string[]} orders The sort orders of `iteratees`.\n     * @returns {Array} Returns the new sorted array.\n     */ function baseOrderBy(collection, iteratees, orders) {\n                if (iteratees.length) {\n                    iteratees = arrayMap(iteratees, function(iteratee) {\n                        if (isArray(iteratee)) {\n                            return function(value) {\n                                return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n                            };\n                        }\n                        return iteratee;\n                    });\n                } else {\n                    iteratees = [\n                        identity\n                    ];\n                }\n                var index = -1;\n                iteratees = arrayMap(iteratees, baseUnary(getIteratee()));\n                var result = baseMap(collection, function(value, key, collection) {\n                    var criteria = arrayMap(iteratees, function(iteratee) {\n                        return iteratee(value);\n                    });\n                    return {\n                        \"criteria\": criteria,\n                        \"index\": ++index,\n                        \"value\": value\n                    };\n                });\n                return baseSortBy(result, function(object, other) {\n                    return compareMultiple(object, other, orders);\n                });\n            }\n            /**\n     * The base implementation of `_.pick` without support for individual\n     * property identifiers.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Object} Returns the new object.\n     */ function basePick(object, paths) {\n                return basePickBy(object, paths, function(value, path) {\n                    return hasIn(object, path);\n                });\n            }\n            /**\n     * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @param {Function} predicate The function invoked per property.\n     * @returns {Object} Returns the new object.\n     */ function basePickBy(object, paths, predicate) {\n                var index = -1, length = paths.length, result = {};\n                while(++index < length){\n                    var path = paths[index], value = baseGet(object, path);\n                    if (predicate(value, path)) {\n                        baseSet(result, castPath(path, object), value);\n                    }\n                }\n                return result;\n            }\n            /**\n     * A specialized version of `baseProperty` which supports deep paths.\n     *\n     * @private\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     */ function basePropertyDeep(path) {\n                return function(object) {\n                    return baseGet(object, path);\n                };\n            }\n            /**\n     * The base implementation of `_.pullAllBy` without support for iteratee\n     * shorthands.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     */ function basePullAll(array, values, iteratee, comparator) {\n                var indexOf = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values.length, seen = array;\n                if (array === values) {\n                    values = copyArray(values);\n                }\n                if (iteratee) {\n                    seen = arrayMap(array, baseUnary(iteratee));\n                }\n                while(++index < length){\n                    var fromIndex = 0, value = values[index], computed = iteratee ? iteratee(value) : value;\n                    while((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1){\n                        if (seen !== array) {\n                            splice.call(seen, fromIndex, 1);\n                        }\n                        splice.call(array, fromIndex, 1);\n                    }\n                }\n                return array;\n            }\n            /**\n     * The base implementation of `_.pullAt` without support for individual\n     * indexes or capturing the removed elements.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {number[]} indexes The indexes of elements to remove.\n     * @returns {Array} Returns `array`.\n     */ function basePullAt(array, indexes) {\n                var length = array ? indexes.length : 0, lastIndex = length - 1;\n                while(length--){\n                    var index = indexes[length];\n                    if (length == lastIndex || index !== previous) {\n                        var previous = index;\n                        if (isIndex(index)) {\n                            splice.call(array, index, 1);\n                        } else {\n                            baseUnset(array, index);\n                        }\n                    }\n                }\n                return array;\n            }\n            /**\n     * The base implementation of `_.random` without support for returning\n     * floating-point numbers.\n     *\n     * @private\n     * @param {number} lower The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the random number.\n     */ function baseRandom(lower, upper) {\n                return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n            }\n            /**\n     * The base implementation of `_.range` and `_.rangeRight` which doesn't\n     * coerce arguments.\n     *\n     * @private\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} step The value to increment or decrement by.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the range of numbers.\n     */ function baseRange(start, end, step, fromRight) {\n                var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result = Array1(length);\n                while(length--){\n                    result[fromRight ? length : ++index] = start;\n                    start += step;\n                }\n                return result;\n            }\n            /**\n     * The base implementation of `_.repeat` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {string} string The string to repeat.\n     * @param {number} n The number of times to repeat the string.\n     * @returns {string} Returns the repeated string.\n     */ function baseRepeat(string, n) {\n                var result = \"\";\n                if (!string || n < 1 || n > MAX_SAFE_INTEGER) {\n                    return result;\n                }\n                // Leverage the exponentiation by squaring algorithm for a faster repeat.\n                // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n                do {\n                    if (n % 2) {\n                        result += string;\n                    }\n                    n = nativeFloor(n / 2);\n                    if (n) {\n                        string += string;\n                    }\n                }while (n);\n                return result;\n            }\n            /**\n     * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     */ function baseRest(func, start) {\n                return setToString(overRest(func, start, identity), func + \"\");\n            }\n            /**\n     * The base implementation of `_.sample`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     */ function baseSample(collection) {\n                return arraySample(values(collection));\n            }\n            /**\n     * The base implementation of `_.sampleSize` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */ function baseSampleSize(collection, n) {\n                var array = values(collection);\n                return shuffleSelf(array, baseClamp(n, 0, array.length));\n            }\n            /**\n     * The base implementation of `_.set`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */ function baseSet(object, path, value, customizer) {\n                if (!isObject(object)) {\n                    return object;\n                }\n                path = castPath(path, object);\n                var index = -1, length = path.length, lastIndex = length - 1, nested = object;\n                while(nested != null && ++index < length){\n                    var key = toKey(path[index]), newValue = value;\n                    if (key === \"__proto__\" || key === \"constructor\" || key === \"prototype\") {\n                        return object;\n                    }\n                    if (index != lastIndex) {\n                        var objValue = nested[key];\n                        newValue = customizer ? customizer(objValue, key, nested) : undefined$1;\n                        if (newValue === undefined$1) {\n                            newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};\n                        }\n                    }\n                    assignValue(nested, key, newValue);\n                    nested = nested[key];\n                }\n                return object;\n            }\n            /**\n     * The base implementation of `setData` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */ var baseSetData = !metaMap ? identity : function(func, data) {\n                metaMap.set(func, data);\n                return func;\n            };\n            /**\n     * The base implementation of `setToString` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */ var baseSetToString = !defineProperty ? identity : function(func, string) {\n                return defineProperty(func, \"toString\", {\n                    \"configurable\": true,\n                    \"enumerable\": false,\n                    \"value\": constant(string),\n                    \"writable\": true\n                });\n            };\n            /**\n     * The base implementation of `_.shuffle`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */ function baseShuffle(collection) {\n                return shuffleSelf(values(collection));\n            }\n            /**\n     * The base implementation of `_.slice` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */ function baseSlice(array, start, end) {\n                var index = -1, length = array.length;\n                if (start < 0) {\n                    start = -start > length ? 0 : length + start;\n                }\n                end = end > length ? length : end;\n                if (end < 0) {\n                    end += length;\n                }\n                length = start > end ? 0 : end - start >>> 0;\n                start >>>= 0;\n                var result = Array1(length);\n                while(++index < length){\n                    result[index] = array[index + start];\n                }\n                return result;\n            }\n            /**\n     * The base implementation of `_.some` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     */ function baseSome(collection, predicate) {\n                var result;\n                baseEach(collection, function(value, index, collection) {\n                    result = predicate(value, index, collection);\n                    return !result;\n                });\n                return !!result;\n            }\n            /**\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n     * performs a binary search of `array` to determine the index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */ function baseSortedIndex(array, value, retHighest) {\n                var low = 0, high = array == null ? low : array.length;\n                if (typeof value == \"number\" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n                    while(low < high){\n                        var mid = low + high >>> 1, computed = array[mid];\n                        if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {\n                            low = mid + 1;\n                        } else {\n                            high = mid;\n                        }\n                    }\n                    return high;\n                }\n                return baseSortedIndexBy(array, value, identity, retHighest);\n            }\n            /**\n     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\n     * which invokes `iteratee` for `value` and each element of `array` to compute\n     * their sort ranking. The iteratee is invoked with one argument; (value).\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} iteratee The iteratee invoked per element.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */ function baseSortedIndexBy(array, value, iteratee, retHighest) {\n                var low = 0, high = array == null ? 0 : array.length;\n                if (high === 0) {\n                    return 0;\n                }\n                value = iteratee(value);\n                var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined$1;\n                while(low < high){\n                    var mid = nativeFloor((low + high) / 2), computed = iteratee(array[mid]), othIsDefined = computed !== undefined$1, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);\n                    if (valIsNaN) {\n                        var setLow = retHighest || othIsReflexive;\n                    } else if (valIsUndefined) {\n                        setLow = othIsReflexive && (retHighest || othIsDefined);\n                    } else if (valIsNull) {\n                        setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);\n                    } else if (valIsSymbol) {\n                        setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);\n                    } else if (othIsNull || othIsSymbol) {\n                        setLow = false;\n                    } else {\n                        setLow = retHighest ? computed <= value : computed < value;\n                    }\n                    if (setLow) {\n                        low = mid + 1;\n                    } else {\n                        high = mid;\n                    }\n                }\n                return nativeMin(high, MAX_ARRAY_INDEX);\n            }\n            /**\n     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without\n     * support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */ function baseSortedUniq(array, iteratee) {\n                var index = -1, length = array.length, resIndex = 0, result = [];\n                while(++index < length){\n                    var value = array[index], computed = iteratee ? iteratee(value) : value;\n                    if (!index || !eq(computed, seen)) {\n                        var seen = computed;\n                        result[resIndex++] = value === 0 ? 0 : value;\n                    }\n                }\n                return result;\n            }\n            /**\n     * The base implementation of `_.toNumber` which doesn't ensure correct\n     * conversions of binary, hexadecimal, or octal string values.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     */ function baseToNumber(value) {\n                if (typeof value == \"number\") {\n                    return value;\n                }\n                if (isSymbol(value)) {\n                    return NAN;\n                }\n                return +value;\n            }\n            /**\n     * The base implementation of `_.toString` which doesn't convert nullish\n     * values to empty strings.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {string} Returns the string.\n     */ function baseToString(value) {\n                // Exit early for strings to avoid a performance hit in some environments.\n                if (typeof value == \"string\") {\n                    return value;\n                }\n                if (isArray(value)) {\n                    // Recursively convert values (susceptible to call stack limits).\n                    return arrayMap(value, baseToString) + \"\";\n                }\n                if (isSymbol(value)) {\n                    return symbolToString ? symbolToString.call(value) : \"\";\n                }\n                var result = value + \"\";\n                return result == \"0\" && 1 / value == -INFINITY ? \"-0\" : result;\n            }\n            /**\n     * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */ function baseUniq(array, iteratee, comparator) {\n                var index = -1, includes = arrayIncludes, length = array.length, isCommon = true, result = [], seen = result;\n                if (comparator) {\n                    isCommon = false;\n                    includes = arrayIncludesWith;\n                } else if (length >= LARGE_ARRAY_SIZE) {\n                    var set = iteratee ? null : createSet(array);\n                    if (set) {\n                        return setToArray(set);\n                    }\n                    isCommon = false;\n                    includes = cacheHas;\n                    seen = new SetCache;\n                } else {\n                    seen = iteratee ? [] : result;\n                }\n                outer: while(++index < length){\n                    var value = array[index], computed = iteratee ? iteratee(value) : value;\n                    value = comparator || value !== 0 ? value : 0;\n                    if (isCommon && computed === computed) {\n                        var seenIndex = seen.length;\n                        while(seenIndex--){\n                            if (seen[seenIndex] === computed) {\n                                continue outer;\n                            }\n                        }\n                        if (iteratee) {\n                            seen.push(computed);\n                        }\n                        result.push(value);\n                    } else if (!includes(seen, computed, comparator)) {\n                        if (seen !== result) {\n                            seen.push(computed);\n                        }\n                        result.push(value);\n                    }\n                }\n                return result;\n            }\n            /**\n     * The base implementation of `_.unset`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The property path to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     */ function baseUnset(object, path) {\n                path = castPath(path, object);\n                object = parent(object, path);\n                return object == null || delete object[toKey(last(path))];\n            }\n            /**\n     * The base implementation of `_.update`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to update.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */ function baseUpdate(object, path, updater, customizer) {\n                return baseSet(object, path, updater(baseGet(object, path)), customizer);\n            }\n            /**\n     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`\n     * without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {Function} predicate The function invoked per iteration.\n     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the slice of `array`.\n     */ function baseWhile(array, predicate, isDrop, fromRight) {\n                var length = array.length, index = fromRight ? length : -1;\n                while((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)){}\n                return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);\n            }\n            /**\n     * The base implementation of `wrapperValue` which returns the result of\n     * performing a sequence of actions on the unwrapped `value`, where each\n     * successive action is supplied the return value of the previous.\n     *\n     * @private\n     * @param {*} value The unwrapped value.\n     * @param {Array} actions Actions to perform to resolve the unwrapped value.\n     * @returns {*} Returns the resolved value.\n     */ function baseWrapperValue(value, actions) {\n                var result = value;\n                if (result instanceof LazyWrapper) {\n                    result = result.value();\n                }\n                return arrayReduce(actions, function(result, action) {\n                    return action.func.apply(action.thisArg, arrayPush([\n                        result\n                    ], action.args));\n                }, result);\n            }\n            /**\n     * The base implementation of methods like `_.xor`, without support for\n     * iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of values.\n     */ function baseXor(arrays, iteratee, comparator) {\n                var length = arrays.length;\n                if (length < 2) {\n                    return length ? baseUniq(arrays[0]) : [];\n                }\n                var index = -1, result = Array1(length);\n                while(++index < length){\n                    var array = arrays[index], othIndex = -1;\n                    while(++othIndex < length){\n                        if (othIndex != index) {\n                            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);\n                        }\n                    }\n                }\n                return baseUniq(baseFlatten(result, 1), iteratee, comparator);\n            }\n            /**\n     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n     *\n     * @private\n     * @param {Array} props The property identifiers.\n     * @param {Array} values The property values.\n     * @param {Function} assignFunc The function to assign values.\n     * @returns {Object} Returns the new object.\n     */ function baseZipObject(props, values, assignFunc) {\n                var index = -1, length = props.length, valsLength = values.length, result = {};\n                while(++index < length){\n                    var value = index < valsLength ? values[index] : undefined$1;\n                    assignFunc(result, props[index], value);\n                }\n                return result;\n            }\n            /**\n     * Casts `value` to an empty array if it's not an array like object.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Array|Object} Returns the cast array-like object.\n     */ function castArrayLikeObject(value) {\n                return isArrayLikeObject(value) ? value : [];\n            }\n            /**\n     * Casts `value` to `identity` if it's not a function.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Function} Returns cast function.\n     */ function castFunction(value) {\n                return typeof value == \"function\" ? value : identity;\n            }\n            /**\n     * Casts `value` to a path array if it's not one.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {Array} Returns the cast property path array.\n     */ function castPath(value, object) {\n                if (isArray(value)) {\n                    return value;\n                }\n                return isKey(value, object) ? [\n                    value\n                ] : stringToPath(toString(value));\n            }\n            /**\n     * A `baseRest` alias which can be replaced with `identity` by module\n     * replacement plugins.\n     *\n     * @private\n     * @type {Function}\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */ var castRest = baseRest;\n            /**\n     * Casts `array` to a slice if it's needed.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {number} start The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the cast slice.\n     */ function castSlice(array, start, end) {\n                var length = array.length;\n                end = end === undefined$1 ? length : end;\n                return !start && end >= length ? array : baseSlice(array, start, end);\n            }\n            /**\n     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).\n     *\n     * @private\n     * @param {number|Object} id The timer id or timeout object of the timer to clear.\n     */ var clearTimeout = ctxClearTimeout || function(id) {\n                return root.clearTimeout(id);\n            };\n            /**\n     * Creates a clone of  `buffer`.\n     *\n     * @private\n     * @param {Buffer} buffer The buffer to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Buffer} Returns the cloned buffer.\n     */ function cloneBuffer(buffer, isDeep) {\n                if (isDeep) {\n                    return buffer.slice();\n                }\n                var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n                buffer.copy(result);\n                return result;\n            }\n            /**\n     * Creates a clone of `arrayBuffer`.\n     *\n     * @private\n     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n     * @returns {ArrayBuffer} Returns the cloned array buffer.\n     */ function cloneArrayBuffer(arrayBuffer) {\n                var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n                new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n                return result;\n            }\n            /**\n     * Creates a clone of `dataView`.\n     *\n     * @private\n     * @param {Object} dataView The data view to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned data view.\n     */ function cloneDataView(dataView, isDeep) {\n                var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n                return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n            }\n            /**\n     * Creates a clone of `regexp`.\n     *\n     * @private\n     * @param {Object} regexp The regexp to clone.\n     * @returns {Object} Returns the cloned regexp.\n     */ function cloneRegExp(regexp) {\n                var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n                result.lastIndex = regexp.lastIndex;\n                return result;\n            }\n            /**\n     * Creates a clone of the `symbol` object.\n     *\n     * @private\n     * @param {Object} symbol The symbol object to clone.\n     * @returns {Object} Returns the cloned symbol object.\n     */ function cloneSymbol(symbol) {\n                return symbolValueOf ? Object1(symbolValueOf.call(symbol)) : {};\n            }\n            /**\n     * Creates a clone of `typedArray`.\n     *\n     * @private\n     * @param {Object} typedArray The typed array to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned typed array.\n     */ function cloneTypedArray(typedArray, isDeep) {\n                var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n                return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n            }\n            /**\n     * Compares values to sort them in ascending order.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {number} Returns the sort order indicator for `value`.\n     */ function compareAscending(value, other) {\n                if (value !== other) {\n                    var valIsDefined = value !== undefined$1, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);\n                    var othIsDefined = other !== undefined$1, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);\n                    if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {\n                        return 1;\n                    }\n                    if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {\n                        return -1;\n                    }\n                }\n                return 0;\n            }\n            /**\n     * Used by `_.orderBy` to compare multiple properties of a value to another\n     * and stable sort them.\n     *\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n     * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n     * of corresponding values.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\n     * @returns {number} Returns the sort order indicator for `object`.\n     */ function compareMultiple(object, other, orders) {\n                var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;\n                while(++index < length){\n                    var result = compareAscending(objCriteria[index], othCriteria[index]);\n                    if (result) {\n                        if (index >= ordersLength) {\n                            return result;\n                        }\n                        var order = orders[index];\n                        return result * (order == \"desc\" ? -1 : 1);\n                    }\n                }\n                // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n                // that causes it, under certain circumstances, to provide the same value for\n                // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n                // for more details.\n                //\n                // This also ensures a stable sort in V8 and other engines.\n                // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n                return object.index - other.index;\n            }\n            /**\n     * Creates an array that is the composition of partially applied arguments,\n     * placeholders, and provided arguments into a single array of arguments.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to prepend to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */ function composeArgs(args, partials, holders, isCurried) {\n                var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array1(leftLength + rangeLength), isUncurried = !isCurried;\n                while(++leftIndex < leftLength){\n                    result[leftIndex] = partials[leftIndex];\n                }\n                while(++argsIndex < holdersLength){\n                    if (isUncurried || argsIndex < argsLength) {\n                        result[holders[argsIndex]] = args[argsIndex];\n                    }\n                }\n                while(rangeLength--){\n                    result[leftIndex++] = args[argsIndex++];\n                }\n                return result;\n            }\n            /**\n     * This function is like `composeArgs` except that the arguments composition\n     * is tailored for `_.partialRight`.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to append to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */ function composeArgsRight(args, partials, holders, isCurried) {\n                var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array1(rangeLength + rightLength), isUncurried = !isCurried;\n                while(++argsIndex < rangeLength){\n                    result[argsIndex] = args[argsIndex];\n                }\n                var offset = argsIndex;\n                while(++rightIndex < rightLength){\n                    result[offset + rightIndex] = partials[rightIndex];\n                }\n                while(++holdersIndex < holdersLength){\n                    if (isUncurried || argsIndex < argsLength) {\n                        result[offset + holders[holdersIndex]] = args[argsIndex++];\n                    }\n                }\n                return result;\n            }\n            /**\n     * Copies the values of `source` to `array`.\n     *\n     * @private\n     * @param {Array} source The array to copy values from.\n     * @param {Array} [array=[]] The array to copy values to.\n     * @returns {Array} Returns `array`.\n     */ function copyArray(source, array) {\n                var index = -1, length = source.length;\n                array || (array = Array1(length));\n                while(++index < length){\n                    array[index] = source[index];\n                }\n                return array;\n            }\n            /**\n     * Copies properties of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy properties from.\n     * @param {Array} props The property identifiers to copy.\n     * @param {Object} [object={}] The object to copy properties to.\n     * @param {Function} [customizer] The function to customize copied values.\n     * @returns {Object} Returns `object`.\n     */ function copyObject(source, props, object, customizer) {\n                var isNew = !object;\n                object || (object = {});\n                var index = -1, length = props.length;\n                while(++index < length){\n                    var key = props[index];\n                    var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined$1;\n                    if (newValue === undefined$1) {\n                        newValue = source[key];\n                    }\n                    if (isNew) {\n                        baseAssignValue(object, key, newValue);\n                    } else {\n                        assignValue(object, key, newValue);\n                    }\n                }\n                return object;\n            }\n            /**\n     * Copies own symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */ function copySymbols(source, object) {\n                return copyObject(source, getSymbols(source), object);\n            }\n            /**\n     * Copies own and inherited symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */ function copySymbolsIn(source, object) {\n                return copyObject(source, getSymbolsIn(source), object);\n            }\n            /**\n     * Creates a function like `_.groupBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} [initializer] The accumulator object initializer.\n     * @returns {Function} Returns the new aggregator function.\n     */ function createAggregator(setter, initializer) {\n                return function(collection, iteratee) {\n                    var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};\n                    return func(collection, setter, getIteratee(iteratee, 2), accumulator);\n                };\n            }\n            /**\n     * Creates a function like `_.assign`.\n     *\n     * @private\n     * @param {Function} assigner The function to assign values.\n     * @returns {Function} Returns the new assigner function.\n     */ function createAssigner(assigner) {\n                return baseRest(function(object, sources) {\n                    var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined$1, guard = length > 2 ? sources[2] : undefined$1;\n                    customizer = assigner.length > 3 && typeof customizer == \"function\" ? (length--, customizer) : undefined$1;\n                    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n                        customizer = length < 3 ? undefined$1 : customizer;\n                        length = 1;\n                    }\n                    object = Object1(object);\n                    while(++index < length){\n                        var source = sources[index];\n                        if (source) {\n                            assigner(object, source, index, customizer);\n                        }\n                    }\n                    return object;\n                });\n            }\n            /**\n     * Creates a `baseEach` or `baseEachRight` function.\n     *\n     * @private\n     * @param {Function} eachFunc The function to iterate over a collection.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */ function createBaseEach(eachFunc, fromRight) {\n                return function(collection, iteratee) {\n                    if (collection == null) {\n                        return collection;\n                    }\n                    if (!isArrayLike(collection)) {\n                        return eachFunc(collection, iteratee);\n                    }\n                    var length = collection.length, index = fromRight ? length : -1, iterable = Object1(collection);\n                    while(fromRight ? index-- : ++index < length){\n                        if (iteratee(iterable[index], index, iterable) === false) {\n                            break;\n                        }\n                    }\n                    return collection;\n                };\n            }\n            /**\n     * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */ function createBaseFor(fromRight) {\n                return function(object, iteratee, keysFunc) {\n                    var index = -1, iterable = Object1(object), props = keysFunc(object), length = props.length;\n                    while(length--){\n                        var key = props[fromRight ? length : ++index];\n                        if (iteratee(iterable[key], key, iterable) === false) {\n                            break;\n                        }\n                    }\n                    return object;\n                };\n            }\n            /**\n     * Creates a function that wraps `func` to invoke it with the optional `this`\n     * binding of `thisArg`.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */ function createBind(func, bitmask, thisArg) {\n                var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);\n                function wrapper() {\n                    var fn = this && this !== root && this instanceof wrapper ? Ctor : func;\n                    return fn.apply(isBind ? thisArg : this, arguments);\n                }\n                return wrapper;\n            }\n            /**\n     * Creates a function like `_.lowerFirst`.\n     *\n     * @private\n     * @param {string} methodName The name of the `String` case method to use.\n     * @returns {Function} Returns the new case function.\n     */ function createCaseFirst(methodName) {\n                return function(string) {\n                    string = toString(string);\n                    var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined$1;\n                    var chr = strSymbols ? strSymbols[0] : string.charAt(0);\n                    var trailing = strSymbols ? castSlice(strSymbols, 1).join(\"\") : string.slice(1);\n                    return chr[methodName]() + trailing;\n                };\n            }\n            /**\n     * Creates a function like `_.camelCase`.\n     *\n     * @private\n     * @param {Function} callback The function to combine each word.\n     * @returns {Function} Returns the new compounder function.\n     */ function createCompounder(callback) {\n                return function(string) {\n                    return arrayReduce(words(deburr(string).replace(reApos, \"\")), callback, \"\");\n                };\n            }\n            /**\n     * Creates a function that produces an instance of `Ctor` regardless of\n     * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n     *\n     * @private\n     * @param {Function} Ctor The constructor to wrap.\n     * @returns {Function} Returns the new wrapped function.\n     */ function createCtor(Ctor) {\n                return function() {\n                    // Use a `switch` statement to work with class constructors. See\n                    // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n                    // for more details.\n                    var args = arguments;\n                    switch(args.length){\n                        case 0:\n                            return new Ctor;\n                        case 1:\n                            return new Ctor(args[0]);\n                        case 2:\n                            return new Ctor(args[0], args[1]);\n                        case 3:\n                            return new Ctor(args[0], args[1], args[2]);\n                        case 4:\n                            return new Ctor(args[0], args[1], args[2], args[3]);\n                        case 5:\n                            return new Ctor(args[0], args[1], args[2], args[3], args[4]);\n                        case 6:\n                            return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n                        case 7:\n                            return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n                    }\n                    var thisBinding = baseCreate(Ctor.prototype), result = Ctor.apply(thisBinding, args);\n                    // Mimic the constructor's `return` behavior.\n                    // See https://es5.github.io/#x13.2.2 for more details.\n                    return isObject(result) ? result : thisBinding;\n                };\n            }\n            /**\n     * Creates a function that wraps `func` to enable currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {number} arity The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */ function createCurry(func, bitmask, arity) {\n                var Ctor = createCtor(func);\n                function wrapper() {\n                    var length = arguments.length, args = Array1(length), index = length, placeholder = getHolder(wrapper);\n                    while(index--){\n                        args[index] = arguments[index];\n                    }\n                    var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);\n                    length -= holders.length;\n                    if (length < arity) {\n                        return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined$1, args, holders, undefined$1, undefined$1, arity - length);\n                    }\n                    var fn = this && this !== root && this instanceof wrapper ? Ctor : func;\n                    return apply(fn, this, args);\n                }\n                return wrapper;\n            }\n            /**\n     * Creates a `_.find` or `_.findLast` function.\n     *\n     * @private\n     * @param {Function} findIndexFunc The function to find the collection index.\n     * @returns {Function} Returns the new find function.\n     */ function createFind(findIndexFunc) {\n                return function(collection, predicate, fromIndex) {\n                    var iterable = Object1(collection);\n                    if (!isArrayLike(collection)) {\n                        var iteratee = getIteratee(predicate, 3);\n                        collection = keys(collection);\n                        predicate = function(key) {\n                            return iteratee(iterable[key], key, iterable);\n                        };\n                    }\n                    var index = findIndexFunc(collection, predicate, fromIndex);\n                    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined$1;\n                };\n            }\n            /**\n     * Creates a `_.flow` or `_.flowRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new flow function.\n     */ function createFlow(fromRight) {\n                return flatRest(function(funcs) {\n                    var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;\n                    if (fromRight) {\n                        funcs.reverse();\n                    }\n                    while(index--){\n                        var func = funcs[index];\n                        if (typeof func != \"function\") {\n                            throw new TypeError(FUNC_ERROR_TEXT);\n                        }\n                        if (prereq && !wrapper && getFuncName(func) == \"wrapper\") {\n                            var wrapper = new LodashWrapper([], true);\n                        }\n                    }\n                    index = wrapper ? index : length;\n                    while(++index < length){\n                        func = funcs[index];\n                        var funcName = getFuncName(func), data = funcName == \"wrapper\" ? getData(func) : undefined$1;\n                        if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {\n                            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);\n                        } else {\n                            wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);\n                        }\n                    }\n                    return function() {\n                        var args = arguments, value = args[0];\n                        if (wrapper && args.length == 1 && isArray(value)) {\n                            return wrapper.plant(value).value();\n                        }\n                        var index = 0, result = length ? funcs[index].apply(this, args) : value;\n                        while(++index < length){\n                            result = funcs[index].call(this, result);\n                        }\n                        return result;\n                    };\n                });\n            }\n            /**\n     * Creates a function that wraps `func` to invoke it with optional `this`\n     * binding of `thisArg`, partial application, and currying.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [partialsRight] The arguments to append to those provided\n     *  to the new function.\n     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */ function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n                var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined$1 : createCtor(func);\n                function wrapper() {\n                    var length = arguments.length, args = Array1(length), index = length;\n                    while(index--){\n                        args[index] = arguments[index];\n                    }\n                    if (isCurried) {\n                        var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);\n                    }\n                    if (partials) {\n                        args = composeArgs(args, partials, holders, isCurried);\n                    }\n                    if (partialsRight) {\n                        args = composeArgsRight(args, partialsRight, holdersRight, isCurried);\n                    }\n                    length -= holdersCount;\n                    if (isCurried && length < arity) {\n                        var newHolders = replaceHolders(args, placeholder);\n                        return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);\n                    }\n                    var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;\n                    length = args.length;\n                    if (argPos) {\n                        args = reorder(args, argPos);\n                    } else if (isFlip && length > 1) {\n                        args.reverse();\n                    }\n                    if (isAry && ary < length) {\n                        args.length = ary;\n                    }\n                    if (this && this !== root && this instanceof wrapper) {\n                        fn = Ctor || createCtor(fn);\n                    }\n                    return fn.apply(thisBinding, args);\n                }\n                return wrapper;\n            }\n            /**\n     * Creates a function like `_.invertBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} toIteratee The function to resolve iteratees.\n     * @returns {Function} Returns the new inverter function.\n     */ function createInverter(setter, toIteratee) {\n                return function(object, iteratee) {\n                    return baseInverter(object, setter, toIteratee(iteratee), {});\n                };\n            }\n            /**\n     * Creates a function that performs a mathematical operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @param {number} [defaultValue] The value used for `undefined` arguments.\n     * @returns {Function} Returns the new mathematical operation function.\n     */ function createMathOperation(operator, defaultValue) {\n                return function(value, other) {\n                    var result;\n                    if (value === undefined$1 && other === undefined$1) {\n                        return defaultValue;\n                    }\n                    if (value !== undefined$1) {\n                        result = value;\n                    }\n                    if (other !== undefined$1) {\n                        if (result === undefined$1) {\n                            return other;\n                        }\n                        if (typeof value == \"string\" || typeof other == \"string\") {\n                            value = baseToString(value);\n                            other = baseToString(other);\n                        } else {\n                            value = baseToNumber(value);\n                            other = baseToNumber(other);\n                        }\n                        result = operator(value, other);\n                    }\n                    return result;\n                };\n            }\n            /**\n     * Creates a function like `_.over`.\n     *\n     * @private\n     * @param {Function} arrayFunc The function to iterate over iteratees.\n     * @returns {Function} Returns the new over function.\n     */ function createOver(arrayFunc) {\n                return flatRest(function(iteratees) {\n                    iteratees = arrayMap(iteratees, baseUnary(getIteratee()));\n                    return baseRest(function(args) {\n                        var thisArg = this;\n                        return arrayFunc(iteratees, function(iteratee) {\n                            return apply(iteratee, thisArg, args);\n                        });\n                    });\n                });\n            }\n            /**\n     * Creates the padding for `string` based on `length`. The `chars` string\n     * is truncated if the number of characters exceeds `length`.\n     *\n     * @private\n     * @param {number} length The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padding for `string`.\n     */ function createPadding(length, chars) {\n                chars = chars === undefined$1 ? \" \" : baseToString(chars);\n                var charsLength = chars.length;\n                if (charsLength < 2) {\n                    return charsLength ? baseRepeat(chars, length) : chars;\n                }\n                var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\n                return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join(\"\") : result.slice(0, length);\n            }\n            /**\n     * Creates a function that wraps `func` to invoke it with the `this` binding\n     * of `thisArg` and `partials` prepended to the arguments it receives.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {Array} partials The arguments to prepend to those provided to\n     *  the new function.\n     * @returns {Function} Returns the new wrapped function.\n     */ function createPartial(func, bitmask, thisArg, partials) {\n                var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);\n                function wrapper() {\n                    var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array1(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;\n                    while(++leftIndex < leftLength){\n                        args[leftIndex] = partials[leftIndex];\n                    }\n                    while(argsLength--){\n                        args[leftIndex++] = arguments[++argsIndex];\n                    }\n                    return apply(fn, isBind ? thisArg : this, args);\n                }\n                return wrapper;\n            }\n            /**\n     * Creates a `_.range` or `_.rangeRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new range function.\n     */ function createRange(fromRight) {\n                return function(start, end, step) {\n                    if (step && typeof step != \"number\" && isIterateeCall(start, end, step)) {\n                        end = step = undefined$1;\n                    }\n                    // Ensure the sign of `-0` is preserved.\n                    start = toFinite(start);\n                    if (end === undefined$1) {\n                        end = start;\n                        start = 0;\n                    } else {\n                        end = toFinite(end);\n                    }\n                    step = step === undefined$1 ? start < end ? 1 : -1 : toFinite(step);\n                    return baseRange(start, end, step, fromRight);\n                };\n            }\n            /**\n     * Creates a function that performs a relational operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @returns {Function} Returns the new relational operation function.\n     */ function createRelationalOperation(operator) {\n                return function(value, other) {\n                    if (!(typeof value == \"string\" && typeof other == \"string\")) {\n                        value = toNumber(value);\n                        other = toNumber(other);\n                    }\n                    return operator(value, other);\n                };\n            }\n            /**\n     * Creates a function that wraps `func` to continue currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {Function} wrapFunc The function to create the `func` wrapper.\n     * @param {*} placeholder The placeholder value.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */ function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n                var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined$1, newHoldersRight = isCurry ? undefined$1 : holders, newPartials = isCurry ? partials : undefined$1, newPartialsRight = isCurry ? undefined$1 : partials;\n                bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;\n                bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);\n                if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {\n                    bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);\n                }\n                var newData = [\n                    func,\n                    bitmask,\n                    thisArg,\n                    newPartials,\n                    newHolders,\n                    newPartialsRight,\n                    newHoldersRight,\n                    argPos,\n                    ary,\n                    arity\n                ];\n                var result = wrapFunc.apply(undefined$1, newData);\n                if (isLaziable(func)) {\n                    setData(result, newData);\n                }\n                result.placeholder = placeholder;\n                return setWrapToString(result, func, bitmask);\n            }\n            /**\n     * Creates a function like `_.round`.\n     *\n     * @private\n     * @param {string} methodName The name of the `Math` method to use when rounding.\n     * @returns {Function} Returns the new round function.\n     */ function createRound(methodName) {\n                var func = Math1[methodName];\n                return function(number, precision) {\n                    number = toNumber(number);\n                    precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);\n                    if (precision && nativeIsFinite(number)) {\n                        // Shift with exponential notation to avoid floating-point issues.\n                        // See [MDN](https://mdn.io/round#Examples) for more details.\n                        var pair = (toString(number) + \"e\").split(\"e\"), value = func(pair[0] + \"e\" + (+pair[1] + precision));\n                        pair = (toString(value) + \"e\").split(\"e\");\n                        return +(pair[0] + \"e\" + (+pair[1] - precision));\n                    }\n                    return func(number);\n                };\n            }\n            /**\n     * Creates a set object of `values`.\n     *\n     * @private\n     * @param {Array} values The values to add to the set.\n     * @returns {Object} Returns the new set.\n     */ var createSet = !(Set && 1 / setToArray(new Set([\n                ,\n                -0\n            ]))[1] == INFINITY) ? noop : function(values) {\n                return new Set(values);\n            };\n            /**\n     * Creates a `_.toPairs` or `_.toPairsIn` function.\n     *\n     * @private\n     * @param {Function} keysFunc The function to get the keys of a given object.\n     * @returns {Function} Returns the new pairs function.\n     */ function createToPairs(keysFunc) {\n                return function(object) {\n                    var tag = getTag(object);\n                    if (tag == mapTag) {\n                        return mapToArray(object);\n                    }\n                    if (tag == setTag) {\n                        return setToPairs(object);\n                    }\n                    return baseToPairs(object, keysFunc(object));\n                };\n            }\n            /**\n     * Creates a function that either curries or invokes `func` with optional\n     * `this` binding and partially applied arguments.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags.\n     *    1 - `_.bind`\n     *    2 - `_.bindKey`\n     *    4 - `_.curry` or `_.curryRight` of a bound function\n     *    8 - `_.curry`\n     *   16 - `_.curryRight`\n     *   32 - `_.partial`\n     *   64 - `_.partialRight`\n     *  128 - `_.rearg`\n     *  256 - `_.ary`\n     *  512 - `_.flip`\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to be partially applied.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */ function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n                var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;\n                if (!isBindKey && typeof func != \"function\") {\n                    throw new TypeError(FUNC_ERROR_TEXT);\n                }\n                var length = partials ? partials.length : 0;\n                if (!length) {\n                    bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);\n                    partials = holders = undefined$1;\n                }\n                ary = ary === undefined$1 ? ary : nativeMax(toInteger(ary), 0);\n                arity = arity === undefined$1 ? arity : toInteger(arity);\n                length -= holders ? holders.length : 0;\n                if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {\n                    var partialsRight = partials, holdersRight = holders;\n                    partials = holders = undefined$1;\n                }\n                var data = isBindKey ? undefined$1 : getData(func);\n                var newData = [\n                    func,\n                    bitmask,\n                    thisArg,\n                    partials,\n                    holders,\n                    partialsRight,\n                    holdersRight,\n                    argPos,\n                    ary,\n                    arity\n                ];\n                if (data) {\n                    mergeData(newData, data);\n                }\n                func = newData[0];\n                bitmask = newData[1];\n                thisArg = newData[2];\n                partials = newData[3];\n                holders = newData[4];\n                arity = newData[9] = newData[9] === undefined$1 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);\n                if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {\n                    bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);\n                }\n                if (!bitmask || bitmask == WRAP_BIND_FLAG) {\n                    var result = createBind(func, bitmask, thisArg);\n                } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {\n                    result = createCurry(func, bitmask, arity);\n                } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {\n                    result = createPartial(func, bitmask, thisArg, partials);\n                } else {\n                    result = createHybrid.apply(undefined$1, newData);\n                }\n                var setter = data ? baseSetData : setData;\n                return setWrapToString(setter(result, newData), func, bitmask);\n            }\n            /**\n     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties\n     * of source objects to the destination object for all destination properties\n     * that resolve to `undefined`.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to assign.\n     * @param {Object} object The parent object of `objValue`.\n     * @returns {*} Returns the value to assign.\n     */ function customDefaultsAssignIn(objValue, srcValue, key, object) {\n                if (objValue === undefined$1 || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {\n                    return srcValue;\n                }\n                return objValue;\n            }\n            /**\n     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source\n     * objects into destination objects that are passed thru.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to merge.\n     * @param {Object} object The parent object of `objValue`.\n     * @param {Object} source The parent object of `srcValue`.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     * @returns {*} Returns the value to assign.\n     */ function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {\n                if (isObject(objValue) && isObject(srcValue)) {\n                    // Recursively merge objects and arrays (susceptible to call stack limits).\n                    stack.set(srcValue, objValue);\n                    baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);\n                    stack[\"delete\"](srcValue);\n                }\n                return objValue;\n            }\n            /**\n     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\n     * objects.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {string} key The key of the property to inspect.\n     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\n     */ function customOmitClone(value) {\n                return isPlainObject(value) ? undefined$1 : value;\n            }\n            /**\n     * A specialized version of `baseIsEqualDeep` for arrays with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Array} array The array to compare.\n     * @param {Array} other The other array to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `array` and `other` objects.\n     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n     */ function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n                var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;\n                if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n                    return false;\n                }\n                // Check that cyclic values are equal.\n                var arrStacked = stack.get(array);\n                var othStacked = stack.get(other);\n                if (arrStacked && othStacked) {\n                    return arrStacked == other && othStacked == array;\n                }\n                var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache : undefined$1;\n                stack.set(array, other);\n                stack.set(other, array);\n                // Ignore non-index properties.\n                while(++index < arrLength){\n                    var arrValue = array[index], othValue = other[index];\n                    if (customizer) {\n                        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);\n                    }\n                    if (compared !== undefined$1) {\n                        if (compared) {\n                            continue;\n                        }\n                        result = false;\n                        break;\n                    }\n                    // Recursively compare arrays (susceptible to call stack limits).\n                    if (seen) {\n                        if (!arraySome(other, function(othValue, othIndex) {\n                            if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n                                return seen.push(othIndex);\n                            }\n                        })) {\n                            result = false;\n                            break;\n                        }\n                    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n                        result = false;\n                        break;\n                    }\n                }\n                stack[\"delete\"](array);\n                stack[\"delete\"](other);\n                return result;\n            }\n            /**\n     * A specialized version of `baseIsEqualDeep` for comparing objects of\n     * the same `toStringTag`.\n     *\n     * **Note:** This function only supports comparing values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {string} tag The `toStringTag` of the objects to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */ function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n                switch(tag){\n                    case dataViewTag:\n                        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {\n                            return false;\n                        }\n                        object = object.buffer;\n                        other = other.buffer;\n                    case arrayBufferTag:\n                        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n                            return false;\n                        }\n                        return true;\n                    case boolTag:\n                    case dateTag:\n                    case numberTag:\n                        // Coerce booleans to `1` or `0` and dates to milliseconds.\n                        // Invalid dates are coerced to `NaN`.\n                        return eq(+object, +other);\n                    case errorTag:\n                        return object.name == other.name && object.message == other.message;\n                    case regexpTag:\n                    case stringTag:\n                        // Coerce regexes to strings and treat strings, primitives and objects,\n                        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n                        // for more details.\n                        return object == other + \"\";\n                    case mapTag:\n                        var convert = mapToArray;\n                    case setTag:\n                        var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n                        convert || (convert = setToArray);\n                        if (object.size != other.size && !isPartial) {\n                            return false;\n                        }\n                        // Assume cyclic values are equal.\n                        var stacked = stack.get(object);\n                        if (stacked) {\n                            return stacked == other;\n                        }\n                        bitmask |= COMPARE_UNORDERED_FLAG;\n                        // Recursively compare objects (susceptible to call stack limits).\n                        stack.set(object, other);\n                        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n                        stack[\"delete\"](object);\n                        return result;\n                    case symbolTag:\n                        if (symbolValueOf) {\n                            return symbolValueOf.call(object) == symbolValueOf.call(other);\n                        }\n                }\n                return false;\n            }\n            /**\n     * A specialized version of `baseIsEqualDeep` for objects with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */ function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n                var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;\n                if (objLength != othLength && !isPartial) {\n                    return false;\n                }\n                var index = objLength;\n                while(index--){\n                    var key = objProps[index];\n                    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n                        return false;\n                    }\n                }\n                // Check that cyclic values are equal.\n                var objStacked = stack.get(object);\n                var othStacked = stack.get(other);\n                if (objStacked && othStacked) {\n                    return objStacked == other && othStacked == object;\n                }\n                var result = true;\n                stack.set(object, other);\n                stack.set(other, object);\n                var skipCtor = isPartial;\n                while(++index < objLength){\n                    key = objProps[index];\n                    var objValue = object[key], othValue = other[key];\n                    if (customizer) {\n                        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);\n                    }\n                    // Recursively compare objects (susceptible to call stack limits).\n                    if (!(compared === undefined$1 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {\n                        result = false;\n                        break;\n                    }\n                    skipCtor || (skipCtor = key == \"constructor\");\n                }\n                if (result && !skipCtor) {\n                    var objCtor = object.constructor, othCtor = other.constructor;\n                    // Non `Object` object instances with different constructors are not equal.\n                    if (objCtor != othCtor && \"constructor\" in object && \"constructor\" in other && !(typeof objCtor == \"function\" && objCtor instanceof objCtor && typeof othCtor == \"function\" && othCtor instanceof othCtor)) {\n                        result = false;\n                    }\n                }\n                stack[\"delete\"](object);\n                stack[\"delete\"](other);\n                return result;\n            }\n            /**\n     * A specialized version of `baseRest` which flattens the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */ function flatRest(func) {\n                return setToString(overRest(func, undefined$1, flatten), func + \"\");\n            }\n            /**\n     * Creates an array of own enumerable property names and symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */ function getAllKeys(object) {\n                return baseGetAllKeys(object, keys, getSymbols);\n            }\n            /**\n     * Creates an array of own and inherited enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */ function getAllKeysIn(object) {\n                return baseGetAllKeys(object, keysIn, getSymbolsIn);\n            }\n            /**\n     * Gets metadata for `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {*} Returns the metadata for `func`.\n     */ var getData = !metaMap ? noop : function(func) {\n                return metaMap.get(func);\n            };\n            /**\n     * Gets the name of `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {string} Returns the function name.\n     */ function getFuncName(func) {\n                var result = func.name + \"\", array = realNames[result], length = hasOwnProperty.call(realNames, result) ? array.length : 0;\n                while(length--){\n                    var data = array[length], otherFunc = data.func;\n                    if (otherFunc == null || otherFunc == func) {\n                        return data.name;\n                    }\n                }\n                return result;\n            }\n            /**\n     * Gets the argument placeholder value for `func`.\n     *\n     * @private\n     * @param {Function} func The function to inspect.\n     * @returns {*} Returns the placeholder value.\n     */ function getHolder(func) {\n                var object = hasOwnProperty.call(lodash, \"placeholder\") ? lodash : func;\n                return object.placeholder;\n            }\n            /**\n     * Gets the appropriate \"iteratee\" function. If `_.iteratee` is customized,\n     * this function returns the custom method, otherwise it returns `baseIteratee`.\n     * If arguments are provided, the chosen function is invoked with them and\n     * its result is returned.\n     *\n     * @private\n     * @param {*} [value] The value to convert to an iteratee.\n     * @param {number} [arity] The arity of the created iteratee.\n     * @returns {Function} Returns the chosen function or its result.\n     */ function getIteratee() {\n                var result = lodash.iteratee || iteratee;\n                result = result === iteratee ? baseIteratee : result;\n                return arguments.length ? result(arguments[0], arguments[1]) : result;\n            }\n            /**\n     * Gets the data for `map`.\n     *\n     * @private\n     * @param {Object} map The map to query.\n     * @param {string} key The reference key.\n     * @returns {*} Returns the map data.\n     */ function getMapData(map, key) {\n                var data = map.__data__;\n                return isKeyable(key) ? data[typeof key == \"string\" ? \"string\" : \"hash\"] : data.map;\n            }\n            /**\n     * Gets the property names, values, and compare flags of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the match data of `object`.\n     */ function getMatchData(object) {\n                var result = keys(object), length = result.length;\n                while(length--){\n                    var key = result[length], value = object[key];\n                    result[length] = [\n                        key,\n                        value,\n                        isStrictComparable(value)\n                    ];\n                }\n                return result;\n            }\n            /**\n     * Gets the native function at `key` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the method to get.\n     * @returns {*} Returns the function if it's native, else `undefined`.\n     */ function getNative(object, key) {\n                var value = getValue(object, key);\n                return baseIsNative(value) ? value : undefined$1;\n            }\n            /**\n     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the raw `toStringTag`.\n     */ function getRawTag(value) {\n                var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];\n                try {\n                    value[symToStringTag] = undefined$1;\n                    var unmasked = true;\n                } catch (e) {}\n                var result = nativeObjectToString.call(value);\n                if (unmasked) {\n                    if (isOwn) {\n                        value[symToStringTag] = tag;\n                    } else {\n                        delete value[symToStringTag];\n                    }\n                }\n                return result;\n            }\n            /**\n     * Creates an array of the own enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */ var getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n                if (object == null) {\n                    return [];\n                }\n                object = Object1(object);\n                return arrayFilter(nativeGetSymbols(object), function(symbol) {\n                    return propertyIsEnumerable.call(object, symbol);\n                });\n            };\n            /**\n     * Creates an array of the own and inherited enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */ var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n                var result = [];\n                while(object){\n                    arrayPush(result, getSymbols(object));\n                    object = getPrototype(object);\n                }\n                return result;\n            };\n            /**\n     * Gets the `toStringTag` of `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */ var getTag = baseGetTag;\n            // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\n            if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map) != mapTag || Promise1 && getTag(Promise1.resolve()) != promiseTag || Set && getTag(new Set) != setTag || WeakMap && getTag(new WeakMap) != weakMapTag) {\n                getTag = function(value) {\n                    var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : undefined$1, ctorString = Ctor ? toSource(Ctor) : \"\";\n                    if (ctorString) {\n                        switch(ctorString){\n                            case dataViewCtorString:\n                                return dataViewTag;\n                            case mapCtorString:\n                                return mapTag;\n                            case promiseCtorString:\n                                return promiseTag;\n                            case setCtorString:\n                                return setTag;\n                            case weakMapCtorString:\n                                return weakMapTag;\n                        }\n                    }\n                    return result;\n                };\n            }\n            /**\n     * Gets the view, applying any `transforms` to the `start` and `end` positions.\n     *\n     * @private\n     * @param {number} start The start of the view.\n     * @param {number} end The end of the view.\n     * @param {Array} transforms The transformations to apply to the view.\n     * @returns {Object} Returns an object containing the `start` and `end`\n     *  positions of the view.\n     */ function getView(start, end, transforms) {\n                var index = -1, length = transforms.length;\n                while(++index < length){\n                    var data = transforms[index], size = data.size;\n                    switch(data.type){\n                        case \"drop\":\n                            start += size;\n                            break;\n                        case \"dropRight\":\n                            end -= size;\n                            break;\n                        case \"take\":\n                            end = nativeMin(end, start + size);\n                            break;\n                        case \"takeRight\":\n                            start = nativeMax(start, end - size);\n                            break;\n                    }\n                }\n                return {\n                    \"start\": start,\n                    \"end\": end\n                };\n            }\n            /**\n     * Extracts wrapper details from the `source` body comment.\n     *\n     * @private\n     * @param {string} source The source to inspect.\n     * @returns {Array} Returns the wrapper details.\n     */ function getWrapDetails(source) {\n                var match = source.match(reWrapDetails);\n                return match ? match[1].split(reSplitDetails) : [];\n            }\n            /**\n     * Checks if `path` exists on `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @param {Function} hasFunc The function to check properties.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     */ function hasPath(object, path, hasFunc) {\n                path = castPath(path, object);\n                var index = -1, length = path.length, result = false;\n                while(++index < length){\n                    var key = toKey(path[index]);\n                    if (!(result = object != null && hasFunc(object, key))) {\n                        break;\n                    }\n                    object = object[key];\n                }\n                if (result || ++index != length) {\n                    return result;\n                }\n                length = object == null ? 0 : object.length;\n                return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));\n            }\n            /**\n     * Initializes an array clone.\n     *\n     * @private\n     * @param {Array} array The array to clone.\n     * @returns {Array} Returns the initialized clone.\n     */ function initCloneArray(array) {\n                var length = array.length, result = new array.constructor(length);\n                // Add properties assigned by `RegExp#exec`.\n                if (length && typeof array[0] == \"string\" && hasOwnProperty.call(array, \"index\")) {\n                    result.index = array.index;\n                    result.input = array.input;\n                }\n                return result;\n            }\n            /**\n     * Initializes an object clone.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @returns {Object} Returns the initialized clone.\n     */ function initCloneObject(object) {\n                return typeof object.constructor == \"function\" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};\n            }\n            /**\n     * Initializes an object clone based on its `toStringTag`.\n     *\n     * **Note:** This function only supports cloning values with tags of\n     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @param {string} tag The `toStringTag` of the object to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the initialized clone.\n     */ function initCloneByTag(object, tag, isDeep) {\n                var Ctor = object.constructor;\n                switch(tag){\n                    case arrayBufferTag:\n                        return cloneArrayBuffer(object);\n                    case boolTag:\n                    case dateTag:\n                        return new Ctor(+object);\n                    case dataViewTag:\n                        return cloneDataView(object, isDeep);\n                    case float32Tag:\n                    case float64Tag:\n                    case int8Tag:\n                    case int16Tag:\n                    case int32Tag:\n                    case uint8Tag:\n                    case uint8ClampedTag:\n                    case uint16Tag:\n                    case uint32Tag:\n                        return cloneTypedArray(object, isDeep);\n                    case mapTag:\n                        return new Ctor;\n                    case numberTag:\n                    case stringTag:\n                        return new Ctor(object);\n                    case regexpTag:\n                        return cloneRegExp(object);\n                    case setTag:\n                        return new Ctor;\n                    case symbolTag:\n                        return cloneSymbol(object);\n                }\n            }\n            /**\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\n     *\n     * @private\n     * @param {string} source The source to modify.\n     * @returns {Array} details The details to insert.\n     * @returns {string} Returns the modified source.\n     */ function insertWrapDetails(source, details) {\n                var length = details.length;\n                if (!length) {\n                    return source;\n                }\n                var lastIndex = length - 1;\n                details[lastIndex] = (length > 1 ? \"& \" : \"\") + details[lastIndex];\n                details = details.join(length > 2 ? \", \" : \" \");\n                return source.replace(reWrapComment, \"{\\n/* [wrapped with \" + details + \"] */\\n\");\n            }\n            /**\n     * Checks if `value` is a flattenable `arguments` object or array.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n     */ function isFlattenable(value) {\n                return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);\n            }\n            /**\n     * Checks if `value` is a valid array-like index.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n     */ function isIndex(value, length) {\n                var type = typeof value;\n                length = length == null ? MAX_SAFE_INTEGER : length;\n                return !!length && (type == \"number\" || type != \"symbol\" && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\n            }\n            /**\n     * Checks if the given arguments are from an iteratee call.\n     *\n     * @private\n     * @param {*} value The potential iteratee value argument.\n     * @param {*} index The potential iteratee index or key argument.\n     * @param {*} object The potential iteratee object argument.\n     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n     *  else `false`.\n     */ function isIterateeCall(value, index, object) {\n                if (!isObject(object)) {\n                    return false;\n                }\n                var type = typeof index;\n                if (type == \"number\" ? isArrayLike(object) && isIndex(index, object.length) : type == \"string\" && index in object) {\n                    return eq(object[index], value);\n                }\n                return false;\n            }\n            /**\n     * Checks if `value` is a property name and not a property path.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n     */ function isKey(value, object) {\n                if (isArray(value)) {\n                    return false;\n                }\n                var type = typeof value;\n                if (type == \"number\" || type == \"symbol\" || type == \"boolean\" || value == null || isSymbol(value)) {\n                    return true;\n                }\n                return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object1(object);\n            }\n            /**\n     * Checks if `value` is suitable for use as unique object key.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n     */ function isKeyable(value) {\n                var type = typeof value;\n                return type == \"string\" || type == \"number\" || type == \"symbol\" || type == \"boolean\" ? value !== \"__proto__\" : value === null;\n            }\n            /**\n     * Checks if `func` has a lazy counterpart.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,\n     *  else `false`.\n     */ function isLaziable(func) {\n                var funcName = getFuncName(func), other = lodash[funcName];\n                if (typeof other != \"function\" || !(funcName in LazyWrapper.prototype)) {\n                    return false;\n                }\n                if (func === other) {\n                    return true;\n                }\n                var data = getData(other);\n                return !!data && func === data[0];\n            }\n            /**\n     * Checks if `func` has its source masked.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n     */ function isMasked(func) {\n                return !!maskSrcKey && maskSrcKey in func;\n            }\n            /**\n     * Checks if `func` is capable of being masked.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.\n     */ var isMaskable = coreJsData ? isFunction : stubFalse;\n            /**\n     * Checks if `value` is likely a prototype object.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n     */ function isPrototype(value) {\n                var Ctor = value && value.constructor, proto = typeof Ctor == \"function\" && Ctor.prototype || objectProto;\n                return value === proto;\n            }\n            /**\n     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` if suitable for strict\n     *  equality comparisons, else `false`.\n     */ function isStrictComparable(value) {\n                return value === value && !isObject(value);\n            }\n            /**\n     * A specialized version of `matchesProperty` for source values suitable\n     * for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {string} key The key of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */ function matchesStrictComparable(key, srcValue) {\n                return function(object) {\n                    if (object == null) {\n                        return false;\n                    }\n                    return object[key] === srcValue && (srcValue !== undefined$1 || key in Object1(object));\n                };\n            }\n            /**\n     * A specialized version of `_.memoize` which clears the memoized function's\n     * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n     *\n     * @private\n     * @param {Function} func The function to have its output memoized.\n     * @returns {Function} Returns the new memoized function.\n     */ function memoizeCapped(func) {\n                var result = memoize(func, function(key) {\n                    if (cache.size === MAX_MEMOIZE_SIZE) {\n                        cache.clear();\n                    }\n                    return key;\n                });\n                var cache = result.cache;\n                return result;\n            }\n            /**\n     * Merges the function metadata of `source` into `data`.\n     *\n     * Merging metadata reduces the number of wrappers used to invoke a function.\n     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n     * may be applied regardless of execution order. Methods like `_.ary` and\n     * `_.rearg` modify function arguments, making the order in which they are\n     * executed important, preventing the merging of metadata. However, we make\n     * an exception for a safe combined case where curried functions have `_.ary`\n     * and or `_.rearg` applied.\n     *\n     * @private\n     * @param {Array} data The destination metadata.\n     * @param {Array} source The source metadata.\n     * @returns {Array} Returns `data`.\n     */ function mergeData(data, source) {\n                var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);\n                var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;\n                // Exit early if metadata can't be merged.\n                if (!(isCommon || isCombo)) {\n                    return data;\n                }\n                // Use source `thisArg` if available.\n                if (srcBitmask & WRAP_BIND_FLAG) {\n                    data[2] = source[2];\n                    // Set when currying a bound function.\n                    newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;\n                }\n                // Compose partial arguments.\n                var value = source[3];\n                if (value) {\n                    var partials = data[3];\n                    data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n                    data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n                }\n                // Compose partial right arguments.\n                value = source[5];\n                if (value) {\n                    partials = data[5];\n                    data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n                    data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n                }\n                // Use source `argPos` if available.\n                value = source[7];\n                if (value) {\n                    data[7] = value;\n                }\n                // Use source `ary` if it's smaller.\n                if (srcBitmask & WRAP_ARY_FLAG) {\n                    data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n                }\n                // Use source `arity` if one is not provided.\n                if (data[9] == null) {\n                    data[9] = source[9];\n                }\n                // Use source `func` and merge bitmasks.\n                data[0] = source[0];\n                data[1] = newBitmask;\n                return data;\n            }\n            /**\n     * This function is like\n     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * except that it includes inherited enumerable properties.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */ function nativeKeysIn(object) {\n                var result = [];\n                if (object != null) {\n                    for(var key in Object1(object)){\n                        result.push(key);\n                    }\n                }\n                return result;\n            }\n            /**\n     * Converts `value` to a string using `Object.prototype.toString`.\n     *\n     * @private\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     */ function objectToString(value) {\n                return nativeObjectToString.call(value);\n            }\n            /**\n     * A specialized version of `baseRest` which transforms the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @param {Function} transform The rest array transform.\n     * @returns {Function} Returns the new function.\n     */ function overRest(func, start, transform) {\n                start = nativeMax(start === undefined$1 ? func.length - 1 : start, 0);\n                return function() {\n                    var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array1(length);\n                    while(++index < length){\n                        array[index] = args[start + index];\n                    }\n                    index = -1;\n                    var otherArgs = Array1(start + 1);\n                    while(++index < start){\n                        otherArgs[index] = args[index];\n                    }\n                    otherArgs[start] = transform(array);\n                    return apply(func, this, otherArgs);\n                };\n            }\n            /**\n     * Gets the parent value at `path` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array} path The path to get the parent value of.\n     * @returns {*} Returns the parent value.\n     */ function parent(object, path) {\n                return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n            }\n            /**\n     * Reorder `array` according to the specified indexes where the element at\n     * the first index is assigned as the first element, the element at\n     * the second index is assigned as the second element, and so on.\n     *\n     * @private\n     * @param {Array} array The array to reorder.\n     * @param {Array} indexes The arranged array indexes.\n     * @returns {Array} Returns `array`.\n     */ function reorder(array, indexes) {\n                var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);\n                while(length--){\n                    var index = indexes[length];\n                    array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined$1;\n                }\n                return array;\n            }\n            /**\n     * Gets the value at `key`, unless `key` is \"__proto__\" or \"constructor\".\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the property to get.\n     * @returns {*} Returns the property value.\n     */ function safeGet(object, key) {\n                if (key === \"constructor\" && typeof object[key] === \"function\") {\n                    return;\n                }\n                if (key == \"__proto__\") {\n                    return;\n                }\n                return object[key];\n            }\n            /**\n     * Sets metadata for `func`.\n     *\n     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\n     * period of time, it will trip its breaker and transition to an identity\n     * function to avoid garbage collection pauses in V8. See\n     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)\n     * for more details.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */ var setData = shortOut(baseSetData);\n            /**\n     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */ var setTimeout = ctxSetTimeout || function(func, wait) {\n                return root.setTimeout(func, wait);\n            };\n            /**\n     * Sets the `toString` method of `func` to return `string`.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */ var setToString = shortOut(baseSetToString);\n            /**\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\n     * with wrapper details in a comment at the top of the source body.\n     *\n     * @private\n     * @param {Function} wrapper The function to modify.\n     * @param {Function} reference The reference function.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Function} Returns `wrapper`.\n     */ function setWrapToString(wrapper, reference, bitmask) {\n                var source = reference + \"\";\n                return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));\n            }\n            /**\n     * Creates a function that'll short out and invoke `identity` instead\n     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n     * milliseconds.\n     *\n     * @private\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new shortable function.\n     */ function shortOut(func) {\n                var count = 0, lastCalled = 0;\n                return function() {\n                    var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);\n                    lastCalled = stamp;\n                    if (remaining > 0) {\n                        if (++count >= HOT_COUNT) {\n                            return arguments[0];\n                        }\n                    } else {\n                        count = 0;\n                    }\n                    return func.apply(undefined$1, arguments);\n                };\n            }\n            /**\n     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @param {number} [size=array.length] The size of `array`.\n     * @returns {Array} Returns `array`.\n     */ function shuffleSelf(array, size) {\n                var index = -1, length = array.length, lastIndex = length - 1;\n                size = size === undefined$1 ? length : size;\n                while(++index < size){\n                    var rand = baseRandom(index, lastIndex), value = array[rand];\n                    array[rand] = array[index];\n                    array[index] = value;\n                }\n                array.length = size;\n                return array;\n            }\n            /**\n     * Converts `string` to a property path array.\n     *\n     * @private\n     * @param {string} string The string to convert.\n     * @returns {Array} Returns the property path array.\n     */ var stringToPath = memoizeCapped(function(string) {\n                var result = [];\n                if (string.charCodeAt(0) === 46 /* . */ ) {\n                    result.push(\"\");\n                }\n                string.replace(rePropName, function(match, number, quote, subString) {\n                    result.push(quote ? subString.replace(reEscapeChar, \"$1\") : number || match);\n                });\n                return result;\n            });\n            /**\n     * Converts `value` to a string key if it's not a string or symbol.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {string|symbol} Returns the key.\n     */ function toKey(value) {\n                if (typeof value == \"string\" || isSymbol(value)) {\n                    return value;\n                }\n                var result = value + \"\";\n                return result == \"0\" && 1 / value == -INFINITY ? \"-0\" : result;\n            }\n            /**\n     * Converts `func` to its source code.\n     *\n     * @private\n     * @param {Function} func The function to convert.\n     * @returns {string} Returns the source code.\n     */ function toSource(func) {\n                if (func != null) {\n                    try {\n                        return funcToString.call(func);\n                    } catch (e) {}\n                    try {\n                        return func + \"\";\n                    } catch (e) {}\n                }\n                return \"\";\n            }\n            /**\n     * Updates wrapper `details` based on `bitmask` flags.\n     *\n     * @private\n     * @returns {Array} details The details to modify.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Array} Returns `details`.\n     */ function updateWrapDetails(details, bitmask) {\n                arrayEach(wrapFlags, function(pair) {\n                    var value = \"_.\" + pair[0];\n                    if (bitmask & pair[1] && !arrayIncludes(details, value)) {\n                        details.push(value);\n                    }\n                });\n                return details.sort();\n            }\n            /**\n     * Creates a clone of `wrapper`.\n     *\n     * @private\n     * @param {Object} wrapper The wrapper to clone.\n     * @returns {Object} Returns the cloned wrapper.\n     */ function wrapperClone(wrapper) {\n                if (wrapper instanceof LazyWrapper) {\n                    return wrapper.clone();\n                }\n                var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);\n                result.__actions__ = copyArray(wrapper.__actions__);\n                result.__index__ = wrapper.__index__;\n                result.__values__ = wrapper.__values__;\n                return result;\n            }\n            /*------------------------------------------------------------------------*/ /**\n     * Creates an array of elements split into groups the length of `size`.\n     * If `array` can't be split evenly, the final chunk will be the remaining\n     * elements.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to process.\n     * @param {number} [size=1] The length of each chunk\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the new array of chunks.\n     * @example\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 2);\n     * // => [['a', 'b'], ['c', 'd']]\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 3);\n     * // => [['a', 'b', 'c'], ['d']]\n     */ function chunk(array, size, guard) {\n                if (guard ? isIterateeCall(array, size, guard) : size === undefined$1) {\n                    size = 1;\n                } else {\n                    size = nativeMax(toInteger(size), 0);\n                }\n                var length = array == null ? 0 : array.length;\n                if (!length || size < 1) {\n                    return [];\n                }\n                var index = 0, resIndex = 0, result = Array1(nativeCeil(length / size));\n                while(index < length){\n                    result[resIndex++] = baseSlice(array, index, index += size);\n                }\n                return result;\n            }\n            /**\n     * Creates an array with all falsey values removed. The values `false`, `null`,\n     * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to compact.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.compact([0, 1, false, 2, '', 3]);\n     * // => [1, 2, 3]\n     */ function compact(array) {\n                var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];\n                while(++index < length){\n                    var value = array[index];\n                    if (value) {\n                        result[resIndex++] = value;\n                    }\n                }\n                return result;\n            }\n            /**\n     * Creates a new array concatenating `array` with any additional arrays\n     * and/or values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to concatenate.\n     * @param {...*} [values] The values to concatenate.\n     * @returns {Array} Returns the new concatenated array.\n     * @example\n     *\n     * var array = [1];\n     * var other = _.concat(array, 2, [3], [[4]]);\n     *\n     * console.log(other);\n     * // => [1, 2, 3, [4]]\n     *\n     * console.log(array);\n     * // => [1]\n     */ function concat() {\n                var length = arguments.length;\n                if (!length) {\n                    return [];\n                }\n                var args = Array1(length - 1), array = arguments[0], index = length;\n                while(index--){\n                    args[index - 1] = arguments[index];\n                }\n                return arrayPush(isArray(array) ? copyArray(array) : [\n                    array\n                ], baseFlatten(args, 1));\n            }\n            /**\n     * Creates an array of `array` values not included in the other given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * **Note:** Unlike `_.pullAll`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.without, _.xor\n     * @example\n     *\n     * _.difference([2, 1], [2, 3]);\n     * // => [1]\n     */ var difference = baseRest(function(array, values) {\n                return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];\n            });\n            /**\n     * This method is like `_.difference` except that it accepts `iteratee` which\n     * is invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */ var differenceBy = baseRest(function(array, values) {\n                var iteratee = last(values);\n                if (isArrayLikeObject(iteratee)) {\n                    iteratee = undefined$1;\n                }\n                return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2)) : [];\n            });\n            /**\n     * This method is like `_.difference` except that it accepts `comparator`\n     * which is invoked to compare elements of `array` to `values`. The order and\n     * references of result values are determined by the first array. The comparator\n     * is invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     *\n     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }]\n     */ var differenceWith = baseRest(function(array, values) {\n                var comparator = last(values);\n                if (isArrayLikeObject(comparator)) {\n                    comparator = undefined$1;\n                }\n                return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined$1, comparator) : [];\n            });\n            /**\n     * Creates a slice of `array` with `n` elements dropped from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.drop([1, 2, 3]);\n     * // => [2, 3]\n     *\n     * _.drop([1, 2, 3], 2);\n     * // => [3]\n     *\n     * _.drop([1, 2, 3], 5);\n     * // => []\n     *\n     * _.drop([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */ function drop(array, n, guard) {\n                var length = array == null ? 0 : array.length;\n                if (!length) {\n                    return [];\n                }\n                n = guard || n === undefined$1 ? 1 : toInteger(n);\n                return baseSlice(array, n < 0 ? 0 : n, length);\n            }\n            /**\n     * Creates a slice of `array` with `n` elements dropped from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.dropRight([1, 2, 3]);\n     * // => [1, 2]\n     *\n     * _.dropRight([1, 2, 3], 2);\n     * // => [1]\n     *\n     * _.dropRight([1, 2, 3], 5);\n     * // => []\n     *\n     * _.dropRight([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */ function dropRight(array, n, guard) {\n                var length = array == null ? 0 : array.length;\n                if (!length) {\n                    return [];\n                }\n                n = guard || n === undefined$1 ? 1 : toInteger(n);\n                n = length - n;\n                return baseSlice(array, 0, n < 0 ? 0 : n);\n            }\n            /**\n     * Creates a slice of `array` excluding elements dropped from the end.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.dropRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropRightWhile(users, ['active', false]);\n     * // => objects for ['barney']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropRightWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */ function dropRightWhile(array, predicate) {\n                return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];\n            }\n            /**\n     * Creates a slice of `array` excluding elements dropped from the beginning.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.dropWhile(users, function(o) { return !o.active; });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropWhile(users, ['active', false]);\n     * // => objects for ['pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */ function dropWhile(array, predicate) {\n                return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];\n            }\n            /**\n     * Fills elements of `array` with `value` from `start` up to, but not\n     * including, `end`.\n     *\n     * **Note:** This method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Array\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.fill(array, 'a');\n     * console.log(array);\n     * // => ['a', 'a', 'a']\n     *\n     * _.fill(Array(3), 2);\n     * // => [2, 2, 2]\n     *\n     * _.fill([4, 6, 8, 10], '*', 1, 3);\n     * // => [4, '*', '*', 10]\n     */ function fill(array, value, start, end) {\n                var length = array == null ? 0 : array.length;\n                if (!length) {\n                    return [];\n                }\n                if (start && typeof start != \"number\" && isIterateeCall(array, value, start)) {\n                    start = 0;\n                    end = length;\n                }\n                return baseFill(array, value, start, end);\n            }\n            /**\n     * This method is like `_.find` except that it returns the index of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.findIndex(users, function(o) { return o.user == 'barney'; });\n     * // => 0\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findIndex(users, { 'user': 'fred', 'active': false });\n     * // => 1\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findIndex(users, ['active', false]);\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findIndex(users, 'active');\n     * // => 2\n     */ function findIndex(array, predicate, fromIndex) {\n                var length = array == null ? 0 : array.length;\n                if (!length) {\n                    return -1;\n                }\n                var index = fromIndex == null ? 0 : toInteger(fromIndex);\n                if (index < 0) {\n                    index = nativeMax(length + index, 0);\n                }\n                return baseFindIndex(array, getIteratee(predicate, 3), index);\n            }\n            /**\n     * This method is like `_.findIndex` except that it iterates over elements\n     * of `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n     * // => 2\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n     * // => 0\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastIndex(users, ['active', false]);\n     * // => 2\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastIndex(users, 'active');\n     * // => 0\n     */ function findLastIndex(array, predicate, fromIndex) {\n                var length = array == null ? 0 : array.length;\n                if (!length) {\n                    return -1;\n                }\n                var index = length - 1;\n                if (fromIndex !== undefined$1) {\n                    index = toInteger(fromIndex);\n                    index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);\n                }\n                return baseFindIndex(array, getIteratee(predicate, 3), index, true);\n            }\n            /**\n     * Flattens `array` a single level deep.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flatten([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, [3, [4]], 5]\n     */ function flatten(array) {\n                var length = array == null ? 0 : array.length;\n                return length ? baseFlatten(array, 1) : [];\n            }\n            /**\n     * Recursively flattens `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flattenDeep([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, 3, 4, 5]\n     */ function flattenDeep(array) {\n                var length = array == null ? 0 : array.length;\n                return length ? baseFlatten(array, INFINITY) : [];\n            }\n            /**\n     * Recursively flatten `array` up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * var array = [1, [2, [3, [4]], 5]];\n     *\n     * _.flattenDepth(array, 1);\n     * // => [1, 2, [3, [4]], 5]\n     *\n     * _.flattenDepth(array, 2);\n     * // => [1, 2, 3, [4], 5]\n     */ function flattenDepth(array, depth) {\n                var length = array == null ? 0 : array.length;\n                if (!length) {\n                    return [];\n                }\n                depth = depth === undefined$1 ? 1 : toInteger(depth);\n                return baseFlatten(array, depth);\n            }\n            /**\n     * The inverse of `_.toPairs`; this method returns an object composed\n     * from key-value `pairs`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} pairs The key-value pairs.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.fromPairs([['a', 1], ['b', 2]]);\n     * // => { 'a': 1, 'b': 2 }\n     */ function fromPairs(pairs) {\n                var index = -1, length = pairs == null ? 0 : pairs.length, result = {};\n                while(++index < length){\n                    var pair = pairs[index];\n                    result[pair[0]] = pair[1];\n                }\n                return result;\n            }\n            /**\n     * Gets the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias first\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the first element of `array`.\n     * @example\n     *\n     * _.head([1, 2, 3]);\n     * // => 1\n     *\n     * _.head([]);\n     * // => undefined\n     */ function head(array) {\n                return array && array.length ? array[0] : undefined$1;\n            }\n            /**\n     * Gets the index at which the first occurrence of `value` is found in `array`\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. If `fromIndex` is negative, it's used as the\n     * offset from the end of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.indexOf([1, 2, 1, 2], 2);\n     * // => 1\n     *\n     * // Search from the `fromIndex`.\n     * _.indexOf([1, 2, 1, 2], 2, 2);\n     * // => 3\n     */ function indexOf(array, value, fromIndex) {\n                var length = array == null ? 0 : array.length;\n                if (!length) {\n                    return -1;\n                }\n                var index = fromIndex == null ? 0 : toInteger(fromIndex);\n                if (index < 0) {\n                    index = nativeMax(length + index, 0);\n                }\n                return baseIndexOf(array, value, index);\n            }\n            /**\n     * Gets all but the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.initial([1, 2, 3]);\n     * // => [1, 2]\n     */ function initial(array) {\n                var length = array == null ? 0 : array.length;\n                return length ? baseSlice(array, 0, -1) : [];\n            }\n            /**\n     * Creates an array of unique values that are included in all given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersection([2, 1], [2, 3]);\n     * // => [2]\n     */ var intersection = baseRest(function(arrays) {\n                var mapped = arrayMap(arrays, castArrayLikeObject);\n                return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];\n            });\n            /**\n     * This method is like `_.intersection` except that it accepts `iteratee`\n     * which is invoked for each element of each `arrays` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [2.1]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }]\n     */ var intersectionBy = baseRest(function(arrays) {\n                var iteratee = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);\n                if (iteratee === last(mapped)) {\n                    iteratee = undefined$1;\n                } else {\n                    mapped.pop();\n                }\n                return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee, 2)) : [];\n            });\n            /**\n     * This method is like `_.intersection` except that it accepts `comparator`\n     * which is invoked to compare elements of `arrays`. The order and references\n     * of result values are determined by the first array. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.intersectionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }]\n     */ var intersectionWith = baseRest(function(arrays) {\n                var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);\n                comparator = typeof comparator == \"function\" ? comparator : undefined$1;\n                if (comparator) {\n                    mapped.pop();\n                }\n                return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined$1, comparator) : [];\n            });\n            /**\n     * Converts all elements in `array` into a string separated by `separator`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to convert.\n     * @param {string} [separator=','] The element separator.\n     * @returns {string} Returns the joined string.\n     * @example\n     *\n     * _.join(['a', 'b', 'c'], '~');\n     * // => 'a~b~c'\n     */ function join(array, separator) {\n                return array == null ? \"\" : nativeJoin.call(array, separator);\n            }\n            /**\n     * Gets the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the last element of `array`.\n     * @example\n     *\n     * _.last([1, 2, 3]);\n     * // => 3\n     */ function last(array) {\n                var length = array == null ? 0 : array.length;\n                return length ? array[length - 1] : undefined$1;\n            }\n            /**\n     * This method is like `_.indexOf` except that it iterates over elements of\n     * `array` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.lastIndexOf([1, 2, 1, 2], 2);\n     * // => 3\n     *\n     * // Search from the `fromIndex`.\n     * _.lastIndexOf([1, 2, 1, 2], 2, 2);\n     * // => 1\n     */ function lastIndexOf(array, value, fromIndex) {\n                var length = array == null ? 0 : array.length;\n                if (!length) {\n                    return -1;\n                }\n                var index = length;\n                if (fromIndex !== undefined$1) {\n                    index = toInteger(fromIndex);\n                    index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);\n                }\n                return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);\n            }\n            /**\n     * Gets the element at index `n` of `array`. If `n` is negative, the nth\n     * element from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.11.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=0] The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     *\n     * _.nth(array, 1);\n     * // => 'b'\n     *\n     * _.nth(array, -2);\n     * // => 'c';\n     */ function nth(array, n) {\n                return array && array.length ? baseNth(array, toInteger(n)) : undefined$1;\n            }\n            /**\n     * Removes all given values from `array` using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`\n     * to remove elements from an array by predicate.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...*} [values] The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pull(array, 'a', 'c');\n     * console.log(array);\n     * // => ['b', 'b']\n     */ var pull = baseRest(pullAll);\n            /**\n     * This method is like `_.pull` except that it accepts an array of values to remove.\n     *\n     * **Note:** Unlike `_.difference`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pullAll(array, ['a', 'c']);\n     * console.log(array);\n     * // => ['b', 'b']\n     */ function pullAll(array, values) {\n                return array && array.length && values && values.length ? basePullAll(array, values) : array;\n            }\n            /**\n     * This method is like `_.pullAll` except that it accepts `iteratee` which is\n     * invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The iteratee is invoked with one argument: (value).\n     *\n     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n     *\n     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\n     * console.log(array);\n     * // => [{ 'x': 2 }]\n     */ function pullAllBy(array, values, iteratee) {\n                return array && array.length && values && values.length ? basePullAll(array, values, getIteratee(iteratee, 2)) : array;\n            }\n            /**\n     * This method is like `_.pullAll` except that it accepts `comparator` which\n     * is invoked to compare elements of `array` to `values`. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n     *\n     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\n     * console.log(array);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\n     */ function pullAllWith(array, values, comparator) {\n                return array && array.length && values && values.length ? basePullAll(array, values, undefined$1, comparator) : array;\n            }\n            /**\n     * Removes elements from `array` corresponding to `indexes` and returns an\n     * array of removed elements.\n     *\n     * **Note:** Unlike `_.at`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...(number|number[])} [indexes] The indexes of elements to remove.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     * var pulled = _.pullAt(array, [1, 3]);\n     *\n     * console.log(array);\n     * // => ['a', 'c']\n     *\n     * console.log(pulled);\n     * // => ['b', 'd']\n     */ var pullAt = flatRest(function(array, indexes) {\n                var length = array == null ? 0 : array.length, result = baseAt(array, indexes);\n                basePullAt(array, arrayMap(indexes, function(index) {\n                    return isIndex(index, length) ? +index : index;\n                }).sort(compareAscending));\n                return result;\n            });\n            /**\n     * Removes all elements from `array` that `predicate` returns truthy for\n     * and returns an array of the removed elements. The predicate is invoked\n     * with three arguments: (value, index, array).\n     *\n     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`\n     * to pull elements from an array by value.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = [1, 2, 3, 4];\n     * var evens = _.remove(array, function(n) {\n     *   return n % 2 == 0;\n     * });\n     *\n     * console.log(array);\n     * // => [1, 3]\n     *\n     * console.log(evens);\n     * // => [2, 4]\n     */ function remove(array, predicate) {\n                var result = [];\n                if (!(array && array.length)) {\n                    return result;\n                }\n                var index = -1, indexes = [], length = array.length;\n                predicate = getIteratee(predicate, 3);\n                while(++index < length){\n                    var value = array[index];\n                    if (predicate(value, index, array)) {\n                        result.push(value);\n                        indexes.push(index);\n                    }\n                }\n                basePullAt(array, indexes);\n                return result;\n            }\n            /**\n     * Reverses `array` so that the first element becomes the last, the second\n     * element becomes the second to last, and so on.\n     *\n     * **Note:** This method mutates `array` and is based on\n     * [`Array#reverse`](https://mdn.io/Array/reverse).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.reverse(array);\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */ function reverse(array) {\n                return array == null ? array : nativeReverse.call(array);\n            }\n            /**\n     * Creates a slice of `array` from `start` up to, but not including, `end`.\n     *\n     * **Note:** This method is used instead of\n     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\n     * returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */ function slice(array, start, end) {\n                var length = array == null ? 0 : array.length;\n                if (!length) {\n                    return [];\n                }\n                if (end && typeof end != \"number\" && isIterateeCall(array, start, end)) {\n                    start = 0;\n                    end = length;\n                } else {\n                    start = start == null ? 0 : toInteger(start);\n                    end = end === undefined$1 ? length : toInteger(end);\n                }\n                return baseSlice(array, start, end);\n            }\n            /**\n     * Uses a binary search to determine the lowest index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedIndex([30, 50], 40);\n     * // => 1\n     */ function sortedIndex(array, value) {\n                return baseSortedIndex(array, value);\n            }\n            /**\n     * This method is like `_.sortedIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 0\n     */ function sortedIndexBy(array, value, iteratee) {\n                return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));\n            }\n            /**\n     * This method is like `_.indexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 1\n     */ function sortedIndexOf(array, value) {\n                var length = array == null ? 0 : array.length;\n                if (length) {\n                    var index = baseSortedIndex(array, value);\n                    if (index < length && eq(array[index], value)) {\n                        return index;\n                    }\n                }\n                return -1;\n            }\n            /**\n     * This method is like `_.sortedIndex` except that it returns the highest\n     * index at which `value` should be inserted into `array` in order to\n     * maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);\n     * // => 4\n     */ function sortedLastIndex(array, value) {\n                return baseSortedIndex(array, value, true);\n            }\n            /**\n     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 1\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 1\n     */ function sortedLastIndexBy(array, value, iteratee) {\n                return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);\n            }\n            /**\n     * This method is like `_.lastIndexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 3\n     */ function sortedLastIndexOf(array, value) {\n                var length = array == null ? 0 : array.length;\n                if (length) {\n                    var index = baseSortedIndex(array, value, true) - 1;\n                    if (eq(array[index], value)) {\n                        return index;\n                    }\n                }\n                return -1;\n            }\n            /**\n     * This method is like `_.uniq` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniq([1, 1, 2]);\n     * // => [1, 2]\n     */ function sortedUniq(array) {\n                return array && array.length ? baseSortedUniq(array) : [];\n            }\n            /**\n     * This method is like `_.uniqBy` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n     * // => [1.1, 2.3]\n     */ function sortedUniqBy(array, iteratee) {\n                return array && array.length ? baseSortedUniq(array, getIteratee(iteratee, 2)) : [];\n            }\n            /**\n     * Gets all but the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.tail([1, 2, 3]);\n     * // => [2, 3]\n     */ function tail(array) {\n                var length = array == null ? 0 : array.length;\n                return length ? baseSlice(array, 1, length) : [];\n            }\n            /**\n     * Creates a slice of `array` with `n` elements taken from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.take([1, 2, 3]);\n     * // => [1]\n     *\n     * _.take([1, 2, 3], 2);\n     * // => [1, 2]\n     *\n     * _.take([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.take([1, 2, 3], 0);\n     * // => []\n     */ function take(array, n, guard) {\n                if (!(array && array.length)) {\n                    return [];\n                }\n                n = guard || n === undefined$1 ? 1 : toInteger(n);\n                return baseSlice(array, 0, n < 0 ? 0 : n);\n            }\n            /**\n     * Creates a slice of `array` with `n` elements taken from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.takeRight([1, 2, 3]);\n     * // => [3]\n     *\n     * _.takeRight([1, 2, 3], 2);\n     * // => [2, 3]\n     *\n     * _.takeRight([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.takeRight([1, 2, 3], 0);\n     * // => []\n     */ function takeRight(array, n, guard) {\n                var length = array == null ? 0 : array.length;\n                if (!length) {\n                    return [];\n                }\n                n = guard || n === undefined$1 ? 1 : toInteger(n);\n                n = length - n;\n                return baseSlice(array, n < 0 ? 0 : n, length);\n            }\n            /**\n     * Creates a slice of `array` with elements taken from the end. Elements are\n     * taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.takeRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeRightWhile(users, ['active', false]);\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeRightWhile(users, 'active');\n     * // => []\n     */ function takeRightWhile(array, predicate) {\n                return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];\n            }\n            /**\n     * Creates a slice of `array` with elements taken from the beginning. Elements\n     * are taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.takeWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeWhile(users, ['active', false]);\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeWhile(users, 'active');\n     * // => []\n     */ function takeWhile(array, predicate) {\n                return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];\n            }\n            /**\n     * Creates an array of unique values, in order, from all given arrays using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.union([2], [1, 2]);\n     * // => [2, 1]\n     */ var union = baseRest(function(arrays) {\n                return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\n            });\n            /**\n     * This method is like `_.union` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which uniqueness is computed. Result values are chosen from the first\n     * array in which the value occurs. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.unionBy([2.1], [1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */ var unionBy = baseRest(function(arrays) {\n                var iteratee = last(arrays);\n                if (isArrayLikeObject(iteratee)) {\n                    iteratee = undefined$1;\n                }\n                return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));\n            });\n            /**\n     * This method is like `_.union` except that it accepts `comparator` which\n     * is invoked to compare elements of `arrays`. Result values are chosen from\n     * the first array in which the value occurs. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.unionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */ var unionWith = baseRest(function(arrays) {\n                var comparator = last(arrays);\n                comparator = typeof comparator == \"function\" ? comparator : undefined$1;\n                return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);\n            });\n            /**\n     * Creates a duplicate-free version of an array, using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons, in which only the first occurrence of each element\n     * is kept. The order of result values is determined by the order they occur\n     * in the array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniq([2, 1, 2]);\n     * // => [2, 1]\n     */ function uniq(array) {\n                return array && array.length ? baseUniq(array) : [];\n            }\n            /**\n     * This method is like `_.uniq` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * uniqueness is computed. The order of result values is determined by the\n     * order they occur in the array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */ function uniqBy(array, iteratee) {\n                return array && array.length ? baseUniq(array, getIteratee(iteratee, 2)) : [];\n            }\n            /**\n     * This method is like `_.uniq` except that it accepts `comparator` which\n     * is invoked to compare elements of `array`. The order of result values is\n     * determined by the order they occur in the array.The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.uniqWith(objects, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n     */ function uniqWith(array, comparator) {\n                comparator = typeof comparator == \"function\" ? comparator : undefined$1;\n                return array && array.length ? baseUniq(array, undefined$1, comparator) : [];\n            }\n            /**\n     * This method is like `_.zip` except that it accepts an array of grouped\n     * elements and creates an array regrouping the elements to their pre-zip\n     * configuration.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.2.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     *\n     * _.unzip(zipped);\n     * // => [['a', 'b'], [1, 2], [true, false]]\n     */ function unzip(array) {\n                if (!(array && array.length)) {\n                    return [];\n                }\n                var length = 0;\n                array = arrayFilter(array, function(group) {\n                    if (isArrayLikeObject(group)) {\n                        length = nativeMax(group.length, length);\n                        return true;\n                    }\n                });\n                return baseTimes(length, function(index) {\n                    return arrayMap(array, baseProperty(index));\n                });\n            }\n            /**\n     * This method is like `_.unzip` except that it accepts `iteratee` to specify\n     * how regrouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  regrouped values.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n     * // => [[1, 10, 100], [2, 20, 200]]\n     *\n     * _.unzipWith(zipped, _.add);\n     * // => [3, 30, 300]\n     */ function unzipWith(array, iteratee) {\n                if (!(array && array.length)) {\n                    return [];\n                }\n                var result = unzip(array);\n                if (iteratee == null) {\n                    return result;\n                }\n                return arrayMap(result, function(group) {\n                    return apply(iteratee, undefined$1, group);\n                });\n            }\n            /**\n     * Creates an array excluding all given values using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.pull`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...*} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.xor\n     * @example\n     *\n     * _.without([2, 1, 2, 3], 1, 2);\n     * // => [3]\n     */ var without = baseRest(function(array, values) {\n                return isArrayLikeObject(array) ? baseDifference(array, values) : [];\n            });\n            /**\n     * Creates an array of unique values that is the\n     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n     * of the given arrays. The order of result values is determined by the order\n     * they occur in the arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.without\n     * @example\n     *\n     * _.xor([2, 1], [2, 3]);\n     * // => [1, 3]\n     */ var xor = baseRest(function(arrays) {\n                return baseXor(arrayFilter(arrays, isArrayLikeObject));\n            });\n            /**\n     * This method is like `_.xor` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which by which they're compared. The order of result values is determined\n     * by the order they occur in the arrays. The iteratee is invoked with one\n     * argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2, 3.4]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */ var xorBy = baseRest(function(arrays) {\n                var iteratee = last(arrays);\n                if (isArrayLikeObject(iteratee)) {\n                    iteratee = undefined$1;\n                }\n                return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));\n            });\n            /**\n     * This method is like `_.xor` except that it accepts `comparator` which is\n     * invoked to compare elements of `arrays`. The order of result values is\n     * determined by the order they occur in the arrays. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.xorWith(objects, others, _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */ var xorWith = baseRest(function(arrays) {\n                var comparator = last(arrays);\n                comparator = typeof comparator == \"function\" ? comparator : undefined$1;\n                return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);\n            });\n            /**\n     * Creates an array of grouped elements, the first of which contains the\n     * first elements of the given arrays, the second of which contains the\n     * second elements of the given arrays, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     */ var zip = baseRest(unzip);\n            /**\n     * This method is like `_.fromPairs` except that it accepts two arrays,\n     * one of property identifiers and one of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.4.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObject(['a', 'b'], [1, 2]);\n     * // => { 'a': 1, 'b': 2 }\n     */ function zipObject(props, values) {\n                return baseZipObject(props || [], values || [], assignValue);\n            }\n            /**\n     * This method is like `_.zipObject` except that it supports property paths.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n     */ function zipObjectDeep(props, values) {\n                return baseZipObject(props || [], values || [], baseSet);\n            }\n            /**\n     * This method is like `_.zip` except that it accepts `iteratee` to specify\n     * how grouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  grouped values.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n     *   return a + b + c;\n     * });\n     * // => [111, 222]\n     */ var zipWith = baseRest(function(arrays) {\n                var length = arrays.length, iteratee = length > 1 ? arrays[length - 1] : undefined$1;\n                iteratee = typeof iteratee == \"function\" ? (arrays.pop(), iteratee) : undefined$1;\n                return unzipWith(arrays, iteratee);\n            });\n            /*------------------------------------------------------------------------*/ /**\n     * Creates a `lodash` wrapper instance that wraps `value` with explicit method\n     * chain sequences enabled. The result of such sequences must be unwrapped\n     * with `_#value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Seq\n     * @param {*} value The value to wrap.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36 },\n     *   { 'user': 'fred',    'age': 40 },\n     *   { 'user': 'pebbles', 'age': 1 }\n     * ];\n     *\n     * var youngest = _\n     *   .chain(users)\n     *   .sortBy('age')\n     *   .map(function(o) {\n     *     return o.user + ' is ' + o.age;\n     *   })\n     *   .head()\n     *   .value();\n     * // => 'pebbles is 1'\n     */ function chain(value) {\n                var result = lodash(value);\n                result.__chain__ = true;\n                return result;\n            }\n            /**\n     * This method invokes `interceptor` and returns `value`. The interceptor\n     * is invoked with one argument; (value). The purpose of this method is to\n     * \"tap into\" a method chain sequence in order to modify intermediate results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * _([1, 2, 3])\n     *  .tap(function(array) {\n     *    // Mutate input array.\n     *    array.pop();\n     *  })\n     *  .reverse()\n     *  .value();\n     * // => [2, 1]\n     */ function tap(value, interceptor) {\n                interceptor(value);\n                return value;\n            }\n            /**\n     * This method is like `_.tap` except that it returns the result of `interceptor`.\n     * The purpose of this method is to \"pass thru\" values replacing intermediate\n     * results in a method chain sequence.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns the result of `interceptor`.\n     * @example\n     *\n     * _('  abc  ')\n     *  .chain()\n     *  .trim()\n     *  .thru(function(value) {\n     *    return [value];\n     *  })\n     *  .value();\n     * // => ['abc']\n     */ function thru(value, interceptor) {\n                return interceptor(value);\n            }\n            /**\n     * This method is the wrapper version of `_.at`.\n     *\n     * @name at\n     * @memberOf _\n     * @since 1.0.0\n     * @category Seq\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _(object).at(['a[0].b.c', 'a[1]']).value();\n     * // => [3, 4]\n     */ var wrapperAt = flatRest(function(paths) {\n                var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {\n                    return baseAt(object, paths);\n                };\n                if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {\n                    return this.thru(interceptor);\n                }\n                value = value.slice(start, +start + (length ? 1 : 0));\n                value.__actions__.push({\n                    \"func\": thru,\n                    \"args\": [\n                        interceptor\n                    ],\n                    \"thisArg\": undefined$1\n                });\n                return new LodashWrapper(value, this.__chain__).thru(function(array) {\n                    if (length && !array.length) {\n                        array.push(undefined$1);\n                    }\n                    return array;\n                });\n            });\n            /**\n     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.\n     *\n     * @name chain\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 }\n     * ];\n     *\n     * // A sequence without explicit chaining.\n     * _(users).head();\n     * // => { 'user': 'barney', 'age': 36 }\n     *\n     * // A sequence with explicit chaining.\n     * _(users)\n     *   .chain()\n     *   .head()\n     *   .pick('user')\n     *   .value();\n     * // => { 'user': 'barney' }\n     */ function wrapperChain() {\n                return chain(this);\n            }\n            /**\n     * Executes the chain sequence and returns the wrapped result.\n     *\n     * @name commit\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2];\n     * var wrapped = _(array).push(3);\n     *\n     * console.log(array);\n     * // => [1, 2]\n     *\n     * wrapped = wrapped.commit();\n     * console.log(array);\n     * // => [1, 2, 3]\n     *\n     * wrapped.last();\n     * // => 3\n     *\n     * console.log(array);\n     * // => [1, 2, 3]\n     */ function wrapperCommit() {\n                return new LodashWrapper(this.value(), this.__chain__);\n            }\n            /**\n     * Gets the next value on a wrapped object following the\n     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).\n     *\n     * @name next\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the next iterator value.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 1 }\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 2 }\n     *\n     * wrapped.next();\n     * // => { 'done': true, 'value': undefined }\n     */ function wrapperNext() {\n                if (this.__values__ === undefined$1) {\n                    this.__values__ = toArray(this.value());\n                }\n                var done = this.__index__ >= this.__values__.length, value = done ? undefined$1 : this.__values__[this.__index__++];\n                return {\n                    \"done\": done,\n                    \"value\": value\n                };\n            }\n            /**\n     * Enables the wrapper to be iterable.\n     *\n     * @name Symbol.iterator\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the wrapper object.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped[Symbol.iterator]() === wrapped;\n     * // => true\n     *\n     * Array.from(wrapped);\n     * // => [1, 2]\n     */ function wrapperToIterator() {\n                return this;\n            }\n            /**\n     * Creates a clone of the chain sequence planting `value` as the wrapped value.\n     *\n     * @name plant\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @param {*} value The value to plant.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2]).map(square);\n     * var other = wrapped.plant([3, 4]);\n     *\n     * other.value();\n     * // => [9, 16]\n     *\n     * wrapped.value();\n     * // => [1, 4]\n     */ function wrapperPlant(value) {\n                var result, parent = this;\n                while(parent instanceof baseLodash){\n                    var clone = wrapperClone(parent);\n                    clone.__index__ = 0;\n                    clone.__values__ = undefined$1;\n                    if (result) {\n                        previous.__wrapped__ = clone;\n                    } else {\n                        result = clone;\n                    }\n                    var previous = clone;\n                    parent = parent.__wrapped__;\n                }\n                previous.__wrapped__ = value;\n                return result;\n            }\n            /**\n     * This method is the wrapper version of `_.reverse`.\n     *\n     * **Note:** This method mutates the wrapped array.\n     *\n     * @name reverse\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _(array).reverse().value()\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */ function wrapperReverse() {\n                var value = this.__wrapped__;\n                if (value instanceof LazyWrapper) {\n                    var wrapped = value;\n                    if (this.__actions__.length) {\n                        wrapped = new LazyWrapper(this);\n                    }\n                    wrapped = wrapped.reverse();\n                    wrapped.__actions__.push({\n                        \"func\": thru,\n                        \"args\": [\n                            reverse\n                        ],\n                        \"thisArg\": undefined$1\n                    });\n                    return new LodashWrapper(wrapped, this.__chain__);\n                }\n                return this.thru(reverse);\n            }\n            /**\n     * Executes the chain sequence to resolve the unwrapped value.\n     *\n     * @name value\n     * @memberOf _\n     * @since 0.1.0\n     * @alias toJSON, valueOf\n     * @category Seq\n     * @returns {*} Returns the resolved unwrapped value.\n     * @example\n     *\n     * _([1, 2, 3]).value();\n     * // => [1, 2, 3]\n     */ function wrapperValue() {\n                return baseWrapperValue(this.__wrapped__, this.__actions__);\n            }\n            /*------------------------------------------------------------------------*/ /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the number of times the key was returned by `iteratee`. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.countBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': 1, '6': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.countBy(['one', 'two', 'three'], 'length');\n     * // => { '3': 2, '5': 1 }\n     */ var countBy = createAggregator(function(result, value, key) {\n                if (hasOwnProperty.call(result, key)) {\n                    ++result[key];\n                } else {\n                    baseAssignValue(result, key, 1);\n                }\n            });\n            /**\n     * Checks if `predicate` returns truthy for **all** elements of `collection`.\n     * Iteration is stopped once `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * **Note:** This method returns `true` for\n     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n     * elements of empty collections.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.every([true, 1, null, 'yes'], Boolean);\n     * // => false\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.every(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.every(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.every(users, 'active');\n     * // => false\n     */ function every(collection, predicate, guard) {\n                var func = isArray(collection) ? arrayEvery : baseEvery;\n                if (guard && isIterateeCall(collection, predicate, guard)) {\n                    predicate = undefined$1;\n                }\n                return func(collection, getIteratee(predicate, 3));\n            }\n            /**\n     * Iterates over elements of `collection`, returning an array of all elements\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * **Note:** Unlike `_.remove`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.reject\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * _.filter(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, { 'age': 36, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.filter(users, 'active');\n     * // => objects for ['barney']\n     *\n     * // Combining several predicates using `_.overEvery` or `_.overSome`.\n     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));\n     * // => objects for ['fred', 'barney']\n     */ function filter(collection, predicate) {\n                var func = isArray(collection) ? arrayFilter : baseFilter;\n                return func(collection, getIteratee(predicate, 3));\n            }\n            /**\n     * Iterates over elements of `collection`, returning the first element\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': true },\n     *   { 'user': 'fred',    'age': 40, 'active': false },\n     *   { 'user': 'pebbles', 'age': 1,  'active': true }\n     * ];\n     *\n     * _.find(users, function(o) { return o.age < 40; });\n     * // => object for 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.find(users, { 'age': 1, 'active': true });\n     * // => object for 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.find(users, ['active', false]);\n     * // => object for 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.find(users, 'active');\n     * // => object for 'barney'\n     */ var find = createFind(findIndex);\n            /**\n     * This method is like `_.find` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=collection.length-1] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * _.findLast([1, 2, 3, 4], function(n) {\n     *   return n % 2 == 1;\n     * });\n     * // => 3\n     */ var findLast = createFind(findLastIndex);\n            /**\n     * Creates a flattened array of values by running each element in `collection`\n     * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n     * with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [n, n];\n     * }\n     *\n     * _.flatMap([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */ function flatMap(collection, iteratee) {\n                return baseFlatten(map(collection, iteratee), 1);\n            }\n            /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDeep([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */ function flatMapDeep(collection, iteratee) {\n                return baseFlatten(map(collection, iteratee), INFINITY);\n            }\n            /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDepth([1, 2], duplicate, 2);\n     * // => [[1, 1], [2, 2]]\n     */ function flatMapDepth(collection, iteratee, depth) {\n                depth = depth === undefined$1 ? 1 : toInteger(depth);\n                return baseFlatten(map(collection, iteratee), depth);\n            }\n            /**\n     * Iterates over elements of `collection` and invokes `iteratee` for each element.\n     * The iteratee is invoked with three arguments: (value, index|key, collection).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n     * property are iterated like arrays. To avoid this behavior use `_.forIn`\n     * or `_.forOwn` for object iteration.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias each\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEachRight\n     * @example\n     *\n     * _.forEach([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `1` then `2`.\n     *\n     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */ function forEach(collection, iteratee) {\n                var func = isArray(collection) ? arrayEach : baseEach;\n                return func(collection, getIteratee(iteratee, 3));\n            }\n            /**\n     * This method is like `_.forEach` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @alias eachRight\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEach\n     * @example\n     *\n     * _.forEachRight([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `2` then `1`.\n     */ function forEachRight(collection, iteratee) {\n                var func = isArray(collection) ? arrayEachRight : baseEachRight;\n                return func(collection, getIteratee(iteratee, 3));\n            }\n            /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The order of grouped values\n     * is determined by the order they occur in `collection`. The corresponding\n     * value of each key is an array of elements responsible for generating the\n     * key. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': [4.2], '6': [6.1, 6.3] }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.groupBy(['one', 'two', 'three'], 'length');\n     * // => { '3': ['one', 'two'], '5': ['three'] }\n     */ var groupBy = createAggregator(function(result, value, key) {\n                if (hasOwnProperty.call(result, key)) {\n                    result[key].push(value);\n                } else {\n                    baseAssignValue(result, key, [\n                        value\n                    ]);\n                }\n            });\n            /**\n     * Checks if `value` is in `collection`. If `collection` is a string, it's\n     * checked for a substring of `value`, otherwise\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * is used for equality comparisons. If `fromIndex` is negative, it's used as\n     * the offset from the end of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {boolean} Returns `true` if `value` is found, else `false`.\n     * @example\n     *\n     * _.includes([1, 2, 3], 1);\n     * // => true\n     *\n     * _.includes([1, 2, 3], 1, 2);\n     * // => false\n     *\n     * _.includes({ 'a': 1, 'b': 2 }, 1);\n     * // => true\n     *\n     * _.includes('abcd', 'bc');\n     * // => true\n     */ function includes(collection, value, fromIndex, guard) {\n                collection = isArrayLike(collection) ? collection : values(collection);\n                fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;\n                var length = collection.length;\n                if (fromIndex < 0) {\n                    fromIndex = nativeMax(length + fromIndex, 0);\n                }\n                return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;\n            }\n            /**\n     * Invokes the method at `path` of each element in `collection`, returning\n     * an array of the results of each invoked method. Any additional arguments\n     * are provided to each invoked method. If `path` is a function, it's invoked\n     * for, and `this` bound to, each element in `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array|Function|string} path The path of the method to invoke or\n     *  the function invoked per iteration.\n     * @param {...*} [args] The arguments to invoke each method with.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n     * // => [[1, 5, 7], [1, 2, 3]]\n     *\n     * _.invokeMap([123, 456], String.prototype.split, '');\n     * // => [['1', '2', '3'], ['4', '5', '6']]\n     */ var invokeMap = baseRest(function(collection, path, args) {\n                var index = -1, isFunc = typeof path == \"function\", result = isArrayLike(collection) ? Array1(collection.length) : [];\n                baseEach(collection, function(value) {\n                    result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);\n                });\n                return result;\n            });\n            /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the last element responsible for generating the key. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * var array = [\n     *   { 'dir': 'left', 'code': 97 },\n     *   { 'dir': 'right', 'code': 100 }\n     * ];\n     *\n     * _.keyBy(array, function(o) {\n     *   return String.fromCharCode(o.code);\n     * });\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n     *\n     * _.keyBy(array, 'dir');\n     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n     */ var keyBy = createAggregator(function(result, value, key) {\n                baseAssignValue(result, key, value);\n            });\n            /**\n     * Creates an array of values by running each element in `collection` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n     *\n     * The guarded methods are:\n     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * _.map([4, 8], square);\n     * // => [16, 64]\n     *\n     * _.map({ 'a': 4, 'b': 8 }, square);\n     * // => [16, 64] (iteration order is not guaranteed)\n     *\n     * var users = [\n     *   { 'user': 'barney' },\n     *   { 'user': 'fred' }\n     * ];\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, 'user');\n     * // => ['barney', 'fred']\n     */ function map(collection, iteratee) {\n                var func = isArray(collection) ? arrayMap : baseMap;\n                return func(collection, getIteratee(iteratee, 3));\n            }\n            /**\n     * This method is like `_.sortBy` except that it allows specifying the sort\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\n     * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n     * descending or \"asc\" for ascending sort order of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @param {string[]} [orders] The sort orders of `iteratees`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 34 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 36 }\n     * ];\n     *\n     * // Sort by `user` in ascending order and by `age` in descending order.\n     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     */ function orderBy(collection, iteratees, orders, guard) {\n                if (collection == null) {\n                    return [];\n                }\n                if (!isArray(iteratees)) {\n                    iteratees = iteratees == null ? [] : [\n                        iteratees\n                    ];\n                }\n                orders = guard ? undefined$1 : orders;\n                if (!isArray(orders)) {\n                    orders = orders == null ? [] : [\n                        orders\n                    ];\n                }\n                return baseOrderBy(collection, iteratees, orders);\n            }\n            /**\n     * Creates an array of elements split into two groups, the first of which\n     * contains elements `predicate` returns truthy for, the second of which\n     * contains elements `predicate` returns falsey for. The predicate is\n     * invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of grouped elements.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': false },\n     *   { 'user': 'fred',    'age': 40, 'active': true },\n     *   { 'user': 'pebbles', 'age': 1,  'active': false }\n     * ];\n     *\n     * _.partition(users, function(o) { return o.active; });\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.partition(users, { 'age': 1, 'active': false });\n     * // => objects for [['pebbles'], ['barney', 'fred']]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.partition(users, ['active', false]);\n     * // => objects for [['barney', 'pebbles'], ['fred']]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.partition(users, 'active');\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     */ var partition = createAggregator(function(result, value, key) {\n                result[key ? 0 : 1].push(value);\n            }, function() {\n                return [\n                    [],\n                    []\n                ];\n            });\n            /**\n     * Reduces `collection` to a value which is the accumulated result of running\n     * each element in `collection` thru `iteratee`, where each successive\n     * invocation is supplied the return value of the previous. If `accumulator`\n     * is not given, the first element of `collection` is used as the initial\n     * value. The iteratee is invoked with four arguments:\n     * (accumulator, value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.reduce`, `_.reduceRight`, and `_.transform`.\n     *\n     * The guarded methods are:\n     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n     * and `sortBy`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduceRight\n     * @example\n     *\n     * _.reduce([1, 2], function(sum, n) {\n     *   return sum + n;\n     * }, 0);\n     * // => 3\n     *\n     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     *   return result;\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n     */ function reduce(collection, iteratee, accumulator) {\n                var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;\n                return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);\n            }\n            /**\n     * This method is like `_.reduce` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduce\n     * @example\n     *\n     * var array = [[0, 1], [2, 3], [4, 5]];\n     *\n     * _.reduceRight(array, function(flattened, other) {\n     *   return flattened.concat(other);\n     * }, []);\n     * // => [4, 5, 2, 3, 0, 1]\n     */ function reduceRight(collection, iteratee, accumulator) {\n                var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;\n                return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);\n            }\n            /**\n     * The opposite of `_.filter`; this method returns the elements of `collection`\n     * that `predicate` does **not** return truthy for.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.filter\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': true }\n     * ];\n     *\n     * _.reject(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.reject(users, { 'age': 40, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.reject(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.reject(users, 'active');\n     * // => objects for ['barney']\n     */ function reject(collection, predicate) {\n                var func = isArray(collection) ? arrayFilter : baseFilter;\n                return func(collection, negate(getIteratee(predicate, 3)));\n            }\n            /**\n     * Gets a random element from `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     * @example\n     *\n     * _.sample([1, 2, 3, 4]);\n     * // => 2\n     */ function sample(collection) {\n                var func = isArray(collection) ? arraySample : baseSample;\n                return func(collection);\n            }\n            /**\n     * Gets `n` random elements at unique keys from `collection` up to the\n     * size of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} [n=1] The number of elements to sample.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the random elements.\n     * @example\n     *\n     * _.sampleSize([1, 2, 3], 2);\n     * // => [3, 1]\n     *\n     * _.sampleSize([1, 2, 3], 4);\n     * // => [2, 3, 1]\n     */ function sampleSize(collection, n, guard) {\n                if (guard ? isIterateeCall(collection, n, guard) : n === undefined$1) {\n                    n = 1;\n                } else {\n                    n = toInteger(n);\n                }\n                var func = isArray(collection) ? arraySampleSize : baseSampleSize;\n                return func(collection, n);\n            }\n            /**\n     * Creates an array of shuffled values, using a version of the\n     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     * @example\n     *\n     * _.shuffle([1, 2, 3, 4]);\n     * // => [4, 1, 3, 2]\n     */ function shuffle(collection) {\n                var func = isArray(collection) ? arrayShuffle : baseShuffle;\n                return func(collection);\n            }\n            /**\n     * Gets the size of `collection` by returning its length for array-like\n     * values or the number of own enumerable string keyed properties for objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @returns {number} Returns the collection size.\n     * @example\n     *\n     * _.size([1, 2, 3]);\n     * // => 3\n     *\n     * _.size({ 'a': 1, 'b': 2 });\n     * // => 2\n     *\n     * _.size('pebbles');\n     * // => 7\n     */ function size(collection) {\n                if (collection == null) {\n                    return 0;\n                }\n                if (isArrayLike(collection)) {\n                    return isString(collection) ? stringSize(collection) : collection.length;\n                }\n                var tag = getTag(collection);\n                if (tag == mapTag || tag == setTag) {\n                    return collection.size;\n                }\n                return baseKeys(collection).length;\n            }\n            /**\n     * Checks if `predicate` returns truthy for **any** element of `collection`.\n     * Iteration is stopped once `predicate` returns truthy. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.some([null, 0, 'yes', false], Boolean);\n     * // => true\n     *\n     * var users = [\n     *   { 'user': 'barney', 'active': true },\n     *   { 'user': 'fred',   'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.some(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.some(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.some(users, 'active');\n     * // => true\n     */ function some(collection, predicate, guard) {\n                var func = isArray(collection) ? arraySome : baseSome;\n                if (guard && isIterateeCall(collection, predicate, guard)) {\n                    predicate = undefined$1;\n                }\n                return func(collection, getIteratee(predicate, 3));\n            }\n            /**\n     * Creates an array of elements, sorted in ascending order by the results of\n     * running each element in a collection thru each iteratee. This method\n     * performs a stable sort, that is, it preserves the original sort order of\n     * equal elements. The iteratees are invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 30 },\n     *   { 'user': 'barney', 'age': 34 }\n     * ];\n     *\n     * _.sortBy(users, [function(o) { return o.user; }]);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]\n     *\n     * _.sortBy(users, ['user', 'age']);\n     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]\n     */ var sortBy = baseRest(function(collection, iteratees) {\n                if (collection == null) {\n                    return [];\n                }\n                var length = iteratees.length;\n                if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n                    iteratees = [];\n                } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n                    iteratees = [\n                        iteratees[0]\n                    ];\n                }\n                return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n            });\n            /*------------------------------------------------------------------------*/ /**\n     * Gets the timestamp of the number of milliseconds that have elapsed since\n     * the Unix epoch (1 January 1970 00:00:00 UTC).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Date\n     * @returns {number} Returns the timestamp.\n     * @example\n     *\n     * _.defer(function(stamp) {\n     *   console.log(_.now() - stamp);\n     * }, _.now());\n     * // => Logs the number of milliseconds it took for the deferred invocation.\n     */ var now = ctxNow || function() {\n                return root.Date.now();\n            };\n            /*------------------------------------------------------------------------*/ /**\n     * The opposite of `_.before`; this method creates a function that invokes\n     * `func` once it's called `n` or more times.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {number} n The number of calls before `func` is invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var saves = ['profile', 'settings'];\n     *\n     * var done = _.after(saves.length, function() {\n     *   console.log('done saving!');\n     * });\n     *\n     * _.forEach(saves, function(type) {\n     *   asyncSave({ 'type': type, 'complete': done });\n     * });\n     * // => Logs 'done saving!' after the two async saves have completed.\n     */ function after(n, func) {\n                if (typeof func != \"function\") {\n                    throw new TypeError(FUNC_ERROR_TEXT);\n                }\n                n = toInteger(n);\n                return function() {\n                    if (--n < 1) {\n                        return func.apply(this, arguments);\n                    }\n                };\n            }\n            /**\n     * Creates a function that invokes `func`, with up to `n` arguments,\n     * ignoring any additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @param {number} [n=func.length] The arity cap.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.ary(parseInt, 1));\n     * // => [6, 8, 10]\n     */ function ary(func, n, guard) {\n                n = guard ? undefined$1 : n;\n                n = func && n == null ? func.length : n;\n                return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);\n            }\n            /**\n     * Creates a function that invokes `func`, with the `this` binding and arguments\n     * of the created function, while it's called less than `n` times. Subsequent\n     * calls to the created function return the result of the last `func` invocation.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {number} n The number of calls at which `func` is no longer invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * jQuery(element).on('click', _.before(5, addContactToList));\n     * // => Allows adding up to 4 contacts to the list.\n     */ function before(n, func) {\n                var result;\n                if (typeof func != \"function\") {\n                    throw new TypeError(FUNC_ERROR_TEXT);\n                }\n                n = toInteger(n);\n                return function() {\n                    if (--n > 0) {\n                        result = func.apply(this, arguments);\n                    }\n                    if (n <= 1) {\n                        func = undefined$1;\n                    }\n                    return result;\n                };\n            }\n            /**\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`\n     * and `partials` prepended to the arguments it receives.\n     *\n     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** Unlike native `Function#bind`, this method doesn't set the \"length\"\n     * property of bound functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to bind.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * function greet(greeting, punctuation) {\n     *   return greeting + ' ' + this.user + punctuation;\n     * }\n     *\n     * var object = { 'user': 'fred' };\n     *\n     * var bound = _.bind(greet, object, 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bind(greet, object, _, '!');\n     * bound('hi');\n     * // => 'hi fred!'\n     */ var bind = baseRest(function(func, thisArg, partials) {\n                var bitmask = WRAP_BIND_FLAG;\n                if (partials.length) {\n                    var holders = replaceHolders(partials, getHolder(bind));\n                    bitmask |= WRAP_PARTIAL_FLAG;\n                }\n                return createWrap(func, bitmask, thisArg, partials, holders);\n            });\n            /**\n     * Creates a function that invokes the method at `object[key]` with `partials`\n     * prepended to the arguments it receives.\n     *\n     * This method differs from `_.bind` by allowing bound functions to reference\n     * methods that may be redefined or don't yet exist. See\n     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n     * for more details.\n     *\n     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Function\n     * @param {Object} object The object to invoke the method on.\n     * @param {string} key The key of the method.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * var object = {\n     *   'user': 'fred',\n     *   'greet': function(greeting, punctuation) {\n     *     return greeting + ' ' + this.user + punctuation;\n     *   }\n     * };\n     *\n     * var bound = _.bindKey(object, 'greet', 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * object.greet = function(greeting, punctuation) {\n     *   return greeting + 'ya ' + this.user + punctuation;\n     * };\n     *\n     * bound('!');\n     * // => 'hiya fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bindKey(object, 'greet', _, '!');\n     * bound('hi');\n     * // => 'hiya fred!'\n     */ var bindKey = baseRest(function(object, key, partials) {\n                var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;\n                if (partials.length) {\n                    var holders = replaceHolders(partials, getHolder(bindKey));\n                    bitmask |= WRAP_PARTIAL_FLAG;\n                }\n                return createWrap(key, bitmask, object, partials, holders);\n            });\n            /**\n     * Creates a function that accepts arguments of `func` and either invokes\n     * `func` returning its result, if at least `arity` number of arguments have\n     * been provided, or returns a function that accepts the remaining `func`\n     * arguments, and so on. The arity of `func` may be specified if `func.length`\n     * is not sufficient.\n     *\n     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curry(abc);\n     *\n     * curried(1)(2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(1)(_, 3)(2);\n     * // => [1, 2, 3]\n     */ function curry(func, arity, guard) {\n                arity = guard ? undefined$1 : arity;\n                var result = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);\n                result.placeholder = curry.placeholder;\n                return result;\n            }\n            /**\n     * This method is like `_.curry` except that arguments are applied to `func`\n     * in the manner of `_.partialRight` instead of `_.partial`.\n     *\n     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curryRight(abc);\n     *\n     * curried(3)(2)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(2, 3)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(3)(1, _)(2);\n     * // => [1, 2, 3]\n     */ function curryRight(func, arity, guard) {\n                arity = guard ? undefined$1 : arity;\n                var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);\n                result.placeholder = curryRight.placeholder;\n                return result;\n            }\n            /**\n     * Creates a debounced function that delays invoking `func` until after `wait`\n     * milliseconds have elapsed since the last time the debounced function was\n     * invoked. The debounced function comes with a `cancel` method to cancel\n     * delayed `func` invocations and a `flush` method to immediately invoke them.\n     * Provide `options` to indicate whether `func` should be invoked on the\n     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n     * with the last arguments provided to the debounced function. Subsequent\n     * calls to the debounced function return the result of the last `func`\n     * invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the debounced function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.debounce` and `_.throttle`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to debounce.\n     * @param {number} [wait=0] The number of milliseconds to delay.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=false]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {number} [options.maxWait]\n     *  The maximum time `func` is allowed to be delayed before it's invoked.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new debounced function.\n     * @example\n     *\n     * // Avoid costly calculations while the window size is in flux.\n     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n     *\n     * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n     * jQuery(element).on('click', _.debounce(sendMail, 300, {\n     *   'leading': true,\n     *   'trailing': false\n     * }));\n     *\n     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n     * var source = new EventSource('/stream');\n     * jQuery(source).on('message', debounced);\n     *\n     * // Cancel the trailing debounced invocation.\n     * jQuery(window).on('popstate', debounced.cancel);\n     */ function debounce(func, wait, options) {\n                var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;\n                if (typeof func != \"function\") {\n                    throw new TypeError(FUNC_ERROR_TEXT);\n                }\n                wait = toNumber(wait) || 0;\n                if (isObject(options)) {\n                    leading = !!options.leading;\n                    maxing = \"maxWait\" in options;\n                    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n                    trailing = \"trailing\" in options ? !!options.trailing : trailing;\n                }\n                function invokeFunc(time) {\n                    var args = lastArgs, thisArg = lastThis;\n                    lastArgs = lastThis = undefined$1;\n                    lastInvokeTime = time;\n                    result = func.apply(thisArg, args);\n                    return result;\n                }\n                function leadingEdge(time) {\n                    // Reset any `maxWait` timer.\n                    lastInvokeTime = time;\n                    // Start the timer for the trailing edge.\n                    timerId = setTimeout(timerExpired, wait);\n                    // Invoke the leading edge.\n                    return leading ? invokeFunc(time) : result;\n                }\n                function remainingWait(time) {\n                    var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;\n                    return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;\n                }\n                function shouldInvoke(time) {\n                    var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;\n                    // Either this is the first call, activity has stopped and we're at the\n                    // trailing edge, the system time has gone backwards and we're treating\n                    // it as the trailing edge, or we've hit the `maxWait` limit.\n                    return lastCallTime === undefined$1 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;\n                }\n                function timerExpired() {\n                    var time = now();\n                    if (shouldInvoke(time)) {\n                        return trailingEdge(time);\n                    }\n                    // Restart the timer.\n                    timerId = setTimeout(timerExpired, remainingWait(time));\n                }\n                function trailingEdge(time) {\n                    timerId = undefined$1;\n                    // Only invoke if we have `lastArgs` which means `func` has been\n                    // debounced at least once.\n                    if (trailing && lastArgs) {\n                        return invokeFunc(time);\n                    }\n                    lastArgs = lastThis = undefined$1;\n                    return result;\n                }\n                function cancel() {\n                    if (timerId !== undefined$1) {\n                        clearTimeout(timerId);\n                    }\n                    lastInvokeTime = 0;\n                    lastArgs = lastCallTime = lastThis = timerId = undefined$1;\n                }\n                function flush() {\n                    return timerId === undefined$1 ? result : trailingEdge(now());\n                }\n                function debounced() {\n                    var time = now(), isInvoking = shouldInvoke(time);\n                    lastArgs = arguments;\n                    lastThis = this;\n                    lastCallTime = time;\n                    if (isInvoking) {\n                        if (timerId === undefined$1) {\n                            return leadingEdge(lastCallTime);\n                        }\n                        if (maxing) {\n                            // Handle invocations in a tight loop.\n                            clearTimeout(timerId);\n                            timerId = setTimeout(timerExpired, wait);\n                            return invokeFunc(lastCallTime);\n                        }\n                    }\n                    if (timerId === undefined$1) {\n                        timerId = setTimeout(timerExpired, wait);\n                    }\n                    return result;\n                }\n                debounced.cancel = cancel;\n                debounced.flush = flush;\n                return debounced;\n            }\n            /**\n     * Defers invoking the `func` until the current call stack has cleared. Any\n     * additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to defer.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.defer(function(text) {\n     *   console.log(text);\n     * }, 'deferred');\n     * // => Logs 'deferred' after one millisecond.\n     */ var defer = baseRest(function(func, args) {\n                return baseDelay(func, 1, args);\n            });\n            /**\n     * Invokes `func` after `wait` milliseconds. Any additional arguments are\n     * provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.delay(function(text) {\n     *   console.log(text);\n     * }, 1000, 'later');\n     * // => Logs 'later' after one second.\n     */ var delay = baseRest(function(func, wait, args) {\n                return baseDelay(func, toNumber(wait) || 0, args);\n            });\n            /**\n     * Creates a function that invokes `func` with arguments reversed.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to flip arguments for.\n     * @returns {Function} Returns the new flipped function.\n     * @example\n     *\n     * var flipped = _.flip(function() {\n     *   return _.toArray(arguments);\n     * });\n     *\n     * flipped('a', 'b', 'c', 'd');\n     * // => ['d', 'c', 'b', 'a']\n     */ function flip(func) {\n                return createWrap(func, WRAP_FLIP_FLAG);\n            }\n            /**\n     * Creates a function that memoizes the result of `func`. If `resolver` is\n     * provided, it determines the cache key for storing the result based on the\n     * arguments provided to the memoized function. By default, the first argument\n     * provided to the memoized function is used as the map cache key. The `func`\n     * is invoked with the `this` binding of the memoized function.\n     *\n     * **Note:** The cache is exposed as the `cache` property on the memoized\n     * function. Its creation may be customized by replacing the `_.memoize.Cache`\n     * constructor with one whose instances implement the\n     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n     * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to have its output memoized.\n     * @param {Function} [resolver] The function to resolve the cache key.\n     * @returns {Function} Returns the new memoized function.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     * var other = { 'c': 3, 'd': 4 };\n     *\n     * var values = _.memoize(_.values);\n     * values(object);\n     * // => [1, 2]\n     *\n     * values(other);\n     * // => [3, 4]\n     *\n     * object.a = 2;\n     * values(object);\n     * // => [1, 2]\n     *\n     * // Modify the result cache.\n     * values.cache.set(object, ['a', 'b']);\n     * values(object);\n     * // => ['a', 'b']\n     *\n     * // Replace `_.memoize.Cache`.\n     * _.memoize.Cache = WeakMap;\n     */ function memoize(func, resolver) {\n                if (typeof func != \"function\" || resolver != null && typeof resolver != \"function\") {\n                    throw new TypeError(FUNC_ERROR_TEXT);\n                }\n                var memoized = function() {\n                    var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;\n                    if (cache.has(key)) {\n                        return cache.get(key);\n                    }\n                    var result = func.apply(this, args);\n                    memoized.cache = cache.set(key, result) || cache;\n                    return result;\n                };\n                memoized.cache = new (memoize.Cache || MapCache);\n                return memoized;\n            }\n            // Expose `MapCache`.\n            memoize.Cache = MapCache;\n            /**\n     * Creates a function that negates the result of the predicate `func`. The\n     * `func` predicate is invoked with the `this` binding and arguments of the\n     * created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} predicate The predicate to negate.\n     * @returns {Function} Returns the new negated function.\n     * @example\n     *\n     * function isEven(n) {\n     *   return n % 2 == 0;\n     * }\n     *\n     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n     * // => [1, 3, 5]\n     */ function negate(predicate) {\n                if (typeof predicate != \"function\") {\n                    throw new TypeError(FUNC_ERROR_TEXT);\n                }\n                return function() {\n                    var args = arguments;\n                    switch(args.length){\n                        case 0:\n                            return !predicate.call(this);\n                        case 1:\n                            return !predicate.call(this, args[0]);\n                        case 2:\n                            return !predicate.call(this, args[0], args[1]);\n                        case 3:\n                            return !predicate.call(this, args[0], args[1], args[2]);\n                    }\n                    return !predicate.apply(this, args);\n                };\n            }\n            /**\n     * Creates a function that is restricted to invoking `func` once. Repeat calls\n     * to the function return the value of the first invocation. The `func` is\n     * invoked with the `this` binding and arguments of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var initialize = _.once(createApplication);\n     * initialize();\n     * initialize();\n     * // => `createApplication` is invoked once\n     */ function once(func) {\n                return before(2, func);\n            }\n            /**\n     * Creates a function that invokes `func` with its arguments transformed.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to wrap.\n     * @param {...(Function|Function[])} [transforms=[_.identity]]\n     *  The argument transforms.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * function doubled(n) {\n     *   return n * 2;\n     * }\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var func = _.overArgs(function(x, y) {\n     *   return [x, y];\n     * }, [square, doubled]);\n     *\n     * func(9, 3);\n     * // => [81, 6]\n     *\n     * func(10, 5);\n     * // => [100, 10]\n     */ var overArgs = castRest(function(func, transforms) {\n                transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));\n                var funcsLength = transforms.length;\n                return baseRest(function(args) {\n                    var index = -1, length = nativeMin(args.length, funcsLength);\n                    while(++index < length){\n                        args[index] = transforms[index].call(this, args[index]);\n                    }\n                    return apply(func, this, args);\n                });\n            });\n            /**\n     * Creates a function that invokes `func` with `partials` prepended to the\n     * arguments it receives. This method is like `_.bind` except it does **not**\n     * alter the `this` binding.\n     *\n     * The `_.partial.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.2.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var sayHelloTo = _.partial(greet, 'hello');\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     *\n     * // Partially applied with placeholders.\n     * var greetFred = _.partial(greet, _, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     */ var partial = baseRest(function(func, partials) {\n                var holders = replaceHolders(partials, getHolder(partial));\n                return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);\n            });\n            /**\n     * This method is like `_.partial` except that partially applied arguments\n     * are appended to the arguments it receives.\n     *\n     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var greetFred = _.partialRight(greet, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     *\n     * // Partially applied with placeholders.\n     * var sayHelloTo = _.partialRight(greet, 'hello', _);\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     */ var partialRight = baseRest(function(func, partials) {\n                var holders = replaceHolders(partials, getHolder(partialRight));\n                return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);\n            });\n            /**\n     * Creates a function that invokes `func` with arguments arranged according\n     * to the specified `indexes` where the argument value at the first index is\n     * provided as the first argument, the argument value at the second index is\n     * provided as the second argument, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to rearrange arguments for.\n     * @param {...(number|number[])} indexes The arranged argument indexes.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var rearged = _.rearg(function(a, b, c) {\n     *   return [a, b, c];\n     * }, [2, 0, 1]);\n     *\n     * rearged('b', 'c', 'a')\n     * // => ['a', 'b', 'c']\n     */ var rearg = flatRest(function(func, indexes) {\n                return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);\n            });\n            /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * created function and arguments from `start` and beyond provided as\n     * an array.\n     *\n     * **Note:** This method is based on the\n     * [rest parameter](https://mdn.io/rest_parameters).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.rest(function(what, names) {\n     *   return what + ' ' + _.initial(names).join(', ') +\n     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n     * });\n     *\n     * say('hello', 'fred', 'barney', 'pebbles');\n     * // => 'hello fred, barney, & pebbles'\n     */ function rest(func, start) {\n                if (typeof func != \"function\") {\n                    throw new TypeError(FUNC_ERROR_TEXT);\n                }\n                start = start === undefined$1 ? start : toInteger(start);\n                return baseRest(func, start);\n            }\n            /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * create function and an array of arguments much like\n     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).\n     *\n     * **Note:** This method is based on the\n     * [spread operator](https://mdn.io/spread_operator).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Function\n     * @param {Function} func The function to spread arguments over.\n     * @param {number} [start=0] The start position of the spread.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.spread(function(who, what) {\n     *   return who + ' says ' + what;\n     * });\n     *\n     * say(['fred', 'hello']);\n     * // => 'fred says hello'\n     *\n     * var numbers = Promise.all([\n     *   Promise.resolve(40),\n     *   Promise.resolve(36)\n     * ]);\n     *\n     * numbers.then(_.spread(function(x, y) {\n     *   return x + y;\n     * }));\n     * // => a Promise of 76\n     */ function spread(func, start) {\n                if (typeof func != \"function\") {\n                    throw new TypeError(FUNC_ERROR_TEXT);\n                }\n                start = start == null ? 0 : nativeMax(toInteger(start), 0);\n                return baseRest(function(args) {\n                    var array = args[start], otherArgs = castSlice(args, 0, start);\n                    if (array) {\n                        arrayPush(otherArgs, array);\n                    }\n                    return apply(func, this, otherArgs);\n                });\n            }\n            /**\n     * Creates a throttled function that only invokes `func` at most once per\n     * every `wait` milliseconds. The throttled function comes with a `cancel`\n     * method to cancel delayed `func` invocations and a `flush` method to\n     * immediately invoke them. Provide `options` to indicate whether `func`\n     * should be invoked on the leading and/or trailing edge of the `wait`\n     * timeout. The `func` is invoked with the last arguments provided to the\n     * throttled function. Subsequent calls to the throttled function return the\n     * result of the last `func` invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the throttled function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.throttle` and `_.debounce`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to throttle.\n     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=true]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new throttled function.\n     * @example\n     *\n     * // Avoid excessively updating the position while scrolling.\n     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n     *\n     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n     * jQuery(element).on('click', throttled);\n     *\n     * // Cancel the trailing throttled invocation.\n     * jQuery(window).on('popstate', throttled.cancel);\n     */ function throttle(func, wait, options) {\n                var leading = true, trailing = true;\n                if (typeof func != \"function\") {\n                    throw new TypeError(FUNC_ERROR_TEXT);\n                }\n                if (isObject(options)) {\n                    leading = \"leading\" in options ? !!options.leading : leading;\n                    trailing = \"trailing\" in options ? !!options.trailing : trailing;\n                }\n                return debounce(func, wait, {\n                    \"leading\": leading,\n                    \"maxWait\": wait,\n                    \"trailing\": trailing\n                });\n            }\n            /**\n     * Creates a function that accepts up to one argument, ignoring any\n     * additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.unary(parseInt));\n     * // => [6, 8, 10]\n     */ function unary(func) {\n                return ary(func, 1);\n            }\n            /**\n     * Creates a function that provides `value` to `wrapper` as its first\n     * argument. Any additional arguments provided to the function are appended\n     * to those provided to the `wrapper`. The wrapper is invoked with the `this`\n     * binding of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {*} value The value to wrap.\n     * @param {Function} [wrapper=identity] The wrapper function.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var p = _.wrap(_.escape, function(func, text) {\n     *   return '<p>' + func(text) + '</p>';\n     * });\n     *\n     * p('fred, barney, & pebbles');\n     * // => '<p>fred, barney, &amp; pebbles</p>'\n     */ function wrap(value, wrapper) {\n                return partial(castFunction(wrapper), value);\n            }\n            /*------------------------------------------------------------------------*/ /**\n     * Casts `value` as an array if it's not one.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Lang\n     * @param {*} value The value to inspect.\n     * @returns {Array} Returns the cast array.\n     * @example\n     *\n     * _.castArray(1);\n     * // => [1]\n     *\n     * _.castArray({ 'a': 1 });\n     * // => [{ 'a': 1 }]\n     *\n     * _.castArray('abc');\n     * // => ['abc']\n     *\n     * _.castArray(null);\n     * // => [null]\n     *\n     * _.castArray(undefined);\n     * // => [undefined]\n     *\n     * _.castArray();\n     * // => []\n     *\n     * var array = [1, 2, 3];\n     * console.log(_.castArray(array) === array);\n     * // => true\n     */ function castArray() {\n                if (!arguments.length) {\n                    return [];\n                }\n                var value = arguments[0];\n                return isArray(value) ? value : [\n                    value\n                ];\n            }\n            /**\n     * Creates a shallow clone of `value`.\n     *\n     * **Note:** This method is loosely based on the\n     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n     * and supports cloning arrays, array buffers, booleans, date objects, maps,\n     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n     * arrays. The own enumerable properties of `arguments` objects are cloned\n     * as plain objects. An empty object is returned for uncloneable values such\n     * as error objects, functions, DOM nodes, and WeakMaps.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeep\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var shallow = _.clone(objects);\n     * console.log(shallow[0] === objects[0]);\n     * // => true\n     */ function clone(value) {\n                return baseClone(value, CLONE_SYMBOLS_FLAG);\n            }\n            /**\n     * This method is like `_.clone` except that it accepts `customizer` which\n     * is invoked to produce the cloned value. If `customizer` returns `undefined`,\n     * cloning is handled by the method instead. The `customizer` is invoked with\n     * up to four arguments; (value [, index|key, object, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeepWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(false);\n     *   }\n     * }\n     *\n     * var el = _.cloneWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 0\n     */ function cloneWith(value, customizer) {\n                customizer = typeof customizer == \"function\" ? customizer : undefined$1;\n                return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);\n            }\n            /**\n     * This method is like `_.clone` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.clone\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var deep = _.cloneDeep(objects);\n     * console.log(deep[0] === objects[0]);\n     * // => false\n     */ function cloneDeep(value) {\n                return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n            }\n            /**\n     * This method is like `_.cloneWith` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.cloneWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(true);\n     *   }\n     * }\n     *\n     * var el = _.cloneDeepWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 20\n     */ function cloneDeepWith(value, customizer) {\n                customizer = typeof customizer == \"function\" ? customizer : undefined$1;\n                return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);\n            }\n            /**\n     * Checks if `object` conforms to `source` by invoking the predicate\n     * properties of `source` with the corresponding property values of `object`.\n     *\n     * **Note:** This method is equivalent to `_.conforms` when `source` is\n     * partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });\n     * // => true\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });\n     * // => false\n     */ function conformsTo(object, source) {\n                return source == null || baseConformsTo(object, source, keys(source));\n            }\n            /**\n     * Performs a\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * comparison between two values to determine if they are equivalent.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.eq(object, object);\n     * // => true\n     *\n     * _.eq(object, other);\n     * // => false\n     *\n     * _.eq('a', 'a');\n     * // => true\n     *\n     * _.eq('a', Object('a'));\n     * // => false\n     *\n     * _.eq(NaN, NaN);\n     * // => true\n     */ function eq(value, other) {\n                return value === other || value !== value && other !== other;\n            }\n            /**\n     * Checks if `value` is greater than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     * @see _.lt\n     * @example\n     *\n     * _.gt(3, 1);\n     * // => true\n     *\n     * _.gt(3, 3);\n     * // => false\n     *\n     * _.gt(1, 3);\n     * // => false\n     */ var gt = createRelationalOperation(baseGt);\n            /**\n     * Checks if `value` is greater than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than or equal to\n     *  `other`, else `false`.\n     * @see _.lte\n     * @example\n     *\n     * _.gte(3, 1);\n     * // => true\n     *\n     * _.gte(3, 3);\n     * // => true\n     *\n     * _.gte(1, 3);\n     * // => false\n     */ var gte = createRelationalOperation(function(value, other) {\n                return value >= other;\n            });\n            /**\n     * Checks if `value` is likely an `arguments` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArguments(function() { return arguments; }());\n     * // => true\n     *\n     * _.isArguments([1, 2, 3]);\n     * // => false\n     */ var isArguments = baseIsArguments(function() {\n                return arguments;\n            }()) ? baseIsArguments : function(value) {\n                return isObjectLike(value) && hasOwnProperty.call(value, \"callee\") && !propertyIsEnumerable.call(value, \"callee\");\n            };\n            /**\n     * Checks if `value` is classified as an `Array` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n     * @example\n     *\n     * _.isArray([1, 2, 3]);\n     * // => true\n     *\n     * _.isArray(document.body.children);\n     * // => false\n     *\n     * _.isArray('abc');\n     * // => false\n     *\n     * _.isArray(_.noop);\n     * // => false\n     */ var isArray = Array1.isArray;\n            /**\n     * Checks if `value` is classified as an `ArrayBuffer` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     * @example\n     *\n     * _.isArrayBuffer(new ArrayBuffer(2));\n     * // => true\n     *\n     * _.isArrayBuffer(new Array(2));\n     * // => false\n     */ var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;\n            /**\n     * Checks if `value` is array-like. A value is considered array-like if it's\n     * not a function and has a `value.length` that's an integer greater than or\n     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n     * @example\n     *\n     * _.isArrayLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLike(document.body.children);\n     * // => true\n     *\n     * _.isArrayLike('abc');\n     * // => true\n     *\n     * _.isArrayLike(_.noop);\n     * // => false\n     */ function isArrayLike(value) {\n                return value != null && isLength(value.length) && !isFunction(value);\n            }\n            /**\n     * This method is like `_.isArrayLike` except that it also checks if `value`\n     * is an object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array-like object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArrayLikeObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLikeObject(document.body.children);\n     * // => true\n     *\n     * _.isArrayLikeObject('abc');\n     * // => false\n     *\n     * _.isArrayLikeObject(_.noop);\n     * // => false\n     */ function isArrayLikeObject(value) {\n                return isObjectLike(value) && isArrayLike(value);\n            }\n            /**\n     * Checks if `value` is classified as a boolean primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\n     * @example\n     *\n     * _.isBoolean(false);\n     * // => true\n     *\n     * _.isBoolean(null);\n     * // => false\n     */ function isBoolean(value) {\n                return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;\n            }\n            /**\n     * Checks if `value` is a buffer.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n     * @example\n     *\n     * _.isBuffer(new Buffer(2));\n     * // => true\n     *\n     * _.isBuffer(new Uint8Array(2));\n     * // => false\n     */ var isBuffer = nativeIsBuffer || stubFalse;\n            /**\n     * Checks if `value` is classified as a `Date` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     * @example\n     *\n     * _.isDate(new Date);\n     * // => true\n     *\n     * _.isDate('Mon April 23 2012');\n     * // => false\n     */ var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;\n            /**\n     * Checks if `value` is likely a DOM element.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n     * @example\n     *\n     * _.isElement(document.body);\n     * // => true\n     *\n     * _.isElement('<body>');\n     * // => false\n     */ function isElement(value) {\n                return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);\n            }\n            /**\n     * Checks if `value` is an empty object, collection, map, or set.\n     *\n     * Objects are considered empty if they have no own enumerable string keyed\n     * properties.\n     *\n     * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n     * jQuery-like collections are considered empty if they have a `length` of `0`.\n     * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n     * @example\n     *\n     * _.isEmpty(null);\n     * // => true\n     *\n     * _.isEmpty(true);\n     * // => true\n     *\n     * _.isEmpty(1);\n     * // => true\n     *\n     * _.isEmpty([1, 2, 3]);\n     * // => false\n     *\n     * _.isEmpty({ 'a': 1 });\n     * // => false\n     */ function isEmpty(value) {\n                if (value == null) {\n                    return true;\n                }\n                if (isArrayLike(value) && (isArray(value) || typeof value == \"string\" || typeof value.splice == \"function\" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n                    return !value.length;\n                }\n                var tag = getTag(value);\n                if (tag == mapTag || tag == setTag) {\n                    return !value.size;\n                }\n                if (isPrototype(value)) {\n                    return !baseKeys(value).length;\n                }\n                for(var key in value){\n                    if (hasOwnProperty.call(value, key)) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            /**\n     * Performs a deep comparison between two values to determine if they are\n     * equivalent.\n     *\n     * **Note:** This method supports comparing arrays, array buffers, booleans,\n     * date objects, error objects, maps, numbers, `Object` objects, regexes,\n     * sets, strings, symbols, and typed arrays. `Object` objects are compared\n     * by their own, not inherited, enumerable properties. Functions and DOM\n     * nodes are compared by strict equality, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.isEqual(object, other);\n     * // => true\n     *\n     * object === other;\n     * // => false\n     */ function isEqual(value, other) {\n                return baseIsEqual(value, other);\n            }\n            /**\n     * This method is like `_.isEqual` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with up to\n     * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, othValue) {\n     *   if (isGreeting(objValue) && isGreeting(othValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var array = ['hello', 'goodbye'];\n     * var other = ['hi', 'goodbye'];\n     *\n     * _.isEqualWith(array, other, customizer);\n     * // => true\n     */ function isEqualWith(value, other, customizer) {\n                customizer = typeof customizer == \"function\" ? customizer : undefined$1;\n                var result = customizer ? customizer(value, other) : undefined$1;\n                return result === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result;\n            }\n            /**\n     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n     * `SyntaxError`, `TypeError`, or `URIError` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\n     * @example\n     *\n     * _.isError(new Error);\n     * // => true\n     *\n     * _.isError(Error);\n     * // => false\n     */ function isError(value) {\n                if (!isObjectLike(value)) {\n                    return false;\n                }\n                var tag = baseGetTag(value);\n                return tag == errorTag || tag == domExcTag || typeof value.message == \"string\" && typeof value.name == \"string\" && !isPlainObject(value);\n            }\n            /**\n     * Checks if `value` is a finite primitive number.\n     *\n     * **Note:** This method is based on\n     * [`Number.isFinite`](https://mdn.io/Number/isFinite).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n     * @example\n     *\n     * _.isFinite(3);\n     * // => true\n     *\n     * _.isFinite(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isFinite(Infinity);\n     * // => false\n     *\n     * _.isFinite('3');\n     * // => false\n     */ function isFinite(value) {\n                return typeof value == \"number\" && nativeIsFinite(value);\n            }\n            /**\n     * Checks if `value` is classified as a `Function` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n     * @example\n     *\n     * _.isFunction(_);\n     * // => true\n     *\n     * _.isFunction(/abc/);\n     * // => false\n     */ function isFunction(value) {\n                if (!isObject(value)) {\n                    return false;\n                }\n                // The use of `Object#toString` avoids issues with the `typeof` operator\n                // in Safari 9 which returns 'object' for typed arrays and other constructors.\n                var tag = baseGetTag(value);\n                return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n            }\n            /**\n     * Checks if `value` is an integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isInteger`](https://mdn.io/Number/isInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\n     * @example\n     *\n     * _.isInteger(3);\n     * // => true\n     *\n     * _.isInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isInteger(Infinity);\n     * // => false\n     *\n     * _.isInteger('3');\n     * // => false\n     */ function isInteger(value) {\n                return typeof value == \"number\" && value == toInteger(value);\n            }\n            /**\n     * Checks if `value` is a valid array-like length.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n     * @example\n     *\n     * _.isLength(3);\n     * // => true\n     *\n     * _.isLength(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isLength(Infinity);\n     * // => false\n     *\n     * _.isLength('3');\n     * // => false\n     */ function isLength(value) {\n                return typeof value == \"number\" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n            }\n            /**\n     * Checks if `value` is the\n     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n     * @example\n     *\n     * _.isObject({});\n     * // => true\n     *\n     * _.isObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isObject(_.noop);\n     * // => true\n     *\n     * _.isObject(null);\n     * // => false\n     */ function isObject(value) {\n                var type = typeof value;\n                return value != null && (type == \"object\" || type == \"function\");\n            }\n            /**\n     * Checks if `value` is object-like. A value is object-like if it's not `null`\n     * and has a `typeof` result of \"object\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n     * @example\n     *\n     * _.isObjectLike({});\n     * // => true\n     *\n     * _.isObjectLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isObjectLike(_.noop);\n     * // => false\n     *\n     * _.isObjectLike(null);\n     * // => false\n     */ function isObjectLike(value) {\n                return value != null && typeof value == \"object\";\n            }\n            /**\n     * Checks if `value` is classified as a `Map` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     * @example\n     *\n     * _.isMap(new Map);\n     * // => true\n     *\n     * _.isMap(new WeakMap);\n     * // => false\n     */ var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n            /**\n     * Performs a partial deep comparison between `object` and `source` to\n     * determine if `object` contains equivalent property values.\n     *\n     * **Note:** This method is equivalent to `_.matches` when `source` is\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.isMatch(object, { 'b': 2 });\n     * // => true\n     *\n     * _.isMatch(object, { 'b': 1 });\n     * // => false\n     */ function isMatch(object, source) {\n                return object === source || baseIsMatch(object, source, getMatchData(source));\n            }\n            /**\n     * This method is like `_.isMatch` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with five\n     * arguments: (objValue, srcValue, index|key, object, source).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (isGreeting(objValue) && isGreeting(srcValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var object = { 'greeting': 'hello' };\n     * var source = { 'greeting': 'hi' };\n     *\n     * _.isMatchWith(object, source, customizer);\n     * // => true\n     */ function isMatchWith(object, source, customizer) {\n                customizer = typeof customizer == \"function\" ? customizer : undefined$1;\n                return baseIsMatch(object, source, getMatchData(source), customizer);\n            }\n            /**\n     * Checks if `value` is `NaN`.\n     *\n     * **Note:** This method is based on\n     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\n     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for\n     * `undefined` and other non-number values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n     * @example\n     *\n     * _.isNaN(NaN);\n     * // => true\n     *\n     * _.isNaN(new Number(NaN));\n     * // => true\n     *\n     * isNaN(undefined);\n     * // => true\n     *\n     * _.isNaN(undefined);\n     * // => false\n     */ function isNaN(value) {\n                // An `NaN` primitive is the only value that is not equal to itself.\n                // Perform the `toStringTag` check first to avoid errors with some\n                // ActiveX objects in IE.\n                return isNumber(value) && value != +value;\n            }\n            /**\n     * Checks if `value` is a pristine native function.\n     *\n     * **Note:** This method can't reliably detect native functions in the presence\n     * of the core-js package because core-js circumvents this kind of detection.\n     * Despite multiple requests, the core-js maintainer has made it clear: any\n     * attempt to fix the detection will be obstructed. As a result, we're left\n     * with little choice but to throw an error. Unfortunately, this also affects\n     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),\n     * which rely on core-js.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     * @example\n     *\n     * _.isNative(Array.prototype.push);\n     * // => true\n     *\n     * _.isNative(_);\n     * // => false\n     */ function isNative(value) {\n                if (isMaskable(value)) {\n                    throw new Error(CORE_ERROR_TEXT);\n                }\n                return baseIsNative(value);\n            }\n            /**\n     * Checks if `value` is `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n     * @example\n     *\n     * _.isNull(null);\n     * // => true\n     *\n     * _.isNull(void 0);\n     * // => false\n     */ function isNull(value) {\n                return value === null;\n            }\n            /**\n     * Checks if `value` is `null` or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n     * @example\n     *\n     * _.isNil(null);\n     * // => true\n     *\n     * _.isNil(void 0);\n     * // => true\n     *\n     * _.isNil(NaN);\n     * // => false\n     */ function isNil(value) {\n                return value == null;\n            }\n            /**\n     * Checks if `value` is classified as a `Number` primitive or object.\n     *\n     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n     * classified as numbers, use the `_.isFinite` method.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n     * @example\n     *\n     * _.isNumber(3);\n     * // => true\n     *\n     * _.isNumber(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isNumber(Infinity);\n     * // => true\n     *\n     * _.isNumber('3');\n     * // => false\n     */ function isNumber(value) {\n                return typeof value == \"number\" || isObjectLike(value) && baseGetTag(value) == numberTag;\n            }\n            /**\n     * Checks if `value` is a plain object, that is, an object created by the\n     * `Object` constructor or one with a `[[Prototype]]` of `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.8.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * _.isPlainObject(new Foo);\n     * // => false\n     *\n     * _.isPlainObject([1, 2, 3]);\n     * // => false\n     *\n     * _.isPlainObject({ 'x': 0, 'y': 0 });\n     * // => true\n     *\n     * _.isPlainObject(Object.create(null));\n     * // => true\n     */ function isPlainObject(value) {\n                if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n                    return false;\n                }\n                var proto = getPrototype(value);\n                if (proto === null) {\n                    return true;\n                }\n                var Ctor = hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\n                return typeof Ctor == \"function\" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;\n            }\n            /**\n     * Checks if `value` is classified as a `RegExp` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     * @example\n     *\n     * _.isRegExp(/abc/);\n     * // => true\n     *\n     * _.isRegExp('/abc/');\n     * // => false\n     */ var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n            /**\n     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\n     * double precision number which isn't the result of a rounded unsafe integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.\n     * @example\n     *\n     * _.isSafeInteger(3);\n     * // => true\n     *\n     * _.isSafeInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isSafeInteger(Infinity);\n     * // => false\n     *\n     * _.isSafeInteger('3');\n     * // => false\n     */ function isSafeInteger(value) {\n                return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;\n            }\n            /**\n     * Checks if `value` is classified as a `Set` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     * @example\n     *\n     * _.isSet(new Set);\n     * // => true\n     *\n     * _.isSet(new WeakSet);\n     * // => false\n     */ var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n            /**\n     * Checks if `value` is classified as a `String` primitive or object.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n     * @example\n     *\n     * _.isString('abc');\n     * // => true\n     *\n     * _.isString(1);\n     * // => false\n     */ function isString(value) {\n                return typeof value == \"string\" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;\n            }\n            /**\n     * Checks if `value` is classified as a `Symbol` primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n     * @example\n     *\n     * _.isSymbol(Symbol.iterator);\n     * // => true\n     *\n     * _.isSymbol('abc');\n     * // => false\n     */ function isSymbol(value) {\n                return typeof value == \"symbol\" || isObjectLike(value) && baseGetTag(value) == symbolTag;\n            }\n            /**\n     * Checks if `value` is classified as a typed array.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     * @example\n     *\n     * _.isTypedArray(new Uint8Array);\n     * // => true\n     *\n     * _.isTypedArray([]);\n     * // => false\n     */ var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n            /**\n     * Checks if `value` is `undefined`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n     * @example\n     *\n     * _.isUndefined(void 0);\n     * // => true\n     *\n     * _.isUndefined(null);\n     * // => false\n     */ function isUndefined(value) {\n                return value === undefined$1;\n            }\n            /**\n     * Checks if `value` is classified as a `WeakMap` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.\n     * @example\n     *\n     * _.isWeakMap(new WeakMap);\n     * // => true\n     *\n     * _.isWeakMap(new Map);\n     * // => false\n     */ function isWeakMap(value) {\n                return isObjectLike(value) && getTag(value) == weakMapTag;\n            }\n            /**\n     * Checks if `value` is classified as a `WeakSet` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.\n     * @example\n     *\n     * _.isWeakSet(new WeakSet);\n     * // => true\n     *\n     * _.isWeakSet(new Set);\n     * // => false\n     */ function isWeakSet(value) {\n                return isObjectLike(value) && baseGetTag(value) == weakSetTag;\n            }\n            /**\n     * Checks if `value` is less than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     * @see _.gt\n     * @example\n     *\n     * _.lt(1, 3);\n     * // => true\n     *\n     * _.lt(3, 3);\n     * // => false\n     *\n     * _.lt(3, 1);\n     * // => false\n     */ var lt = createRelationalOperation(baseLt);\n            /**\n     * Checks if `value` is less than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than or equal to\n     *  `other`, else `false`.\n     * @see _.gte\n     * @example\n     *\n     * _.lte(1, 3);\n     * // => true\n     *\n     * _.lte(3, 3);\n     * // => true\n     *\n     * _.lte(3, 1);\n     * // => false\n     */ var lte = createRelationalOperation(function(value, other) {\n                return value <= other;\n            });\n            /**\n     * Converts `value` to an array.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the converted array.\n     * @example\n     *\n     * _.toArray({ 'a': 1, 'b': 2 });\n     * // => [1, 2]\n     *\n     * _.toArray('abc');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toArray(1);\n     * // => []\n     *\n     * _.toArray(null);\n     * // => []\n     */ function toArray(value) {\n                if (!value) {\n                    return [];\n                }\n                if (isArrayLike(value)) {\n                    return isString(value) ? stringToArray(value) : copyArray(value);\n                }\n                if (symIterator && value[symIterator]) {\n                    return iteratorToArray(value[symIterator]());\n                }\n                var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;\n                return func(value);\n            }\n            /**\n     * Converts `value` to a finite number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.12.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted number.\n     * @example\n     *\n     * _.toFinite(3.2);\n     * // => 3.2\n     *\n     * _.toFinite(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toFinite(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toFinite('3.2');\n     * // => 3.2\n     */ function toFinite(value) {\n                if (!value) {\n                    return value === 0 ? value : 0;\n                }\n                value = toNumber(value);\n                if (value === INFINITY || value === -INFINITY) {\n                    var sign = value < 0 ? -1 : 1;\n                    return sign * MAX_INTEGER;\n                }\n                return value === value ? value : 0;\n            }\n            /**\n     * Converts `value` to an integer.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toInteger(3.2);\n     * // => 3\n     *\n     * _.toInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toInteger(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toInteger('3.2');\n     * // => 3\n     */ function toInteger(value) {\n                var result = toFinite(value), remainder = result % 1;\n                return result === result ? remainder ? result - remainder : result : 0;\n            }\n            /**\n     * Converts `value` to an integer suitable for use as the length of an\n     * array-like object.\n     *\n     * **Note:** This method is based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toLength(3.2);\n     * // => 3\n     *\n     * _.toLength(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toLength(Infinity);\n     * // => 4294967295\n     *\n     * _.toLength('3.2');\n     * // => 3\n     */ function toLength(value) {\n                return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;\n            }\n            /**\n     * Converts `value` to a number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     * @example\n     *\n     * _.toNumber(3.2);\n     * // => 3.2\n     *\n     * _.toNumber(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toNumber(Infinity);\n     * // => Infinity\n     *\n     * _.toNumber('3.2');\n     * // => 3.2\n     */ function toNumber(value) {\n                if (typeof value == \"number\") {\n                    return value;\n                }\n                if (isSymbol(value)) {\n                    return NAN;\n                }\n                if (isObject(value)) {\n                    var other = typeof value.valueOf == \"function\" ? value.valueOf() : value;\n                    value = isObject(other) ? other + \"\" : other;\n                }\n                if (typeof value != \"string\") {\n                    return value === 0 ? value : +value;\n                }\n                value = baseTrim(value);\n                var isBinary = reIsBinary.test(value);\n                return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;\n            }\n            /**\n     * Converts `value` to a plain object flattening inherited enumerable string\n     * keyed properties of `value` to own properties of the plain object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Object} Returns the converted plain object.\n     * @example\n     *\n     * function Foo() {\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.assign({ 'a': 1 }, new Foo);\n     * // => { 'a': 1, 'b': 2 }\n     *\n     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n     * // => { 'a': 1, 'b': 2, 'c': 3 }\n     */ function toPlainObject(value) {\n                return copyObject(value, keysIn(value));\n            }\n            /**\n     * Converts `value` to a safe integer. A safe integer can be compared and\n     * represented correctly.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toSafeInteger(3.2);\n     * // => 3\n     *\n     * _.toSafeInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toSafeInteger(Infinity);\n     * // => 9007199254740991\n     *\n     * _.toSafeInteger('3.2');\n     * // => 3\n     */ function toSafeInteger(value) {\n                return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;\n            }\n            /**\n     * Converts `value` to a string. An empty string is returned for `null`\n     * and `undefined` values. The sign of `-0` is preserved.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.toString(null);\n     * // => ''\n     *\n     * _.toString(-0);\n     * // => '-0'\n     *\n     * _.toString([1, 2, 3]);\n     * // => '1,2,3'\n     */ function toString(value) {\n                return value == null ? \"\" : baseToString(value);\n            }\n            /*------------------------------------------------------------------------*/ /**\n     * Assigns own enumerable string keyed properties of source objects to the\n     * destination object. Source objects are applied from left to right.\n     * Subsequent sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object` and is loosely based on\n     * [`Object.assign`](https://mdn.io/Object/assign).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assignIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assign({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'c': 3 }\n     */ var assign = createAssigner(function(object, source) {\n                if (isPrototype(source) || isArrayLike(source)) {\n                    copyObject(source, keys(source), object);\n                    return;\n                }\n                for(var key in source){\n                    if (hasOwnProperty.call(source, key)) {\n                        assignValue(object, key, source[key]);\n                    }\n                }\n            });\n            /**\n     * This method is like `_.assign` except that it iterates over own and\n     * inherited source properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extend\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assign\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n     */ var assignIn = createAssigner(function(object, source) {\n                copyObject(source, keysIn(source), object);\n            });\n            /**\n     * This method is like `_.assignIn` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extendWith\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignInWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */ var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {\n                copyObject(source, keysIn(source), object, customizer);\n            });\n            /**\n     * This method is like `_.assign` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignInWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */ var assignWith = createAssigner(function(object, source, srcIndex, customizer) {\n                copyObject(source, keys(source), object, customizer);\n            });\n            /**\n     * Creates an array of values corresponding to `paths` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Array} Returns the picked values.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _.at(object, ['a[0].b.c', 'a[1]']);\n     * // => [3, 4]\n     */ var at = flatRest(baseAt);\n            /**\n     * Creates an object that inherits from the `prototype` object. If a\n     * `properties` object is given, its own enumerable string keyed properties\n     * are assigned to the created object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Object\n     * @param {Object} prototype The object to inherit from.\n     * @param {Object} [properties] The properties to assign to the object.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * function Circle() {\n     *   Shape.call(this);\n     * }\n     *\n     * Circle.prototype = _.create(Shape.prototype, {\n     *   'constructor': Circle\n     * });\n     *\n     * var circle = new Circle;\n     * circle instanceof Circle;\n     * // => true\n     *\n     * circle instanceof Shape;\n     * // => true\n     */ function create(prototype, properties) {\n                var result = baseCreate(prototype);\n                return properties == null ? result : baseAssign(result, properties);\n            }\n            /**\n     * Assigns own and inherited enumerable string keyed properties of source\n     * objects to the destination object for all destination properties that\n     * resolve to `undefined`. Source objects are applied from left to right.\n     * Once a property is set, additional values of the same property are ignored.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaultsDeep\n     * @example\n     *\n     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */ var defaults = baseRest(function(object, sources) {\n                object = Object1(object);\n                var index = -1;\n                var length = sources.length;\n                var guard = length > 2 ? sources[2] : undefined$1;\n                if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n                    length = 1;\n                }\n                while(++index < length){\n                    var source = sources[index];\n                    var props = keysIn(source);\n                    var propsIndex = -1;\n                    var propsLength = props.length;\n                    while(++propsIndex < propsLength){\n                        var key = props[propsIndex];\n                        var value = object[key];\n                        if (value === undefined$1 || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {\n                            object[key] = source[key];\n                        }\n                    }\n                }\n                return object;\n            });\n            /**\n     * This method is like `_.defaults` except that it recursively assigns\n     * default properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaults\n     * @example\n     *\n     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n     * // => { 'a': { 'b': 2, 'c': 3 } }\n     */ var defaultsDeep = baseRest(function(args) {\n                args.push(undefined$1, customDefaultsMerge);\n                return apply(mergeWith, undefined$1, args);\n            });\n            /**\n     * This method is like `_.find` except that it returns the key of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findKey(users, function(o) { return o.age < 40; });\n     * // => 'barney' (iteration order is not guaranteed)\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findKey(users, { 'age': 1, 'active': true });\n     * // => 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findKey(users, 'active');\n     * // => 'barney'\n     */ function findKey(object, predicate) {\n                return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);\n            }\n            /**\n     * This method is like `_.findKey` except that it iterates over elements of\n     * a collection in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findLastKey(users, function(o) { return o.age < 40; });\n     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastKey(users, { 'age': 36, 'active': true });\n     * // => 'barney'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastKey(users, 'active');\n     * // => 'pebbles'\n     */ function findLastKey(object, predicate) {\n                return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);\n            }\n            /**\n     * Iterates over own and inherited enumerable string keyed properties of an\n     * object and invokes `iteratee` for each property. The iteratee is invoked\n     * with three arguments: (value, key, object). Iteratee functions may exit\n     * iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forInRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forIn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n     */ function forIn(object, iteratee) {\n                return object == null ? object : baseFor(object, getIteratee(iteratee, 3), keysIn);\n            }\n            /**\n     * This method is like `_.forIn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forInRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.\n     */ function forInRight(object, iteratee) {\n                return object == null ? object : baseForRight(object, getIteratee(iteratee, 3), keysIn);\n            }\n            /**\n     * Iterates over own enumerable string keyed properties of an object and\n     * invokes `iteratee` for each property. The iteratee is invoked with three\n     * arguments: (value, key, object). Iteratee functions may exit iteration\n     * early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwnRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */ function forOwn(object, iteratee) {\n                return object && baseForOwn(object, getIteratee(iteratee, 3));\n            }\n            /**\n     * This method is like `_.forOwn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwnRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.\n     */ function forOwnRight(object, iteratee) {\n                return object && baseForOwnRight(object, getIteratee(iteratee, 3));\n            }\n            /**\n     * Creates an array of function property names from own enumerable properties\n     * of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functionsIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functions(new Foo);\n     * // => ['a', 'b']\n     */ function functions(object) {\n                return object == null ? [] : baseFunctions(object, keys(object));\n            }\n            /**\n     * Creates an array of function property names from own and inherited\n     * enumerable properties of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functions\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functionsIn(new Foo);\n     * // => ['a', 'b', 'c']\n     */ function functionsIn(object) {\n                return object == null ? [] : baseFunctions(object, keysIn(object));\n            }\n            /**\n     * Gets the value at `path` of `object`. If the resolved value is\n     * `undefined`, the `defaultValue` is returned in its place.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n     * // => 'default'\n     */ function get(object, path, defaultValue) {\n                var result = object == null ? undefined$1 : baseGet(object, path);\n                return result === undefined$1 ? defaultValue : result;\n            }\n            /**\n     * Checks if `path` is a direct property of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = { 'a': { 'b': 2 } };\n     * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.has(object, 'a');\n     * // => true\n     *\n     * _.has(object, 'a.b');\n     * // => true\n     *\n     * _.has(object, ['a', 'b']);\n     * // => true\n     *\n     * _.has(other, 'a');\n     * // => false\n     */ function has(object, path) {\n                return object != null && hasPath(object, path, baseHas);\n            }\n            /**\n     * Checks if `path` is a direct or inherited property of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.hasIn(object, 'a');\n     * // => true\n     *\n     * _.hasIn(object, 'a.b');\n     * // => true\n     *\n     * _.hasIn(object, ['a', 'b']);\n     * // => true\n     *\n     * _.hasIn(object, 'b');\n     * // => false\n     */ function hasIn(object, path) {\n                return object != null && hasPath(object, path, baseHasIn);\n            }\n            /**\n     * Creates an object composed of the inverted keys and values of `object`.\n     * If `object` contains duplicate values, subsequent values overwrite\n     * property assignments of previous values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invert(object);\n     * // => { '1': 'c', '2': 'b' }\n     */ var invert = createInverter(function(result, value, key) {\n                if (value != null && typeof value.toString != \"function\") {\n                    value = nativeObjectToString.call(value);\n                }\n                result[value] = key;\n            }, constant(identity));\n            /**\n     * This method is like `_.invert` except that the inverted object is generated\n     * from the results of running each element of `object` thru `iteratee`. The\n     * corresponding inverted value of each inverted key is an array of keys\n     * responsible for generating the inverted value. The iteratee is invoked\n     * with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invertBy(object);\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     *\n     * _.invertBy(object, function(value) {\n     *   return 'group' + value;\n     * });\n     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }\n     */ var invertBy = createInverter(function(result, value, key) {\n                if (value != null && typeof value.toString != \"function\") {\n                    value = nativeObjectToString.call(value);\n                }\n                if (hasOwnProperty.call(result, value)) {\n                    result[value].push(key);\n                } else {\n                    result[value] = [\n                        key\n                    ];\n                }\n            }, getIteratee);\n            /**\n     * Invokes the method at `path` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n     *\n     * _.invoke(object, 'a[0].b.c.slice', 1, 3);\n     * // => [2, 3]\n     */ var invoke = baseRest(baseInvoke);\n            /**\n     * Creates an array of the own enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects. See the\n     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * for more details.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keys(new Foo);\n     * // => ['a', 'b'] (iteration order is not guaranteed)\n     *\n     * _.keys('hi');\n     * // => ['0', '1']\n     */ function keys(object) {\n                return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n            }\n            /**\n     * Creates an array of the own and inherited enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keysIn(new Foo);\n     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n     */ function keysIn(object) {\n                return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n            }\n            /**\n     * The opposite of `_.mapValues`; this method creates an object with the\n     * same values as `object` and keys generated by running each own enumerable\n     * string keyed property of `object` thru `iteratee`. The iteratee is invoked\n     * with three arguments: (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapValues\n     * @example\n     *\n     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   return key + value;\n     * });\n     * // => { 'a1': 1, 'b2': 2 }\n     */ function mapKeys(object, iteratee) {\n                var result = {};\n                iteratee = getIteratee(iteratee, 3);\n                baseForOwn(object, function(value, key, object) {\n                    baseAssignValue(result, iteratee(value, key, object), value);\n                });\n                return result;\n            }\n            /**\n     * Creates an object with the same keys as `object` and values generated\n     * by running each own enumerable string keyed property of `object` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapKeys\n     * @example\n     *\n     * var users = {\n     *   'fred':    { 'user': 'fred',    'age': 40 },\n     *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n     * };\n     *\n     * _.mapValues(users, function(o) { return o.age; });\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.mapValues(users, 'age');\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     */ function mapValues(object, iteratee) {\n                var result = {};\n                iteratee = getIteratee(iteratee, 3);\n                baseForOwn(object, function(value, key, object) {\n                    baseAssignValue(result, key, iteratee(value, key, object));\n                });\n                return result;\n            }\n            /**\n     * This method is like `_.assign` except that it recursively merges own and\n     * inherited enumerable string keyed properties of source objects into the\n     * destination object. Source properties that resolve to `undefined` are\n     * skipped if a destination value exists. Array and plain object properties\n     * are merged recursively. Other objects and value types are overridden by\n     * assignment. Source objects are applied from left to right. Subsequent\n     * sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {\n     *   'a': [{ 'b': 2 }, { 'd': 4 }]\n     * };\n     *\n     * var other = {\n     *   'a': [{ 'c': 3 }, { 'e': 5 }]\n     * };\n     *\n     * _.merge(object, other);\n     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n     */ var merge = createAssigner(function(object, source, srcIndex) {\n                baseMerge(object, source, srcIndex);\n            });\n            /**\n     * This method is like `_.merge` except that it accepts `customizer` which\n     * is invoked to produce the merged values of the destination and source\n     * properties. If `customizer` returns `undefined`, merging is handled by the\n     * method instead. The `customizer` is invoked with six arguments:\n     * (objValue, srcValue, key, object, source, stack).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} customizer The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (_.isArray(objValue)) {\n     *     return objValue.concat(srcValue);\n     *   }\n     * }\n     *\n     * var object = { 'a': [1], 'b': [2] };\n     * var other = { 'a': [3], 'b': [4] };\n     *\n     * _.mergeWith(object, other, customizer);\n     * // => { 'a': [1, 3], 'b': [2, 4] }\n     */ var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n                baseMerge(object, source, srcIndex, customizer);\n            });\n            /**\n     * The opposite of `_.pick`; this method creates an object composed of the\n     * own and inherited enumerable property paths of `object` that are not omitted.\n     *\n     * **Note:** This method is considerably slower than `_.pick`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to omit.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omit(object, ['a', 'c']);\n     * // => { 'b': '2' }\n     */ var omit = flatRest(function(object, paths) {\n                var result = {};\n                if (object == null) {\n                    return result;\n                }\n                var isDeep = false;\n                paths = arrayMap(paths, function(path) {\n                    path = castPath(path, object);\n                    isDeep || (isDeep = path.length > 1);\n                    return path;\n                });\n                copyObject(object, getAllKeysIn(object), result);\n                if (isDeep) {\n                    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n                }\n                var length = paths.length;\n                while(length--){\n                    baseUnset(result, paths[length]);\n                }\n                return result;\n            });\n            /**\n     * The opposite of `_.pickBy`; this method creates an object composed of\n     * the own and inherited enumerable string keyed properties of `object` that\n     * `predicate` doesn't return truthy for. The predicate is invoked with two\n     * arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omitBy(object, _.isNumber);\n     * // => { 'b': '2' }\n     */ function omitBy(object, predicate) {\n                return pickBy(object, negate(getIteratee(predicate)));\n            }\n            /**\n     * Creates an object composed of the picked `object` properties.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pick(object, ['a', 'c']);\n     * // => { 'a': 1, 'c': 3 }\n     */ var pick = flatRest(function(object, paths) {\n                return object == null ? {} : basePick(object, paths);\n            });\n            /**\n     * Creates an object composed of the `object` properties `predicate` returns\n     * truthy for. The predicate is invoked with two arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pickBy(object, _.isNumber);\n     * // => { 'a': 1, 'c': 3 }\n     */ function pickBy(object, predicate) {\n                if (object == null) {\n                    return {};\n                }\n                var props = arrayMap(getAllKeysIn(object), function(prop) {\n                    return [\n                        prop\n                    ];\n                });\n                predicate = getIteratee(predicate);\n                return basePickBy(object, props, function(value, path) {\n                    return predicate(value, path[0]);\n                });\n            }\n            /**\n     * This method is like `_.get` except that if the resolved value is a\n     * function it's invoked with the `this` binding of its parent object and\n     * its result is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to resolve.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n     *\n     * _.result(object, 'a[0].b.c1');\n     * // => 3\n     *\n     * _.result(object, 'a[0].b.c2');\n     * // => 4\n     *\n     * _.result(object, 'a[0].b.c3', 'default');\n     * // => 'default'\n     *\n     * _.result(object, 'a[0].b.c3', _.constant('default'));\n     * // => 'default'\n     */ function result(object, path, defaultValue) {\n                path = castPath(path, object);\n                var index = -1, length = path.length;\n                // Ensure the loop is entered when path is empty.\n                if (!length) {\n                    length = 1;\n                    object = undefined$1;\n                }\n                while(++index < length){\n                    var value = object == null ? undefined$1 : object[toKey(path[index])];\n                    if (value === undefined$1) {\n                        index = length;\n                        value = defaultValue;\n                    }\n                    object = isFunction(value) ? value.call(object) : value;\n                }\n                return object;\n            }\n            /**\n     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n     * it's created. Arrays are created for missing index properties while objects\n     * are created for all other missing properties. Use `_.setWith` to customize\n     * `path` creation.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.set(object, 'a[0].b.c', 4);\n     * console.log(object.a[0].b.c);\n     * // => 4\n     *\n     * _.set(object, ['x', '0', 'y', 'z'], 5);\n     * console.log(object.x[0].y.z);\n     * // => 5\n     */ function set(object, path, value) {\n                return object == null ? object : baseSet(object, path, value);\n            }\n            /**\n     * This method is like `_.set` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.setWith(object, '[0][1]', 'a', Object);\n     * // => { '0': { '1': 'a' } }\n     */ function setWith(object, path, value, customizer) {\n                customizer = typeof customizer == \"function\" ? customizer : undefined$1;\n                return object == null ? object : baseSet(object, path, value, customizer);\n            }\n            /**\n     * Creates an array of own enumerable string keyed-value pairs for `object`\n     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its\n     * entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entries\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairs(new Foo);\n     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n     */ var toPairs = createToPairs(keys);\n            /**\n     * Creates an array of own and inherited enumerable string keyed-value pairs\n     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map\n     * or set, its entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entriesIn\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairsIn(new Foo);\n     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)\n     */ var toPairsIn = createToPairs(keysIn);\n            /**\n     * An alternative to `_.reduce`; this method transforms `object` to a new\n     * `accumulator` object which is the result of running each of its own\n     * enumerable string keyed properties thru `iteratee`, with each invocation\n     * potentially mutating the `accumulator` object. If `accumulator` is not\n     * provided, a new object with the same `[[Prototype]]` will be used. The\n     * iteratee is invoked with four arguments: (accumulator, value, key, object).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The custom accumulator value.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * _.transform([2, 3, 4], function(result, n) {\n     *   result.push(n *= n);\n     *   return n % 2 == 0;\n     * }, []);\n     * // => [4, 9]\n     *\n     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     */ function transform(object, iteratee, accumulator) {\n                var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n                iteratee = getIteratee(iteratee, 4);\n                if (accumulator == null) {\n                    var Ctor = object && object.constructor;\n                    if (isArrLike) {\n                        accumulator = isArr ? new Ctor : [];\n                    } else if (isObject(object)) {\n                        accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n                    } else {\n                        accumulator = {};\n                    }\n                }\n                (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n                    return iteratee(accumulator, value, index, object);\n                });\n                return accumulator;\n            }\n            /**\n     * Removes the property at `path` of `object`.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 7 } }] };\n     * _.unset(object, 'a[0].b.c');\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     *\n     * _.unset(object, ['a', '0', 'b', 'c']);\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     */ function unset(object, path) {\n                return object == null ? true : baseUnset(object, path);\n            }\n            /**\n     * This method is like `_.set` except that accepts `updater` to produce the\n     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`\n     * is invoked with one argument: (value).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.update(object, 'a[0].b.c', function(n) { return n * n; });\n     * console.log(object.a[0].b.c);\n     * // => 9\n     *\n     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\n     * console.log(object.x[0].y.z);\n     * // => 0\n     */ function update(object, path, updater) {\n                return object == null ? object : baseUpdate(object, path, castFunction(updater));\n            }\n            /**\n     * This method is like `_.update` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.updateWith(object, '[0][1]', _.constant('a'), Object);\n     * // => { '0': { '1': 'a' } }\n     */ function updateWith(object, path, updater, customizer) {\n                customizer = typeof customizer == \"function\" ? customizer : undefined$1;\n                return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);\n            }\n            /**\n     * Creates an array of the own enumerable string keyed property values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.values(new Foo);\n     * // => [1, 2] (iteration order is not guaranteed)\n     *\n     * _.values('hi');\n     * // => ['h', 'i']\n     */ function values(object) {\n                return object == null ? [] : baseValues(object, keys(object));\n            }\n            /**\n     * Creates an array of the own and inherited enumerable string keyed property\n     * values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.valuesIn(new Foo);\n     * // => [1, 2, 3] (iteration order is not guaranteed)\n     */ function valuesIn(object) {\n                return object == null ? [] : baseValues(object, keysIn(object));\n            }\n            /*------------------------------------------------------------------------*/ /**\n     * Clamps `number` within the inclusive `lower` and `upper` bounds.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Number\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     * @example\n     *\n     * _.clamp(-10, -5, 5);\n     * // => -5\n     *\n     * _.clamp(10, -5, 5);\n     * // => 5\n     */ function clamp(number, lower, upper) {\n                if (upper === undefined$1) {\n                    upper = lower;\n                    lower = undefined$1;\n                }\n                if (upper !== undefined$1) {\n                    upper = toNumber(upper);\n                    upper = upper === upper ? upper : 0;\n                }\n                if (lower !== undefined$1) {\n                    lower = toNumber(lower);\n                    lower = lower === lower ? lower : 0;\n                }\n                return baseClamp(toNumber(number), lower, upper);\n            }\n            /**\n     * Checks if `n` is between `start` and up to, but not including, `end`. If\n     * `end` is not specified, it's set to `start` with `start` then set to `0`.\n     * If `start` is greater than `end` the params are swapped to support\n     * negative ranges.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.3.0\n     * @category Number\n     * @param {number} number The number to check.\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     * @see _.range, _.rangeRight\n     * @example\n     *\n     * _.inRange(3, 2, 4);\n     * // => true\n     *\n     * _.inRange(4, 8);\n     * // => true\n     *\n     * _.inRange(4, 2);\n     * // => false\n     *\n     * _.inRange(2, 2);\n     * // => false\n     *\n     * _.inRange(1.2, 2);\n     * // => true\n     *\n     * _.inRange(5.2, 4);\n     * // => false\n     *\n     * _.inRange(-3, -2, -6);\n     * // => true\n     */ function inRange(number, start, end) {\n                start = toFinite(start);\n                if (end === undefined$1) {\n                    end = start;\n                    start = 0;\n                } else {\n                    end = toFinite(end);\n                }\n                number = toNumber(number);\n                return baseInRange(number, start, end);\n            }\n            /**\n     * Produces a random number between the inclusive `lower` and `upper` bounds.\n     * If only one argument is provided a number between `0` and the given number\n     * is returned. If `floating` is `true`, or either `lower` or `upper` are\n     * floats, a floating-point number is returned instead of an integer.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Number\n     * @param {number} [lower=0] The lower bound.\n     * @param {number} [upper=1] The upper bound.\n     * @param {boolean} [floating] Specify returning a floating-point number.\n     * @returns {number} Returns the random number.\n     * @example\n     *\n     * _.random(0, 5);\n     * // => an integer between 0 and 5\n     *\n     * _.random(5);\n     * // => also an integer between 0 and 5\n     *\n     * _.random(5, true);\n     * // => a floating-point number between 0 and 5\n     *\n     * _.random(1.2, 5.2);\n     * // => a floating-point number between 1.2 and 5.2\n     */ function random(lower, upper, floating) {\n                if (floating && typeof floating != \"boolean\" && isIterateeCall(lower, upper, floating)) {\n                    upper = floating = undefined$1;\n                }\n                if (floating === undefined$1) {\n                    if (typeof upper == \"boolean\") {\n                        floating = upper;\n                        upper = undefined$1;\n                    } else if (typeof lower == \"boolean\") {\n                        floating = lower;\n                        lower = undefined$1;\n                    }\n                }\n                if (lower === undefined$1 && upper === undefined$1) {\n                    lower = 0;\n                    upper = 1;\n                } else {\n                    lower = toFinite(lower);\n                    if (upper === undefined$1) {\n                        upper = lower;\n                        lower = 0;\n                    } else {\n                        upper = toFinite(upper);\n                    }\n                }\n                if (lower > upper) {\n                    var temp = lower;\n                    lower = upper;\n                    upper = temp;\n                }\n                if (floating || lower % 1 || upper % 1) {\n                    var rand = nativeRandom();\n                    return nativeMin(lower + rand * (upper - lower + freeParseFloat(\"1e-\" + ((rand + \"\").length - 1))), upper);\n                }\n                return baseRandom(lower, upper);\n            }\n            /*------------------------------------------------------------------------*/ /**\n     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the camel cased string.\n     * @example\n     *\n     * _.camelCase('Foo Bar');\n     * // => 'fooBar'\n     *\n     * _.camelCase('--foo-bar--');\n     * // => 'fooBar'\n     *\n     * _.camelCase('__FOO_BAR__');\n     * // => 'fooBar'\n     */ var camelCase = createCompounder(function(result, word, index) {\n                word = word.toLowerCase();\n                return result + (index ? capitalize(word) : word);\n            });\n            /**\n     * Converts the first character of `string` to upper case and the remaining\n     * to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to capitalize.\n     * @returns {string} Returns the capitalized string.\n     * @example\n     *\n     * _.capitalize('FRED');\n     * // => 'Fred'\n     */ function capitalize(string) {\n                return upperFirst(toString(string).toLowerCase());\n            }\n            /**\n     * Deburrs `string` by converting\n     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n     * letters to basic Latin letters and removing\n     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to deburr.\n     * @returns {string} Returns the deburred string.\n     * @example\n     *\n     * _.deburr('déjà vu');\n     * // => 'deja vu'\n     */ function deburr(string) {\n                string = toString(string);\n                return string && string.replace(reLatin, deburrLetter).replace(reComboMark, \"\");\n            }\n            /**\n     * Checks if `string` ends with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=string.length] The position to search up to.\n     * @returns {boolean} Returns `true` if `string` ends with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.endsWith('abc', 'c');\n     * // => true\n     *\n     * _.endsWith('abc', 'b');\n     * // => false\n     *\n     * _.endsWith('abc', 'b', 2);\n     * // => true\n     */ function endsWith(string, target, position) {\n                string = toString(string);\n                target = baseToString(target);\n                var length = string.length;\n                position = position === undefined$1 ? length : baseClamp(toInteger(position), 0, length);\n                var end = position;\n                position -= target.length;\n                return position >= 0 && string.slice(position, end) == target;\n            }\n            /**\n     * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n     * corresponding HTML entities.\n     *\n     * **Note:** No other characters are escaped. To escape additional\n     * characters use a third-party library like [_he_](https://mths.be/he).\n     *\n     * Though the \">\" character is escaped for symmetry, characters like\n     * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n     * unless they're part of a tag or unquoted attribute value. See\n     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n     * (under \"semi-related fun fact\") for more details.\n     *\n     * When working with HTML you should always\n     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n     * XSS vectors.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escape('fred, barney, & pebbles');\n     * // => 'fred, barney, &amp; pebbles'\n     */ function escape(string) {\n                string = toString(string);\n                return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;\n            }\n            /**\n     * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n     * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escapeRegExp('[lodash](https://lodash.com/)');\n     * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n     */ function escapeRegExp(string) {\n                string = toString(string);\n                return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, \"\\\\$&\") : string;\n            }\n            /**\n     * Converts `string` to\n     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the kebab cased string.\n     * @example\n     *\n     * _.kebabCase('Foo Bar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('fooBar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('__FOO_BAR__');\n     * // => 'foo-bar'\n     */ var kebabCase = createCompounder(function(result, word, index) {\n                return result + (index ? \"-\" : \"\") + word.toLowerCase();\n            });\n            /**\n     * Converts `string`, as space separated words, to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.lowerCase('--Foo-Bar--');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('fooBar');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('__FOO_BAR__');\n     * // => 'foo bar'\n     */ var lowerCase = createCompounder(function(result, word, index) {\n                return result + (index ? \" \" : \"\") + word.toLowerCase();\n            });\n            /**\n     * Converts the first character of `string` to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.lowerFirst('Fred');\n     * // => 'fred'\n     *\n     * _.lowerFirst('FRED');\n     * // => 'fRED'\n     */ var lowerFirst = createCaseFirst(\"toLowerCase\");\n            /**\n     * Pads `string` on the left and right sides if it's shorter than `length`.\n     * Padding characters are truncated if they can't be evenly divided by `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.pad('abc', 8);\n     * // => '  abc   '\n     *\n     * _.pad('abc', 8, '_-');\n     * // => '_-abc_-_'\n     *\n     * _.pad('abc', 3);\n     * // => 'abc'\n     */ function pad(string, length, chars) {\n                string = toString(string);\n                length = toInteger(length);\n                var strLength = length ? stringSize(string) : 0;\n                if (!length || strLength >= length) {\n                    return string;\n                }\n                var mid = (length - strLength) / 2;\n                return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);\n            }\n            /**\n     * Pads `string` on the right side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padEnd('abc', 6);\n     * // => 'abc   '\n     *\n     * _.padEnd('abc', 6, '_-');\n     * // => 'abc_-_'\n     *\n     * _.padEnd('abc', 3);\n     * // => 'abc'\n     */ function padEnd(string, length, chars) {\n                string = toString(string);\n                length = toInteger(length);\n                var strLength = length ? stringSize(string) : 0;\n                return length && strLength < length ? string + createPadding(length - strLength, chars) : string;\n            }\n            /**\n     * Pads `string` on the left side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padStart('abc', 6);\n     * // => '   abc'\n     *\n     * _.padStart('abc', 6, '_-');\n     * // => '_-_abc'\n     *\n     * _.padStart('abc', 3);\n     * // => 'abc'\n     */ function padStart(string, length, chars) {\n                string = toString(string);\n                length = toInteger(length);\n                var strLength = length ? stringSize(string) : 0;\n                return length && strLength < length ? createPadding(length - strLength, chars) + string : string;\n            }\n            /**\n     * Converts `string` to an integer of the specified radix. If `radix` is\n     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a\n     * hexadecimal, in which case a `radix` of `16` is used.\n     *\n     * **Note:** This method aligns with the\n     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category String\n     * @param {string} string The string to convert.\n     * @param {number} [radix=10] The radix to interpret `value` by.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.parseInt('08');\n     * // => 8\n     *\n     * _.map(['6', '08', '10'], _.parseInt);\n     * // => [6, 8, 10]\n     */ function parseInt1(string, radix, guard) {\n                if (guard || radix == null) {\n                    radix = 0;\n                } else if (radix) {\n                    radix = +radix;\n                }\n                return nativeParseInt(toString(string).replace(reTrimStart, \"\"), radix || 0);\n            }\n            /**\n     * Repeats the given string `n` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to repeat.\n     * @param {number} [n=1] The number of times to repeat the string.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the repeated string.\n     * @example\n     *\n     * _.repeat('*', 3);\n     * // => '***'\n     *\n     * _.repeat('abc', 2);\n     * // => 'abcabc'\n     *\n     * _.repeat('abc', 0);\n     * // => ''\n     */ function repeat(string, n, guard) {\n                if (guard ? isIterateeCall(string, n, guard) : n === undefined$1) {\n                    n = 1;\n                } else {\n                    n = toInteger(n);\n                }\n                return baseRepeat(toString(string), n);\n            }\n            /**\n     * Replaces matches for `pattern` in `string` with `replacement`.\n     *\n     * **Note:** This method is based on\n     * [`String#replace`](https://mdn.io/String/replace).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to modify.\n     * @param {RegExp|string} pattern The pattern to replace.\n     * @param {Function|string} replacement The match replacement.\n     * @returns {string} Returns the modified string.\n     * @example\n     *\n     * _.replace('Hi Fred', 'Fred', 'Barney');\n     * // => 'Hi Barney'\n     */ function replace() {\n                var args = arguments, string = toString(args[0]);\n                return args.length < 3 ? string : string.replace(args[1], args[2]);\n            }\n            /**\n     * Converts `string` to\n     * [snake case](https://en.wikipedia.org/wiki/Snake_case).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the snake cased string.\n     * @example\n     *\n     * _.snakeCase('Foo Bar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('fooBar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('--FOO-BAR--');\n     * // => 'foo_bar'\n     */ var snakeCase = createCompounder(function(result, word, index) {\n                return result + (index ? \"_\" : \"\") + word.toLowerCase();\n            });\n            /**\n     * Splits `string` by `separator`.\n     *\n     * **Note:** This method is based on\n     * [`String#split`](https://mdn.io/String/split).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to split.\n     * @param {RegExp|string} separator The separator pattern to split by.\n     * @param {number} [limit] The length to truncate results to.\n     * @returns {Array} Returns the string segments.\n     * @example\n     *\n     * _.split('a-b-c', '-', 2);\n     * // => ['a', 'b']\n     */ function split(string, separator, limit) {\n                if (limit && typeof limit != \"number\" && isIterateeCall(string, separator, limit)) {\n                    separator = limit = undefined$1;\n                }\n                limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;\n                if (!limit) {\n                    return [];\n                }\n                string = toString(string);\n                if (string && (typeof separator == \"string\" || separator != null && !isRegExp(separator))) {\n                    separator = baseToString(separator);\n                    if (!separator && hasUnicode(string)) {\n                        return castSlice(stringToArray(string), 0, limit);\n                    }\n                }\n                return string.split(separator, limit);\n            }\n            /**\n     * Converts `string` to\n     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.1.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the start cased string.\n     * @example\n     *\n     * _.startCase('--foo-bar--');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('fooBar');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('__FOO_BAR__');\n     * // => 'FOO BAR'\n     */ var startCase = createCompounder(function(result, word, index) {\n                return result + (index ? \" \" : \"\") + upperFirst(word);\n            });\n            /**\n     * Checks if `string` starts with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=0] The position to search from.\n     * @returns {boolean} Returns `true` if `string` starts with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.startsWith('abc', 'a');\n     * // => true\n     *\n     * _.startsWith('abc', 'b');\n     * // => false\n     *\n     * _.startsWith('abc', 'b', 1);\n     * // => true\n     */ function startsWith(string, target, position) {\n                string = toString(string);\n                position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);\n                target = baseToString(target);\n                return string.slice(position, position + target.length) == target;\n            }\n            /**\n     * Creates a compiled template function that can interpolate data properties\n     * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\n     * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\n     * properties may be accessed as free variables in the template. If a setting\n     * object is given, it takes precedence over `_.templateSettings` values.\n     *\n     * **Note:** In the development build `_.template` utilizes\n     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n     * for easier debugging.\n     *\n     * For more information on precompiling templates see\n     * [lodash's custom builds documentation](https://lodash.com/custom-builds).\n     *\n     * For more information on Chrome extension sandboxes see\n     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The template string.\n     * @param {Object} [options={}] The options object.\n     * @param {RegExp} [options.escape=_.templateSettings.escape]\n     *  The HTML \"escape\" delimiter.\n     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]\n     *  The \"evaluate\" delimiter.\n     * @param {Object} [options.imports=_.templateSettings.imports]\n     *  An object to import into the template as free variables.\n     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]\n     *  The \"interpolate\" delimiter.\n     * @param {string} [options.sourceURL='lodash.templateSources[n]']\n     *  The sourceURL of the compiled template.\n     * @param {string} [options.variable='obj']\n     *  The data object variable name.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the compiled template function.\n     * @example\n     *\n     * // Use the \"interpolate\" delimiter to create a compiled template.\n     * var compiled = _.template('hello <%= user %>!');\n     * compiled({ 'user': 'fred' });\n     * // => 'hello fred!'\n     *\n     * // Use the HTML \"escape\" delimiter to escape data property values.\n     * var compiled = _.template('<b><%- value %></b>');\n     * compiled({ 'value': '<script>' });\n     * // => '<b>&lt;script&gt;</b>'\n     *\n     * // Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\n     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the internal `print` function in \"evaluate\" delimiters.\n     * var compiled = _.template('<% print(\"hello \" + user); %>!');\n     * compiled({ 'user': 'barney' });\n     * // => 'hello barney!'\n     *\n     * // Use the ES template literal delimiter as an \"interpolate\" delimiter.\n     * // Disable support by replacing the \"interpolate\" delimiter.\n     * var compiled = _.template('hello ${ user }!');\n     * compiled({ 'user': 'pebbles' });\n     * // => 'hello pebbles!'\n     *\n     * // Use backslashes to treat delimiters as plain text.\n     * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n     * compiled({ 'value': 'ignored' });\n     * // => '<%- value %>'\n     *\n     * // Use the `imports` option to import `jQuery` as `jq`.\n     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the `sourceURL` option to specify a custom sourceURL for the template.\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n     * compiled(data);\n     * // => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\n     *\n     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\n     * compiled.source;\n     * // => function(data) {\n     * //   var __t, __p = '';\n     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n     * //   return __p;\n     * // }\n     *\n     * // Use custom template delimiters.\n     * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n     * var compiled = _.template('hello {{ user }}!');\n     * compiled({ 'user': 'mustache' });\n     * // => 'hello mustache!'\n     *\n     * // Use the `source` property to inline compiled templates for meaningful\n     * // line numbers in error messages and stack traces.\n     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\\n     *   var JST = {\\\n     *     \"main\": ' + _.template(mainText).source + '\\\n     *   };\\\n     * ');\n     */ function template(string, options, guard) {\n                // Based on John Resig's `tmpl` implementation\n                // (http://ejohn.org/blog/javascript-micro-templating/)\n                // and Laura Doktorova's doT.js (https://github.com/olado/doT).\n                var settings = lodash.templateSettings;\n                if (guard && isIterateeCall(string, options, guard)) {\n                    options = undefined$1;\n                }\n                string = toString(string);\n                options = assignInWith({}, options, settings, customDefaultsAssignIn);\n                var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);\n                var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = \"__p += '\";\n                // Compile the regexp to match each delimiter.\n                var reDelimiters = RegExp1((options.escape || reNoMatch).source + \"|\" + interpolate.source + \"|\" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + \"|\" + (options.evaluate || reNoMatch).source + \"|$\", \"g\");\n                // Use a sourceURL for easier debugging.\n                // The sourceURL gets injected into the source that's eval-ed, so be careful\n                // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in\n                // and escape the comment, thus injecting code that gets evaled.\n                var sourceURL = \"//# sourceURL=\" + (hasOwnProperty.call(options, \"sourceURL\") ? (options.sourceURL + \"\").replace(/\\s/g, \" \") : \"lodash.templateSources[\" + ++templateCounter + \"]\") + \"\\n\";\n                string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n                    interpolateValue || (interpolateValue = esTemplateValue);\n                    // Escape characters that can't be included in string literals.\n                    source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n                    // Replace delimiters with snippets.\n                    if (escapeValue) {\n                        isEscaping = true;\n                        source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n                    }\n                    if (evaluateValue) {\n                        isEvaluating = true;\n                        source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n                    }\n                    if (interpolateValue) {\n                        source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n                    }\n                    index = offset + match.length;\n                    // The JS engine embedded in Adobe products needs `match` returned in\n                    // order to produce the correct `offset` value.\n                    return match;\n                });\n                source += \"';\\n\";\n                // If `variable` is not specified wrap a with-statement around the generated\n                // code to add the data object to the top of the scope chain.\n                var variable = hasOwnProperty.call(options, \"variable\") && options.variable;\n                if (!variable) {\n                    source = \"with (obj) {\\n\" + source + \"\\n}\\n\";\n                } else if (reForbiddenIdentifierChars.test(variable)) {\n                    throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);\n                }\n                // Cleanup code by stripping empty strings.\n                source = (isEvaluating ? source.replace(reEmptyStringLeading, \"\") : source).replace(reEmptyStringMiddle, \"$1\").replace(reEmptyStringTrailing, \"$1;\");\n                // Frame code as the function body.\n                source = \"function(\" + (variable || \"obj\") + \") {\\n\" + (variable ? \"\" : \"obj || (obj = {});\\n\") + \"var __t, __p = ''\" + (isEscaping ? \", __e = _.escape\" : \"\") + (isEvaluating ? \", __j = Array.prototype.join;\\n\" + \"function print() { __p += __j.call(arguments, '') }\\n\" : \";\\n\") + source + \"return __p\\n}\";\n                var result = attempt(function() {\n                    return Function1(importsKeys, sourceURL + \"return \" + source).apply(undefined$1, importsValues);\n                });\n                // Provide the compiled function's source by its `toString` method or\n                // the `source` property as a convenience for inlining compiled templates.\n                result.source = source;\n                if (isError(result)) {\n                    throw result;\n                }\n                return result;\n            }\n            /**\n     * Converts `string`, as a whole, to lower case just like\n     * [String#toLowerCase](https://mdn.io/toLowerCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.toLower('--Foo-Bar--');\n     * // => '--foo-bar--'\n     *\n     * _.toLower('fooBar');\n     * // => 'foobar'\n     *\n     * _.toLower('__FOO_BAR__');\n     * // => '__foo_bar__'\n     */ function toLower(value) {\n                return toString(value).toLowerCase();\n            }\n            /**\n     * Converts `string`, as a whole, to upper case just like\n     * [String#toUpperCase](https://mdn.io/toUpperCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.toUpper('--foo-bar--');\n     * // => '--FOO-BAR--'\n     *\n     * _.toUpper('fooBar');\n     * // => 'FOOBAR'\n     *\n     * _.toUpper('__foo_bar__');\n     * // => '__FOO_BAR__'\n     */ function toUpper(value) {\n                return toString(value).toUpperCase();\n            }\n            /**\n     * Removes leading and trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trim('  abc  ');\n     * // => 'abc'\n     *\n     * _.trim('-_-abc-_-', '_-');\n     * // => 'abc'\n     *\n     * _.map(['  foo  ', '  bar  '], _.trim);\n     * // => ['foo', 'bar']\n     */ function trim(string, chars, guard) {\n                string = toString(string);\n                if (string && (guard || chars === undefined$1)) {\n                    return baseTrim(string);\n                }\n                if (!string || !(chars = baseToString(chars))) {\n                    return string;\n                }\n                var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;\n                return castSlice(strSymbols, start, end).join(\"\");\n            }\n            /**\n     * Removes trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimEnd('  abc  ');\n     * // => '  abc'\n     *\n     * _.trimEnd('-_-abc-_-', '_-');\n     * // => '-_-abc'\n     */ function trimEnd(string, chars, guard) {\n                string = toString(string);\n                if (string && (guard || chars === undefined$1)) {\n                    return string.slice(0, trimmedEndIndex(string) + 1);\n                }\n                if (!string || !(chars = baseToString(chars))) {\n                    return string;\n                }\n                var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n                return castSlice(strSymbols, 0, end).join(\"\");\n            }\n            /**\n     * Removes leading whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimStart('  abc  ');\n     * // => 'abc  '\n     *\n     * _.trimStart('-_-abc-_-', '_-');\n     * // => 'abc-_-'\n     */ function trimStart(string, chars, guard) {\n                string = toString(string);\n                if (string && (guard || chars === undefined$1)) {\n                    return string.replace(reTrimStart, \"\");\n                }\n                if (!string || !(chars = baseToString(chars))) {\n                    return string;\n                }\n                var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));\n                return castSlice(strSymbols, start).join(\"\");\n            }\n            /**\n     * Truncates `string` if it's longer than the given maximum string length.\n     * The last characters of the truncated string are replaced with the omission\n     * string which defaults to \"...\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to truncate.\n     * @param {Object} [options={}] The options object.\n     * @param {number} [options.length=30] The maximum string length.\n     * @param {string} [options.omission='...'] The string to indicate text is omitted.\n     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n     * @returns {string} Returns the truncated string.\n     * @example\n     *\n     * _.truncate('hi-diddly-ho there, neighborino');\n     * // => 'hi-diddly-ho there, neighbo...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': ' '\n     * });\n     * // => 'hi-diddly-ho there,...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': /,? +/\n     * });\n     * // => 'hi-diddly-ho there...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'omission': ' [...]'\n     * });\n     * // => 'hi-diddly-ho there, neig [...]'\n     */ function truncate(string, options) {\n                var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;\n                if (isObject(options)) {\n                    var separator = \"separator\" in options ? options.separator : separator;\n                    length = \"length\" in options ? toInteger(options.length) : length;\n                    omission = \"omission\" in options ? baseToString(options.omission) : omission;\n                }\n                string = toString(string);\n                var strLength = string.length;\n                if (hasUnicode(string)) {\n                    var strSymbols = stringToArray(string);\n                    strLength = strSymbols.length;\n                }\n                if (length >= strLength) {\n                    return string;\n                }\n                var end = length - stringSize(omission);\n                if (end < 1) {\n                    return omission;\n                }\n                var result = strSymbols ? castSlice(strSymbols, 0, end).join(\"\") : string.slice(0, end);\n                if (separator === undefined$1) {\n                    return result + omission;\n                }\n                if (strSymbols) {\n                    end += result.length - end;\n                }\n                if (isRegExp(separator)) {\n                    if (string.slice(end).search(separator)) {\n                        var match, substring = result;\n                        if (!separator.global) {\n                            separator = RegExp1(separator.source, toString(reFlags.exec(separator)) + \"g\");\n                        }\n                        separator.lastIndex = 0;\n                        while(match = separator.exec(substring)){\n                            var newEnd = match.index;\n                        }\n                        result = result.slice(0, newEnd === undefined$1 ? end : newEnd);\n                    }\n                } else if (string.indexOf(baseToString(separator), end) != end) {\n                    var index = result.lastIndexOf(separator);\n                    if (index > -1) {\n                        result = result.slice(0, index);\n                    }\n                }\n                return result + omission;\n            }\n            /**\n     * The inverse of `_.escape`; this method converts the HTML entities\n     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\n     * their corresponding characters.\n     *\n     * **Note:** No other HTML entities are unescaped. To unescape additional\n     * HTML entities use a third-party library like [_he_](https://mths.be/he).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.6.0\n     * @category String\n     * @param {string} [string=''] The string to unescape.\n     * @returns {string} Returns the unescaped string.\n     * @example\n     *\n     * _.unescape('fred, barney, &amp; pebbles');\n     * // => 'fred, barney, & pebbles'\n     */ function unescape(string) {\n                string = toString(string);\n                return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;\n            }\n            /**\n     * Converts `string`, as space separated words, to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.upperCase('--foo-bar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('fooBar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('__foo_bar__');\n     * // => 'FOO BAR'\n     */ var upperCase = createCompounder(function(result, word, index) {\n                return result + (index ? \" \" : \"\") + word.toUpperCase();\n            });\n            /**\n     * Converts the first character of `string` to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.upperFirst('fred');\n     * // => 'Fred'\n     *\n     * _.upperFirst('FRED');\n     * // => 'FRED'\n     */ var upperFirst = createCaseFirst(\"toUpperCase\");\n            /**\n     * Splits `string` into an array of its words.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {RegExp|string} [pattern] The pattern to match words.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the words of `string`.\n     * @example\n     *\n     * _.words('fred, barney, & pebbles');\n     * // => ['fred', 'barney', 'pebbles']\n     *\n     * _.words('fred, barney, & pebbles', /[^, ]+/g);\n     * // => ['fred', 'barney', '&', 'pebbles']\n     */ function words(string, pattern, guard) {\n                string = toString(string);\n                pattern = guard ? undefined$1 : pattern;\n                if (pattern === undefined$1) {\n                    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n                }\n                return string.match(pattern) || [];\n            }\n            /*------------------------------------------------------------------------*/ /**\n     * Attempts to invoke `func`, returning either the result or the caught error\n     * object. Any additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Function} func The function to attempt.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {*} Returns the `func` result or error object.\n     * @example\n     *\n     * // Avoid throwing errors for invalid selectors.\n     * var elements = _.attempt(function(selector) {\n     *   return document.querySelectorAll(selector);\n     * }, '>_>');\n     *\n     * if (_.isError(elements)) {\n     *   elements = [];\n     * }\n     */ var attempt = baseRest(function(func, args) {\n                try {\n                    return apply(func, undefined$1, args);\n                } catch (e) {\n                    return isError(e) ? e : new Error(e);\n                }\n            });\n            /**\n     * Binds methods of an object to the object itself, overwriting the existing\n     * method.\n     *\n     * **Note:** This method doesn't set the \"length\" property of bound functions.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Object} object The object to bind and assign the bound methods to.\n     * @param {...(string|string[])} methodNames The object method names to bind.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var view = {\n     *   'label': 'docs',\n     *   'click': function() {\n     *     console.log('clicked ' + this.label);\n     *   }\n     * };\n     *\n     * _.bindAll(view, ['click']);\n     * jQuery(element).on('click', view.click);\n     * // => Logs 'clicked docs' when clicked.\n     */ var bindAll = flatRest(function(object, methodNames) {\n                arrayEach(methodNames, function(key) {\n                    key = toKey(key);\n                    baseAssignValue(object, key, bind(object[key], object));\n                });\n                return object;\n            });\n            /**\n     * Creates a function that iterates over `pairs` and invokes the corresponding\n     * function of the first predicate to return truthy. The predicate-function\n     * pairs are invoked with the `this` binding and arguments of the created\n     * function.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Array} pairs The predicate-function pairs.\n     * @returns {Function} Returns the new composite function.\n     * @example\n     *\n     * var func = _.cond([\n     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],\n     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n     *   [_.stubTrue,                      _.constant('no match')]\n     * ]);\n     *\n     * func({ 'a': 1, 'b': 2 });\n     * // => 'matches A'\n     *\n     * func({ 'a': 0, 'b': 1 });\n     * // => 'matches B'\n     *\n     * func({ 'a': '1', 'b': '2' });\n     * // => 'no match'\n     */ function cond(pairs) {\n                var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();\n                pairs = !length ? [] : arrayMap(pairs, function(pair) {\n                    if (typeof pair[1] != \"function\") {\n                        throw new TypeError(FUNC_ERROR_TEXT);\n                    }\n                    return [\n                        toIteratee(pair[0]),\n                        pair[1]\n                    ];\n                });\n                return baseRest(function(args) {\n                    var index = -1;\n                    while(++index < length){\n                        var pair = pairs[index];\n                        if (apply(pair[0], this, args)) {\n                            return apply(pair[1], this, args);\n                        }\n                    }\n                });\n            }\n            /**\n     * Creates a function that invokes the predicate properties of `source` with\n     * the corresponding property values of a given object, returning `true` if\n     * all predicates return truthy, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.conformsTo` with\n     * `source` partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 2, 'b': 1 },\n     *   { 'a': 1, 'b': 2 }\n     * ];\n     *\n     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));\n     * // => [{ 'a': 1, 'b': 2 }]\n     */ function conforms(source) {\n                return baseConforms(baseClone(source, CLONE_DEEP_FLAG));\n            }\n            /**\n     * Creates a function that returns `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {*} value The value to return from the new function.\n     * @returns {Function} Returns the new constant function.\n     * @example\n     *\n     * var objects = _.times(2, _.constant({ 'a': 1 }));\n     *\n     * console.log(objects);\n     * // => [{ 'a': 1 }, { 'a': 1 }]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => true\n     */ function constant(value) {\n                return function() {\n                    return value;\n                };\n            }\n            /**\n     * Checks `value` to determine whether a default value should be returned in\n     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,\n     * or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Util\n     * @param {*} value The value to check.\n     * @param {*} defaultValue The default value.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * _.defaultTo(1, 10);\n     * // => 1\n     *\n     * _.defaultTo(undefined, 10);\n     * // => 10\n     */ function defaultTo(value, defaultValue) {\n                return value == null || value !== value ? defaultValue : value;\n            }\n            /**\n     * Creates a function that returns the result of invoking the given functions\n     * with the `this` binding of the created function, where each successive\n     * invocation is supplied the return value of the previous.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flowRight\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flow([_.add, square]);\n     * addSquare(1, 2);\n     * // => 9\n     */ var flow = createFlow();\n            /**\n     * This method is like `_.flow` except that it creates a function that\n     * invokes the given functions from right to left.\n     *\n     * @static\n     * @since 3.0.0\n     * @memberOf _\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flow\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flowRight([square, _.add]);\n     * addSquare(1, 2);\n     * // => 9\n     */ var flowRight = createFlow(true);\n            /**\n     * This method returns the first argument it receives.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {*} value Any value.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     *\n     * console.log(_.identity(object) === object);\n     * // => true\n     */ function identity(value) {\n                return value;\n            }\n            /**\n     * Creates a function that invokes `func` with the arguments of the created\n     * function. If `func` is a property name, the created function returns the\n     * property value for a given element. If `func` is an array or object, the\n     * created function returns `true` for elements that contain the equivalent\n     * source properties, otherwise it returns `false`.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Util\n     * @param {*} [func=_.identity] The value to convert to a callback.\n     * @returns {Function} Returns the callback.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\n     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, _.iteratee(['user', 'fred']));\n     * // => [{ 'user': 'fred', 'age': 40 }]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, _.iteratee('user'));\n     * // => ['barney', 'fred']\n     *\n     * // Create custom iteratee shorthands.\n     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\n     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {\n     *     return func.test(string);\n     *   };\n     * });\n     *\n     * _.filter(['abc', 'def'], /ef/);\n     * // => ['def']\n     */ function iteratee(func) {\n                return baseIteratee(typeof func == \"function\" ? func : baseClone(func, CLONE_DEEP_FLAG));\n            }\n            /**\n     * Creates a function that performs a partial deep comparison between a given\n     * object and `source`, returning `true` if the given object has equivalent\n     * property values, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.isMatch` with `source`\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * **Note:** Multiple values can be checked by combining several matchers\n     * using `_.overSome`\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));\n     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]\n     *\n     * // Checking for several possible values\n     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));\n     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\n     */ function matches(source) {\n                return baseMatches(baseClone(source, CLONE_DEEP_FLAG));\n            }\n            /**\n     * Creates a function that performs a partial deep comparison between the\n     * value at `path` of a given object to `srcValue`, returning `true` if the\n     * object value is equivalent, else `false`.\n     *\n     * **Note:** Partial comparisons will match empty array and empty object\n     * `srcValue` values against any array or object value, respectively. See\n     * `_.isEqual` for a list of supported value comparisons.\n     *\n     * **Note:** Multiple values can be checked by combining several matchers\n     * using `_.overSome`\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.find(objects, _.matchesProperty('a', 4));\n     * // => { 'a': 4, 'b': 5, 'c': 6 }\n     *\n     * // Checking for several possible values\n     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));\n     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\n     */ function matchesProperty(path, srcValue) {\n                return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));\n            }\n            /**\n     * Creates a function that invokes the method at `path` of a given object.\n     * Any additional arguments are provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': _.constant(2) } },\n     *   { 'a': { 'b': _.constant(1) } }\n     * ];\n     *\n     * _.map(objects, _.method('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(objects, _.method(['a', 'b']));\n     * // => [2, 1]\n     */ var method = baseRest(function(path, args) {\n                return function(object) {\n                    return baseInvoke(object, path, args);\n                };\n            });\n            /**\n     * The opposite of `_.method`; this method creates a function that invokes\n     * the method at a given path of `object`. Any additional arguments are\n     * provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var array = _.times(3, _.constant),\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.methodOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));\n     * // => [2, 0]\n     */ var methodOf = baseRest(function(object, args) {\n                return function(path) {\n                    return baseInvoke(object, path, args);\n                };\n            });\n            /**\n     * Adds all own enumerable string keyed function properties of a source\n     * object to the destination object. If `object` is a function, then methods\n     * are added to its prototype as well.\n     *\n     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n     * avoid conflicts caused by modifying the original.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Function|Object} [object=lodash] The destination object.\n     * @param {Object} source The object of functions to add.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.\n     * @returns {Function|Object} Returns `object`.\n     * @example\n     *\n     * function vowels(string) {\n     *   return _.filter(string, function(v) {\n     *     return /[aeiou]/i.test(v);\n     *   });\n     * }\n     *\n     * _.mixin({ 'vowels': vowels });\n     * _.vowels('fred');\n     * // => ['e']\n     *\n     * _('fred').vowels().value();\n     * // => ['e']\n     *\n     * _.mixin({ 'vowels': vowels }, { 'chain': false });\n     * _('fred').vowels();\n     * // => ['e']\n     */ function mixin(object, source, options) {\n                var props = keys(source), methodNames = baseFunctions(source, props);\n                if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {\n                    options = source;\n                    source = object;\n                    object = this;\n                    methodNames = baseFunctions(source, keys(source));\n                }\n                var chain = !(isObject(options) && \"chain\" in options) || !!options.chain, isFunc = isFunction(object);\n                arrayEach(methodNames, function(methodName) {\n                    var func = source[methodName];\n                    object[methodName] = func;\n                    if (isFunc) {\n                        object.prototype[methodName] = function() {\n                            var chainAll = this.__chain__;\n                            if (chain || chainAll) {\n                                var result = object(this.__wrapped__), actions = result.__actions__ = copyArray(this.__actions__);\n                                actions.push({\n                                    \"func\": func,\n                                    \"args\": arguments,\n                                    \"thisArg\": object\n                                });\n                                result.__chain__ = chainAll;\n                                return result;\n                            }\n                            return func.apply(object, arrayPush([\n                                this.value()\n                            ], arguments));\n                        };\n                    }\n                });\n                return object;\n            }\n            /**\n     * Reverts the `_` variable to its previous value and returns a reference to\n     * the `lodash` function.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @returns {Function} Returns the `lodash` function.\n     * @example\n     *\n     * var lodash = _.noConflict();\n     */ function noConflict() {\n                if (root._ === this) {\n                    root._ = oldDash;\n                }\n                return this;\n            }\n            /**\n     * This method returns `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Util\n     * @example\n     *\n     * _.times(2, _.noop);\n     * // => [undefined, undefined]\n     */ function noop() {\n            // No operation performed.\n            }\n            /**\n     * Creates a function that gets the argument at index `n`. If `n` is negative,\n     * the nth argument from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [n=0] The index of the argument to return.\n     * @returns {Function} Returns the new pass-thru function.\n     * @example\n     *\n     * var func = _.nthArg(1);\n     * func('a', 'b', 'c', 'd');\n     * // => 'b'\n     *\n     * var func = _.nthArg(-2);\n     * func('a', 'b', 'c', 'd');\n     * // => 'c'\n     */ function nthArg(n) {\n                n = toInteger(n);\n                return baseRest(function(args) {\n                    return baseNth(args, n);\n                });\n            }\n            /**\n     * Creates a function that invokes `iteratees` with the arguments it receives\n     * and returns their results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to invoke.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.over([Math.max, Math.min]);\n     *\n     * func(1, 2, 3, 4);\n     * // => [4, 1]\n     */ var over = createOver(arrayMap);\n            /**\n     * Creates a function that checks if **all** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * Following shorthands are possible for providing predicates.\n     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.\n     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overEvery([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => false\n     *\n     * func(NaN);\n     * // => false\n     */ var overEvery = createOver(arrayEvery);\n            /**\n     * Creates a function that checks if **any** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * Following shorthands are possible for providing predicates.\n     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.\n     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overSome([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => true\n     *\n     * func(NaN);\n     * // => false\n     *\n     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])\n     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])\n     */ var overSome = createOver(arraySome);\n            /**\n     * Creates a function that returns the value at `path` of a given object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': 2 } },\n     *   { 'a': { 'b': 1 } }\n     * ];\n     *\n     * _.map(objects, _.property('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n     * // => [1, 2]\n     */ function property(path) {\n                return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n            }\n            /**\n     * The opposite of `_.property`; this method creates a function that returns\n     * the value at a given path of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var array = [0, 1, 2],\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n     * // => [2, 0]\n     */ function propertyOf(object) {\n                return function(path) {\n                    return object == null ? undefined$1 : baseGet(object, path);\n                };\n            }\n            /**\n     * Creates an array of numbers (positive and/or negative) progressing from\n     * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n     * `start` is specified without an `end` or `step`. If `end` is not specified,\n     * it's set to `start` with `start` then set to `0`.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.rangeRight\n     * @example\n     *\n     * _.range(4);\n     * // => [0, 1, 2, 3]\n     *\n     * _.range(-4);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 5);\n     * // => [1, 2, 3, 4]\n     *\n     * _.range(0, 20, 5);\n     * // => [0, 5, 10, 15]\n     *\n     * _.range(0, -4, -1);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.range(0);\n     * // => []\n     */ var range = createRange();\n            /**\n     * This method is like `_.range` except that it populates values in\n     * descending order.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.range\n     * @example\n     *\n     * _.rangeRight(4);\n     * // => [3, 2, 1, 0]\n     *\n     * _.rangeRight(-4);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 5);\n     * // => [4, 3, 2, 1]\n     *\n     * _.rangeRight(0, 20, 5);\n     * // => [15, 10, 5, 0]\n     *\n     * _.rangeRight(0, -4, -1);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.rangeRight(0);\n     * // => []\n     */ var rangeRight = createRange(true);\n            /**\n     * This method returns a new empty array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Array} Returns the new empty array.\n     * @example\n     *\n     * var arrays = _.times(2, _.stubArray);\n     *\n     * console.log(arrays);\n     * // => [[], []]\n     *\n     * console.log(arrays[0] === arrays[1]);\n     * // => false\n     */ function stubArray() {\n                return [];\n            }\n            /**\n     * This method returns `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `false`.\n     * @example\n     *\n     * _.times(2, _.stubFalse);\n     * // => [false, false]\n     */ function stubFalse() {\n                return false;\n            }\n            /**\n     * This method returns a new empty object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Object} Returns the new empty object.\n     * @example\n     *\n     * var objects = _.times(2, _.stubObject);\n     *\n     * console.log(objects);\n     * // => [{}, {}]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => false\n     */ function stubObject() {\n                return {};\n            }\n            /**\n     * This method returns an empty string.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {string} Returns the empty string.\n     * @example\n     *\n     * _.times(2, _.stubString);\n     * // => ['', '']\n     */ function stubString() {\n                return \"\";\n            }\n            /**\n     * This method returns `true`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `true`.\n     * @example\n     *\n     * _.times(2, _.stubTrue);\n     * // => [true, true]\n     */ function stubTrue() {\n                return true;\n            }\n            /**\n     * Invokes the iteratee `n` times, returning an array of the results of\n     * each invocation. The iteratee is invoked with one argument; (index).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} n The number of times to invoke `iteratee`.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.times(3, String);\n     * // => ['0', '1', '2']\n     *\n     *  _.times(4, _.constant(0));\n     * // => [0, 0, 0, 0]\n     */ function times(n, iteratee) {\n                n = toInteger(n);\n                if (n < 1 || n > MAX_SAFE_INTEGER) {\n                    return [];\n                }\n                var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);\n                iteratee = getIteratee(iteratee);\n                n -= MAX_ARRAY_LENGTH;\n                var result = baseTimes(length, iteratee);\n                while(++index < n){\n                    iteratee(index);\n                }\n                return result;\n            }\n            /**\n     * Converts `value` to a property path array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the new property path array.\n     * @example\n     *\n     * _.toPath('a.b.c');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toPath('a[0].b.c');\n     * // => ['a', '0', 'b', 'c']\n     */ function toPath(value) {\n                if (isArray(value)) {\n                    return arrayMap(value, toKey);\n                }\n                return isSymbol(value) ? [\n                    value\n                ] : copyArray(stringToPath(toString(value)));\n            }\n            /**\n     * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {string} [prefix=''] The value to prefix the ID with.\n     * @returns {string} Returns the unique ID.\n     * @example\n     *\n     * _.uniqueId('contact_');\n     * // => 'contact_104'\n     *\n     * _.uniqueId();\n     * // => '105'\n     */ function uniqueId(prefix) {\n                var id = ++idCounter;\n                return toString(prefix) + id;\n            }\n            /*------------------------------------------------------------------------*/ /**\n     * Adds two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {number} augend The first number in an addition.\n     * @param {number} addend The second number in an addition.\n     * @returns {number} Returns the total.\n     * @example\n     *\n     * _.add(6, 4);\n     * // => 10\n     */ var add = createMathOperation(function(augend, addend) {\n                return augend + addend;\n            }, 0);\n            /**\n     * Computes `number` rounded up to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round up.\n     * @param {number} [precision=0] The precision to round up to.\n     * @returns {number} Returns the rounded up number.\n     * @example\n     *\n     * _.ceil(4.006);\n     * // => 5\n     *\n     * _.ceil(6.004, 2);\n     * // => 6.01\n     *\n     * _.ceil(6040, -2);\n     * // => 6100\n     */ var ceil = createRound(\"ceil\");\n            /**\n     * Divide two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} dividend The first number in a division.\n     * @param {number} divisor The second number in a division.\n     * @returns {number} Returns the quotient.\n     * @example\n     *\n     * _.divide(6, 4);\n     * // => 1.5\n     */ var divide = createMathOperation(function(dividend, divisor) {\n                return dividend / divisor;\n            }, 1);\n            /**\n     * Computes `number` rounded down to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round down.\n     * @param {number} [precision=0] The precision to round down to.\n     * @returns {number} Returns the rounded down number.\n     * @example\n     *\n     * _.floor(4.006);\n     * // => 4\n     *\n     * _.floor(0.046, 2);\n     * // => 0.04\n     *\n     * _.floor(4060, -2);\n     * // => 4000\n     */ var floor = createRound(\"floor\");\n            /**\n     * Computes the maximum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * _.max([4, 2, 8, 6]);\n     * // => 8\n     *\n     * _.max([]);\n     * // => undefined\n     */ function max(array) {\n                return array && array.length ? baseExtremum(array, identity, baseGt) : undefined$1;\n            }\n            /**\n     * This method is like `_.max` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.maxBy(objects, function(o) { return o.n; });\n     * // => { 'n': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.maxBy(objects, 'n');\n     * // => { 'n': 2 }\n     */ function maxBy(array, iteratee) {\n                return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseGt) : undefined$1;\n            }\n            /**\n     * Computes the mean of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * _.mean([4, 2, 8, 6]);\n     * // => 5\n     */ function mean(array) {\n                return baseMean(array, identity);\n            }\n            /**\n     * This method is like `_.mean` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be averaged.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.meanBy(objects, function(o) { return o.n; });\n     * // => 5\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.meanBy(objects, 'n');\n     * // => 5\n     */ function meanBy(array, iteratee) {\n                return baseMean(array, getIteratee(iteratee, 2));\n            }\n            /**\n     * Computes the minimum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * _.min([4, 2, 8, 6]);\n     * // => 2\n     *\n     * _.min([]);\n     * // => undefined\n     */ function min(array) {\n                return array && array.length ? baseExtremum(array, identity, baseLt) : undefined$1;\n            }\n            /**\n     * This method is like `_.min` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.minBy(objects, function(o) { return o.n; });\n     * // => { 'n': 1 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.minBy(objects, 'n');\n     * // => { 'n': 1 }\n     */ function minBy(array, iteratee) {\n                return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseLt) : undefined$1;\n            }\n            /**\n     * Multiply two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} multiplier The first number in a multiplication.\n     * @param {number} multiplicand The second number in a multiplication.\n     * @returns {number} Returns the product.\n     * @example\n     *\n     * _.multiply(6, 4);\n     * // => 24\n     */ var multiply = createMathOperation(function(multiplier, multiplicand) {\n                return multiplier * multiplicand;\n            }, 1);\n            /**\n     * Computes `number` rounded to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round.\n     * @param {number} [precision=0] The precision to round to.\n     * @returns {number} Returns the rounded number.\n     * @example\n     *\n     * _.round(4.006);\n     * // => 4\n     *\n     * _.round(4.006, 2);\n     * // => 4.01\n     *\n     * _.round(4060, -2);\n     * // => 4100\n     */ var round = createRound(\"round\");\n            /**\n     * Subtract two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {number} minuend The first number in a subtraction.\n     * @param {number} subtrahend The second number in a subtraction.\n     * @returns {number} Returns the difference.\n     * @example\n     *\n     * _.subtract(6, 4);\n     * // => 2\n     */ var subtract = createMathOperation(function(minuend, subtrahend) {\n                return minuend - subtrahend;\n            }, 0);\n            /**\n     * Computes the sum of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * _.sum([4, 2, 8, 6]);\n     * // => 20\n     */ function sum(array) {\n                return array && array.length ? baseSum(array, identity) : 0;\n            }\n            /**\n     * This method is like `_.sum` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be summed.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.sumBy(objects, function(o) { return o.n; });\n     * // => 20\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sumBy(objects, 'n');\n     * // => 20\n     */ function sumBy(array, iteratee) {\n                return array && array.length ? baseSum(array, getIteratee(iteratee, 2)) : 0;\n            }\n            /*------------------------------------------------------------------------*/ // Add methods that return wrapped values in chain sequences.\n            lodash.after = after;\n            lodash.ary = ary;\n            lodash.assign = assign;\n            lodash.assignIn = assignIn;\n            lodash.assignInWith = assignInWith;\n            lodash.assignWith = assignWith;\n            lodash.at = at;\n            lodash.before = before;\n            lodash.bind = bind;\n            lodash.bindAll = bindAll;\n            lodash.bindKey = bindKey;\n            lodash.castArray = castArray;\n            lodash.chain = chain;\n            lodash.chunk = chunk;\n            lodash.compact = compact;\n            lodash.concat = concat;\n            lodash.cond = cond;\n            lodash.conforms = conforms;\n            lodash.constant = constant;\n            lodash.countBy = countBy;\n            lodash.create = create;\n            lodash.curry = curry;\n            lodash.curryRight = curryRight;\n            lodash.debounce = debounce;\n            lodash.defaults = defaults;\n            lodash.defaultsDeep = defaultsDeep;\n            lodash.defer = defer;\n            lodash.delay = delay;\n            lodash.difference = difference;\n            lodash.differenceBy = differenceBy;\n            lodash.differenceWith = differenceWith;\n            lodash.drop = drop;\n            lodash.dropRight = dropRight;\n            lodash.dropRightWhile = dropRightWhile;\n            lodash.dropWhile = dropWhile;\n            lodash.fill = fill;\n            lodash.filter = filter;\n            lodash.flatMap = flatMap;\n            lodash.flatMapDeep = flatMapDeep;\n            lodash.flatMapDepth = flatMapDepth;\n            lodash.flatten = flatten;\n            lodash.flattenDeep = flattenDeep;\n            lodash.flattenDepth = flattenDepth;\n            lodash.flip = flip;\n            lodash.flow = flow;\n            lodash.flowRight = flowRight;\n            lodash.fromPairs = fromPairs;\n            lodash.functions = functions;\n            lodash.functionsIn = functionsIn;\n            lodash.groupBy = groupBy;\n            lodash.initial = initial;\n            lodash.intersection = intersection;\n            lodash.intersectionBy = intersectionBy;\n            lodash.intersectionWith = intersectionWith;\n            lodash.invert = invert;\n            lodash.invertBy = invertBy;\n            lodash.invokeMap = invokeMap;\n            lodash.iteratee = iteratee;\n            lodash.keyBy = keyBy;\n            lodash.keys = keys;\n            lodash.keysIn = keysIn;\n            lodash.map = map;\n            lodash.mapKeys = mapKeys;\n            lodash.mapValues = mapValues;\n            lodash.matches = matches;\n            lodash.matchesProperty = matchesProperty;\n            lodash.memoize = memoize;\n            lodash.merge = merge;\n            lodash.mergeWith = mergeWith;\n            lodash.method = method;\n            lodash.methodOf = methodOf;\n            lodash.mixin = mixin;\n            lodash.negate = negate;\n            lodash.nthArg = nthArg;\n            lodash.omit = omit;\n            lodash.omitBy = omitBy;\n            lodash.once = once;\n            lodash.orderBy = orderBy;\n            lodash.over = over;\n            lodash.overArgs = overArgs;\n            lodash.overEvery = overEvery;\n            lodash.overSome = overSome;\n            lodash.partial = partial;\n            lodash.partialRight = partialRight;\n            lodash.partition = partition;\n            lodash.pick = pick;\n            lodash.pickBy = pickBy;\n            lodash.property = property;\n            lodash.propertyOf = propertyOf;\n            lodash.pull = pull;\n            lodash.pullAll = pullAll;\n            lodash.pullAllBy = pullAllBy;\n            lodash.pullAllWith = pullAllWith;\n            lodash.pullAt = pullAt;\n            lodash.range = range;\n            lodash.rangeRight = rangeRight;\n            lodash.rearg = rearg;\n            lodash.reject = reject;\n            lodash.remove = remove;\n            lodash.rest = rest;\n            lodash.reverse = reverse;\n            lodash.sampleSize = sampleSize;\n            lodash.set = set;\n            lodash.setWith = setWith;\n            lodash.shuffle = shuffle;\n            lodash.slice = slice;\n            lodash.sortBy = sortBy;\n            lodash.sortedUniq = sortedUniq;\n            lodash.sortedUniqBy = sortedUniqBy;\n            lodash.split = split;\n            lodash.spread = spread;\n            lodash.tail = tail;\n            lodash.take = take;\n            lodash.takeRight = takeRight;\n            lodash.takeRightWhile = takeRightWhile;\n            lodash.takeWhile = takeWhile;\n            lodash.tap = tap;\n            lodash.throttle = throttle;\n            lodash.thru = thru;\n            lodash.toArray = toArray;\n            lodash.toPairs = toPairs;\n            lodash.toPairsIn = toPairsIn;\n            lodash.toPath = toPath;\n            lodash.toPlainObject = toPlainObject;\n            lodash.transform = transform;\n            lodash.unary = unary;\n            lodash.union = union;\n            lodash.unionBy = unionBy;\n            lodash.unionWith = unionWith;\n            lodash.uniq = uniq;\n            lodash.uniqBy = uniqBy;\n            lodash.uniqWith = uniqWith;\n            lodash.unset = unset;\n            lodash.unzip = unzip;\n            lodash.unzipWith = unzipWith;\n            lodash.update = update;\n            lodash.updateWith = updateWith;\n            lodash.values = values;\n            lodash.valuesIn = valuesIn;\n            lodash.without = without;\n            lodash.words = words;\n            lodash.wrap = wrap;\n            lodash.xor = xor;\n            lodash.xorBy = xorBy;\n            lodash.xorWith = xorWith;\n            lodash.zip = zip;\n            lodash.zipObject = zipObject;\n            lodash.zipObjectDeep = zipObjectDeep;\n            lodash.zipWith = zipWith;\n            // Add aliases.\n            lodash.entries = toPairs;\n            lodash.entriesIn = toPairsIn;\n            lodash.extend = assignIn;\n            lodash.extendWith = assignInWith;\n            // Add methods to `lodash.prototype`.\n            mixin(lodash, lodash);\n            /*------------------------------------------------------------------------*/ // Add methods that return unwrapped values in chain sequences.\n            lodash.add = add;\n            lodash.attempt = attempt;\n            lodash.camelCase = camelCase;\n            lodash.capitalize = capitalize;\n            lodash.ceil = ceil;\n            lodash.clamp = clamp;\n            lodash.clone = clone;\n            lodash.cloneDeep = cloneDeep;\n            lodash.cloneDeepWith = cloneDeepWith;\n            lodash.cloneWith = cloneWith;\n            lodash.conformsTo = conformsTo;\n            lodash.deburr = deburr;\n            lodash.defaultTo = defaultTo;\n            lodash.divide = divide;\n            lodash.endsWith = endsWith;\n            lodash.eq = eq;\n            lodash.escape = escape;\n            lodash.escapeRegExp = escapeRegExp;\n            lodash.every = every;\n            lodash.find = find;\n            lodash.findIndex = findIndex;\n            lodash.findKey = findKey;\n            lodash.findLast = findLast;\n            lodash.findLastIndex = findLastIndex;\n            lodash.findLastKey = findLastKey;\n            lodash.floor = floor;\n            lodash.forEach = forEach;\n            lodash.forEachRight = forEachRight;\n            lodash.forIn = forIn;\n            lodash.forInRight = forInRight;\n            lodash.forOwn = forOwn;\n            lodash.forOwnRight = forOwnRight;\n            lodash.get = get;\n            lodash.gt = gt;\n            lodash.gte = gte;\n            lodash.has = has;\n            lodash.hasIn = hasIn;\n            lodash.head = head;\n            lodash.identity = identity;\n            lodash.includes = includes;\n            lodash.indexOf = indexOf;\n            lodash.inRange = inRange;\n            lodash.invoke = invoke;\n            lodash.isArguments = isArguments;\n            lodash.isArray = isArray;\n            lodash.isArrayBuffer = isArrayBuffer;\n            lodash.isArrayLike = isArrayLike;\n            lodash.isArrayLikeObject = isArrayLikeObject;\n            lodash.isBoolean = isBoolean;\n            lodash.isBuffer = isBuffer;\n            lodash.isDate = isDate;\n            lodash.isElement = isElement;\n            lodash.isEmpty = isEmpty;\n            lodash.isEqual = isEqual;\n            lodash.isEqualWith = isEqualWith;\n            lodash.isError = isError;\n            lodash.isFinite = isFinite;\n            lodash.isFunction = isFunction;\n            lodash.isInteger = isInteger;\n            lodash.isLength = isLength;\n            lodash.isMap = isMap;\n            lodash.isMatch = isMatch;\n            lodash.isMatchWith = isMatchWith;\n            lodash.isNaN = isNaN;\n            lodash.isNative = isNative;\n            lodash.isNil = isNil;\n            lodash.isNull = isNull;\n            lodash.isNumber = isNumber;\n            lodash.isObject = isObject;\n            lodash.isObjectLike = isObjectLike;\n            lodash.isPlainObject = isPlainObject;\n            lodash.isRegExp = isRegExp;\n            lodash.isSafeInteger = isSafeInteger;\n            lodash.isSet = isSet;\n            lodash.isString = isString;\n            lodash.isSymbol = isSymbol;\n            lodash.isTypedArray = isTypedArray;\n            lodash.isUndefined = isUndefined;\n            lodash.isWeakMap = isWeakMap;\n            lodash.isWeakSet = isWeakSet;\n            lodash.join = join;\n            lodash.kebabCase = kebabCase;\n            lodash.last = last;\n            lodash.lastIndexOf = lastIndexOf;\n            lodash.lowerCase = lowerCase;\n            lodash.lowerFirst = lowerFirst;\n            lodash.lt = lt;\n            lodash.lte = lte;\n            lodash.max = max;\n            lodash.maxBy = maxBy;\n            lodash.mean = mean;\n            lodash.meanBy = meanBy;\n            lodash.min = min;\n            lodash.minBy = minBy;\n            lodash.stubArray = stubArray;\n            lodash.stubFalse = stubFalse;\n            lodash.stubObject = stubObject;\n            lodash.stubString = stubString;\n            lodash.stubTrue = stubTrue;\n            lodash.multiply = multiply;\n            lodash.nth = nth;\n            lodash.noConflict = noConflict;\n            lodash.noop = noop;\n            lodash.now = now;\n            lodash.pad = pad;\n            lodash.padEnd = padEnd;\n            lodash.padStart = padStart;\n            lodash.parseInt = parseInt1;\n            lodash.random = random;\n            lodash.reduce = reduce;\n            lodash.reduceRight = reduceRight;\n            lodash.repeat = repeat;\n            lodash.replace = replace;\n            lodash.result = result;\n            lodash.round = round;\n            lodash.runInContext = runInContext;\n            lodash.sample = sample;\n            lodash.size = size;\n            lodash.snakeCase = snakeCase;\n            lodash.some = some;\n            lodash.sortedIndex = sortedIndex;\n            lodash.sortedIndexBy = sortedIndexBy;\n            lodash.sortedIndexOf = sortedIndexOf;\n            lodash.sortedLastIndex = sortedLastIndex;\n            lodash.sortedLastIndexBy = sortedLastIndexBy;\n            lodash.sortedLastIndexOf = sortedLastIndexOf;\n            lodash.startCase = startCase;\n            lodash.startsWith = startsWith;\n            lodash.subtract = subtract;\n            lodash.sum = sum;\n            lodash.sumBy = sumBy;\n            lodash.template = template;\n            lodash.times = times;\n            lodash.toFinite = toFinite;\n            lodash.toInteger = toInteger;\n            lodash.toLength = toLength;\n            lodash.toLower = toLower;\n            lodash.toNumber = toNumber;\n            lodash.toSafeInteger = toSafeInteger;\n            lodash.toString = toString;\n            lodash.toUpper = toUpper;\n            lodash.trim = trim;\n            lodash.trimEnd = trimEnd;\n            lodash.trimStart = trimStart;\n            lodash.truncate = truncate;\n            lodash.unescape = unescape;\n            lodash.uniqueId = uniqueId;\n            lodash.upperCase = upperCase;\n            lodash.upperFirst = upperFirst;\n            // Add aliases.\n            lodash.each = forEach;\n            lodash.eachRight = forEachRight;\n            lodash.first = head;\n            mixin(lodash, function() {\n                var source = {};\n                baseForOwn(lodash, function(func, methodName) {\n                    if (!hasOwnProperty.call(lodash.prototype, methodName)) {\n                        source[methodName] = func;\n                    }\n                });\n                return source;\n            }(), {\n                \"chain\": false\n            });\n            /*------------------------------------------------------------------------*/ /**\n     * The semantic version number.\n     *\n     * @static\n     * @memberOf _\n     * @type {string}\n     */ lodash.VERSION = VERSION;\n            // Assign default placeholders.\n            arrayEach([\n                \"bind\",\n                \"bindKey\",\n                \"curry\",\n                \"curryRight\",\n                \"partial\",\n                \"partialRight\"\n            ], function(methodName) {\n                lodash[methodName].placeholder = lodash;\n            });\n            // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.\n            arrayEach([\n                \"drop\",\n                \"take\"\n            ], function(methodName, index) {\n                LazyWrapper.prototype[methodName] = function(n) {\n                    n = n === undefined$1 ? 1 : nativeMax(toInteger(n), 0);\n                    var result = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();\n                    if (result.__filtered__) {\n                        result.__takeCount__ = nativeMin(n, result.__takeCount__);\n                    } else {\n                        result.__views__.push({\n                            \"size\": nativeMin(n, MAX_ARRAY_LENGTH),\n                            \"type\": methodName + (result.__dir__ < 0 ? \"Right\" : \"\")\n                        });\n                    }\n                    return result;\n                };\n                LazyWrapper.prototype[methodName + \"Right\"] = function(n) {\n                    return this.reverse()[methodName](n).reverse();\n                };\n            });\n            // Add `LazyWrapper` methods that accept an `iteratee` value.\n            arrayEach([\n                \"filter\",\n                \"map\",\n                \"takeWhile\"\n            ], function(methodName, index) {\n                var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;\n                LazyWrapper.prototype[methodName] = function(iteratee) {\n                    var result = this.clone();\n                    result.__iteratees__.push({\n                        \"iteratee\": getIteratee(iteratee, 3),\n                        \"type\": type\n                    });\n                    result.__filtered__ = result.__filtered__ || isFilter;\n                    return result;\n                };\n            });\n            // Add `LazyWrapper` methods for `_.head` and `_.last`.\n            arrayEach([\n                \"head\",\n                \"last\"\n            ], function(methodName, index) {\n                var takeName = \"take\" + (index ? \"Right\" : \"\");\n                LazyWrapper.prototype[methodName] = function() {\n                    return this[takeName](1).value()[0];\n                };\n            });\n            // Add `LazyWrapper` methods for `_.initial` and `_.tail`.\n            arrayEach([\n                \"initial\",\n                \"tail\"\n            ], function(methodName, index) {\n                var dropName = \"drop\" + (index ? \"\" : \"Right\");\n                LazyWrapper.prototype[methodName] = function() {\n                    return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);\n                };\n            });\n            LazyWrapper.prototype.compact = function() {\n                return this.filter(identity);\n            };\n            LazyWrapper.prototype.find = function(predicate) {\n                return this.filter(predicate).head();\n            };\n            LazyWrapper.prototype.findLast = function(predicate) {\n                return this.reverse().find(predicate);\n            };\n            LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {\n                if (typeof path == \"function\") {\n                    return new LazyWrapper(this);\n                }\n                return this.map(function(value) {\n                    return baseInvoke(value, path, args);\n                });\n            });\n            LazyWrapper.prototype.reject = function(predicate) {\n                return this.filter(negate(getIteratee(predicate)));\n            };\n            LazyWrapper.prototype.slice = function(start, end) {\n                start = toInteger(start);\n                var result = this;\n                if (result.__filtered__ && (start > 0 || end < 0)) {\n                    return new LazyWrapper(result);\n                }\n                if (start < 0) {\n                    result = result.takeRight(-start);\n                } else if (start) {\n                    result = result.drop(start);\n                }\n                if (end !== undefined$1) {\n                    end = toInteger(end);\n                    result = end < 0 ? result.dropRight(-end) : result.take(end - start);\n                }\n                return result;\n            };\n            LazyWrapper.prototype.takeRightWhile = function(predicate) {\n                return this.reverse().takeWhile(predicate).reverse();\n            };\n            LazyWrapper.prototype.toArray = function() {\n                return this.take(MAX_ARRAY_LENGTH);\n            };\n            // Add `LazyWrapper` methods to `lodash.prototype`.\n            baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n                var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? \"take\" + (methodName == \"last\" ? \"Right\" : \"\") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);\n                if (!lodashFunc) {\n                    return;\n                }\n                lodash.prototype[methodName] = function() {\n                    var value = this.__wrapped__, args = isTaker ? [\n                        1\n                    ] : arguments, isLazy = value instanceof LazyWrapper, iteratee = args[0], useLazy = isLazy || isArray(value);\n                    var interceptor = function(value) {\n                        var result = lodashFunc.apply(lodash, arrayPush([\n                            value\n                        ], args));\n                        return isTaker && chainAll ? result[0] : result;\n                    };\n                    if (useLazy && checkIteratee && typeof iteratee == \"function\" && iteratee.length != 1) {\n                        // Avoid lazy use if the iteratee has a \"length\" value other than `1`.\n                        isLazy = useLazy = false;\n                    }\n                    var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;\n                    if (!retUnwrapped && useLazy) {\n                        value = onlyLazy ? value : new LazyWrapper(this);\n                        var result = func.apply(value, args);\n                        result.__actions__.push({\n                            \"func\": thru,\n                            \"args\": [\n                                interceptor\n                            ],\n                            \"thisArg\": undefined$1\n                        });\n                        return new LodashWrapper(result, chainAll);\n                    }\n                    if (isUnwrapped && onlyLazy) {\n                        return func.apply(this, args);\n                    }\n                    result = this.thru(interceptor);\n                    return isUnwrapped ? isTaker ? result.value()[0] : result.value() : result;\n                };\n            });\n            // Add `Array` methods to `lodash.prototype`.\n            arrayEach([\n                \"pop\",\n                \"push\",\n                \"shift\",\n                \"sort\",\n                \"splice\",\n                \"unshift\"\n            ], function(methodName) {\n                var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? \"tap\" : \"thru\", retUnwrapped = /^(?:pop|shift)$/.test(methodName);\n                lodash.prototype[methodName] = function() {\n                    var args = arguments;\n                    if (retUnwrapped && !this.__chain__) {\n                        var value = this.value();\n                        return func.apply(isArray(value) ? value : [], args);\n                    }\n                    return this[chainName](function(value) {\n                        return func.apply(isArray(value) ? value : [], args);\n                    });\n                };\n            });\n            // Map minified method names to their real names.\n            baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n                var lodashFunc = lodash[methodName];\n                if (lodashFunc) {\n                    var key = lodashFunc.name + \"\";\n                    if (!hasOwnProperty.call(realNames, key)) {\n                        realNames[key] = [];\n                    }\n                    realNames[key].push({\n                        \"name\": methodName,\n                        \"func\": lodashFunc\n                    });\n                }\n            });\n            realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [\n                {\n                    \"name\": \"wrapper\",\n                    \"func\": undefined$1\n                }\n            ];\n            // Add methods to `LazyWrapper`.\n            LazyWrapper.prototype.clone = lazyClone;\n            LazyWrapper.prototype.reverse = lazyReverse;\n            LazyWrapper.prototype.value = lazyValue;\n            // Add chain sequence methods to the `lodash` wrapper.\n            lodash.prototype.at = wrapperAt;\n            lodash.prototype.chain = wrapperChain;\n            lodash.prototype.commit = wrapperCommit;\n            lodash.prototype.next = wrapperNext;\n            lodash.prototype.plant = wrapperPlant;\n            lodash.prototype.reverse = wrapperReverse;\n            lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;\n            // Add lazy aliases.\n            lodash.prototype.first = lodash.prototype.head;\n            if (symIterator) {\n                lodash.prototype[symIterator] = wrapperToIterator;\n            }\n            return lodash;\n        };\n        /*--------------------------------------------------------------------------*/ // Export lodash.\n        var _ = runInContext();\n        // Some AMD build optimizers, like r.js, check for condition patterns like:\n        if (freeModule) {\n            // Export for Node.js.\n            (freeModule.exports = _)._ = _;\n            // Export for CommonJS support.\n            freeExports._ = _;\n        } else {\n            // Export to the global object.\n            root._ = _;\n        }\n    }).call(commonjsGlobal);\n});\nvar GlobalContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});\nvar GlobalProvider = function GlobalProvider(_ref) {\n    var children = _ref.children, currentUser = _ref.currentUser, replyTop = _ref.replyTop, customImg = _ref.customImg, inputStyle = _ref.inputStyle, formStyle = _ref.formStyle, submitBtnStyle = _ref.submitBtnStyle, cancelBtnStyle = _ref.cancelBtnStyle, imgStyle = _ref.imgStyle, commentsCount = _ref.commentsCount, commentData = _ref.commentData, onSubmitAction = _ref.onSubmitAction, onDeleteAction = _ref.onDeleteAction, onReplyAction = _ref.onReplyAction, onEditAction = _ref.onEditAction, currentData = _ref.currentData, replyInputStyle = _ref.replyInputStyle, removeEmoji = _ref.removeEmoji, advancedInput = _ref.advancedInput, placeHolder = _ref.placeHolder;\n    var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(currentUser), currentUserData = _useState[0];\n    var _useState2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]), data = _useState2[0], setData = _useState2[1];\n    var _useState3 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]), editArr = _useState3[0], setEdit = _useState3[1];\n    var _useState4 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]), replyArr = _useState4[0], setReply = _useState4[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (commentData) {\n            setData(commentData);\n        }\n    }, [\n        commentData\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (currentData) {\n            currentData(data);\n        }\n    }, [\n        data\n    ]);\n    var handleAction = function handleAction(id, edit) {\n        if (edit) {\n            var editArrCopy = [].concat(editArr);\n            var indexOfId = lodash.indexOf(editArrCopy, id);\n            if (lodash.includes(editArr, id)) {\n                editArrCopy.splice(indexOfId, 1);\n                setEdit(editArrCopy);\n            } else {\n                editArrCopy.push(id);\n                setEdit(editArrCopy);\n            }\n        } else {\n            var replyArrCopy = [].concat(replyArr);\n            var _indexOfId = lodash.indexOf(replyArrCopy, id);\n            if (lodash.includes(replyArr, id)) {\n                replyArrCopy.splice(_indexOfId, 1);\n                setReply(replyArrCopy);\n            } else {\n                replyArrCopy.push(id);\n                setReply(replyArrCopy);\n            }\n        }\n    };\n    var onSubmit = function onSubmit(text, uuid) {\n        var copyData = [].concat(data);\n        copyData.push({\n            userId: currentUserData.currentUserId,\n            comId: uuid,\n            avatarUrl: currentUserData.currentUserImg,\n            userProfile: currentUserData.currentUserProfile ? currentUserData.currentUserProfile : undefined,\n            fullName: currentUserData.currentUserFullName,\n            text: text,\n            timestamp: \"\" + new Date().toISOString(),\n            replies: []\n        });\n        setData(copyData);\n    };\n    var onEdit = function onEdit(text, comId, parentId) {\n        var copyData = [].concat(data);\n        if (parentId) {\n            var indexOfParent = lodash.findIndex(copyData, {\n                comId: parentId\n            });\n            var indexOfId = lodash.findIndex(copyData[indexOfParent].replies, {\n                comId: comId\n            });\n            copyData[indexOfParent].replies[indexOfId].text = text;\n            setData(copyData);\n            handleAction(comId, true);\n        } else {\n            var _indexOfId2 = lodash.findIndex(copyData, {\n                comId: comId\n            });\n            copyData[_indexOfId2].text = text;\n            setData(copyData);\n            handleAction(comId, true);\n        }\n    };\n    var onReply = function onReply(text, comId, parentId, uuid) {\n        var copyData = [].concat(data);\n        if (parentId) {\n            var indexOfParent = lodash.findIndex(copyData, {\n                comId: parentId\n            });\n            copyData[indexOfParent].replies.push({\n                userId: currentUserData.currentUserId,\n                comId: uuid,\n                avatarUrl: currentUserData.currentUserImg,\n                userProfile: currentUserData.currentUserProfile ? currentUserData.currentUserProfile : undefined,\n                fullName: currentUserData.currentUserFullName,\n                text: text,\n                timestamp: \"\" + new Date().toISOString()\n            });\n            setData(copyData);\n            handleAction(comId, false);\n        } else {\n            var indexOfId = lodash.findIndex(copyData, {\n                comId: comId\n            });\n            copyData[indexOfId].replies.push({\n                userId: currentUserData.currentUserId,\n                comId: uuid,\n                avatarUrl: currentUserData.currentUserImg,\n                userProfile: currentUserData.currentUserProfile ? currentUserData.currentUserProfile : undefined,\n                fullName: currentUserData.currentUserFullName,\n                text: text,\n                timestamp: \"\" + new Date().toISOString()\n            });\n            setData(copyData);\n            handleAction(comId, false);\n        }\n    };\n    var onDelete = function onDelete(comId, parentId) {\n        var copyData = [].concat(data);\n        if (parentId) {\n            var indexOfParent = lodash.findIndex(copyData, {\n                comId: parentId\n            });\n            var indexOfId = lodash.findIndex(copyData[indexOfParent].replies, {\n                comId: comId\n            });\n            copyData[indexOfParent].replies.splice(indexOfId, 1);\n            setData(copyData);\n        } else {\n            var _indexOfId3 = lodash.findIndex(copyData, {\n                comId: comId\n            });\n            copyData.splice(_indexOfId3, 1);\n            setData(copyData);\n        }\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(GlobalContext.Provider, {\n        value: {\n            currentUserData: currentUserData,\n            replyTop: replyTop,\n            data: data,\n            handleAction: handleAction,\n            editArr: editArr,\n            onSubmit: onSubmit,\n            onEdit: onEdit,\n            replyArr: replyArr,\n            onReply: onReply,\n            onDelete: onDelete,\n            customImg: customImg,\n            inputStyle: inputStyle,\n            formStyle: formStyle,\n            submitBtnStyle: submitBtnStyle,\n            cancelBtnStyle: cancelBtnStyle,\n            imgStyle: imgStyle,\n            commentsCount: commentsCount,\n            onSubmitAction: onSubmitAction,\n            onDeleteAction: onDeleteAction,\n            onReplyAction: onReplyAction,\n            onEditAction: onEditAction,\n            replyInputStyle: replyInputStyle,\n            removeEmoji: removeEmoji,\n            advancedInput: advancedInput,\n            placeHolder: placeHolder\n        }\n    }, children);\n};\nfunction useOutsideAlerter(ref, setOpen) {\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        function handleClickOutside(event) {\n            if (ref.current && !ref.current.contains(event.target)) {\n                setOpen(!open);\n            }\n        }\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return function() {\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, [\n        ref\n    ]);\n}\nvar EmojiInput = function EmojiInput(_ref) {\n    var text = _ref.text, setText = _ref.setText, mode = _ref.mode, inputStyle = _ref.inputStyle, placeHolder = _ref.placeHolder;\n    var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false), open1 = _useState[0], setOpen = _useState[1];\n    var _useState2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), chosenEmoji = _useState2[0], setChosenEmoji = _useState2[1];\n    var wrapperRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    useOutsideAlerter(wrapperRef, setOpen);\n    var globalStore = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(GlobalContext);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (chosenEmoji) {\n            var newText = text + \" \" + chosenEmoji.emoji;\n            setText(newText);\n        }\n    }, [\n        chosenEmoji\n    ]);\n    var onEmojiClick = function onEmojiClick(event, emojiObject) {\n        setChosenEmoji(emojiObject);\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"emoji-input\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"input\", {\n        className: \"postComment\",\n        style: mode === \"replyMode\" || mode === \"editMode\" ? globalStore.replyInputStyle : globalStore.inputStyle || inputStyle,\n        placeholder: placeHolder ? placeHolder : \"Type your reply here.\",\n        type: \"text\",\n        value: text,\n        onChange: function onChange(e) {\n            return setText(e.target.value);\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"emoji-icon\",\n        onClick: function onClick() {\n            return setOpen(!open1);\n        }\n    }), open1 ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        ref: wrapperRef\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((emoji_picker_react__WEBPACK_IMPORTED_MODULE_1___default()), {\n        onEmojiClick: onEmojiClick\n    })) : null);\n};\nvar RegularInput = function RegularInput(_ref) {\n    var formStyle = _ref.formStyle, imgDiv = _ref.imgDiv, imgStyle = _ref.imgStyle, customImg = _ref.customImg, mode = _ref.mode, inputStyle = _ref.inputStyle, cancelBtnStyle = _ref.cancelBtnStyle, comId = _ref.comId, submitBtnStyle = _ref.submitBtnStyle, handleSubmit = _ref.handleSubmit, text = _ref.text, setText = _ref.setText, placeHolder = _ref.placeHolder;\n    var globalStore = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(GlobalContext);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"form\", {\n        className: \"form\",\n        style: globalStore.formStyle || formStyle,\n        onSubmit: function onSubmit() {\n            return handleSubmit;\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"userImg\",\n        style: imgDiv\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"a\", {\n        target: \"_blank\",\n        href: globalStore.currentUserData.currentUserProfile\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"img\", {\n        src: globalStore.customImg || customImg || globalStore.currentUserData.currentUserImg,\n        style: globalStore.imgStyle || imgStyle,\n        alt: \"userIcon\",\n        className: \"imgdefault\"\n    }))), globalStore.removeEmoji ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"input\", {\n        className: \"postComment\",\n        style: mode === \"replyMode\" || mode === \"editMode\" ? globalStore.replyInputStyle : globalStore.inputStyle || inputStyle,\n        type: \"text\",\n        placeholder: placeHolder ? placeHolder : \"Type your reply here.\",\n        value: text,\n        onChange: function onChange(e) {\n            return setText(e.target.value);\n        }\n    }) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(EmojiInput, {\n        text: text,\n        setText: setText,\n        mode: mode,\n        inputStyle: inputStyle,\n        placeHolder: placeHolder\n    }), mode && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\n        className: \"cancelBtn\",\n        style: globalStore.cancelBtnStyle || cancelBtnStyle,\n        type: \"button\",\n        onClick: function onClick() {\n            return mode === \"editMode\" ? globalStore.handleAction(comId, true) : globalStore.handleAction(comId, false);\n        }\n    }, \"Cancel\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\n        className: \"postBtn\",\n        type: \"submit\",\n        disabled: text != \"\" ? false : true,\n        style: globalStore.submitBtnStyle || submitBtnStyle,\n        onClick: function onClick(e) {\n            return text ? handleSubmit(e) : null;\n        }\n    }, \"Post\"));\n};\nvar AdvancedInput = function AdvancedInput(_ref) {\n    var formStyle = _ref.formStyle, handleSubmit = _ref.handleSubmit, submitBtnStyle = _ref.submitBtnStyle, cancelBtnStyle = _ref.cancelBtnStyle, mode = _ref.mode, comId = _ref.comId, imgDiv = _ref.imgDiv, imgStyle = _ref.imgStyle, customImg = _ref.customImg, text = _ref.text, placeHolder = _ref.placeHolder;\n    var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"<p></p>\"), html = _useState[0], setHtml = _useState[1];\n    var globalStore = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(GlobalContext);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (text != \"\") {\n            setHtml(text);\n        }\n    }, [\n        text\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (html != \"<p></p>\") {\n            setEditor(draft_js__WEBPACK_IMPORTED_MODULE_3__.EditorState.createWithContent(contentState));\n        }\n    }, [\n        html\n    ]);\n    var contentBlock = html_to_draftjs__WEBPACK_IMPORTED_MODULE_6___default()(html);\n    var contentState = draft_js__WEBPACK_IMPORTED_MODULE_3__.ContentState.createFromBlockArray(contentBlock.contentBlocks);\n    var _useState2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(draft_js__WEBPACK_IMPORTED_MODULE_3__.EditorState.createWithContent(contentState)), editorState = _useState2[0], setEditor = _useState2[1];\n    var _useState3 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), editText = _useState3[0], setEditText = _useState3[1];\n    var _onEditorStateChange = function onEditorStateChange(editorState) {\n        setEditor(editorState);\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        setEditText(draftjs_to_html__WEBPACK_IMPORTED_MODULE_5___default()((0,draft_js__WEBPACK_IMPORTED_MODULE_3__.convertToRaw)(editorState.getCurrentContent())).trim());\n    }, [\n        editorState\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"advanced-overlay\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"userImg\",\n        style: imgDiv\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"a\", {\n        target: \"_blank\",\n        href: globalStore.currentUserData.currentUserProfile\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"img\", {\n        src: globalStore.customImg || customImg || globalStore.currentUserData.currentUserImg,\n        style: globalStore.imgStyle || imgStyle,\n        alt: \"userIcon\",\n        className: \"imgdefault\"\n    }))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"advanced-input\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"form\", {\n        className: \"form advanced-form \",\n        style: globalStore.formStyle || formStyle,\n        onSubmit: function(e) {\n            try {\n                var _temp2 = function _temp2(_temp) {\n                    return editText != \"<p></p>\" ? (0, setEditor(draft_js__WEBPACK_IMPORTED_MODULE_3__.EditorState.createEmpty())) : _temp;\n                };\n                return Promise.resolve(editText != \"<p></p>\" ? Promise.resolve(editText != \"<p></p>\" ? handleSubmit(e, editText) : null).then(_temp2) : _temp2(editText != \"<p></p>\" ? handleSubmit(e, editText) : null));\n            } catch (e) {\n                return Promise.reject(e);\n            }\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"advanced-border\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(react_draft_wysiwyg__WEBPACK_IMPORTED_MODULE_4__.Editor, {\n        editorState: editorState,\n        placeholder: placeHolder ? placeHolder : \"Type your reply here.\",\n        onEditorStateChange: function onEditorStateChange(editorState) {\n            return _onEditorStateChange(editorState);\n        },\n        toolbar: {\n            options: [\n                \"inline\",\n                \"blockType\",\n                \"list\",\n                \"colorPicker\",\n                \"link\",\n                \"emoji\",\n                \"image\"\n            ],\n            link: {\n                inDropdown: false,\n                className: undefined,\n                component: undefined,\n                popupClassName: undefined,\n                dropdownClassName: undefined,\n                showOpenOptionOnHover: true,\n                defaultTargetOption: \"_self\",\n                options: [\n                    \"link\"\n                ],\n                linkCallback: undefined\n            },\n            image: {\n                className: undefined,\n                component: undefined,\n                popupClassName: undefined,\n                urlEnabled: true,\n                uploadEnabled: true,\n                alignmentEnabled: true,\n                uploadCallback: undefined,\n                previewImage: false,\n                inputAccept: \"image/gif,image/jpeg,image/jpg,image/png,image/svg\",\n                alt: {\n                    present: false,\n                    mandatory: false\n                },\n                defaultSize: {\n                    height: \"auto\",\n                    width: \"auto\"\n                }\n            },\n            inline: {\n                inDropdown: false,\n                className: undefined,\n                component: undefined,\n                dropdownClassName: undefined,\n                options: [\n                    \"bold\",\n                    \"italic\",\n                    \"underline\",\n                    \"strikethrough\",\n                    \"monospace\"\n                ]\n            },\n            blockType: {\n                inDropdown: true,\n                options: [\n                    \"Normal\",\n                    \"Blockquote\",\n                    \"Code\"\n                ],\n                className: undefined,\n                component: undefined,\n                dropdownClassName: undefined\n            },\n            list: {\n                inDropdown: false,\n                className: undefined,\n                component: undefined,\n                dropdownClassName: undefined,\n                options: [\n                    \"unordered\",\n                    \"ordered\"\n                ]\n            }\n        }\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"advanced-btns\"\n    }, mode && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\n        className: \"advanced-cancel cancelBtn\",\n        style: globalStore.cancelBtnStyle || cancelBtnStyle,\n        type: \"button\",\n        onClick: function onClick() {\n            return mode === \"editMode\" ? globalStore.handleAction(comId, true) : globalStore.handleAction(comId, false);\n        }\n    }, \"Cancel\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\n        className: \"advanced-post postBtn\",\n        type: \"submit\",\n        disabled: editText === \"<p></p>\" ? true : false,\n        style: globalStore.submitBtnStyle || submitBtnStyle,\n        onClick: function(e) {\n            try {\n                var _temp4 = function _temp4(_temp3) {\n                    return editText != \"<p></p>\" ? (0, setEditor(draft_js__WEBPACK_IMPORTED_MODULE_3__.EditorState.createEmpty())) : _temp3;\n                };\n                return Promise.resolve(editText != \"<p></p>\" ? Promise.resolve(editText != \"<p></p>\" ? handleSubmit(e, editText) : null).then(_temp4) : _temp4(editText != \"<p></p>\" ? handleSubmit(e, editText) : null));\n            } catch (e) {\n                return Promise.reject(e);\n            }\n        }\n    }, \"Post\")))));\n};\nvar _require = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/uuid/dist/esm-node/index.js\"), uuidv4 = _require.v4;\nvar InputField = function InputField(_ref) {\n    var formStyle = _ref.formStyle, comId = _ref.comId, fillerText = _ref.fillerText, parentId = _ref.parentId, mode = _ref.mode, customImg = _ref.customImg, inputStyle = _ref.inputStyle, cancelBtnStyle = _ref.cancelBtnStyle, submitBtnStyle = _ref.submitBtnStyle, imgStyle = _ref.imgStyle, imgDiv = _ref.imgDiv, placeHolder = _ref.placeHolder;\n    var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), text = _useState[0], setText = _useState[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (fillerText) {\n            setText(fillerText);\n        }\n    }, [\n        fillerText\n    ]);\n    var globalStore = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(GlobalContext);\n    var editMode = function editMode(advText) {\n        try {\n            var textToSend = advText ? advText : text;\n            return Promise.resolve(globalStore.onEdit(textToSend, comId, parentId)).then(function() {\n                var _globalStore$onEditAc2 = globalStore.onEditAction;\n                return _globalStore$onEditAc2 ? Promise.resolve(globalStore.onEditAction({\n                    userId: globalStore.currentUserData.currentUserId,\n                    comId: comId,\n                    avatarUrl: globalStore.currentUserData.currentUserImg,\n                    userProfile: globalStore.currentUserData.currentUserProfile ? globalStore.currentUserData.currentUserProfile : null,\n                    fullName: globalStore.currentUserData.currentUserFullName,\n                    text: textToSend,\n                    parentOfEditedCommentId: parentId\n                })) : _globalStore$onEditAc2;\n            });\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    };\n    var replyMode = function replyMode(replyUuid, advText) {\n        try {\n            var textToSend = advText ? advText : text;\n            return Promise.resolve(globalStore.onReply(textToSend, comId, parentId, replyUuid)).then(function() {\n                var _globalStore$onReplyA2 = globalStore.onReplyAction;\n                return _globalStore$onReplyA2 ? Promise.resolve(globalStore.onReplyAction({\n                    userId: globalStore.currentUserData.currentUserId,\n                    repliedToCommentId: comId,\n                    avatarUrl: globalStore.currentUserData.currentUserImg,\n                    userProfile: globalStore.currentUserData.currentUserProfile ? globalStore.currentUserData.currentUserProfile : null,\n                    fullName: globalStore.currentUserData.currentUserFullName,\n                    text: textToSend,\n                    parentOfRepliedCommentId: parentId,\n                    comId: replyUuid\n                })) : _globalStore$onReplyA2;\n            });\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    };\n    var submitMode = function submitMode(createUuid, advText) {\n        try {\n            var textToSend = advText ? advText : text;\n            return Promise.resolve(globalStore.onSubmit(textToSend, createUuid)).then(function() {\n                var _globalStore$onSubmit2 = globalStore.onSubmitAction;\n                return _globalStore$onSubmit2 ? Promise.resolve(globalStore.onSubmitAction({\n                    userId: globalStore.currentUserData.currentUserId,\n                    comId: createUuid,\n                    avatarUrl: globalStore.currentUserData.currentUserImg,\n                    userProfile: globalStore.currentUserData.currentUserProfile ? globalStore.currentUserData.currentUserProfile : null,\n                    fullName: globalStore.currentUserData.currentUserFullName,\n                    text: textToSend,\n                    replies: []\n                })) : _globalStore$onSubmit2;\n            });\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    };\n    var handleSubmit = function handleSubmit(event, advText) {\n        try {\n            event.preventDefault();\n            var createUuid = uuidv4();\n            var replyUuid = uuidv4();\n            mode === \"editMode\" ? editMode(advText) : mode === \"replyMode\" ? replyMode(replyUuid, advText) : submitMode(createUuid, advText);\n            setText(\"\");\n            return Promise.resolve();\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, globalStore.advancedInput ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(AdvancedInput, {\n        handleSubmit: handleSubmit,\n        text: mode === \"editMode\" ? text : \"\",\n        formStyle: formStyle,\n        mode: mode,\n        cancelBtnStyle: cancelBtnStyle,\n        submitBtnStyle: submitBtnStyle,\n        comId: comId,\n        imgDiv: imgDiv,\n        imgStyle: imgStyle,\n        customImg: customImg,\n        placeHolder: placeHolder\n    }) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(RegularInput, {\n        formStyle: formStyle,\n        imgDiv: imgDiv,\n        imgStyle: imgStyle,\n        customImg: customImg,\n        mode: mode,\n        inputStyle: inputStyle,\n        cancelBtnStyle: cancelBtnStyle,\n        comId: comId,\n        submitBtnStyle: submitBtnStyle,\n        handleSubmit: handleSubmit,\n        text: text,\n        setText: setText,\n        placeHolder: placeHolder\n    }));\n};\nvar DeleteModal = function DeleteModal(_ref) {\n    var comId = _ref.comId, parentId = _ref.parentId;\n    var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false), open1 = _useState[0], setOpen = _useState[1];\n    var onOpenModal = function onOpenModal() {\n        return setOpen(true);\n    };\n    var onCloseModal = function onCloseModal() {\n        return setOpen(false);\n    };\n    var globalStore = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(GlobalContext);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        style: {\n            width: \"100%\"\n        },\n        onClick: onOpenModal\n    }, \"delete\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(react_responsive_modal__WEBPACK_IMPORTED_MODULE_9__.Modal, {\n        open: open1,\n        onClose: onCloseModal,\n        center: true\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"h2\", null, \"Are you sure?\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"p\", null, \"Once you delete this comment it will be gone forever.\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"deleteBtns\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\n        className: \"delete\",\n        onClick: function() {\n            try {\n                return Promise.resolve(globalStore.onDelete(comId, parentId)).then(function() {\n                    var _globalStore$onDelete2 = globalStore.onDeleteAction;\n                    return _globalStore$onDelete2 ? Promise.resolve(globalStore.onDeleteAction({\n                        comIdToDelete: comId,\n                        parentOfDeleteId: parentId\n                    })) : _globalStore$onDelete2;\n                });\n            } catch (e) {\n                return Promise.reject(e);\n            }\n        }\n    }, \"Delete\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\n        className: \"cancel\",\n        onClick: onCloseModal\n    }, \"Cancel\"))));\n};\nvar CommentStructure = function CommentStructure(_ref) {\n    var info = _ref.info, editMode = _ref.editMode, parentId = _ref.parentId, replyMode = _ref.replyMode, showTimestamp = _ref.showTimestamp;\n    var globalStore = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(GlobalContext);\n    var currentUser = globalStore.currentUserData;\n    var optionsMenu = function optionsMenu() {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            className: \"userActions\"\n        }, info.userId === currentUser.currentUserId && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_szhsin_react_menu__WEBPACK_IMPORTED_MODULE_10__.Menu, {\n            menuButton: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\n                className: \"actionsBtn\"\n            }, \" \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                className: \"optionIcon\"\n            }))\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_szhsin_react_menu__WEBPACK_IMPORTED_MODULE_11__.MenuItem, {\n            onClick: function onClick() {\n                return globalStore.handleAction(info.comId, true);\n            }\n        }, \"edit\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_szhsin_react_menu__WEBPACK_IMPORTED_MODULE_11__.MenuItem, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(DeleteModal, {\n            comId: info.comId,\n            parentId: parentId\n        }))));\n    };\n    var timeAgo = function timeAgo(date) {\n        var units = [\n            {\n                label: \"year\",\n                seconds: 31536000\n            },\n            {\n                label: \"month\",\n                seconds: 2592000\n            },\n            {\n                label: \"day\",\n                seconds: 86400\n            },\n            {\n                label: \"hour\",\n                seconds: 3600\n            },\n            {\n                label: \"minute\",\n                seconds: 60\n            },\n            {\n                label: \"second\",\n                seconds: 1\n            }\n        ];\n        var time = Math.floor((new Date().valueOf() - new Date(date).valueOf()) / 1000);\n        for(var _i = 0, _units = units; _i < _units.length; _i++){\n            var _units$_i = _units[_i], label = _units$_i.label, seconds = _units$_i.seconds;\n            var interval = Math.floor(time / seconds);\n            if (interval >= 1) {\n                return interval + \" \" + label + (interval > 1 ? \"s\" : \"\") + \" ago\";\n            }\n        }\n        return \"just now\";\n    };\n    var userInfo = function userInfo() {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            className: \"commentsTwo\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"a\", {\n            className: \"userLink\",\n            target: \"_blank\",\n            href: info.userProfile\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"img\", {\n            src: info.avatarUrl,\n            alt: \"userIcon\",\n            className: \"imgdefault\",\n            style: globalStore.imgStyle || (!globalStore.replyTop ? {\n                position: \"relative\",\n                top: 7\n            } : null)\n        })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            className: \"fullName\"\n        }, info.fullName, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n            className: \"commenttimestamp\"\n        }, showTimestamp && (info.timestamp == null ? null : timeAgo(info.timestamp))))));\n    };\n    var replyTopSection = function replyTopSection() {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            className: \"halfDiv\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            className: \"userInfo\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, info.text), userInfo()), currentUser && optionsMenu());\n    };\n    var replyBottomSection = function replyBottomSection() {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            className: \"halfDiv\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            className: \"userInfo\"\n        }, userInfo(), globalStore.advancedInput ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            className: \"infoStyle\",\n            dangerouslySetInnerHTML: {\n                __html: info.text\n            }\n        }) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            className: \"infoStyle\"\n        }, info.text), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            style: {\n                marginLeft: 32\n            }\n        }, \" \", currentUser && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\n            className: \"replyBtn\",\n            onClick: function onClick() {\n                return globalStore.handleAction(info.comId, false);\n            }\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            className: \"replyIcon\"\n        }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n            style: {\n                marginLeft: 17\n            }\n        }, \"Reply\"))))), currentUser && optionsMenu());\n    };\n    var actionModeSection = function actionModeSection(mode) {\n        if (mode === \"reply\") {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                className: \"replysection\"\n            }, globalStore.replyTop ? replyTopSection() : replyBottomSection(), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(InputField, {\n                formStyle: {\n                    backgroundColor: \"transparent\",\n                    padding: \"20px 0px\",\n                    marginLeft: \"-15px\"\n                },\n                comId: info.comId,\n                fillerText: \"\",\n                mode: \"replyMode\",\n                parentId: parentId\n            }));\n        } else {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(InputField, {\n                formStyle: {\n                    backgroundColor: \"transparent\",\n                    padding: \"20px 0px\",\n                    marginLeft: \"-15px\"\n                },\n                comId: info.comId,\n                fillerText: info.text,\n                mode: \"editMode\",\n                parentId: parentId\n            });\n        }\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, editMode ? actionModeSection(\"edit\") : replyMode ? actionModeSection(\"reply\") : globalStore.replyTop ? replyTopSection() : replyBottomSection());\n};\nvar LoginSection = function LoginSection(_ref) {\n    var loginLink = _ref.loginLink, signUpLink = _ref.signUpLink, onLogin = _ref.onLogin, onSignUp = _ref.onSignUp;\n    var handleLoginClick = function handleLoginClick() {\n        var loginAction = onLogin || loginLink;\n        if (typeof loginAction === \"function\") {\n            loginAction();\n        } else if (loginAction) {\n            window.location.href = loginAction;\n        }\n    };\n    var handleSignUpClick = function handleSignUpClick() {\n        var signUpAction = onSignUp || signUpLink;\n        if (typeof signUpAction === \"function\") {\n            signUpAction();\n        } else if (signUpAction) {\n            window.location.href = signUpAction;\n        }\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"signBox\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"signLine\"\n    }, \"Log in or sign up to leave a comment\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\n        className: \"loginBtn\",\n        name: \"login\",\n        onClick: handleLoginClick\n    }, \"Log In\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\n        className: \"signBtn\",\n        name: \"signup\",\n        onClick: handleSignUpClick\n    }, \"Sign Up\")));\n};\nvar NoComments = function NoComments() {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"no-comDiv\"\n    }, \" \", \"No comments here. Be the first one to comment!\");\n};\nvar CommentSection = function CommentSection(_ref) {\n    var overlayStyle = _ref.overlayStyle, logIn = _ref.logIn, hrStyle = _ref.hrStyle, titleStyle = _ref.titleStyle, customNoComment = _ref.customNoComment, _ref$showTimestamp = _ref.showTimestamp, showTimestamp = _ref$showTimestamp === void 0 ? true : _ref$showTimestamp;\n    var handleLogin = function handleLogin() {\n        if (typeof logIn.onLogin === \"function\") {\n            logIn.onLogin();\n        } else if (typeof logIn.loginLink === \"string\") {\n            window.location.href = logIn.loginLink;\n        }\n    };\n    var handleSignUp = function handleSignUp() {\n        if (typeof logIn.onSignUp === \"function\") {\n            logIn.onSignUp();\n        } else if (typeof logIn.signUpLink === \"string\") {\n            window.location.href = logIn.signUpLink;\n        }\n    };\n    var loginMode = function loginMode() {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(LoginSection, {\n            loginLink: handleLogin,\n            signUpLink: handleSignUp\n        });\n    };\n    var globalStore = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(GlobalContext);\n    var totalComments = function totalComments() {\n        var count = 0;\n        globalStore.data.map(function(i) {\n            count = count + 1;\n            i.replies.map(function() {\n                return count = count + 1;\n            });\n        });\n        return count;\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"overlay\",\n        style: overlayStyle\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n        className: \"comment-title\",\n        style: titleStyle\n    }, globalStore.commentsCount || totalComments(), \" \", totalComments() === 1 ? \"Comment\" : \"Comments\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"hr\", {\n        className: \"hr-style\",\n        style: hrStyle\n    }), globalStore.currentUserData === null ? loginMode() : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(InputField, {\n        placeHolder: globalStore.placeHolder,\n        formStyle: {\n            margin: \"10px 0px\"\n        },\n        imgDiv: {\n            margin: 0\n        }\n    }), globalStore.data.length > 0 ? globalStore.data.map(function(i) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            key: i.comId\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(CommentStructure, {\n            info: i,\n            editMode: lodash.indexOf(globalStore.editArr, i.comId) === -1 ? false : true,\n            replyMode: lodash.indexOf(globalStore.replyArr, i.comId) === -1 ? false : true,\n            logIn: logIn,\n            showTimestamp: showTimestamp\n        }), i.replies && i.replies.length > 0 && i.replies.map(function(j) {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                className: \"replySection\",\n                key: j.comId\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(CommentStructure, {\n                info: j,\n                parentId: i.comId,\n                editMode: lodash.indexOf(globalStore.editArr, j.comId) === -1 ? false : true,\n                replyMode: lodash.indexOf(globalStore.replyArr, j.comId) === -1 ? false : true,\n                logIn: logIn,\n                showTimestamp: showTimestamp\n            }));\n        }));\n    }) : customNoComment ? customNoComment() : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(NoComments, null));\n};\nvar CommentSection$1 = function CommentSection$1(_ref) {\n    var currentUser = _ref.currentUser, customImg = _ref.customImg, inputStyle = _ref.inputStyle, formStyle = _ref.formStyle, submitBtnStyle = _ref.submitBtnStyle, cancelBtnStyle = _ref.cancelBtnStyle, overlayStyle = _ref.overlayStyle, replyInputStyle = _ref.replyInputStyle, logIn = _ref.logIn, imgStyle = _ref.imgStyle, replyTop = _ref.replyTop, commentsCount = _ref.commentsCount, commentData = _ref.commentData, placeHolder = _ref.placeHolder, showTimestamp = _ref.showTimestamp, hrStyle = _ref.hrStyle, titleStyle = _ref.titleStyle, removeEmoji = _ref.removeEmoji, onSubmitAction = _ref.onSubmitAction, onDeleteAction = _ref.onDeleteAction, onReplyAction = _ref.onReplyAction, onEditAction = _ref.onEditAction, customNoComment = _ref.customNoComment, currentData = _ref.currentData, advancedInput = _ref.advancedInput;\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(GlobalProvider, {\n        currentUser: currentUser,\n        replyTop: replyTop,\n        customImg: customImg,\n        inputStyle: inputStyle,\n        formStyle: formStyle,\n        submitBtnStyle: submitBtnStyle,\n        cancelBtnStyle: cancelBtnStyle,\n        replyInputStyle: replyInputStyle,\n        imgStyle: imgStyle,\n        commentsCount: commentsCount,\n        commentData: commentData,\n        onSubmitAction: onSubmitAction,\n        onDeleteAction: onDeleteAction,\n        onReplyAction: onReplyAction,\n        onEditAction: onEditAction,\n        currentData: currentData,\n        removeEmoji: removeEmoji,\n        advancedInput: advancedInput,\n        placeHolder: placeHolder\n    }, /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(CommentSection, {\n        overlayStyle: overlayStyle,\n        hrStyle: hrStyle,\n        logIn: logIn,\n        titleStyle: titleStyle,\n        customNoComment: customNoComment,\n        showTimestamp: showTimestamp\n    }));\n};\n //# sourceMappingURL=index.modern.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-comments-section/dist/index.modern.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-comments-section/dist/index.css":
/*!************************************************************!*\
  !*** ./node_modules/react-comments-section/dist/index.css ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"fd8d065e6c65\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtY29tbWVudHMtc2VjdGlvbi9kaXN0L2luZGV4LmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLEtBQVUsRUFBRSxFQUF1QiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWNvbW1lbnRzLXNlY3Rpb24vZGlzdC9pbmRleC5jc3M/ODM2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcImZkOGQwNjVlNmM2NVwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-comments-section/dist/index.css\n");

/***/ })

};
;