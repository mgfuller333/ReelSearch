"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/immutable";
exports.ids = ["vendor-chunks/immutable"];
exports.modules = {

/***/ "(ssr)/./node_modules/immutable/dist/immutable.es.js":
/*!*****************************************************!*\
  !*** ./node_modules/immutable/dist/immutable.es.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Collection: () => (/* binding */ Collection),\n/* harmony export */   Iterable: () => (/* binding */ Iterable),\n/* harmony export */   List: () => (/* binding */ List),\n/* harmony export */   Map: () => (/* binding */ Map),\n/* harmony export */   OrderedMap: () => (/* binding */ OrderedMap),\n/* harmony export */   OrderedSet: () => (/* binding */ OrderedSet),\n/* harmony export */   PairSorting: () => (/* binding */ PairSorting),\n/* harmony export */   Range: () => (/* binding */ Range),\n/* harmony export */   Record: () => (/* binding */ Record),\n/* harmony export */   Repeat: () => (/* binding */ Repeat),\n/* harmony export */   Seq: () => (/* binding */ Seq),\n/* harmony export */   Set: () => (/* binding */ Set),\n/* harmony export */   Stack: () => (/* binding */ Stack),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   fromJS: () => (/* binding */ fromJS),\n/* harmony export */   get: () => (/* binding */ get),\n/* harmony export */   getIn: () => (/* binding */ getIn$1),\n/* harmony export */   has: () => (/* binding */ has),\n/* harmony export */   hasIn: () => (/* binding */ hasIn$1),\n/* harmony export */   hash: () => (/* binding */ hash),\n/* harmony export */   is: () => (/* binding */ is),\n/* harmony export */   isAssociative: () => (/* binding */ isAssociative),\n/* harmony export */   isCollection: () => (/* binding */ isCollection),\n/* harmony export */   isImmutable: () => (/* binding */ isImmutable),\n/* harmony export */   isIndexed: () => (/* binding */ isIndexed),\n/* harmony export */   isKeyed: () => (/* binding */ isKeyed),\n/* harmony export */   isList: () => (/* binding */ isList),\n/* harmony export */   isMap: () => (/* binding */ isMap),\n/* harmony export */   isOrdered: () => (/* binding */ isOrdered),\n/* harmony export */   isOrderedMap: () => (/* binding */ isOrderedMap),\n/* harmony export */   isOrderedSet: () => (/* binding */ isOrderedSet),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject),\n/* harmony export */   isRecord: () => (/* binding */ isRecord),\n/* harmony export */   isSeq: () => (/* binding */ isSeq),\n/* harmony export */   isSet: () => (/* binding */ isSet),\n/* harmony export */   isStack: () => (/* binding */ isStack),\n/* harmony export */   isValueObject: () => (/* binding */ isValueObject),\n/* harmony export */   merge: () => (/* binding */ merge),\n/* harmony export */   mergeDeep: () => (/* binding */ mergeDeep$1),\n/* harmony export */   mergeDeepWith: () => (/* binding */ mergeDeepWith$1),\n/* harmony export */   mergeWith: () => (/* binding */ mergeWith),\n/* harmony export */   remove: () => (/* binding */ remove),\n/* harmony export */   removeIn: () => (/* binding */ removeIn),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   setIn: () => (/* binding */ setIn$1),\n/* harmony export */   update: () => (/* binding */ update$1),\n/* harmony export */   updateIn: () => (/* binding */ updateIn$1),\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n/**\n * MIT License\n * \n * Copyright (c) 2014-present, Lee Byron and other contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */ var DELETE = \"delete\";\n// Constants describing the size of trie nodes.\nvar SHIFT = 5; // Resulted in best performance after ______?\nvar SIZE = 1 << SHIFT;\nvar MASK = SIZE - 1;\n// A consistent shared value representing \"not set\" which equals nothing other\n// than itself, and nothing that could be provided externally.\nvar NOT_SET = {};\n// Boolean references, Rough equivalent of `bool &`.\nfunction MakeRef() {\n    return {\n        value: false\n    };\n}\nfunction SetRef(ref) {\n    if (ref) {\n        ref.value = true;\n    }\n}\n// A function which returns a value representing an \"owner\" for transient writes\n// to tries. The return value will only ever equal itself, and will not equal\n// the return of any subsequent call of this function.\nfunction OwnerID() {}\nfunction ensureSize(iter) {\n    if (iter.size === undefined) {\n        iter.size = iter.__iterate(returnTrue);\n    }\n    return iter.size;\n}\nfunction wrapIndex(iter, index) {\n    // This implements \"is array index\" which the ECMAString spec defines as:\n    //\n    //     A String property name P is an array index if and only if\n    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n    //     to 2^32âˆ’1.\n    //\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n    if (typeof index !== \"number\") {\n        var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n        if (\"\" + uint32Index !== index || uint32Index === 4294967295) {\n            return NaN;\n        }\n        index = uint32Index;\n    }\n    return index < 0 ? ensureSize(iter) + index : index;\n}\nfunction returnTrue() {\n    return true;\n}\nfunction wholeSlice(begin, end, size) {\n    return (begin === 0 && !isNeg(begin) || size !== undefined && begin <= -size) && (end === undefined || size !== undefined && end >= size);\n}\nfunction resolveBegin(begin, size) {\n    return resolveIndex(begin, size, 0);\n}\nfunction resolveEnd(end, size) {\n    return resolveIndex(end, size, size);\n}\nfunction resolveIndex(index, size, defaultIndex) {\n    // Sanitize indices using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    return index === undefined ? defaultIndex : isNeg(index) ? size === Infinity ? size : Math.max(0, size + index) | 0 : size === undefined || size === index ? index : Math.min(size, index) | 0;\n}\nfunction isNeg(value) {\n    // Account for -0 which is negative, but not less than 0.\n    return value < 0 || value === 0 && 1 / value === -Infinity;\n}\nvar IS_COLLECTION_SYMBOL = \"@@__IMMUTABLE_ITERABLE__@@\";\nfunction isCollection(maybeCollection) {\n    return Boolean(maybeCollection && maybeCollection[IS_COLLECTION_SYMBOL]);\n}\nvar IS_KEYED_SYMBOL = \"@@__IMMUTABLE_KEYED__@@\";\nfunction isKeyed(maybeKeyed) {\n    return Boolean(maybeKeyed && maybeKeyed[IS_KEYED_SYMBOL]);\n}\nvar IS_INDEXED_SYMBOL = \"@@__IMMUTABLE_INDEXED__@@\";\nfunction isIndexed(maybeIndexed) {\n    return Boolean(maybeIndexed && maybeIndexed[IS_INDEXED_SYMBOL]);\n}\nfunction isAssociative(maybeAssociative) {\n    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n}\nvar Collection = function Collection(value) {\n    // eslint-disable-next-line no-constructor-return\n    return isCollection(value) ? value : Seq(value);\n};\nvar KeyedCollection = /*@__PURE__*/ function(Collection) {\n    function KeyedCollection(value) {\n        // eslint-disable-next-line no-constructor-return\n        return isKeyed(value) ? value : KeyedSeq(value);\n    }\n    if (Collection) KeyedCollection.__proto__ = Collection;\n    KeyedCollection.prototype = Object.create(Collection && Collection.prototype);\n    KeyedCollection.prototype.constructor = KeyedCollection;\n    return KeyedCollection;\n}(Collection);\nvar IndexedCollection = /*@__PURE__*/ function(Collection) {\n    function IndexedCollection(value) {\n        // eslint-disable-next-line no-constructor-return\n        return isIndexed(value) ? value : IndexedSeq(value);\n    }\n    if (Collection) IndexedCollection.__proto__ = Collection;\n    IndexedCollection.prototype = Object.create(Collection && Collection.prototype);\n    IndexedCollection.prototype.constructor = IndexedCollection;\n    return IndexedCollection;\n}(Collection);\nvar SetCollection = /*@__PURE__*/ function(Collection) {\n    function SetCollection(value) {\n        // eslint-disable-next-line no-constructor-return\n        return isCollection(value) && !isAssociative(value) ? value : SetSeq(value);\n    }\n    if (Collection) SetCollection.__proto__ = Collection;\n    SetCollection.prototype = Object.create(Collection && Collection.prototype);\n    SetCollection.prototype.constructor = SetCollection;\n    return SetCollection;\n}(Collection);\nCollection.Keyed = KeyedCollection;\nCollection.Indexed = IndexedCollection;\nCollection.Set = SetCollection;\nvar IS_SEQ_SYMBOL = \"@@__IMMUTABLE_SEQ__@@\";\nfunction isSeq(maybeSeq) {\n    return Boolean(maybeSeq && maybeSeq[IS_SEQ_SYMBOL]);\n}\nvar IS_RECORD_SYMBOL = \"@@__IMMUTABLE_RECORD__@@\";\nfunction isRecord(maybeRecord) {\n    return Boolean(maybeRecord && maybeRecord[IS_RECORD_SYMBOL]);\n}\nfunction isImmutable(maybeImmutable) {\n    return isCollection(maybeImmutable) || isRecord(maybeImmutable);\n}\nvar IS_ORDERED_SYMBOL = \"@@__IMMUTABLE_ORDERED__@@\";\nfunction isOrdered(maybeOrdered) {\n    return Boolean(maybeOrdered && maybeOrdered[IS_ORDERED_SYMBOL]);\n}\nvar ITERATE_KEYS = 0;\nvar ITERATE_VALUES = 1;\nvar ITERATE_ENTRIES = 2;\nvar REAL_ITERATOR_SYMBOL = typeof Symbol === \"function\" && Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = \"@@iterator\";\nvar ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\nvar Iterator = function Iterator(next) {\n    this.next = next;\n};\nIterator.prototype.toString = function toString() {\n    return \"[Iterator]\";\n};\nIterator.KEYS = ITERATE_KEYS;\nIterator.VALUES = ITERATE_VALUES;\nIterator.ENTRIES = ITERATE_ENTRIES;\nIterator.prototype.inspect = Iterator.prototype.toSource = function() {\n    return this.toString();\n};\nIterator.prototype[ITERATOR_SYMBOL] = function() {\n    return this;\n};\nfunction iteratorValue(type, k, v, iteratorResult) {\n    var value = type === 0 ? k : type === 1 ? v : [\n        k,\n        v\n    ];\n    iteratorResult ? iteratorResult.value = value : iteratorResult = {\n        value: value,\n        done: false\n    };\n    return iteratorResult;\n}\nfunction iteratorDone() {\n    return {\n        value: undefined,\n        done: true\n    };\n}\nfunction hasIterator(maybeIterable) {\n    if (Array.isArray(maybeIterable)) {\n        // IE11 trick as it does not support `Symbol.iterator`\n        return true;\n    }\n    return !!getIteratorFn(maybeIterable);\n}\nfunction isIterator(maybeIterator) {\n    return maybeIterator && typeof maybeIterator.next === \"function\";\n}\nfunction getIterator(iterable) {\n    var iteratorFn = getIteratorFn(iterable);\n    return iteratorFn && iteratorFn.call(iterable);\n}\nfunction getIteratorFn(iterable) {\n    var iteratorFn = iterable && (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL] || iterable[FAUX_ITERATOR_SYMBOL]);\n    if (typeof iteratorFn === \"function\") {\n        return iteratorFn;\n    }\n}\nfunction isEntriesIterable(maybeIterable) {\n    var iteratorFn = getIteratorFn(maybeIterable);\n    return iteratorFn && iteratorFn === maybeIterable.entries;\n}\nfunction isKeysIterable(maybeIterable) {\n    var iteratorFn = getIteratorFn(maybeIterable);\n    return iteratorFn && iteratorFn === maybeIterable.keys;\n}\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction isArrayLike(value) {\n    if (Array.isArray(value) || typeof value === \"string\") {\n        return true;\n    }\n    return value && typeof value === \"object\" && Number.isInteger(value.length) && value.length >= 0 && (value.length === 0 ? Object.keys(value).length === 1 : // in the array-like may be found (which could be undefined).\n    value.hasOwnProperty(value.length - 1));\n}\nvar Seq = /*@__PURE__*/ function(Collection) {\n    function Seq(value) {\n        // eslint-disable-next-line no-constructor-return\n        return value === undefined || value === null ? emptySequence() : isImmutable(value) ? value.toSeq() : seqFromValue(value);\n    }\n    if (Collection) Seq.__proto__ = Collection;\n    Seq.prototype = Object.create(Collection && Collection.prototype);\n    Seq.prototype.constructor = Seq;\n    Seq.prototype.toSeq = function toSeq() {\n        return this;\n    };\n    Seq.prototype.toString = function toString() {\n        return this.__toString(\"Seq {\", \"}\");\n    };\n    Seq.prototype.cacheResult = function cacheResult() {\n        if (!this._cache && this.__iterateUncached) {\n            this._cache = this.entrySeq().toArray();\n            this.size = this._cache.length;\n        }\n        return this;\n    };\n    // abstract __iterateUncached(fn, reverse)\n    Seq.prototype.__iterate = function __iterate(fn, reverse) {\n        var cache = this._cache;\n        if (cache) {\n            var size = cache.length;\n            var i = 0;\n            while(i !== size){\n                var entry = cache[reverse ? size - ++i : i++];\n                if (fn(entry[1], entry[0], this) === false) {\n                    break;\n                }\n            }\n            return i;\n        }\n        return this.__iterateUncached(fn, reverse);\n    };\n    // abstract __iteratorUncached(type, reverse)\n    Seq.prototype.__iterator = function __iterator(type, reverse) {\n        var cache = this._cache;\n        if (cache) {\n            var size = cache.length;\n            var i = 0;\n            return new Iterator(function() {\n                if (i === size) {\n                    return iteratorDone();\n                }\n                var entry = cache[reverse ? size - ++i : i++];\n                return iteratorValue(type, entry[0], entry[1]);\n            });\n        }\n        return this.__iteratorUncached(type, reverse);\n    };\n    return Seq;\n}(Collection);\nvar KeyedSeq = /*@__PURE__*/ function(Seq) {\n    function KeyedSeq(value) {\n        // eslint-disable-next-line no-constructor-return\n        return value === undefined || value === null ? emptySequence().toKeyedSeq() : isCollection(value) ? isKeyed(value) ? value.toSeq() : value.fromEntrySeq() : isRecord(value) ? value.toSeq() : keyedSeqFromValue(value);\n    }\n    if (Seq) KeyedSeq.__proto__ = Seq;\n    KeyedSeq.prototype = Object.create(Seq && Seq.prototype);\n    KeyedSeq.prototype.constructor = KeyedSeq;\n    KeyedSeq.prototype.toKeyedSeq = function toKeyedSeq() {\n        return this;\n    };\n    return KeyedSeq;\n}(Seq);\nvar IndexedSeq = /*@__PURE__*/ function(Seq) {\n    function IndexedSeq(value) {\n        // eslint-disable-next-line no-constructor-return\n        return value === undefined || value === null ? emptySequence() : isCollection(value) ? isKeyed(value) ? value.entrySeq() : value.toIndexedSeq() : isRecord(value) ? value.toSeq().entrySeq() : indexedSeqFromValue(value);\n    }\n    if (Seq) IndexedSeq.__proto__ = Seq;\n    IndexedSeq.prototype = Object.create(Seq && Seq.prototype);\n    IndexedSeq.prototype.constructor = IndexedSeq;\n    IndexedSeq.of = function of() {\n        return IndexedSeq(arguments);\n    };\n    IndexedSeq.prototype.toIndexedSeq = function toIndexedSeq() {\n        return this;\n    };\n    IndexedSeq.prototype.toString = function toString() {\n        return this.__toString(\"Seq [\", \"]\");\n    };\n    return IndexedSeq;\n}(Seq);\nvar SetSeq = /*@__PURE__*/ function(Seq) {\n    function SetSeq(value) {\n        // eslint-disable-next-line no-constructor-return\n        return (isCollection(value) && !isAssociative(value) ? value : IndexedSeq(value)).toSetSeq();\n    }\n    if (Seq) SetSeq.__proto__ = Seq;\n    SetSeq.prototype = Object.create(Seq && Seq.prototype);\n    SetSeq.prototype.constructor = SetSeq;\n    SetSeq.of = function of() {\n        return SetSeq(arguments);\n    };\n    SetSeq.prototype.toSetSeq = function toSetSeq() {\n        return this;\n    };\n    return SetSeq;\n}(Seq);\nSeq.isSeq = isSeq;\nSeq.Keyed = KeyedSeq;\nSeq.Set = SetSeq;\nSeq.Indexed = IndexedSeq;\nSeq.prototype[IS_SEQ_SYMBOL] = true;\n// #pragma Root Sequences\nvar ArraySeq = /*@__PURE__*/ function(IndexedSeq) {\n    function ArraySeq(array) {\n        this._array = array;\n        this.size = array.length;\n    }\n    if (IndexedSeq) ArraySeq.__proto__ = IndexedSeq;\n    ArraySeq.prototype = Object.create(IndexedSeq && IndexedSeq.prototype);\n    ArraySeq.prototype.constructor = ArraySeq;\n    ArraySeq.prototype.get = function get(index, notSetValue) {\n        return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n    };\n    ArraySeq.prototype.__iterate = function __iterate(fn, reverse) {\n        var array = this._array;\n        var size = array.length;\n        var i = 0;\n        while(i !== size){\n            var ii = reverse ? size - ++i : i++;\n            if (fn(array[ii], ii, this) === false) {\n                break;\n            }\n        }\n        return i;\n    };\n    ArraySeq.prototype.__iterator = function __iterator(type, reverse) {\n        var array = this._array;\n        var size = array.length;\n        var i = 0;\n        return new Iterator(function() {\n            if (i === size) {\n                return iteratorDone();\n            }\n            var ii = reverse ? size - ++i : i++;\n            return iteratorValue(type, ii, array[ii]);\n        });\n    };\n    return ArraySeq;\n}(IndexedSeq);\nvar ObjectSeq = /*@__PURE__*/ function(KeyedSeq) {\n    function ObjectSeq(object) {\n        var keys = Object.keys(object).concat(Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(object) : []);\n        this._object = object;\n        this._keys = keys;\n        this.size = keys.length;\n    }\n    if (KeyedSeq) ObjectSeq.__proto__ = KeyedSeq;\n    ObjectSeq.prototype = Object.create(KeyedSeq && KeyedSeq.prototype);\n    ObjectSeq.prototype.constructor = ObjectSeq;\n    ObjectSeq.prototype.get = function get(key, notSetValue) {\n        if (notSetValue !== undefined && !this.has(key)) {\n            return notSetValue;\n        }\n        return this._object[key];\n    };\n    ObjectSeq.prototype.has = function has(key) {\n        return hasOwnProperty.call(this._object, key);\n    };\n    ObjectSeq.prototype.__iterate = function __iterate(fn, reverse) {\n        var object = this._object;\n        var keys = this._keys;\n        var size = keys.length;\n        var i = 0;\n        while(i !== size){\n            var key = keys[reverse ? size - ++i : i++];\n            if (fn(object[key], key, this) === false) {\n                break;\n            }\n        }\n        return i;\n    };\n    ObjectSeq.prototype.__iterator = function __iterator(type, reverse) {\n        var object = this._object;\n        var keys = this._keys;\n        var size = keys.length;\n        var i = 0;\n        return new Iterator(function() {\n            if (i === size) {\n                return iteratorDone();\n            }\n            var key = keys[reverse ? size - ++i : i++];\n            return iteratorValue(type, key, object[key]);\n        });\n    };\n    return ObjectSeq;\n}(KeyedSeq);\nObjectSeq.prototype[IS_ORDERED_SYMBOL] = true;\nvar CollectionSeq = /*@__PURE__*/ function(IndexedSeq) {\n    function CollectionSeq(collection) {\n        this._collection = collection;\n        this.size = collection.length || collection.size;\n    }\n    if (IndexedSeq) CollectionSeq.__proto__ = IndexedSeq;\n    CollectionSeq.prototype = Object.create(IndexedSeq && IndexedSeq.prototype);\n    CollectionSeq.prototype.constructor = CollectionSeq;\n    CollectionSeq.prototype.__iterateUncached = function __iterateUncached(fn, reverse) {\n        if (reverse) {\n            return this.cacheResult().__iterate(fn, reverse);\n        }\n        var collection = this._collection;\n        var iterator = getIterator(collection);\n        var iterations = 0;\n        if (isIterator(iterator)) {\n            var step;\n            while(!(step = iterator.next()).done){\n                if (fn(step.value, iterations++, this) === false) {\n                    break;\n                }\n            }\n        }\n        return iterations;\n    };\n    CollectionSeq.prototype.__iteratorUncached = function __iteratorUncached(type, reverse) {\n        if (reverse) {\n            return this.cacheResult().__iterator(type, reverse);\n        }\n        var collection = this._collection;\n        var iterator = getIterator(collection);\n        if (!isIterator(iterator)) {\n            return new Iterator(iteratorDone);\n        }\n        var iterations = 0;\n        return new Iterator(function() {\n            var step = iterator.next();\n            return step.done ? step : iteratorValue(type, iterations++, step.value);\n        });\n    };\n    return CollectionSeq;\n}(IndexedSeq);\n// # pragma Helper functions\nvar EMPTY_SEQ;\nfunction emptySequence() {\n    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n}\nfunction keyedSeqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value);\n    if (seq) {\n        return seq.fromEntrySeq();\n    }\n    if (typeof value === \"object\") {\n        return new ObjectSeq(value);\n    }\n    throw new TypeError(\"Expected Array or collection object of [k, v] entries, or keyed object: \" + value);\n}\nfunction indexedSeqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value);\n    if (seq) {\n        return seq;\n    }\n    throw new TypeError(\"Expected Array or collection object of values: \" + value);\n}\nfunction seqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value);\n    if (seq) {\n        return isEntriesIterable(value) ? seq.fromEntrySeq() : isKeysIterable(value) ? seq.toSetSeq() : seq;\n    }\n    if (typeof value === \"object\") {\n        return new ObjectSeq(value);\n    }\n    throw new TypeError(\"Expected Array or collection object of values, or keyed object: \" + value);\n}\nfunction maybeIndexedSeqFromValue(value) {\n    return isArrayLike(value) ? new ArraySeq(value) : hasIterator(value) ? new CollectionSeq(value) : undefined;\n}\nvar IS_MAP_SYMBOL = \"@@__IMMUTABLE_MAP__@@\";\nfunction isMap(maybeMap) {\n    return Boolean(maybeMap && maybeMap[IS_MAP_SYMBOL]);\n}\nfunction isOrderedMap(maybeOrderedMap) {\n    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n}\nfunction isValueObject(maybeValue) {\n    return Boolean(maybeValue && typeof maybeValue.equals === \"function\" && typeof maybeValue.hashCode === \"function\");\n}\n/**\n * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n *\n * NaN is considered the same as NaN, however -0 and 0 are considered the same\n * value, which is different from the algorithm described by\n * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n *\n * This is extended further to allow Objects to describe the values they\n * represent, by way of `valueOf` or `equals` (and `hashCode`).\n *\n * Note: because of this extension, the key equality of Immutable.Map and the\n * value equality of Immutable.Set will differ from ES6 Map and Set.\n *\n * ### Defining custom values\n *\n * The easiest way to describe the value an object represents is by implementing\n * `valueOf`. For example, `Date` represents a value by returning a unix\n * timestamp for `valueOf`:\n *\n *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n *     var date2 = new Date(1234567890000);\n *     date1.valueOf(); // 1234567890000\n *     assert( date1 !== date2 );\n *     assert( Immutable.is( date1, date2 ) );\n *\n * Note: overriding `valueOf` may have other implications if you use this object\n * where JavaScript expects a primitive, such as implicit string coercion.\n *\n * For more complex types, especially collections, implementing `valueOf` may\n * not be performant. An alternative is to implement `equals` and `hashCode`.\n *\n * `equals` takes another object, presumably of similar type, and returns true\n * if it is equal. Equality is symmetrical, so the same result should be\n * returned if this and the argument are flipped.\n *\n *     assert( a.equals(b) === b.equals(a) );\n *\n * `hashCode` returns a 32bit integer number representing the object which will\n * be used to determine how to store the value object in a Map or Set. You must\n * provide both or neither methods, one must not exist without the other.\n *\n * Also, an important relationship between these methods must be upheld: if two\n * values are equal, they *must* return the same hashCode. If the values are not\n * equal, they might have the same hashCode; this is called a hash collision,\n * and while undesirable for performance reasons, it is acceptable.\n *\n *     if (a.equals(b)) {\n *       assert( a.hashCode() === b.hashCode() );\n *     }\n *\n * All Immutable collections are Value Objects: they implement `equals()`\n * and `hashCode()`.\n */ function is(valueA, valueB) {\n    if (valueA === valueB || valueA !== valueA && valueB !== valueB) {\n        return true;\n    }\n    if (!valueA || !valueB) {\n        return false;\n    }\n    if (typeof valueA.valueOf === \"function\" && typeof valueB.valueOf === \"function\") {\n        valueA = valueA.valueOf();\n        valueB = valueB.valueOf();\n        if (valueA === valueB || valueA !== valueA && valueB !== valueB) {\n            return true;\n        }\n        if (!valueA || !valueB) {\n            return false;\n        }\n    }\n    return !!(isValueObject(valueA) && isValueObject(valueB) && valueA.equals(valueB));\n}\nvar imul = typeof Math.imul === \"function\" && Math.imul(0xffffffff, 2) === -2 ? Math.imul : function imul(a, b) {\n    a |= 0; // int\n    b |= 0; // int\n    var c = a & 0xffff;\n    var d = b & 0xffff;\n    // Shift by 0 fixes the sign on the high part.\n    return c * d + ((a >>> 16) * d + c * (b >>> 16) << 16 >>> 0) | 0; // int\n};\n// v8 has an optimization for storing 31-bit signed numbers.\n// Values which have either 00 or 11 as the high order bits qualify.\n// This function drops the highest order bit in a signed number, maintaining\n// the sign bit.\nfunction smi(i32) {\n    return i32 >>> 1 & 0x40000000 | i32 & 0xbfffffff;\n}\nvar defaultValueOf = Object.prototype.valueOf;\nfunction hash(o) {\n    if (o == null) {\n        return hashNullish(o);\n    }\n    if (typeof o.hashCode === \"function\") {\n        // Drop any high bits from accidentally long hash codes.\n        return smi(o.hashCode(o));\n    }\n    var v = valueOf(o);\n    if (v == null) {\n        return hashNullish(v);\n    }\n    switch(typeof v){\n        case \"boolean\":\n            // The hash values for built-in constants are a 1 value for each 5-byte\n            // shift region expect for the first, which encodes the value. This\n            // reduces the odds of a hash collision for these common values.\n            return v ? 0x42108421 : 0x42108420;\n        case \"number\":\n            return hashNumber(v);\n        case \"string\":\n            return v.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(v) : hashString(v);\n        case \"object\":\n        case \"function\":\n            return hashJSObj(v);\n        case \"symbol\":\n            return hashSymbol(v);\n        default:\n            if (typeof v.toString === \"function\") {\n                return hashString(v.toString());\n            }\n            throw new Error(\"Value type \" + typeof v + \" cannot be hashed.\");\n    }\n}\nfunction hashNullish(nullish) {\n    return nullish === null ? 0x42108422 : /* undefined */ 0x42108423;\n}\n// Compress arbitrarily large numbers into smi hashes.\nfunction hashNumber(n) {\n    if (n !== n || n === Infinity) {\n        return 0;\n    }\n    var hash = n | 0;\n    if (hash !== n) {\n        hash ^= n * 0xffffffff;\n    }\n    while(n > 0xffffffff){\n        n /= 0xffffffff;\n        hash ^= n;\n    }\n    return smi(hash);\n}\nfunction cachedHashString(string) {\n    var hashed = stringHashCache[string];\n    if (hashed === undefined) {\n        hashed = hashString(string);\n        if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n            STRING_HASH_CACHE_SIZE = 0;\n            stringHashCache = {};\n        }\n        STRING_HASH_CACHE_SIZE++;\n        stringHashCache[string] = hashed;\n    }\n    return hashed;\n}\n// http://jsperf.com/hashing-strings\nfunction hashString(string) {\n    // This is the hash from JVM\n    // The hash code for a string is computed as\n    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n    // where s[i] is the ith character of the string and n is the length of\n    // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n    // (exclusive) by dropping high bits.\n    var hashed = 0;\n    for(var ii = 0; ii < string.length; ii++){\n        hashed = 31 * hashed + string.charCodeAt(ii) | 0;\n    }\n    return smi(hashed);\n}\nfunction hashSymbol(sym) {\n    var hashed = symbolMap[sym];\n    if (hashed !== undefined) {\n        return hashed;\n    }\n    hashed = nextHash();\n    symbolMap[sym] = hashed;\n    return hashed;\n}\nfunction hashJSObj(obj) {\n    var hashed;\n    if (usingWeakMap) {\n        hashed = weakMap.get(obj);\n        if (hashed !== undefined) {\n            return hashed;\n        }\n    }\n    hashed = obj[UID_HASH_KEY];\n    if (hashed !== undefined) {\n        return hashed;\n    }\n    if (!canDefineProperty) {\n        hashed = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n        if (hashed !== undefined) {\n            return hashed;\n        }\n        hashed = getIENodeHash(obj);\n        if (hashed !== undefined) {\n            return hashed;\n        }\n    }\n    hashed = nextHash();\n    if (usingWeakMap) {\n        weakMap.set(obj, hashed);\n    } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n        throw new Error(\"Non-extensible objects are not allowed as keys.\");\n    } else if (canDefineProperty) {\n        Object.defineProperty(obj, UID_HASH_KEY, {\n            enumerable: false,\n            configurable: false,\n            writable: false,\n            value: hashed\n        });\n    } else if (obj.propertyIsEnumerable !== undefined && obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {\n        // Since we can't define a non-enumerable property on the object\n        // we'll hijack one of the less-used non-enumerable properties to\n        // save our hash on it. Since this is a function it will not show up in\n        // `JSON.stringify` which is what we want.\n        obj.propertyIsEnumerable = function() {\n            return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);\n        };\n        obj.propertyIsEnumerable[UID_HASH_KEY] = hashed;\n    } else if (obj.nodeType !== undefined) {\n        // At this point we couldn't get the IE `uniqueID` to use as a hash\n        // and we couldn't use a non-enumerable property to exploit the\n        // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n        // itself.\n        obj[UID_HASH_KEY] = hashed;\n    } else {\n        throw new Error(\"Unable to set a non-enumerable property on object.\");\n    }\n    return hashed;\n}\n// Get references to ES5 object methods.\nvar isExtensible = Object.isExtensible;\n// True if Object.defineProperty works as expected. IE8 fails this test.\nvar canDefineProperty = function() {\n    try {\n        Object.defineProperty({}, \"@\", {});\n        return true;\n    } catch (e) {\n        return false;\n    }\n}();\n// IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n// and avoid memory leaks from the IE cloneNode bug.\nfunction getIENodeHash(node) {\n    if (node && node.nodeType > 0) {\n        switch(node.nodeType){\n            case 1:\n                return node.uniqueID;\n            case 9:\n                return node.documentElement && node.documentElement.uniqueID;\n        }\n    }\n}\nfunction valueOf(obj) {\n    return obj.valueOf !== defaultValueOf && typeof obj.valueOf === \"function\" ? obj.valueOf(obj) : obj;\n}\nfunction nextHash() {\n    var nextHash = ++_objHashUID;\n    if (_objHashUID & 0x40000000) {\n        _objHashUID = 0;\n    }\n    return nextHash;\n}\n// If possible, use a WeakMap.\nvar usingWeakMap = typeof WeakMap === \"function\";\nvar weakMap;\nif (usingWeakMap) {\n    weakMap = new WeakMap();\n}\nvar symbolMap = Object.create(null);\nvar _objHashUID = 0;\nvar UID_HASH_KEY = \"__immutablehash__\";\nif (typeof Symbol === \"function\") {\n    UID_HASH_KEY = Symbol(UID_HASH_KEY);\n}\nvar STRING_HASH_CACHE_MIN_STRLEN = 16;\nvar STRING_HASH_CACHE_MAX_SIZE = 255;\nvar STRING_HASH_CACHE_SIZE = 0;\nvar stringHashCache = {};\nvar ToKeyedSequence = /*@__PURE__*/ function(KeyedSeq) {\n    function ToKeyedSequence(indexed, useKeys) {\n        this._iter = indexed;\n        this._useKeys = useKeys;\n        this.size = indexed.size;\n    }\n    if (KeyedSeq) ToKeyedSequence.__proto__ = KeyedSeq;\n    ToKeyedSequence.prototype = Object.create(KeyedSeq && KeyedSeq.prototype);\n    ToKeyedSequence.prototype.constructor = ToKeyedSequence;\n    ToKeyedSequence.prototype.get = function get(key, notSetValue) {\n        return this._iter.get(key, notSetValue);\n    };\n    ToKeyedSequence.prototype.has = function has(key) {\n        return this._iter.has(key);\n    };\n    ToKeyedSequence.prototype.valueSeq = function valueSeq() {\n        return this._iter.valueSeq();\n    };\n    ToKeyedSequence.prototype.reverse = function reverse() {\n        var this$1$1 = this;\n        var reversedSequence = reverseFactory(this, true);\n        if (!this._useKeys) {\n            reversedSequence.valueSeq = function() {\n                return this$1$1._iter.toSeq().reverse();\n            };\n        }\n        return reversedSequence;\n    };\n    ToKeyedSequence.prototype.map = function map(mapper, context) {\n        var this$1$1 = this;\n        var mappedSequence = mapFactory(this, mapper, context);\n        if (!this._useKeys) {\n            mappedSequence.valueSeq = function() {\n                return this$1$1._iter.toSeq().map(mapper, context);\n            };\n        }\n        return mappedSequence;\n    };\n    ToKeyedSequence.prototype.__iterate = function __iterate(fn, reverse) {\n        var this$1$1 = this;\n        return this._iter.__iterate(function(v, k) {\n            return fn(v, k, this$1$1);\n        }, reverse);\n    };\n    ToKeyedSequence.prototype.__iterator = function __iterator(type, reverse) {\n        return this._iter.__iterator(type, reverse);\n    };\n    return ToKeyedSequence;\n}(KeyedSeq);\nToKeyedSequence.prototype[IS_ORDERED_SYMBOL] = true;\nvar ToIndexedSequence = /*@__PURE__*/ function(IndexedSeq) {\n    function ToIndexedSequence(iter) {\n        this._iter = iter;\n        this.size = iter.size;\n    }\n    if (IndexedSeq) ToIndexedSequence.__proto__ = IndexedSeq;\n    ToIndexedSequence.prototype = Object.create(IndexedSeq && IndexedSeq.prototype);\n    ToIndexedSequence.prototype.constructor = ToIndexedSequence;\n    ToIndexedSequence.prototype.includes = function includes(value) {\n        return this._iter.includes(value);\n    };\n    ToIndexedSequence.prototype.__iterate = function __iterate(fn, reverse) {\n        var this$1$1 = this;\n        var i = 0;\n        reverse && ensureSize(this);\n        return this._iter.__iterate(function(v) {\n            return fn(v, reverse ? this$1$1.size - ++i : i++, this$1$1);\n        }, reverse);\n    };\n    ToIndexedSequence.prototype.__iterator = function __iterator(type, reverse) {\n        var this$1$1 = this;\n        var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n        var i = 0;\n        reverse && ensureSize(this);\n        return new Iterator(function() {\n            var step = iterator.next();\n            return step.done ? step : iteratorValue(type, reverse ? this$1$1.size - ++i : i++, step.value, step);\n        });\n    };\n    return ToIndexedSequence;\n}(IndexedSeq);\nvar ToSetSequence = /*@__PURE__*/ function(SetSeq) {\n    function ToSetSequence(iter) {\n        this._iter = iter;\n        this.size = iter.size;\n    }\n    if (SetSeq) ToSetSequence.__proto__ = SetSeq;\n    ToSetSequence.prototype = Object.create(SetSeq && SetSeq.prototype);\n    ToSetSequence.prototype.constructor = ToSetSequence;\n    ToSetSequence.prototype.has = function has(key) {\n        return this._iter.includes(key);\n    };\n    ToSetSequence.prototype.__iterate = function __iterate(fn, reverse) {\n        var this$1$1 = this;\n        return this._iter.__iterate(function(v) {\n            return fn(v, v, this$1$1);\n        }, reverse);\n    };\n    ToSetSequence.prototype.__iterator = function __iterator(type, reverse) {\n        var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n        return new Iterator(function() {\n            var step = iterator.next();\n            return step.done ? step : iteratorValue(type, step.value, step.value, step);\n        });\n    };\n    return ToSetSequence;\n}(SetSeq);\nvar FromEntriesSequence = /*@__PURE__*/ function(KeyedSeq) {\n    function FromEntriesSequence(entries) {\n        this._iter = entries;\n        this.size = entries.size;\n    }\n    if (KeyedSeq) FromEntriesSequence.__proto__ = KeyedSeq;\n    FromEntriesSequence.prototype = Object.create(KeyedSeq && KeyedSeq.prototype);\n    FromEntriesSequence.prototype.constructor = FromEntriesSequence;\n    FromEntriesSequence.prototype.entrySeq = function entrySeq() {\n        return this._iter.toSeq();\n    };\n    FromEntriesSequence.prototype.__iterate = function __iterate(fn, reverse) {\n        var this$1$1 = this;\n        return this._iter.__iterate(function(entry) {\n            // Check if entry exists first so array access doesn't throw for holes\n            // in the parent iteration.\n            if (entry) {\n                validateEntry(entry);\n                var indexedCollection = isCollection(entry);\n                return fn(indexedCollection ? entry.get(1) : entry[1], indexedCollection ? entry.get(0) : entry[0], this$1$1);\n            }\n        }, reverse);\n    };\n    FromEntriesSequence.prototype.__iterator = function __iterator(type, reverse) {\n        var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n        return new Iterator(function() {\n            while(true){\n                var step = iterator.next();\n                if (step.done) {\n                    return step;\n                }\n                var entry = step.value;\n                // Check if entry exists first so array access doesn't throw for holes\n                // in the parent iteration.\n                if (entry) {\n                    validateEntry(entry);\n                    var indexedCollection = isCollection(entry);\n                    return iteratorValue(type, indexedCollection ? entry.get(0) : entry[0], indexedCollection ? entry.get(1) : entry[1], step);\n                }\n            }\n        });\n    };\n    return FromEntriesSequence;\n}(KeyedSeq);\nToIndexedSequence.prototype.cacheResult = ToKeyedSequence.prototype.cacheResult = ToSetSequence.prototype.cacheResult = FromEntriesSequence.prototype.cacheResult = cacheResultThrough;\nfunction flipFactory(collection) {\n    var flipSequence = makeSequence(collection);\n    flipSequence._iter = collection;\n    flipSequence.size = collection.size;\n    flipSequence.flip = function() {\n        return collection;\n    };\n    flipSequence.reverse = function() {\n        var reversedSequence = collection.reverse.apply(this); // super.reverse()\n        reversedSequence.flip = function() {\n            return collection.reverse();\n        };\n        return reversedSequence;\n    };\n    flipSequence.has = function(key) {\n        return collection.includes(key);\n    };\n    flipSequence.includes = function(key) {\n        return collection.has(key);\n    };\n    flipSequence.cacheResult = cacheResultThrough;\n    flipSequence.__iterateUncached = function(fn, reverse) {\n        var this$1$1 = this;\n        return collection.__iterate(function(v, k) {\n            return fn(k, v, this$1$1) !== false;\n        }, reverse);\n    };\n    flipSequence.__iteratorUncached = function(type, reverse) {\n        if (type === ITERATE_ENTRIES) {\n            var iterator = collection.__iterator(type, reverse);\n            return new Iterator(function() {\n                var step = iterator.next();\n                if (!step.done) {\n                    var k = step.value[0];\n                    step.value[0] = step.value[1];\n                    step.value[1] = k;\n                }\n                return step;\n            });\n        }\n        return collection.__iterator(type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES, reverse);\n    };\n    return flipSequence;\n}\nfunction mapFactory(collection, mapper, context) {\n    var mappedSequence = makeSequence(collection);\n    mappedSequence.size = collection.size;\n    mappedSequence.has = function(key) {\n        return collection.has(key);\n    };\n    mappedSequence.get = function(key, notSetValue) {\n        var v = collection.get(key, NOT_SET);\n        return v === NOT_SET ? notSetValue : mapper.call(context, v, key, collection);\n    };\n    mappedSequence.__iterateUncached = function(fn, reverse) {\n        var this$1$1 = this;\n        return collection.__iterate(function(v, k, c) {\n            return fn(mapper.call(context, v, k, c), k, this$1$1) !== false;\n        }, reverse);\n    };\n    mappedSequence.__iteratorUncached = function(type, reverse) {\n        var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n        return new Iterator(function() {\n            var step = iterator.next();\n            if (step.done) {\n                return step;\n            }\n            var entry = step.value;\n            var key = entry[0];\n            return iteratorValue(type, key, mapper.call(context, entry[1], key, collection), step);\n        });\n    };\n    return mappedSequence;\n}\nfunction reverseFactory(collection, useKeys) {\n    var this$1$1 = this;\n    var reversedSequence = makeSequence(collection);\n    reversedSequence._iter = collection;\n    reversedSequence.size = collection.size;\n    reversedSequence.reverse = function() {\n        return collection;\n    };\n    if (collection.flip) {\n        reversedSequence.flip = function() {\n            var flipSequence = flipFactory(collection);\n            flipSequence.reverse = function() {\n                return collection.flip();\n            };\n            return flipSequence;\n        };\n    }\n    reversedSequence.get = function(key, notSetValue) {\n        return collection.get(useKeys ? key : -1 - key, notSetValue);\n    };\n    reversedSequence.has = function(key) {\n        return collection.has(useKeys ? key : -1 - key);\n    };\n    reversedSequence.includes = function(value) {\n        return collection.includes(value);\n    };\n    reversedSequence.cacheResult = cacheResultThrough;\n    reversedSequence.__iterate = function(fn, reverse) {\n        var this$1$1 = this;\n        var i = 0;\n        reverse && ensureSize(collection);\n        return collection.__iterate(function(v, k) {\n            return fn(v, useKeys ? k : reverse ? this$1$1.size - ++i : i++, this$1$1);\n        }, !reverse);\n    };\n    reversedSequence.__iterator = function(type, reverse) {\n        var i = 0;\n        reverse && ensureSize(collection);\n        var iterator = collection.__iterator(ITERATE_ENTRIES, !reverse);\n        return new Iterator(function() {\n            var step = iterator.next();\n            if (step.done) {\n                return step;\n            }\n            var entry = step.value;\n            return iteratorValue(type, useKeys ? entry[0] : reverse ? this$1$1.size - ++i : i++, entry[1], step);\n        });\n    };\n    return reversedSequence;\n}\nfunction filterFactory(collection, predicate, context, useKeys) {\n    var filterSequence = makeSequence(collection);\n    if (useKeys) {\n        filterSequence.has = function(key) {\n            var v = collection.get(key, NOT_SET);\n            return v !== NOT_SET && !!predicate.call(context, v, key, collection);\n        };\n        filterSequence.get = function(key, notSetValue) {\n            var v = collection.get(key, NOT_SET);\n            return v !== NOT_SET && predicate.call(context, v, key, collection) ? v : notSetValue;\n        };\n    }\n    filterSequence.__iterateUncached = function(fn, reverse) {\n        var this$1$1 = this;\n        var iterations = 0;\n        collection.__iterate(function(v, k, c) {\n            if (predicate.call(context, v, k, c)) {\n                iterations++;\n                return fn(v, useKeys ? k : iterations - 1, this$1$1);\n            }\n        }, reverse);\n        return iterations;\n    };\n    filterSequence.__iteratorUncached = function(type, reverse) {\n        var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n        var iterations = 0;\n        return new Iterator(function() {\n            while(true){\n                var step = iterator.next();\n                if (step.done) {\n                    return step;\n                }\n                var entry = step.value;\n                var key = entry[0];\n                var value = entry[1];\n                if (predicate.call(context, value, key, collection)) {\n                    return iteratorValue(type, useKeys ? key : iterations++, value, step);\n                }\n            }\n        });\n    };\n    return filterSequence;\n}\nfunction countByFactory(collection, grouper, context) {\n    var groups = Map().asMutable();\n    collection.__iterate(function(v, k) {\n        groups.update(grouper.call(context, v, k, collection), 0, function(a) {\n            return a + 1;\n        });\n    });\n    return groups.asImmutable();\n}\nfunction groupByFactory(collection, grouper, context) {\n    var isKeyedIter = isKeyed(collection);\n    var groups = (isOrdered(collection) ? OrderedMap() : Map()).asMutable();\n    collection.__iterate(function(v, k) {\n        groups.update(grouper.call(context, v, k, collection), function(a) {\n            return a = a || [], a.push(isKeyedIter ? [\n                k,\n                v\n            ] : v), a;\n        });\n    });\n    var coerce = collectionClass(collection);\n    return groups.map(function(arr) {\n        return reify(collection, coerce(arr));\n    }).asImmutable();\n}\nfunction partitionFactory(collection, predicate, context) {\n    var isKeyedIter = isKeyed(collection);\n    var groups = [\n        [],\n        []\n    ];\n    collection.__iterate(function(v, k) {\n        groups[predicate.call(context, v, k, collection) ? 1 : 0].push(isKeyedIter ? [\n            k,\n            v\n        ] : v);\n    });\n    var coerce = collectionClass(collection);\n    return groups.map(function(arr) {\n        return reify(collection, coerce(arr));\n    });\n}\nfunction sliceFactory(collection, begin, end, useKeys) {\n    var originalSize = collection.size;\n    if (wholeSlice(begin, end, originalSize)) {\n        return collection;\n    }\n    // begin or end can not be resolved if they were provided as negative numbers and\n    // this collection's size is unknown. In that case, cache first so there is\n    // a known size and these do not resolve to NaN.\n    if (typeof originalSize === \"undefined\" && (begin < 0 || end < 0)) {\n        return sliceFactory(collection.toSeq().cacheResult(), begin, end, useKeys);\n    }\n    var resolvedBegin = resolveBegin(begin, originalSize);\n    var resolvedEnd = resolveEnd(end, originalSize);\n    // Note: resolvedEnd is undefined when the original sequence's length is\n    // unknown and this slice did not supply an end and should contain all\n    // elements after resolvedBegin.\n    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n    var resolvedSize = resolvedEnd - resolvedBegin;\n    var sliceSize;\n    if (resolvedSize === resolvedSize) {\n        sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n    }\n    var sliceSeq = makeSequence(collection);\n    // If collection.size is undefined, the size of the realized sliceSeq is\n    // unknown at this point unless the number of items to slice is 0\n    sliceSeq.size = sliceSize === 0 ? sliceSize : collection.size && sliceSize || undefined;\n    if (!useKeys && isSeq(collection) && sliceSize >= 0) {\n        sliceSeq.get = function(index, notSetValue) {\n            index = wrapIndex(this, index);\n            return index >= 0 && index < sliceSize ? collection.get(index + resolvedBegin, notSetValue) : notSetValue;\n        };\n    }\n    sliceSeq.__iterateUncached = function(fn, reverse) {\n        var this$1$1 = this;\n        if (sliceSize === 0) {\n            return 0;\n        }\n        if (reverse) {\n            return this.cacheResult().__iterate(fn, reverse);\n        }\n        var skipped = 0;\n        var isSkipping = true;\n        var iterations = 0;\n        collection.__iterate(function(v, k) {\n            if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n                iterations++;\n                return fn(v, useKeys ? k : iterations - 1, this$1$1) !== false && iterations !== sliceSize;\n            }\n        });\n        return iterations;\n    };\n    sliceSeq.__iteratorUncached = function(type, reverse) {\n        if (sliceSize !== 0 && reverse) {\n            return this.cacheResult().__iterator(type, reverse);\n        }\n        // Don't bother instantiating parent iterator if taking 0.\n        if (sliceSize === 0) {\n            return new Iterator(iteratorDone);\n        }\n        var iterator = collection.__iterator(type, reverse);\n        var skipped = 0;\n        var iterations = 0;\n        return new Iterator(function() {\n            while(skipped++ < resolvedBegin){\n                iterator.next();\n            }\n            if (++iterations > sliceSize) {\n                return iteratorDone();\n            }\n            var step = iterator.next();\n            if (useKeys || type === ITERATE_VALUES || step.done) {\n                return step;\n            }\n            if (type === ITERATE_KEYS) {\n                return iteratorValue(type, iterations - 1, undefined, step);\n            }\n            return iteratorValue(type, iterations - 1, step.value[1], step);\n        });\n    };\n    return sliceSeq;\n}\nfunction takeWhileFactory(collection, predicate, context) {\n    var takeSequence = makeSequence(collection);\n    takeSequence.__iterateUncached = function(fn, reverse) {\n        var this$1$1 = this;\n        if (reverse) {\n            return this.cacheResult().__iterate(fn, reverse);\n        }\n        var iterations = 0;\n        collection.__iterate(function(v, k, c) {\n            return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$1$1);\n        });\n        return iterations;\n    };\n    takeSequence.__iteratorUncached = function(type, reverse) {\n        var this$1$1 = this;\n        if (reverse) {\n            return this.cacheResult().__iterator(type, reverse);\n        }\n        var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n        var iterating = true;\n        return new Iterator(function() {\n            if (!iterating) {\n                return iteratorDone();\n            }\n            var step = iterator.next();\n            if (step.done) {\n                return step;\n            }\n            var entry = step.value;\n            var k = entry[0];\n            var v = entry[1];\n            if (!predicate.call(context, v, k, this$1$1)) {\n                iterating = false;\n                return iteratorDone();\n            }\n            return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);\n        });\n    };\n    return takeSequence;\n}\nfunction skipWhileFactory(collection, predicate, context, useKeys) {\n    var skipSequence = makeSequence(collection);\n    skipSequence.__iterateUncached = function(fn, reverse) {\n        var this$1$1 = this;\n        if (reverse) {\n            return this.cacheResult().__iterate(fn, reverse);\n        }\n        var isSkipping = true;\n        var iterations = 0;\n        collection.__iterate(function(v, k, c) {\n            if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n                iterations++;\n                return fn(v, useKeys ? k : iterations - 1, this$1$1);\n            }\n        });\n        return iterations;\n    };\n    skipSequence.__iteratorUncached = function(type, reverse) {\n        var this$1$1 = this;\n        if (reverse) {\n            return this.cacheResult().__iterator(type, reverse);\n        }\n        var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n        var skipping = true;\n        var iterations = 0;\n        return new Iterator(function() {\n            var step;\n            var k;\n            var v;\n            do {\n                step = iterator.next();\n                if (step.done) {\n                    if (useKeys || type === ITERATE_VALUES) {\n                        return step;\n                    }\n                    if (type === ITERATE_KEYS) {\n                        return iteratorValue(type, iterations++, undefined, step);\n                    }\n                    return iteratorValue(type, iterations++, step.value[1], step);\n                }\n                var entry = step.value;\n                k = entry[0];\n                v = entry[1];\n                skipping && (skipping = predicate.call(context, v, k, this$1$1));\n            }while (skipping);\n            return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);\n        });\n    };\n    return skipSequence;\n}\nfunction concatFactory(collection, values) {\n    var isKeyedCollection = isKeyed(collection);\n    var iters = [\n        collection\n    ].concat(values).map(function(v) {\n        if (!isCollection(v)) {\n            v = isKeyedCollection ? keyedSeqFromValue(v) : indexedSeqFromValue(Array.isArray(v) ? v : [\n                v\n            ]);\n        } else if (isKeyedCollection) {\n            v = KeyedCollection(v);\n        }\n        return v;\n    }).filter(function(v) {\n        return v.size !== 0;\n    });\n    if (iters.length === 0) {\n        return collection;\n    }\n    if (iters.length === 1) {\n        var singleton = iters[0];\n        if (singleton === collection || isKeyedCollection && isKeyed(singleton) || isIndexed(collection) && isIndexed(singleton)) {\n            return singleton;\n        }\n    }\n    var concatSeq = new ArraySeq(iters);\n    if (isKeyedCollection) {\n        concatSeq = concatSeq.toKeyedSeq();\n    } else if (!isIndexed(collection)) {\n        concatSeq = concatSeq.toSetSeq();\n    }\n    concatSeq = concatSeq.flatten(true);\n    concatSeq.size = iters.reduce(function(sum, seq) {\n        if (sum !== undefined) {\n            var size = seq.size;\n            if (size !== undefined) {\n                return sum + size;\n            }\n        }\n    }, 0);\n    return concatSeq;\n}\nfunction flattenFactory(collection, depth, useKeys) {\n    var flatSequence = makeSequence(collection);\n    flatSequence.__iterateUncached = function(fn, reverse) {\n        if (reverse) {\n            return this.cacheResult().__iterate(fn, reverse);\n        }\n        var iterations = 0;\n        var stopped = false;\n        function flatDeep(iter, currentDepth) {\n            iter.__iterate(function(v, k) {\n                if ((!depth || currentDepth < depth) && isCollection(v)) {\n                    flatDeep(v, currentDepth + 1);\n                } else {\n                    iterations++;\n                    if (fn(v, useKeys ? k : iterations - 1, flatSequence) === false) {\n                        stopped = true;\n                    }\n                }\n                return !stopped;\n            }, reverse);\n        }\n        flatDeep(collection, 0);\n        return iterations;\n    };\n    flatSequence.__iteratorUncached = function(type, reverse) {\n        if (reverse) {\n            return this.cacheResult().__iterator(type, reverse);\n        }\n        var iterator = collection.__iterator(type, reverse);\n        var stack = [];\n        var iterations = 0;\n        return new Iterator(function() {\n            while(iterator){\n                var step = iterator.next();\n                if (step.done !== false) {\n                    iterator = stack.pop();\n                    continue;\n                }\n                var v = step.value;\n                if (type === ITERATE_ENTRIES) {\n                    v = v[1];\n                }\n                if ((!depth || stack.length < depth) && isCollection(v)) {\n                    stack.push(iterator);\n                    iterator = v.__iterator(type, reverse);\n                } else {\n                    return useKeys ? step : iteratorValue(type, iterations++, v, step);\n                }\n            }\n            return iteratorDone();\n        });\n    };\n    return flatSequence;\n}\nfunction flatMapFactory(collection, mapper, context) {\n    var coerce = collectionClass(collection);\n    return collection.toSeq().map(function(v, k) {\n        return coerce(mapper.call(context, v, k, collection));\n    }).flatten(true);\n}\nfunction interposeFactory(collection, separator) {\n    var interposedSequence = makeSequence(collection);\n    interposedSequence.size = collection.size && collection.size * 2 - 1;\n    interposedSequence.__iterateUncached = function(fn, reverse) {\n        var this$1$1 = this;\n        var iterations = 0;\n        collection.__iterate(function(v) {\n            return (!iterations || fn(separator, iterations++, this$1$1) !== false) && fn(v, iterations++, this$1$1) !== false;\n        }, reverse);\n        return iterations;\n    };\n    interposedSequence.__iteratorUncached = function(type, reverse) {\n        var iterator = collection.__iterator(ITERATE_VALUES, reverse);\n        var iterations = 0;\n        var step;\n        return new Iterator(function() {\n            if (!step || iterations % 2) {\n                step = iterator.next();\n                if (step.done) {\n                    return step;\n                }\n            }\n            return iterations % 2 ? iteratorValue(type, iterations++, separator) : iteratorValue(type, iterations++, step.value, step);\n        });\n    };\n    return interposedSequence;\n}\nfunction sortFactory(collection, comparator, mapper) {\n    if (!comparator) {\n        comparator = defaultComparator;\n    }\n    var isKeyedCollection = isKeyed(collection);\n    var index = 0;\n    var entries = collection.toSeq().map(function(v, k) {\n        return [\n            k,\n            v,\n            index++,\n            mapper ? mapper(v, k, collection) : v\n        ];\n    }).valueSeq().toArray();\n    entries.sort(function(a, b) {\n        return comparator(a[3], b[3]) || a[2] - b[2];\n    }).forEach(isKeyedCollection ? function(v, i) {\n        entries[i].length = 2;\n    } : function(v, i) {\n        entries[i] = v[1];\n    });\n    return isKeyedCollection ? KeyedSeq(entries) : isIndexed(collection) ? IndexedSeq(entries) : SetSeq(entries);\n}\nfunction maxFactory(collection, comparator, mapper) {\n    if (!comparator) {\n        comparator = defaultComparator;\n    }\n    if (mapper) {\n        var entry = collection.toSeq().map(function(v, k) {\n            return [\n                v,\n                mapper(v, k, collection)\n            ];\n        }).reduce(function(a, b) {\n            return maxCompare(comparator, a[1], b[1]) ? b : a;\n        });\n        return entry && entry[0];\n    }\n    return collection.reduce(function(a, b) {\n        return maxCompare(comparator, a, b) ? b : a;\n    });\n}\nfunction maxCompare(comparator, a, b) {\n    var comp = comparator(b, a);\n    // b is considered the new max if the comparator declares them equal, but\n    // they are not equal and b is in fact a nullish value.\n    return comp === 0 && b !== a && (b === undefined || b === null || b !== b) || comp > 0;\n}\nfunction zipWithFactory(keyIter, zipper, iters, zipAll) {\n    var zipSequence = makeSequence(keyIter);\n    var sizes = new ArraySeq(iters).map(function(i) {\n        return i.size;\n    });\n    zipSequence.size = zipAll ? sizes.max() : sizes.min();\n    // Note: this a generic base implementation of __iterate in terms of\n    // __iterator which may be more generically useful in the future.\n    zipSequence.__iterate = function(fn, reverse) {\n        /* generic:\n    var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n    var step;\n    var iterations = 0;\n    while (!(step = iterator.next()).done) {\n      iterations++;\n      if (fn(step.value[1], step.value[0], this) === false) {\n        break;\n      }\n    }\n    return iterations;\n    */ // indexed:\n        var iterator = this.__iterator(ITERATE_VALUES, reverse);\n        var step;\n        var iterations = 0;\n        while(!(step = iterator.next()).done){\n            if (fn(step.value, iterations++, this) === false) {\n                break;\n            }\n        }\n        return iterations;\n    };\n    zipSequence.__iteratorUncached = function(type, reverse) {\n        var iterators = iters.map(function(i) {\n            return i = Collection(i), getIterator(reverse ? i.reverse() : i);\n        });\n        var iterations = 0;\n        var isDone = false;\n        return new Iterator(function() {\n            var steps;\n            if (!isDone) {\n                steps = iterators.map(function(i) {\n                    return i.next();\n                });\n                isDone = zipAll ? steps.every(function(s) {\n                    return s.done;\n                }) : steps.some(function(s) {\n                    return s.done;\n                });\n            }\n            if (isDone) {\n                return iteratorDone();\n            }\n            return iteratorValue(type, iterations++, zipper.apply(null, steps.map(function(s) {\n                return s.value;\n            })));\n        });\n    };\n    return zipSequence;\n}\n// #pragma Helper Functions\nfunction reify(iter, seq) {\n    return iter === seq ? iter : isSeq(iter) ? seq : iter.constructor(seq);\n}\nfunction validateEntry(entry) {\n    if (entry !== Object(entry)) {\n        throw new TypeError(\"Expected [K, V] tuple: \" + entry);\n    }\n}\nfunction collectionClass(collection) {\n    return isKeyed(collection) ? KeyedCollection : isIndexed(collection) ? IndexedCollection : SetCollection;\n}\nfunction makeSequence(collection) {\n    return Object.create((isKeyed(collection) ? KeyedSeq : isIndexed(collection) ? IndexedSeq : SetSeq).prototype);\n}\nfunction cacheResultThrough() {\n    if (this._iter.cacheResult) {\n        this._iter.cacheResult();\n        this.size = this._iter.size;\n        return this;\n    }\n    return Seq.prototype.cacheResult.call(this);\n}\nfunction defaultComparator(a, b) {\n    if (a === undefined && b === undefined) {\n        return 0;\n    }\n    if (a === undefined) {\n        return 1;\n    }\n    if (b === undefined) {\n        return -1;\n    }\n    return a > b ? 1 : a < b ? -1 : 0;\n}\nfunction arrCopy(arr, offset) {\n    offset = offset || 0;\n    var len = Math.max(0, arr.length - offset);\n    var newArr = new Array(len);\n    for(var ii = 0; ii < len; ii++){\n        newArr[ii] = arr[ii + offset];\n    }\n    return newArr;\n}\nfunction invariant(condition, error) {\n    if (!condition) {\n        throw new Error(error);\n    }\n}\nfunction assertNotInfinite(size) {\n    invariant(size !== Infinity, \"Cannot perform this action with an infinite size.\");\n}\nfunction coerceKeyPath(keyPath) {\n    if (isArrayLike(keyPath) && typeof keyPath !== \"string\") {\n        return keyPath;\n    }\n    if (isOrdered(keyPath)) {\n        return keyPath.toArray();\n    }\n    throw new TypeError(\"Invalid keyPath: expected Ordered Collection or Array: \" + keyPath);\n}\nvar toString = Object.prototype.toString;\nfunction isPlainObject(value) {\n    // The base prototype's toString deals with Argument objects and native namespaces like Math\n    if (!value || typeof value !== \"object\" || toString.call(value) !== \"[object Object]\") {\n        return false;\n    }\n    var proto = Object.getPrototypeOf(value);\n    if (proto === null) {\n        return true;\n    }\n    // Iteratively going up the prototype chain is needed for cross-realm environments (differing contexts, iframes, etc)\n    var parentProto = proto;\n    var nextProto = Object.getPrototypeOf(proto);\n    while(nextProto !== null){\n        parentProto = nextProto;\n        nextProto = Object.getPrototypeOf(parentProto);\n    }\n    return parentProto === proto;\n}\n/**\n * Returns true if the value is a potentially-persistent data structure, either\n * provided by Immutable.js or a plain Array or Object.\n */ function isDataStructure(value) {\n    return typeof value === \"object\" && (isImmutable(value) || Array.isArray(value) || isPlainObject(value));\n}\nfunction quoteString(value) {\n    try {\n        return typeof value === \"string\" ? JSON.stringify(value) : String(value);\n    } catch (_ignoreError) {\n        return JSON.stringify(value);\n    }\n}\nfunction has(collection, key) {\n    return isImmutable(collection) ? collection.has(key) : isDataStructure(collection) && hasOwnProperty.call(collection, key);\n}\nfunction get(collection, key, notSetValue) {\n    return isImmutable(collection) ? collection.get(key, notSetValue) : !has(collection, key) ? notSetValue : typeof collection.get === \"function\" ? collection.get(key) : collection[key];\n}\nfunction shallowCopy(from) {\n    if (Array.isArray(from)) {\n        return arrCopy(from);\n    }\n    var to = {};\n    for(var key in from){\n        if (hasOwnProperty.call(from, key)) {\n            to[key] = from[key];\n        }\n    }\n    return to;\n}\nfunction remove(collection, key) {\n    if (!isDataStructure(collection)) {\n        throw new TypeError(\"Cannot update non-data-structure value: \" + collection);\n    }\n    if (isImmutable(collection)) {\n        if (!collection.remove) {\n            throw new TypeError(\"Cannot update immutable value without .remove() method: \" + collection);\n        }\n        return collection.remove(key);\n    }\n    if (!hasOwnProperty.call(collection, key)) {\n        return collection;\n    }\n    var collectionCopy = shallowCopy(collection);\n    if (Array.isArray(collectionCopy)) {\n        collectionCopy.splice(key, 1);\n    } else {\n        delete collectionCopy[key];\n    }\n    return collectionCopy;\n}\nfunction set(collection, key, value) {\n    if (!isDataStructure(collection)) {\n        throw new TypeError(\"Cannot update non-data-structure value: \" + collection);\n    }\n    if (isImmutable(collection)) {\n        if (!collection.set) {\n            throw new TypeError(\"Cannot update immutable value without .set() method: \" + collection);\n        }\n        return collection.set(key, value);\n    }\n    if (hasOwnProperty.call(collection, key) && value === collection[key]) {\n        return collection;\n    }\n    var collectionCopy = shallowCopy(collection);\n    collectionCopy[key] = value;\n    return collectionCopy;\n}\nfunction updateIn$1(collection, keyPath, notSetValue, updater) {\n    if (!updater) {\n        updater = notSetValue;\n        notSetValue = undefined;\n    }\n    var updatedValue = updateInDeeply(isImmutable(collection), collection, coerceKeyPath(keyPath), 0, notSetValue, updater);\n    return updatedValue === NOT_SET ? notSetValue : updatedValue;\n}\nfunction updateInDeeply(inImmutable, existing, keyPath, i, notSetValue, updater) {\n    var wasNotSet = existing === NOT_SET;\n    if (i === keyPath.length) {\n        var existingValue = wasNotSet ? notSetValue : existing;\n        var newValue = updater(existingValue);\n        return newValue === existingValue ? existing : newValue;\n    }\n    if (!wasNotSet && !isDataStructure(existing)) {\n        throw new TypeError(\"Cannot update within non-data-structure value in path [\" + keyPath.slice(0, i).map(quoteString) + \"]: \" + existing);\n    }\n    var key = keyPath[i];\n    var nextExisting = wasNotSet ? NOT_SET : get(existing, key, NOT_SET);\n    var nextUpdated = updateInDeeply(nextExisting === NOT_SET ? inImmutable : isImmutable(nextExisting), nextExisting, keyPath, i + 1, notSetValue, updater);\n    return nextUpdated === nextExisting ? existing : nextUpdated === NOT_SET ? remove(existing, key) : set(wasNotSet ? inImmutable ? emptyMap() : {} : existing, key, nextUpdated);\n}\nfunction setIn$1(collection, keyPath, value) {\n    return updateIn$1(collection, keyPath, NOT_SET, function() {\n        return value;\n    });\n}\nfunction setIn(keyPath, v) {\n    return setIn$1(this, keyPath, v);\n}\nfunction removeIn(collection, keyPath) {\n    return updateIn$1(collection, keyPath, function() {\n        return NOT_SET;\n    });\n}\nfunction deleteIn(keyPath) {\n    return removeIn(this, keyPath);\n}\nfunction update$1(collection, key, notSetValue, updater) {\n    return updateIn$1(collection, [\n        key\n    ], notSetValue, updater);\n}\nfunction update(key, notSetValue, updater) {\n    return arguments.length === 1 ? key(this) : update$1(this, key, notSetValue, updater);\n}\nfunction updateIn(keyPath, notSetValue, updater) {\n    return updateIn$1(this, keyPath, notSetValue, updater);\n}\nfunction merge$1() {\n    var iters = [], len = arguments.length;\n    while(len--)iters[len] = arguments[len];\n    return mergeIntoKeyedWith(this, iters);\n}\nfunction mergeWith$1(merger) {\n    var iters = [], len = arguments.length - 1;\n    while(len-- > 0)iters[len] = arguments[len + 1];\n    if (typeof merger !== \"function\") {\n        throw new TypeError(\"Invalid merger function: \" + merger);\n    }\n    return mergeIntoKeyedWith(this, iters, merger);\n}\nfunction mergeIntoKeyedWith(collection, collections, merger) {\n    var iters = [];\n    for(var ii = 0; ii < collections.length; ii++){\n        var collection$1 = KeyedCollection(collections[ii]);\n        if (collection$1.size !== 0) {\n            iters.push(collection$1);\n        }\n    }\n    if (iters.length === 0) {\n        return collection;\n    }\n    if (collection.toSeq().size === 0 && !collection.__ownerID && iters.length === 1) {\n        return collection.constructor(iters[0]);\n    }\n    return collection.withMutations(function(collection) {\n        var mergeIntoCollection = merger ? function(value, key) {\n            update$1(collection, key, NOT_SET, function(oldVal) {\n                return oldVal === NOT_SET ? value : merger(oldVal, value, key);\n            });\n        } : function(value, key) {\n            collection.set(key, value);\n        };\n        for(var ii = 0; ii < iters.length; ii++){\n            iters[ii].forEach(mergeIntoCollection);\n        }\n    });\n}\nfunction merge(collection) {\n    var sources = [], len = arguments.length - 1;\n    while(len-- > 0)sources[len] = arguments[len + 1];\n    return mergeWithSources(collection, sources);\n}\nfunction mergeWith(merger, collection) {\n    var sources = [], len = arguments.length - 2;\n    while(len-- > 0)sources[len] = arguments[len + 2];\n    return mergeWithSources(collection, sources, merger);\n}\nfunction mergeDeep$1(collection) {\n    var sources = [], len = arguments.length - 1;\n    while(len-- > 0)sources[len] = arguments[len + 1];\n    return mergeDeepWithSources(collection, sources);\n}\nfunction mergeDeepWith$1(merger, collection) {\n    var sources = [], len = arguments.length - 2;\n    while(len-- > 0)sources[len] = arguments[len + 2];\n    return mergeDeepWithSources(collection, sources, merger);\n}\nfunction mergeDeepWithSources(collection, sources, merger) {\n    return mergeWithSources(collection, sources, deepMergerWith(merger));\n}\nfunction mergeWithSources(collection, sources, merger) {\n    if (!isDataStructure(collection)) {\n        throw new TypeError(\"Cannot merge into non-data-structure value: \" + collection);\n    }\n    if (isImmutable(collection)) {\n        return typeof merger === \"function\" && collection.mergeWith ? collection.mergeWith.apply(collection, [\n            merger\n        ].concat(sources)) : collection.merge ? collection.merge.apply(collection, sources) : collection.concat.apply(collection, sources);\n    }\n    var isArray = Array.isArray(collection);\n    var merged = collection;\n    var Collection = isArray ? IndexedCollection : KeyedCollection;\n    var mergeItem = isArray ? function(value) {\n        // Copy on write\n        if (merged === collection) {\n            merged = shallowCopy(merged);\n        }\n        merged.push(value);\n    } : function(value, key) {\n        var hasVal = hasOwnProperty.call(merged, key);\n        var nextVal = hasVal && merger ? merger(merged[key], value, key) : value;\n        if (!hasVal || nextVal !== merged[key]) {\n            // Copy on write\n            if (merged === collection) {\n                merged = shallowCopy(merged);\n            }\n            merged[key] = nextVal;\n        }\n    };\n    for(var i = 0; i < sources.length; i++){\n        Collection(sources[i]).forEach(mergeItem);\n    }\n    return merged;\n}\nfunction deepMergerWith(merger) {\n    function deepMerger(oldValue, newValue, key) {\n        return isDataStructure(oldValue) && isDataStructure(newValue) && areMergeable(oldValue, newValue) ? mergeWithSources(oldValue, [\n            newValue\n        ], deepMerger) : merger ? merger(oldValue, newValue, key) : newValue;\n    }\n    return deepMerger;\n}\n/**\n * It's unclear what the desired behavior is for merging two collections that\n * fall into separate categories between keyed, indexed, or set-like, so we only\n * consider them mergeable if they fall into the same category.\n */ function areMergeable(oldDataStructure, newDataStructure) {\n    var oldSeq = Seq(oldDataStructure);\n    var newSeq = Seq(newDataStructure);\n    // This logic assumes that a sequence can only fall into one of the three\n    // categories mentioned above (since there's no `isSetLike()` method).\n    return isIndexed(oldSeq) === isIndexed(newSeq) && isKeyed(oldSeq) === isKeyed(newSeq);\n}\nfunction mergeDeep() {\n    var iters = [], len = arguments.length;\n    while(len--)iters[len] = arguments[len];\n    return mergeDeepWithSources(this, iters);\n}\nfunction mergeDeepWith(merger) {\n    var iters = [], len = arguments.length - 1;\n    while(len-- > 0)iters[len] = arguments[len + 1];\n    return mergeDeepWithSources(this, iters, merger);\n}\nfunction mergeIn(keyPath) {\n    var iters = [], len = arguments.length - 1;\n    while(len-- > 0)iters[len] = arguments[len + 1];\n    return updateIn$1(this, keyPath, emptyMap(), function(m) {\n        return mergeWithSources(m, iters);\n    });\n}\nfunction mergeDeepIn(keyPath) {\n    var iters = [], len = arguments.length - 1;\n    while(len-- > 0)iters[len] = arguments[len + 1];\n    return updateIn$1(this, keyPath, emptyMap(), function(m) {\n        return mergeDeepWithSources(m, iters);\n    });\n}\nfunction withMutations(fn) {\n    var mutable = this.asMutable();\n    fn(mutable);\n    return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n}\nfunction asMutable() {\n    return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n}\nfunction asImmutable() {\n    return this.__ensureOwner();\n}\nfunction wasAltered() {\n    return this.__altered;\n}\nvar Map = /*@__PURE__*/ function(KeyedCollection) {\n    function Map(value) {\n        // eslint-disable-next-line no-constructor-return\n        return value === undefined || value === null ? emptyMap() : isMap(value) && !isOrdered(value) ? value : emptyMap().withMutations(function(map) {\n            var iter = KeyedCollection(value);\n            assertNotInfinite(iter.size);\n            iter.forEach(function(v, k) {\n                return map.set(k, v);\n            });\n        });\n    }\n    if (KeyedCollection) Map.__proto__ = KeyedCollection;\n    Map.prototype = Object.create(KeyedCollection && KeyedCollection.prototype);\n    Map.prototype.constructor = Map;\n    Map.of = function of() {\n        var keyValues = [], len = arguments.length;\n        while(len--)keyValues[len] = arguments[len];\n        return emptyMap().withMutations(function(map) {\n            for(var i = 0; i < keyValues.length; i += 2){\n                if (i + 1 >= keyValues.length) {\n                    throw new Error(\"Missing value for key: \" + keyValues[i]);\n                }\n                map.set(keyValues[i], keyValues[i + 1]);\n            }\n        });\n    };\n    Map.prototype.toString = function toString() {\n        return this.__toString(\"Map {\", \"}\");\n    };\n    // @pragma Access\n    Map.prototype.get = function get(k, notSetValue) {\n        return this._root ? this._root.get(0, undefined, k, notSetValue) : notSetValue;\n    };\n    // @pragma Modification\n    Map.prototype.set = function set(k, v) {\n        return updateMap(this, k, v);\n    };\n    Map.prototype.remove = function remove(k) {\n        return updateMap(this, k, NOT_SET);\n    };\n    Map.prototype.deleteAll = function deleteAll(keys) {\n        var collection = Collection(keys);\n        if (collection.size === 0) {\n            return this;\n        }\n        return this.withMutations(function(map) {\n            collection.forEach(function(key) {\n                return map.remove(key);\n            });\n        });\n    };\n    Map.prototype.clear = function clear() {\n        if (this.size === 0) {\n            return this;\n        }\n        if (this.__ownerID) {\n            this.size = 0;\n            this._root = null;\n            this.__hash = undefined;\n            this.__altered = true;\n            return this;\n        }\n        return emptyMap();\n    };\n    // @pragma Composition\n    Map.prototype.sort = function sort(comparator) {\n        // Late binding\n        return OrderedMap(sortFactory(this, comparator));\n    };\n    Map.prototype.sortBy = function sortBy(mapper, comparator) {\n        // Late binding\n        return OrderedMap(sortFactory(this, comparator, mapper));\n    };\n    Map.prototype.map = function map(mapper, context) {\n        var this$1$1 = this;\n        return this.withMutations(function(map) {\n            map.forEach(function(value, key) {\n                map.set(key, mapper.call(context, value, key, this$1$1));\n            });\n        });\n    };\n    // @pragma Mutability\n    Map.prototype.__iterator = function __iterator(type, reverse) {\n        return new MapIterator(this, type, reverse);\n    };\n    Map.prototype.__iterate = function __iterate(fn, reverse) {\n        var this$1$1 = this;\n        var iterations = 0;\n        this._root && this._root.iterate(function(entry) {\n            iterations++;\n            return fn(entry[1], entry[0], this$1$1);\n        }, reverse);\n        return iterations;\n    };\n    Map.prototype.__ensureOwner = function __ensureOwner(ownerID) {\n        if (ownerID === this.__ownerID) {\n            return this;\n        }\n        if (!ownerID) {\n            if (this.size === 0) {\n                return emptyMap();\n            }\n            this.__ownerID = ownerID;\n            this.__altered = false;\n            return this;\n        }\n        return makeMap(this.size, this._root, ownerID, this.__hash);\n    };\n    return Map;\n}(KeyedCollection);\nMap.isMap = isMap;\nvar MapPrototype = Map.prototype;\nMapPrototype[IS_MAP_SYMBOL] = true;\nMapPrototype[DELETE] = MapPrototype.remove;\nMapPrototype.removeAll = MapPrototype.deleteAll;\nMapPrototype.setIn = setIn;\nMapPrototype.removeIn = MapPrototype.deleteIn = deleteIn;\nMapPrototype.update = update;\nMapPrototype.updateIn = updateIn;\nMapPrototype.merge = MapPrototype.concat = merge$1;\nMapPrototype.mergeWith = mergeWith$1;\nMapPrototype.mergeDeep = mergeDeep;\nMapPrototype.mergeDeepWith = mergeDeepWith;\nMapPrototype.mergeIn = mergeIn;\nMapPrototype.mergeDeepIn = mergeDeepIn;\nMapPrototype.withMutations = withMutations;\nMapPrototype.wasAltered = wasAltered;\nMapPrototype.asImmutable = asImmutable;\nMapPrototype[\"@@transducer/init\"] = MapPrototype.asMutable = asMutable;\nMapPrototype[\"@@transducer/step\"] = function(result, arr) {\n    return result.set(arr[0], arr[1]);\n};\nMapPrototype[\"@@transducer/result\"] = function(obj) {\n    return obj.asImmutable();\n};\n// #pragma Trie Nodes\nvar ArrayMapNode = function ArrayMapNode(ownerID, entries) {\n    this.ownerID = ownerID;\n    this.entries = entries;\n};\nArrayMapNode.prototype.get = function get(shift, keyHash, key, notSetValue) {\n    var entries = this.entries;\n    for(var ii = 0, len = entries.length; ii < len; ii++){\n        if (is(key, entries[ii][0])) {\n            return entries[ii][1];\n        }\n    }\n    return notSetValue;\n};\nArrayMapNode.prototype.update = function update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    var removed = value === NOT_SET;\n    var entries = this.entries;\n    var idx = 0;\n    var len = entries.length;\n    for(; idx < len; idx++){\n        if (is(key, entries[idx][0])) {\n            break;\n        }\n    }\n    var exists = idx < len;\n    if (exists ? entries[idx][1] === value : removed) {\n        return this;\n    }\n    SetRef(didAlter);\n    (removed || !exists) && SetRef(didChangeSize);\n    if (removed && entries.length === 1) {\n        return; // undefined\n    }\n    if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n        return createNodes(ownerID, entries, key, value);\n    }\n    var isEditable = ownerID && ownerID === this.ownerID;\n    var newEntries = isEditable ? entries : arrCopy(entries);\n    if (exists) {\n        if (removed) {\n            idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();\n        } else {\n            newEntries[idx] = [\n                key,\n                value\n            ];\n        }\n    } else {\n        newEntries.push([\n            key,\n            value\n        ]);\n    }\n    if (isEditable) {\n        this.entries = newEntries;\n        return this;\n    }\n    return new ArrayMapNode(ownerID, newEntries);\n};\nvar BitmapIndexedNode = function BitmapIndexedNode(ownerID, bitmap, nodes) {\n    this.ownerID = ownerID;\n    this.bitmap = bitmap;\n    this.nodes = nodes;\n};\nBitmapIndexedNode.prototype.get = function get(shift, keyHash, key, notSetValue) {\n    if (keyHash === undefined) {\n        keyHash = hash(key);\n    }\n    var bit = 1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK);\n    var bitmap = this.bitmap;\n    return (bitmap & bit) === 0 ? notSetValue : this.nodes[popCount(bitmap & bit - 1)].get(shift + SHIFT, keyHash, key, notSetValue);\n};\nBitmapIndexedNode.prototype.update = function update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    if (keyHash === undefined) {\n        keyHash = hash(key);\n    }\n    var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n    var bit = 1 << keyHashFrag;\n    var bitmap = this.bitmap;\n    var exists = (bitmap & bit) !== 0;\n    if (!exists && value === NOT_SET) {\n        return this;\n    }\n    var idx = popCount(bitmap & bit - 1);\n    var nodes = this.nodes;\n    var node = exists ? nodes[idx] : undefined;\n    var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n    if (newNode === node) {\n        return this;\n    }\n    if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n    }\n    if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {\n        return nodes[idx ^ 1];\n    }\n    if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n        return newNode;\n    }\n    var isEditable = ownerID && ownerID === this.ownerID;\n    var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;\n    var newNodes = exists ? newNode ? setAt(nodes, idx, newNode, isEditable) : spliceOut(nodes, idx, isEditable) : spliceIn(nodes, idx, newNode, isEditable);\n    if (isEditable) {\n        this.bitmap = newBitmap;\n        this.nodes = newNodes;\n        return this;\n    }\n    return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n};\nvar HashArrayMapNode = function HashArrayMapNode(ownerID, count, nodes) {\n    this.ownerID = ownerID;\n    this.count = count;\n    this.nodes = nodes;\n};\nHashArrayMapNode.prototype.get = function get(shift, keyHash, key, notSetValue) {\n    if (keyHash === undefined) {\n        keyHash = hash(key);\n    }\n    var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n    var node = this.nodes[idx];\n    return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;\n};\nHashArrayMapNode.prototype.update = function update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    if (keyHash === undefined) {\n        keyHash = hash(key);\n    }\n    var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n    var removed = value === NOT_SET;\n    var nodes = this.nodes;\n    var node = nodes[idx];\n    if (removed && !node) {\n        return this;\n    }\n    var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n    if (newNode === node) {\n        return this;\n    }\n    var newCount = this.count;\n    if (!node) {\n        newCount++;\n    } else if (!newNode) {\n        newCount--;\n        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n            return packNodes(ownerID, nodes, newCount, idx);\n        }\n    }\n    var isEditable = ownerID && ownerID === this.ownerID;\n    var newNodes = setAt(nodes, idx, newNode, isEditable);\n    if (isEditable) {\n        this.count = newCount;\n        this.nodes = newNodes;\n        return this;\n    }\n    return new HashArrayMapNode(ownerID, newCount, newNodes);\n};\nvar HashCollisionNode = function HashCollisionNode(ownerID, keyHash, entries) {\n    this.ownerID = ownerID;\n    this.keyHash = keyHash;\n    this.entries = entries;\n};\nHashCollisionNode.prototype.get = function get(shift, keyHash, key, notSetValue) {\n    var entries = this.entries;\n    for(var ii = 0, len = entries.length; ii < len; ii++){\n        if (is(key, entries[ii][0])) {\n            return entries[ii][1];\n        }\n    }\n    return notSetValue;\n};\nHashCollisionNode.prototype.update = function update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    if (keyHash === undefined) {\n        keyHash = hash(key);\n    }\n    var removed = value === NOT_SET;\n    if (keyHash !== this.keyHash) {\n        if (removed) {\n            return this;\n        }\n        SetRef(didAlter);\n        SetRef(didChangeSize);\n        return mergeIntoNode(this, ownerID, shift, keyHash, [\n            key,\n            value\n        ]);\n    }\n    var entries = this.entries;\n    var idx = 0;\n    var len = entries.length;\n    for(; idx < len; idx++){\n        if (is(key, entries[idx][0])) {\n            break;\n        }\n    }\n    var exists = idx < len;\n    if (exists ? entries[idx][1] === value : removed) {\n        return this;\n    }\n    SetRef(didAlter);\n    (removed || !exists) && SetRef(didChangeSize);\n    if (removed && len === 2) {\n        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n    }\n    var isEditable = ownerID && ownerID === this.ownerID;\n    var newEntries = isEditable ? entries : arrCopy(entries);\n    if (exists) {\n        if (removed) {\n            idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();\n        } else {\n            newEntries[idx] = [\n                key,\n                value\n            ];\n        }\n    } else {\n        newEntries.push([\n            key,\n            value\n        ]);\n    }\n    if (isEditable) {\n        this.entries = newEntries;\n        return this;\n    }\n    return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n};\nvar ValueNode = function ValueNode(ownerID, keyHash, entry) {\n    this.ownerID = ownerID;\n    this.keyHash = keyHash;\n    this.entry = entry;\n};\nValueNode.prototype.get = function get(shift, keyHash, key, notSetValue) {\n    return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n};\nValueNode.prototype.update = function update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    var removed = value === NOT_SET;\n    var keyMatch = is(key, this.entry[0]);\n    if (keyMatch ? value === this.entry[1] : removed) {\n        return this;\n    }\n    SetRef(didAlter);\n    if (removed) {\n        SetRef(didChangeSize);\n        return; // undefined\n    }\n    if (keyMatch) {\n        if (ownerID && ownerID === this.ownerID) {\n            this.entry[1] = value;\n            return this;\n        }\n        return new ValueNode(ownerID, this.keyHash, [\n            key,\n            value\n        ]);\n    }\n    SetRef(didChangeSize);\n    return mergeIntoNode(this, ownerID, shift, hash(key), [\n        key,\n        value\n    ]);\n};\n// #pragma Iterators\nArrayMapNode.prototype.iterate = HashCollisionNode.prototype.iterate = function(fn, reverse) {\n    var entries = this.entries;\n    for(var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++){\n        if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n            return false;\n        }\n    }\n};\nBitmapIndexedNode.prototype.iterate = HashArrayMapNode.prototype.iterate = function(fn, reverse) {\n    var nodes = this.nodes;\n    for(var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++){\n        var node = nodes[reverse ? maxIndex - ii : ii];\n        if (node && node.iterate(fn, reverse) === false) {\n            return false;\n        }\n    }\n};\n// eslint-disable-next-line no-unused-vars\nValueNode.prototype.iterate = function(fn, reverse) {\n    return fn(this.entry);\n};\nvar MapIterator = /*@__PURE__*/ function(Iterator) {\n    function MapIterator(map, type, reverse) {\n        this._type = type;\n        this._reverse = reverse;\n        this._stack = map._root && mapIteratorFrame(map._root);\n    }\n    if (Iterator) MapIterator.__proto__ = Iterator;\n    MapIterator.prototype = Object.create(Iterator && Iterator.prototype);\n    MapIterator.prototype.constructor = MapIterator;\n    MapIterator.prototype.next = function next() {\n        var type = this._type;\n        var stack = this._stack;\n        while(stack){\n            var node = stack.node;\n            var index = stack.index++;\n            var maxIndex = void 0;\n            if (node.entry) {\n                if (index === 0) {\n                    return mapIteratorValue(type, node.entry);\n                }\n            } else if (node.entries) {\n                maxIndex = node.entries.length - 1;\n                if (index <= maxIndex) {\n                    return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);\n                }\n            } else {\n                maxIndex = node.nodes.length - 1;\n                if (index <= maxIndex) {\n                    var subNode = node.nodes[this._reverse ? maxIndex - index : index];\n                    if (subNode) {\n                        if (subNode.entry) {\n                            return mapIteratorValue(type, subNode.entry);\n                        }\n                        stack = this._stack = mapIteratorFrame(subNode, stack);\n                    }\n                    continue;\n                }\n            }\n            stack = this._stack = this._stack.__prev;\n        }\n        return iteratorDone();\n    };\n    return MapIterator;\n}(Iterator);\nfunction mapIteratorValue(type, entry) {\n    return iteratorValue(type, entry[0], entry[1]);\n}\nfunction mapIteratorFrame(node, prev) {\n    return {\n        node: node,\n        index: 0,\n        __prev: prev\n    };\n}\nfunction makeMap(size, root, ownerID, hash) {\n    var map = Object.create(MapPrototype);\n    map.size = size;\n    map._root = root;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n}\nvar EMPTY_MAP;\nfunction emptyMap() {\n    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n}\nfunction updateMap(map, k, v) {\n    var newRoot;\n    var newSize;\n    if (!map._root) {\n        if (v === NOT_SET) {\n            return map;\n        }\n        newSize = 1;\n        newRoot = new ArrayMapNode(map.__ownerID, [\n            [\n                k,\n                v\n            ]\n        ]);\n    } else {\n        var didChangeSize = MakeRef();\n        var didAlter = MakeRef();\n        newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);\n        if (!didAlter.value) {\n            return map;\n        }\n        newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);\n    }\n    if (map.__ownerID) {\n        map.size = newSize;\n        map._root = newRoot;\n        map.__hash = undefined;\n        map.__altered = true;\n        return map;\n    }\n    return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n}\nfunction updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    if (!node) {\n        if (value === NOT_SET) {\n            return node;\n        }\n        SetRef(didAlter);\n        SetRef(didChangeSize);\n        return new ValueNode(ownerID, keyHash, [\n            key,\n            value\n        ]);\n    }\n    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);\n}\nfunction isLeafNode(node) {\n    return node.constructor === ValueNode || node.constructor === HashCollisionNode;\n}\nfunction mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n    if (node.keyHash === keyHash) {\n        return new HashCollisionNode(ownerID, keyHash, [\n            node.entry,\n            entry\n        ]);\n    }\n    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n    var newNode;\n    var nodes = idx1 === idx2 ? [\n        mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)\n    ] : (newNode = new ValueNode(ownerID, keyHash, entry), idx1 < idx2 ? [\n        node,\n        newNode\n    ] : [\n        newNode,\n        node\n    ]);\n    return new BitmapIndexedNode(ownerID, 1 << idx1 | 1 << idx2, nodes);\n}\nfunction createNodes(ownerID, entries, key, value) {\n    if (!ownerID) {\n        ownerID = new OwnerID();\n    }\n    var node = new ValueNode(ownerID, hash(key), [\n        key,\n        value\n    ]);\n    for(var ii = 0; ii < entries.length; ii++){\n        var entry = entries[ii];\n        node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n    }\n    return node;\n}\nfunction packNodes(ownerID, nodes, count, excluding) {\n    var bitmap = 0;\n    var packedII = 0;\n    var packedNodes = new Array(count);\n    for(var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1){\n        var node = nodes[ii];\n        if (node !== undefined && ii !== excluding) {\n            bitmap |= bit;\n            packedNodes[packedII++] = node;\n        }\n    }\n    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n}\nfunction expandNodes(ownerID, nodes, bitmap, including, node) {\n    var count = 0;\n    var expandedNodes = new Array(SIZE);\n    for(var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1){\n        expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n    }\n    expandedNodes[including] = node;\n    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n}\nfunction popCount(x) {\n    x -= x >> 1 & 0x55555555;\n    x = (x & 0x33333333) + (x >> 2 & 0x33333333);\n    x = x + (x >> 4) & 0x0f0f0f0f;\n    x += x >> 8;\n    x += x >> 16;\n    return x & 0x7f;\n}\nfunction setAt(array, idx, val, canEdit) {\n    var newArray = canEdit ? array : arrCopy(array);\n    newArray[idx] = val;\n    return newArray;\n}\nfunction spliceIn(array, idx, val, canEdit) {\n    var newLen = array.length + 1;\n    if (canEdit && idx + 1 === newLen) {\n        array[idx] = val;\n        return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for(var ii = 0; ii < newLen; ii++){\n        if (ii === idx) {\n            newArray[ii] = val;\n            after = -1;\n        } else {\n            newArray[ii] = array[ii + after];\n        }\n    }\n    return newArray;\n}\nfunction spliceOut(array, idx, canEdit) {\n    var newLen = array.length - 1;\n    if (canEdit && idx === newLen) {\n        array.pop();\n        return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for(var ii = 0; ii < newLen; ii++){\n        if (ii === idx) {\n            after = 1;\n        }\n        newArray[ii] = array[ii + after];\n    }\n    return newArray;\n}\nvar MAX_ARRAY_MAP_SIZE = SIZE / 4;\nvar MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\nvar MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\nvar IS_LIST_SYMBOL = \"@@__IMMUTABLE_LIST__@@\";\nfunction isList(maybeList) {\n    return Boolean(maybeList && maybeList[IS_LIST_SYMBOL]);\n}\nvar List = /*@__PURE__*/ function(IndexedCollection) {\n    function List(value) {\n        var empty = emptyList();\n        if (value === undefined || value === null) {\n            // eslint-disable-next-line no-constructor-return\n            return empty;\n        }\n        if (isList(value)) {\n            // eslint-disable-next-line no-constructor-return\n            return value;\n        }\n        var iter = IndexedCollection(value);\n        var size = iter.size;\n        if (size === 0) {\n            // eslint-disable-next-line no-constructor-return\n            return empty;\n        }\n        assertNotInfinite(size);\n        if (size > 0 && size < SIZE) {\n            // eslint-disable-next-line no-constructor-return\n            return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n        }\n        // eslint-disable-next-line no-constructor-return\n        return empty.withMutations(function(list) {\n            list.setSize(size);\n            iter.forEach(function(v, i) {\n                return list.set(i, v);\n            });\n        });\n    }\n    if (IndexedCollection) List.__proto__ = IndexedCollection;\n    List.prototype = Object.create(IndexedCollection && IndexedCollection.prototype);\n    List.prototype.constructor = List;\n    List.of = function of() {\n        return this(arguments);\n    };\n    List.prototype.toString = function toString() {\n        return this.__toString(\"List [\", \"]\");\n    };\n    // @pragma Access\n    List.prototype.get = function get(index, notSetValue) {\n        index = wrapIndex(this, index);\n        if (index >= 0 && index < this.size) {\n            index += this._origin;\n            var node = listNodeFor(this, index);\n            return node && node.array[index & MASK];\n        }\n        return notSetValue;\n    };\n    // @pragma Modification\n    List.prototype.set = function set(index, value) {\n        return updateList(this, index, value);\n    };\n    List.prototype.remove = function remove(index) {\n        return !this.has(index) ? this : index === 0 ? this.shift() : index === this.size - 1 ? this.pop() : this.splice(index, 1);\n    };\n    List.prototype.insert = function insert(index, value) {\n        return this.splice(index, 0, value);\n    };\n    List.prototype.clear = function clear() {\n        if (this.size === 0) {\n            return this;\n        }\n        if (this.__ownerID) {\n            this.size = this._origin = this._capacity = 0;\n            this._level = SHIFT;\n            this._root = this._tail = this.__hash = undefined;\n            this.__altered = true;\n            return this;\n        }\n        return emptyList();\n    };\n    List.prototype.push = function push() {\n        var values = arguments;\n        var oldSize = this.size;\n        return this.withMutations(function(list) {\n            setListBounds(list, 0, oldSize + values.length);\n            for(var ii = 0; ii < values.length; ii++){\n                list.set(oldSize + ii, values[ii]);\n            }\n        });\n    };\n    List.prototype.pop = function pop() {\n        return setListBounds(this, 0, -1);\n    };\n    List.prototype.unshift = function unshift() {\n        var values = arguments;\n        return this.withMutations(function(list) {\n            setListBounds(list, -values.length);\n            for(var ii = 0; ii < values.length; ii++){\n                list.set(ii, values[ii]);\n            }\n        });\n    };\n    List.prototype.shift = function shift() {\n        return setListBounds(this, 1);\n    };\n    // @pragma Composition\n    List.prototype.concat = function concat() {\n        var arguments$1 = arguments;\n        var seqs = [];\n        for(var i = 0; i < arguments.length; i++){\n            var argument = arguments$1[i];\n            var seq = IndexedCollection(typeof argument !== \"string\" && hasIterator(argument) ? argument : [\n                argument\n            ]);\n            if (seq.size !== 0) {\n                seqs.push(seq);\n            }\n        }\n        if (seqs.length === 0) {\n            return this;\n        }\n        if (this.size === 0 && !this.__ownerID && seqs.length === 1) {\n            return this.constructor(seqs[0]);\n        }\n        return this.withMutations(function(list) {\n            seqs.forEach(function(seq) {\n                return seq.forEach(function(value) {\n                    return list.push(value);\n                });\n            });\n        });\n    };\n    List.prototype.setSize = function setSize(size) {\n        return setListBounds(this, 0, size);\n    };\n    List.prototype.map = function map(mapper, context) {\n        var this$1$1 = this;\n        return this.withMutations(function(list) {\n            for(var i = 0; i < this$1$1.size; i++){\n                list.set(i, mapper.call(context, list.get(i), i, this$1$1));\n            }\n        });\n    };\n    // @pragma Iteration\n    List.prototype.slice = function slice(begin, end) {\n        var size = this.size;\n        if (wholeSlice(begin, end, size)) {\n            return this;\n        }\n        return setListBounds(this, resolveBegin(begin, size), resolveEnd(end, size));\n    };\n    List.prototype.__iterator = function __iterator(type, reverse) {\n        var index = reverse ? this.size : 0;\n        var values = iterateList(this, reverse);\n        return new Iterator(function() {\n            var value = values();\n            return value === DONE ? iteratorDone() : iteratorValue(type, reverse ? --index : index++, value);\n        });\n    };\n    List.prototype.__iterate = function __iterate(fn, reverse) {\n        var index = reverse ? this.size : 0;\n        var values = iterateList(this, reverse);\n        var value;\n        while((value = values()) !== DONE){\n            if (fn(value, reverse ? --index : index++, this) === false) {\n                break;\n            }\n        }\n        return index;\n    };\n    List.prototype.__ensureOwner = function __ensureOwner(ownerID) {\n        if (ownerID === this.__ownerID) {\n            return this;\n        }\n        if (!ownerID) {\n            if (this.size === 0) {\n                return emptyList();\n            }\n            this.__ownerID = ownerID;\n            this.__altered = false;\n            return this;\n        }\n        return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);\n    };\n    return List;\n}(IndexedCollection);\nList.isList = isList;\nvar ListPrototype = List.prototype;\nListPrototype[IS_LIST_SYMBOL] = true;\nListPrototype[DELETE] = ListPrototype.remove;\nListPrototype.merge = ListPrototype.concat;\nListPrototype.setIn = setIn;\nListPrototype.deleteIn = ListPrototype.removeIn = deleteIn;\nListPrototype.update = update;\nListPrototype.updateIn = updateIn;\nListPrototype.mergeIn = mergeIn;\nListPrototype.mergeDeepIn = mergeDeepIn;\nListPrototype.withMutations = withMutations;\nListPrototype.wasAltered = wasAltered;\nListPrototype.asImmutable = asImmutable;\nListPrototype[\"@@transducer/init\"] = ListPrototype.asMutable = asMutable;\nListPrototype[\"@@transducer/step\"] = function(result, arr) {\n    return result.push(arr);\n};\nListPrototype[\"@@transducer/result\"] = function(obj) {\n    return obj.asImmutable();\n};\nvar VNode = function VNode(array, ownerID) {\n    this.array = array;\n    this.ownerID = ownerID;\n};\n// TODO: seems like these methods are very similar\nVNode.prototype.removeBefore = function removeBefore(ownerID, level, index) {\n    if (index === level ? 1 << level : this.array.length === 0) {\n        return this;\n    }\n    var originIndex = index >>> level & MASK;\n    if (originIndex >= this.array.length) {\n        return new VNode([], ownerID);\n    }\n    var removingFirst = originIndex === 0;\n    var newChild;\n    if (level > 0) {\n        var oldChild = this.array[originIndex];\n        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n        if (newChild === oldChild && removingFirst) {\n            return this;\n        }\n    }\n    if (removingFirst && !newChild) {\n        return this;\n    }\n    var editable = editableVNode(this, ownerID);\n    if (!removingFirst) {\n        for(var ii = 0; ii < originIndex; ii++){\n            editable.array[ii] = undefined;\n        }\n    }\n    if (newChild) {\n        editable.array[originIndex] = newChild;\n    }\n    return editable;\n};\nVNode.prototype.removeAfter = function removeAfter(ownerID, level, index) {\n    if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n        return this;\n    }\n    var sizeIndex = index - 1 >>> level & MASK;\n    if (sizeIndex >= this.array.length) {\n        return this;\n    }\n    var newChild;\n    if (level > 0) {\n        var oldChild = this.array[sizeIndex];\n        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n        if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n            return this;\n        }\n    }\n    var editable = editableVNode(this, ownerID);\n    editable.array.splice(sizeIndex + 1);\n    if (newChild) {\n        editable.array[sizeIndex] = newChild;\n    }\n    return editable;\n};\nvar DONE = {};\nfunction iterateList(list, reverse) {\n    var left = list._origin;\n    var right = list._capacity;\n    var tailPos = getTailOffset(right);\n    var tail = list._tail;\n    return iterateNodeOrLeaf(list._root, list._level, 0);\n    function iterateNodeOrLeaf(node, level, offset) {\n        return level === 0 ? iterateLeaf(node, offset) : iterateNode(node, level, offset);\n    }\n    function iterateLeaf(node, offset) {\n        var array = offset === tailPos ? tail && tail.array : node && node.array;\n        var from = offset > left ? 0 : left - offset;\n        var to = right - offset;\n        if (to > SIZE) {\n            to = SIZE;\n        }\n        return function() {\n            if (from === to) {\n                return DONE;\n            }\n            var idx = reverse ? --to : from++;\n            return array && array[idx];\n        };\n    }\n    function iterateNode(node, level, offset) {\n        var values;\n        var array = node && node.array;\n        var from = offset > left ? 0 : left - offset >> level;\n        var to = (right - offset >> level) + 1;\n        if (to > SIZE) {\n            to = SIZE;\n        }\n        return function() {\n            while(true){\n                if (values) {\n                    var value = values();\n                    if (value !== DONE) {\n                        return value;\n                    }\n                    values = null;\n                }\n                if (from === to) {\n                    return DONE;\n                }\n                var idx = reverse ? --to : from++;\n                values = iterateNodeOrLeaf(array && array[idx], level - SHIFT, offset + (idx << level));\n            }\n        };\n    }\n}\nfunction makeList(origin, capacity, level, root, tail, ownerID, hash) {\n    var list = Object.create(ListPrototype);\n    list.size = capacity - origin;\n    list._origin = origin;\n    list._capacity = capacity;\n    list._level = level;\n    list._root = root;\n    list._tail = tail;\n    list.__ownerID = ownerID;\n    list.__hash = hash;\n    list.__altered = false;\n    return list;\n}\nvar EMPTY_LIST;\nfunction emptyList() {\n    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n}\nfunction updateList(list, index, value) {\n    index = wrapIndex(list, index);\n    if (index !== index) {\n        return list;\n    }\n    if (index >= list.size || index < 0) {\n        return list.withMutations(function(list) {\n            index < 0 ? setListBounds(list, index).set(0, value) : setListBounds(list, 0, index + 1).set(index, value);\n        });\n    }\n    index += list._origin;\n    var newTail = list._tail;\n    var newRoot = list._root;\n    var didAlter = MakeRef();\n    if (index >= getTailOffset(list._capacity)) {\n        newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n    } else {\n        newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);\n    }\n    if (!didAlter.value) {\n        return list;\n    }\n    if (list.__ownerID) {\n        list._root = newRoot;\n        list._tail = newTail;\n        list.__hash = undefined;\n        list.__altered = true;\n        return list;\n    }\n    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n}\nfunction updateVNode(node, ownerID, level, index, value, didAlter) {\n    var idx = index >>> level & MASK;\n    var nodeHas = node && idx < node.array.length;\n    if (!nodeHas && value === undefined) {\n        return node;\n    }\n    var newNode;\n    if (level > 0) {\n        var lowerNode = node && node.array[idx];\n        var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);\n        if (newLowerNode === lowerNode) {\n            return node;\n        }\n        newNode = editableVNode(node, ownerID);\n        newNode.array[idx] = newLowerNode;\n        return newNode;\n    }\n    if (nodeHas && node.array[idx] === value) {\n        return node;\n    }\n    if (didAlter) {\n        SetRef(didAlter);\n    }\n    newNode = editableVNode(node, ownerID);\n    if (value === undefined && idx === newNode.array.length - 1) {\n        newNode.array.pop();\n    } else {\n        newNode.array[idx] = value;\n    }\n    return newNode;\n}\nfunction editableVNode(node, ownerID) {\n    if (ownerID && node && ownerID === node.ownerID) {\n        return node;\n    }\n    return new VNode(node ? node.array.slice() : [], ownerID);\n}\nfunction listNodeFor(list, rawIndex) {\n    if (rawIndex >= getTailOffset(list._capacity)) {\n        return list._tail;\n    }\n    if (rawIndex < 1 << list._level + SHIFT) {\n        var node = list._root;\n        var level = list._level;\n        while(node && level > 0){\n            node = node.array[rawIndex >>> level & MASK];\n            level -= SHIFT;\n        }\n        return node;\n    }\n}\nfunction setListBounds(list, begin, end) {\n    // Sanitize begin & end using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    if (begin !== undefined) {\n        begin |= 0;\n    }\n    if (end !== undefined) {\n        end |= 0;\n    }\n    var owner = list.__ownerID || new OwnerID();\n    var oldOrigin = list._origin;\n    var oldCapacity = list._capacity;\n    var newOrigin = oldOrigin + begin;\n    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;\n    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n        return list;\n    }\n    // If it's going to end after it starts, it's empty.\n    if (newOrigin >= newCapacity) {\n        return list.clear();\n    }\n    var newLevel = list._level;\n    var newRoot = list._root;\n    // New origin might need creating a higher root.\n    var offsetShift = 0;\n    while(newOrigin + offsetShift < 0){\n        newRoot = new VNode(newRoot && newRoot.array.length ? [\n            undefined,\n            newRoot\n        ] : [], owner);\n        newLevel += SHIFT;\n        offsetShift += 1 << newLevel;\n    }\n    if (offsetShift) {\n        newOrigin += offsetShift;\n        oldOrigin += offsetShift;\n        newCapacity += offsetShift;\n        oldCapacity += offsetShift;\n    }\n    var oldTailOffset = getTailOffset(oldCapacity);\n    var newTailOffset = getTailOffset(newCapacity);\n    // New size might need creating a higher root.\n    while(newTailOffset >= 1 << newLevel + SHIFT){\n        newRoot = new VNode(newRoot && newRoot.array.length ? [\n            newRoot\n        ] : [], owner);\n        newLevel += SHIFT;\n    }\n    // Locate or create the new tail.\n    var oldTail = list._tail;\n    var newTail = newTailOffset < oldTailOffset ? listNodeFor(list, newCapacity - 1) : newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;\n    // Merge Tail into tree.\n    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {\n        newRoot = editableVNode(newRoot, owner);\n        var node = newRoot;\n        for(var level = newLevel; level > SHIFT; level -= SHIFT){\n            var idx = oldTailOffset >>> level & MASK;\n            node = node.array[idx] = editableVNode(node.array[idx], owner);\n        }\n        node.array[oldTailOffset >>> SHIFT & MASK] = oldTail;\n    }\n    // If the size has been reduced, there's a chance the tail needs to be trimmed.\n    if (newCapacity < oldCapacity) {\n        newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n    }\n    // If the new origin is within the tail, then we do not need a root.\n    if (newOrigin >= newTailOffset) {\n        newOrigin -= newTailOffset;\n        newCapacity -= newTailOffset;\n        newLevel = SHIFT;\n        newRoot = null;\n        newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n    // Otherwise, if the root has been trimmed, garbage collect.\n    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n        offsetShift = 0;\n        // Identify the new top root node of the subtree of the old root.\n        while(newRoot){\n            var beginIndex = newOrigin >>> newLevel & MASK;\n            if (beginIndex !== newTailOffset >>> newLevel & MASK) {\n                break;\n            }\n            if (beginIndex) {\n                offsetShift += (1 << newLevel) * beginIndex;\n            }\n            newLevel -= SHIFT;\n            newRoot = newRoot.array[beginIndex];\n        }\n        // Trim the new sides of the new root.\n        if (newRoot && newOrigin > oldOrigin) {\n            newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n        }\n        if (newRoot && newTailOffset < oldTailOffset) {\n            newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);\n        }\n        if (offsetShift) {\n            newOrigin -= offsetShift;\n            newCapacity -= offsetShift;\n        }\n    }\n    if (list.__ownerID) {\n        list.size = newCapacity - newOrigin;\n        list._origin = newOrigin;\n        list._capacity = newCapacity;\n        list._level = newLevel;\n        list._root = newRoot;\n        list._tail = newTail;\n        list.__hash = undefined;\n        list.__altered = true;\n        return list;\n    }\n    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n}\nfunction getTailOffset(size) {\n    return size < SIZE ? 0 : size - 1 >>> SHIFT << SHIFT;\n}\nvar OrderedMap = /*@__PURE__*/ function(Map) {\n    function OrderedMap(value) {\n        // eslint-disable-next-line no-constructor-return\n        return value === undefined || value === null ? emptyOrderedMap() : isOrderedMap(value) ? value : emptyOrderedMap().withMutations(function(map) {\n            var iter = KeyedCollection(value);\n            assertNotInfinite(iter.size);\n            iter.forEach(function(v, k) {\n                return map.set(k, v);\n            });\n        });\n    }\n    if (Map) OrderedMap.__proto__ = Map;\n    OrderedMap.prototype = Object.create(Map && Map.prototype);\n    OrderedMap.prototype.constructor = OrderedMap;\n    OrderedMap.of = function of() {\n        return this(arguments);\n    };\n    OrderedMap.prototype.toString = function toString() {\n        return this.__toString(\"OrderedMap {\", \"}\");\n    };\n    // @pragma Access\n    OrderedMap.prototype.get = function get(k, notSetValue) {\n        var index = this._map.get(k);\n        return index !== undefined ? this._list.get(index)[1] : notSetValue;\n    };\n    // @pragma Modification\n    OrderedMap.prototype.clear = function clear() {\n        if (this.size === 0) {\n            return this;\n        }\n        if (this.__ownerID) {\n            this.size = 0;\n            this._map.clear();\n            this._list.clear();\n            this.__altered = true;\n            return this;\n        }\n        return emptyOrderedMap();\n    };\n    OrderedMap.prototype.set = function set(k, v) {\n        return updateOrderedMap(this, k, v);\n    };\n    OrderedMap.prototype.remove = function remove(k) {\n        return updateOrderedMap(this, k, NOT_SET);\n    };\n    OrderedMap.prototype.__iterate = function __iterate(fn, reverse) {\n        var this$1$1 = this;\n        return this._list.__iterate(function(entry) {\n            return entry && fn(entry[1], entry[0], this$1$1);\n        }, reverse);\n    };\n    OrderedMap.prototype.__iterator = function __iterator(type, reverse) {\n        return this._list.fromEntrySeq().__iterator(type, reverse);\n    };\n    OrderedMap.prototype.__ensureOwner = function __ensureOwner(ownerID) {\n        if (ownerID === this.__ownerID) {\n            return this;\n        }\n        var newMap = this._map.__ensureOwner(ownerID);\n        var newList = this._list.__ensureOwner(ownerID);\n        if (!ownerID) {\n            if (this.size === 0) {\n                return emptyOrderedMap();\n            }\n            this.__ownerID = ownerID;\n            this.__altered = false;\n            this._map = newMap;\n            this._list = newList;\n            return this;\n        }\n        return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n    };\n    return OrderedMap;\n}(Map);\nOrderedMap.isOrderedMap = isOrderedMap;\nOrderedMap.prototype[IS_ORDERED_SYMBOL] = true;\nOrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\nfunction makeOrderedMap(map, list, ownerID, hash) {\n    var omap = Object.create(OrderedMap.prototype);\n    omap.size = map ? map.size : 0;\n    omap._map = map;\n    omap._list = list;\n    omap.__ownerID = ownerID;\n    omap.__hash = hash;\n    omap.__altered = false;\n    return omap;\n}\nvar EMPTY_ORDERED_MAP;\nfunction emptyOrderedMap() {\n    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));\n}\nfunction updateOrderedMap(omap, k, v) {\n    var map = omap._map;\n    var list = omap._list;\n    var i = map.get(k);\n    var has = i !== undefined;\n    var newMap;\n    var newList;\n    if (v === NOT_SET) {\n        // removed\n        if (!has) {\n            return omap;\n        }\n        if (list.size >= SIZE && list.size >= map.size * 2) {\n            newList = list.filter(function(entry, idx) {\n                return entry !== undefined && i !== idx;\n            });\n            newMap = newList.toKeyedSeq().map(function(entry) {\n                return entry[0];\n            }).flip().toMap();\n            if (omap.__ownerID) {\n                newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n            }\n        } else {\n            newMap = map.remove(k);\n            newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n        }\n    } else if (has) {\n        if (v === list.get(i)[1]) {\n            return omap;\n        }\n        newMap = map;\n        newList = list.set(i, [\n            k,\n            v\n        ]);\n    } else {\n        newMap = map.set(k, list.size);\n        newList = list.set(list.size, [\n            k,\n            v\n        ]);\n    }\n    if (omap.__ownerID) {\n        omap.size = newMap.size;\n        omap._map = newMap;\n        omap._list = newList;\n        omap.__hash = undefined;\n        omap.__altered = true;\n        return omap;\n    }\n    return makeOrderedMap(newMap, newList);\n}\nvar IS_STACK_SYMBOL = \"@@__IMMUTABLE_STACK__@@\";\nfunction isStack(maybeStack) {\n    return Boolean(maybeStack && maybeStack[IS_STACK_SYMBOL]);\n}\nvar Stack = /*@__PURE__*/ function(IndexedCollection) {\n    function Stack(value) {\n        // eslint-disable-next-line no-constructor-return\n        return value === undefined || value === null ? emptyStack() : isStack(value) ? value : emptyStack().pushAll(value);\n    }\n    if (IndexedCollection) Stack.__proto__ = IndexedCollection;\n    Stack.prototype = Object.create(IndexedCollection && IndexedCollection.prototype);\n    Stack.prototype.constructor = Stack;\n    Stack.of = function of() {\n        return this(arguments);\n    };\n    Stack.prototype.toString = function toString() {\n        return this.__toString(\"Stack [\", \"]\");\n    };\n    // @pragma Access\n    Stack.prototype.get = function get(index, notSetValue) {\n        var head = this._head;\n        index = wrapIndex(this, index);\n        while(head && index--){\n            head = head.next;\n        }\n        return head ? head.value : notSetValue;\n    };\n    Stack.prototype.peek = function peek() {\n        return this._head && this._head.value;\n    };\n    // @pragma Modification\n    Stack.prototype.push = function push() {\n        var arguments$1 = arguments;\n        if (arguments.length === 0) {\n            return this;\n        }\n        var newSize = this.size + arguments.length;\n        var head = this._head;\n        for(var ii = arguments.length - 1; ii >= 0; ii--){\n            head = {\n                value: arguments$1[ii],\n                next: head\n            };\n        }\n        if (this.__ownerID) {\n            this.size = newSize;\n            this._head = head;\n            this.__hash = undefined;\n            this.__altered = true;\n            return this;\n        }\n        return makeStack(newSize, head);\n    };\n    Stack.prototype.pushAll = function pushAll(iter) {\n        iter = IndexedCollection(iter);\n        if (iter.size === 0) {\n            return this;\n        }\n        if (this.size === 0 && isStack(iter)) {\n            return iter;\n        }\n        assertNotInfinite(iter.size);\n        var newSize = this.size;\n        var head = this._head;\n        iter.__iterate(function(value) {\n            newSize++;\n            head = {\n                value: value,\n                next: head\n            };\n        }, /* reverse */ true);\n        if (this.__ownerID) {\n            this.size = newSize;\n            this._head = head;\n            this.__hash = undefined;\n            this.__altered = true;\n            return this;\n        }\n        return makeStack(newSize, head);\n    };\n    Stack.prototype.pop = function pop() {\n        return this.slice(1);\n    };\n    Stack.prototype.clear = function clear() {\n        if (this.size === 0) {\n            return this;\n        }\n        if (this.__ownerID) {\n            this.size = 0;\n            this._head = undefined;\n            this.__hash = undefined;\n            this.__altered = true;\n            return this;\n        }\n        return emptyStack();\n    };\n    Stack.prototype.slice = function slice(begin, end) {\n        if (wholeSlice(begin, end, this.size)) {\n            return this;\n        }\n        var resolvedBegin = resolveBegin(begin, this.size);\n        var resolvedEnd = resolveEnd(end, this.size);\n        if (resolvedEnd !== this.size) {\n            // super.slice(begin, end);\n            return IndexedCollection.prototype.slice.call(this, begin, end);\n        }\n        var newSize = this.size - resolvedBegin;\n        var head = this._head;\n        while(resolvedBegin--){\n            head = head.next;\n        }\n        if (this.__ownerID) {\n            this.size = newSize;\n            this._head = head;\n            this.__hash = undefined;\n            this.__altered = true;\n            return this;\n        }\n        return makeStack(newSize, head);\n    };\n    // @pragma Mutability\n    Stack.prototype.__ensureOwner = function __ensureOwner(ownerID) {\n        if (ownerID === this.__ownerID) {\n            return this;\n        }\n        if (!ownerID) {\n            if (this.size === 0) {\n                return emptyStack();\n            }\n            this.__ownerID = ownerID;\n            this.__altered = false;\n            return this;\n        }\n        return makeStack(this.size, this._head, ownerID, this.__hash);\n    };\n    // @pragma Iteration\n    Stack.prototype.__iterate = function __iterate(fn, reverse) {\n        var this$1$1 = this;\n        if (reverse) {\n            return new ArraySeq(this.toArray()).__iterate(function(v, k) {\n                return fn(v, k, this$1$1);\n            }, reverse);\n        }\n        var iterations = 0;\n        var node = this._head;\n        while(node){\n            if (fn(node.value, iterations++, this) === false) {\n                break;\n            }\n            node = node.next;\n        }\n        return iterations;\n    };\n    Stack.prototype.__iterator = function __iterator(type, reverse) {\n        if (reverse) {\n            return new ArraySeq(this.toArray()).__iterator(type, reverse);\n        }\n        var iterations = 0;\n        var node = this._head;\n        return new Iterator(function() {\n            if (node) {\n                var value = node.value;\n                node = node.next;\n                return iteratorValue(type, iterations++, value);\n            }\n            return iteratorDone();\n        });\n    };\n    return Stack;\n}(IndexedCollection);\nStack.isStack = isStack;\nvar StackPrototype = Stack.prototype;\nStackPrototype[IS_STACK_SYMBOL] = true;\nStackPrototype.shift = StackPrototype.pop;\nStackPrototype.unshift = StackPrototype.push;\nStackPrototype.unshiftAll = StackPrototype.pushAll;\nStackPrototype.withMutations = withMutations;\nStackPrototype.wasAltered = wasAltered;\nStackPrototype.asImmutable = asImmutable;\nStackPrototype[\"@@transducer/init\"] = StackPrototype.asMutable = asMutable;\nStackPrototype[\"@@transducer/step\"] = function(result, arr) {\n    return result.unshift(arr);\n};\nStackPrototype[\"@@transducer/result\"] = function(obj) {\n    return obj.asImmutable();\n};\nfunction makeStack(size, head, ownerID, hash) {\n    var map = Object.create(StackPrototype);\n    map.size = size;\n    map._head = head;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n}\nvar EMPTY_STACK;\nfunction emptyStack() {\n    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n}\nvar IS_SET_SYMBOL = \"@@__IMMUTABLE_SET__@@\";\nfunction isSet(maybeSet) {\n    return Boolean(maybeSet && maybeSet[IS_SET_SYMBOL]);\n}\nfunction isOrderedSet(maybeOrderedSet) {\n    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n}\nfunction deepEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (!isCollection(b) || a.size !== undefined && b.size !== undefined && a.size !== b.size || a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash || isKeyed(a) !== isKeyed(b) || isIndexed(a) !== isIndexed(b) || isOrdered(a) !== isOrdered(b)) {\n        return false;\n    }\n    if (a.size === 0 && b.size === 0) {\n        return true;\n    }\n    var notAssociative = !isAssociative(a);\n    if (isOrdered(a)) {\n        var entries = a.entries();\n        return b.every(function(v, k) {\n            var entry = entries.next().value;\n            return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n        }) && entries.next().done;\n    }\n    var flipped = false;\n    if (a.size === undefined) {\n        if (b.size === undefined) {\n            if (typeof a.cacheResult === \"function\") {\n                a.cacheResult();\n            }\n        } else {\n            flipped = true;\n            var _ = a;\n            a = b;\n            b = _;\n        }\n    }\n    var allEqual = true;\n    var bSize = b.__iterate(function(v, k) {\n        if (notAssociative ? !a.has(v) : flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {\n            allEqual = false;\n            return false;\n        }\n    });\n    return allEqual && a.size === bSize;\n}\nfunction mixin(ctor, methods) {\n    var keyCopier = function(key) {\n        ctor.prototype[key] = methods[key];\n    };\n    Object.keys(methods).forEach(keyCopier);\n    Object.getOwnPropertySymbols && Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n    return ctor;\n}\nfunction toJS(value) {\n    if (!value || typeof value !== \"object\") {\n        return value;\n    }\n    if (!isCollection(value)) {\n        if (!isDataStructure(value)) {\n            return value;\n        }\n        value = Seq(value);\n    }\n    if (isKeyed(value)) {\n        var result$1 = {};\n        value.__iterate(function(v, k) {\n            result$1[k] = toJS(v);\n        });\n        return result$1;\n    }\n    var result = [];\n    value.__iterate(function(v) {\n        result.push(toJS(v));\n    });\n    return result;\n}\nvar Set = /*@__PURE__*/ function(SetCollection) {\n    function Set(value) {\n        // eslint-disable-next-line no-constructor-return\n        return value === undefined || value === null ? emptySet() : isSet(value) && !isOrdered(value) ? value : emptySet().withMutations(function(set) {\n            var iter = SetCollection(value);\n            assertNotInfinite(iter.size);\n            iter.forEach(function(v) {\n                return set.add(v);\n            });\n        });\n    }\n    if (SetCollection) Set.__proto__ = SetCollection;\n    Set.prototype = Object.create(SetCollection && SetCollection.prototype);\n    Set.prototype.constructor = Set;\n    Set.of = function of() {\n        return this(arguments);\n    };\n    Set.fromKeys = function fromKeys(value) {\n        return this(KeyedCollection(value).keySeq());\n    };\n    Set.intersect = function intersect(sets) {\n        sets = Collection(sets).toArray();\n        return sets.length ? SetPrototype.intersect.apply(Set(sets.pop()), sets) : emptySet();\n    };\n    Set.union = function union(sets) {\n        sets = Collection(sets).toArray();\n        return sets.length ? SetPrototype.union.apply(Set(sets.pop()), sets) : emptySet();\n    };\n    Set.prototype.toString = function toString() {\n        return this.__toString(\"Set {\", \"}\");\n    };\n    // @pragma Access\n    Set.prototype.has = function has(value) {\n        return this._map.has(value);\n    };\n    // @pragma Modification\n    Set.prototype.add = function add(value) {\n        return updateSet(this, this._map.set(value, value));\n    };\n    Set.prototype.remove = function remove(value) {\n        return updateSet(this, this._map.remove(value));\n    };\n    Set.prototype.clear = function clear() {\n        return updateSet(this, this._map.clear());\n    };\n    // @pragma Composition\n    Set.prototype.map = function map(mapper, context) {\n        var this$1$1 = this;\n        // keep track if the set is altered by the map function\n        var didChanges = false;\n        var newMap = updateSet(this, this._map.mapEntries(function(ref) {\n            var v = ref[1];\n            var mapped = mapper.call(context, v, v, this$1$1);\n            if (mapped !== v) {\n                didChanges = true;\n            }\n            return [\n                mapped,\n                mapped\n            ];\n        }, context));\n        return didChanges ? newMap : this;\n    };\n    Set.prototype.union = function union() {\n        var iters = [], len = arguments.length;\n        while(len--)iters[len] = arguments[len];\n        iters = iters.filter(function(x) {\n            return x.size !== 0;\n        });\n        if (iters.length === 0) {\n            return this;\n        }\n        if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n            return this.constructor(iters[0]);\n        }\n        return this.withMutations(function(set) {\n            for(var ii = 0; ii < iters.length; ii++){\n                if (typeof iters[ii] === \"string\") {\n                    set.add(iters[ii]);\n                } else {\n                    SetCollection(iters[ii]).forEach(function(value) {\n                        return set.add(value);\n                    });\n                }\n            }\n        });\n    };\n    Set.prototype.intersect = function intersect() {\n        var iters = [], len = arguments.length;\n        while(len--)iters[len] = arguments[len];\n        if (iters.length === 0) {\n            return this;\n        }\n        iters = iters.map(function(iter) {\n            return SetCollection(iter);\n        });\n        var toRemove = [];\n        this.forEach(function(value) {\n            if (!iters.every(function(iter) {\n                return iter.includes(value);\n            })) {\n                toRemove.push(value);\n            }\n        });\n        return this.withMutations(function(set) {\n            toRemove.forEach(function(value) {\n                set.remove(value);\n            });\n        });\n    };\n    Set.prototype.subtract = function subtract() {\n        var iters = [], len = arguments.length;\n        while(len--)iters[len] = arguments[len];\n        if (iters.length === 0) {\n            return this;\n        }\n        iters = iters.map(function(iter) {\n            return SetCollection(iter);\n        });\n        var toRemove = [];\n        this.forEach(function(value) {\n            if (iters.some(function(iter) {\n                return iter.includes(value);\n            })) {\n                toRemove.push(value);\n            }\n        });\n        return this.withMutations(function(set) {\n            toRemove.forEach(function(value) {\n                set.remove(value);\n            });\n        });\n    };\n    Set.prototype.sort = function sort(comparator) {\n        // Late binding\n        return OrderedSet(sortFactory(this, comparator));\n    };\n    Set.prototype.sortBy = function sortBy(mapper, comparator) {\n        // Late binding\n        return OrderedSet(sortFactory(this, comparator, mapper));\n    };\n    Set.prototype.wasAltered = function wasAltered() {\n        return this._map.wasAltered();\n    };\n    Set.prototype.__iterate = function __iterate(fn, reverse) {\n        var this$1$1 = this;\n        return this._map.__iterate(function(k) {\n            return fn(k, k, this$1$1);\n        }, reverse);\n    };\n    Set.prototype.__iterator = function __iterator(type, reverse) {\n        return this._map.__iterator(type, reverse);\n    };\n    Set.prototype.__ensureOwner = function __ensureOwner(ownerID) {\n        if (ownerID === this.__ownerID) {\n            return this;\n        }\n        var newMap = this._map.__ensureOwner(ownerID);\n        if (!ownerID) {\n            if (this.size === 0) {\n                return this.__empty();\n            }\n            this.__ownerID = ownerID;\n            this._map = newMap;\n            return this;\n        }\n        return this.__make(newMap, ownerID);\n    };\n    return Set;\n}(SetCollection);\nSet.isSet = isSet;\nvar SetPrototype = Set.prototype;\nSetPrototype[IS_SET_SYMBOL] = true;\nSetPrototype[DELETE] = SetPrototype.remove;\nSetPrototype.merge = SetPrototype.concat = SetPrototype.union;\nSetPrototype.withMutations = withMutations;\nSetPrototype.asImmutable = asImmutable;\nSetPrototype[\"@@transducer/init\"] = SetPrototype.asMutable = asMutable;\nSetPrototype[\"@@transducer/step\"] = function(result, arr) {\n    return result.add(arr);\n};\nSetPrototype[\"@@transducer/result\"] = function(obj) {\n    return obj.asImmutable();\n};\nSetPrototype.__empty = emptySet;\nSetPrototype.__make = makeSet;\nfunction updateSet(set, newMap) {\n    if (set.__ownerID) {\n        set.size = newMap.size;\n        set._map = newMap;\n        return set;\n    }\n    return newMap === set._map ? set : newMap.size === 0 ? set.__empty() : set.__make(newMap);\n}\nfunction makeSet(map, ownerID) {\n    var set = Object.create(SetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n}\nvar EMPTY_SET;\nfunction emptySet() {\n    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n}\n/**\n * Returns a lazy seq of nums from start (inclusive) to end\n * (exclusive), by step, where start defaults to 0, step to 1, and end to\n * infinity. When start is equal to end, returns empty list.\n */ var Range = /*@__PURE__*/ function(IndexedSeq) {\n    function Range(start, end, step) {\n        if (!(this instanceof Range)) {\n            // eslint-disable-next-line no-constructor-return\n            return new Range(start, end, step);\n        }\n        invariant(step !== 0, \"Cannot step a Range by 0\");\n        start = start || 0;\n        if (end === undefined) {\n            end = Infinity;\n        }\n        step = step === undefined ? 1 : Math.abs(step);\n        if (end < start) {\n            step = -step;\n        }\n        this._start = start;\n        this._end = end;\n        this._step = step;\n        this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n        if (this.size === 0) {\n            if (EMPTY_RANGE) {\n                // eslint-disable-next-line no-constructor-return\n                return EMPTY_RANGE;\n            }\n            EMPTY_RANGE = this;\n        }\n    }\n    if (IndexedSeq) Range.__proto__ = IndexedSeq;\n    Range.prototype = Object.create(IndexedSeq && IndexedSeq.prototype);\n    Range.prototype.constructor = Range;\n    Range.prototype.toString = function toString() {\n        if (this.size === 0) {\n            return \"Range []\";\n        }\n        return \"Range [ \" + this._start + \"...\" + this._end + (this._step !== 1 ? \" by \" + this._step : \"\") + \" ]\";\n    };\n    Range.prototype.get = function get(index, notSetValue) {\n        return this.has(index) ? this._start + wrapIndex(this, index) * this._step : notSetValue;\n    };\n    Range.prototype.includes = function includes(searchValue) {\n        var possibleIndex = (searchValue - this._start) / this._step;\n        return possibleIndex >= 0 && possibleIndex < this.size && possibleIndex === Math.floor(possibleIndex);\n    };\n    Range.prototype.slice = function slice(begin, end) {\n        if (wholeSlice(begin, end, this.size)) {\n            return this;\n        }\n        begin = resolveBegin(begin, this.size);\n        end = resolveEnd(end, this.size);\n        if (end <= begin) {\n            return new Range(0, 0);\n        }\n        return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);\n    };\n    Range.prototype.indexOf = function indexOf(searchValue) {\n        var offsetValue = searchValue - this._start;\n        if (offsetValue % this._step === 0) {\n            var index = offsetValue / this._step;\n            if (index >= 0 && index < this.size) {\n                return index;\n            }\n        }\n        return -1;\n    };\n    Range.prototype.lastIndexOf = function lastIndexOf(searchValue) {\n        return this.indexOf(searchValue);\n    };\n    Range.prototype.__iterate = function __iterate(fn, reverse) {\n        var size = this.size;\n        var step = this._step;\n        var value = reverse ? this._start + (size - 1) * step : this._start;\n        var i = 0;\n        while(i !== size){\n            if (fn(value, reverse ? size - ++i : i++, this) === false) {\n                break;\n            }\n            value += reverse ? -step : step;\n        }\n        return i;\n    };\n    Range.prototype.__iterator = function __iterator(type, reverse) {\n        var size = this.size;\n        var step = this._step;\n        var value = reverse ? this._start + (size - 1) * step : this._start;\n        var i = 0;\n        return new Iterator(function() {\n            if (i === size) {\n                return iteratorDone();\n            }\n            var v = value;\n            value += reverse ? -step : step;\n            return iteratorValue(type, reverse ? size - ++i : i++, v);\n        });\n    };\n    Range.prototype.equals = function equals(other) {\n        return other instanceof Range ? this._start === other._start && this._end === other._end && this._step === other._step : deepEqual(this, other);\n    };\n    return Range;\n}(IndexedSeq);\nvar EMPTY_RANGE;\nfunction getIn$1(collection, searchKeyPath, notSetValue) {\n    var keyPath = coerceKeyPath(searchKeyPath);\n    var i = 0;\n    while(i !== keyPath.length){\n        collection = get(collection, keyPath[i++], NOT_SET);\n        if (collection === NOT_SET) {\n            return notSetValue;\n        }\n    }\n    return collection;\n}\nfunction getIn(searchKeyPath, notSetValue) {\n    return getIn$1(this, searchKeyPath, notSetValue);\n}\nfunction hasIn$1(collection, keyPath) {\n    return getIn$1(collection, keyPath, NOT_SET) !== NOT_SET;\n}\nfunction hasIn(searchKeyPath) {\n    return hasIn$1(this, searchKeyPath);\n}\nfunction toObject() {\n    assertNotInfinite(this.size);\n    var object = {};\n    this.__iterate(function(v, k) {\n        object[k] = v;\n    });\n    return object;\n}\n// Note: all of these methods are deprecated.\nCollection.isIterable = isCollection;\nCollection.isKeyed = isKeyed;\nCollection.isIndexed = isIndexed;\nCollection.isAssociative = isAssociative;\nCollection.isOrdered = isOrdered;\nCollection.Iterator = Iterator;\nmixin(Collection, {\n    // ### Conversion to other types\n    toArray: function toArray() {\n        assertNotInfinite(this.size);\n        var array = new Array(this.size || 0);\n        var useTuples = isKeyed(this);\n        var i = 0;\n        this.__iterate(function(v, k) {\n            // Keyed collections produce an array of tuples.\n            array[i++] = useTuples ? [\n                k,\n                v\n            ] : v;\n        });\n        return array;\n    },\n    toIndexedSeq: function toIndexedSeq() {\n        return new ToIndexedSequence(this);\n    },\n    toJS: function toJS$1() {\n        return toJS(this);\n    },\n    toKeyedSeq: function toKeyedSeq() {\n        return new ToKeyedSequence(this, true);\n    },\n    toMap: function toMap() {\n        // Use Late Binding here to solve the circular dependency.\n        return Map(this.toKeyedSeq());\n    },\n    toObject: toObject,\n    toOrderedMap: function toOrderedMap() {\n        // Use Late Binding here to solve the circular dependency.\n        return OrderedMap(this.toKeyedSeq());\n    },\n    toOrderedSet: function toOrderedSet() {\n        // Use Late Binding here to solve the circular dependency.\n        return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n    },\n    toSet: function toSet() {\n        // Use Late Binding here to solve the circular dependency.\n        return Set(isKeyed(this) ? this.valueSeq() : this);\n    },\n    toSetSeq: function toSetSeq() {\n        return new ToSetSequence(this);\n    },\n    toSeq: function toSeq() {\n        return isIndexed(this) ? this.toIndexedSeq() : isKeyed(this) ? this.toKeyedSeq() : this.toSetSeq();\n    },\n    toStack: function toStack() {\n        // Use Late Binding here to solve the circular dependency.\n        return Stack(isKeyed(this) ? this.valueSeq() : this);\n    },\n    toList: function toList() {\n        // Use Late Binding here to solve the circular dependency.\n        return List(isKeyed(this) ? this.valueSeq() : this);\n    },\n    // ### Common JavaScript methods and properties\n    toString: function toString() {\n        return \"[Collection]\";\n    },\n    __toString: function __toString(head, tail) {\n        if (this.size === 0) {\n            return head + tail;\n        }\n        return head + \" \" + this.toSeq().map(this.__toStringMapper).join(\", \") + \" \" + tail;\n    },\n    // ### ES6 Collection methods (ES6 Array and Map)\n    concat: function concat() {\n        var values = [], len = arguments.length;\n        while(len--)values[len] = arguments[len];\n        return reify(this, concatFactory(this, values));\n    },\n    includes: function includes(searchValue) {\n        return this.some(function(value) {\n            return is(value, searchValue);\n        });\n    },\n    entries: function entries() {\n        return this.__iterator(ITERATE_ENTRIES);\n    },\n    every: function every(predicate, context) {\n        assertNotInfinite(this.size);\n        var returnValue = true;\n        this.__iterate(function(v, k, c) {\n            if (!predicate.call(context, v, k, c)) {\n                returnValue = false;\n                return false;\n            }\n        });\n        return returnValue;\n    },\n    filter: function filter(predicate, context) {\n        return reify(this, filterFactory(this, predicate, context, true));\n    },\n    partition: function partition(predicate, context) {\n        return partitionFactory(this, predicate, context);\n    },\n    find: function find(predicate, context, notSetValue) {\n        var entry = this.findEntry(predicate, context);\n        return entry ? entry[1] : notSetValue;\n    },\n    forEach: function forEach(sideEffect, context) {\n        assertNotInfinite(this.size);\n        return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n    },\n    join: function join(separator) {\n        assertNotInfinite(this.size);\n        separator = separator !== undefined ? \"\" + separator : \",\";\n        var joined = \"\";\n        var isFirst = true;\n        this.__iterate(function(v) {\n            isFirst ? isFirst = false : joined += separator;\n            joined += v !== null && v !== undefined ? v.toString() : \"\";\n        });\n        return joined;\n    },\n    keys: function keys() {\n        return this.__iterator(ITERATE_KEYS);\n    },\n    map: function map(mapper, context) {\n        return reify(this, mapFactory(this, mapper, context));\n    },\n    reduce: function reduce$1(reducer, initialReduction, context) {\n        return reduce(this, reducer, initialReduction, context, arguments.length < 2, false);\n    },\n    reduceRight: function reduceRight(reducer, initialReduction, context) {\n        return reduce(this, reducer, initialReduction, context, arguments.length < 2, true);\n    },\n    reverse: function reverse() {\n        return reify(this, reverseFactory(this, true));\n    },\n    slice: function slice(begin, end) {\n        return reify(this, sliceFactory(this, begin, end, true));\n    },\n    some: function some(predicate, context) {\n        assertNotInfinite(this.size);\n        var returnValue = false;\n        this.__iterate(function(v, k, c) {\n            if (predicate.call(context, v, k, c)) {\n                returnValue = true;\n                return false;\n            }\n        });\n        return returnValue;\n    },\n    sort: function sort(comparator) {\n        return reify(this, sortFactory(this, comparator));\n    },\n    values: function values() {\n        return this.__iterator(ITERATE_VALUES);\n    },\n    // ### More sequential methods\n    butLast: function butLast() {\n        return this.slice(0, -1);\n    },\n    isEmpty: function isEmpty() {\n        return this.size !== undefined ? this.size === 0 : !this.some(function() {\n            return true;\n        });\n    },\n    count: function count(predicate, context) {\n        return ensureSize(predicate ? this.toSeq().filter(predicate, context) : this);\n    },\n    countBy: function countBy(grouper, context) {\n        return countByFactory(this, grouper, context);\n    },\n    equals: function equals(other) {\n        return deepEqual(this, other);\n    },\n    entrySeq: function entrySeq() {\n        var collection = this;\n        if (collection._cache) {\n            // We cache as an entries array, so we can just return the cache!\n            return new ArraySeq(collection._cache);\n        }\n        var entriesSequence = collection.toSeq().map(entryMapper).toIndexedSeq();\n        entriesSequence.fromEntrySeq = function() {\n            return collection.toSeq();\n        };\n        return entriesSequence;\n    },\n    filterNot: function filterNot(predicate, context) {\n        return this.filter(not(predicate), context);\n    },\n    findEntry: function findEntry(predicate, context, notSetValue) {\n        var found = notSetValue;\n        this.__iterate(function(v, k, c) {\n            if (predicate.call(context, v, k, c)) {\n                found = [\n                    k,\n                    v\n                ];\n                return false;\n            }\n        });\n        return found;\n    },\n    findKey: function findKey(predicate, context) {\n        var entry = this.findEntry(predicate, context);\n        return entry && entry[0];\n    },\n    findLast: function findLast(predicate, context, notSetValue) {\n        return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n    },\n    findLastEntry: function findLastEntry(predicate, context, notSetValue) {\n        return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);\n    },\n    findLastKey: function findLastKey(predicate, context) {\n        return this.toKeyedSeq().reverse().findKey(predicate, context);\n    },\n    first: function first(notSetValue) {\n        return this.find(returnTrue, null, notSetValue);\n    },\n    flatMap: function flatMap(mapper, context) {\n        return reify(this, flatMapFactory(this, mapper, context));\n    },\n    flatten: function flatten(depth) {\n        return reify(this, flattenFactory(this, depth, true));\n    },\n    fromEntrySeq: function fromEntrySeq() {\n        return new FromEntriesSequence(this);\n    },\n    get: function get(searchKey, notSetValue) {\n        return this.find(function(_, key) {\n            return is(key, searchKey);\n        }, undefined, notSetValue);\n    },\n    getIn: getIn,\n    groupBy: function groupBy(grouper, context) {\n        return groupByFactory(this, grouper, context);\n    },\n    has: function has(searchKey) {\n        return this.get(searchKey, NOT_SET) !== NOT_SET;\n    },\n    hasIn: hasIn,\n    isSubset: function isSubset(iter) {\n        iter = typeof iter.includes === \"function\" ? iter : Collection(iter);\n        return this.every(function(value) {\n            return iter.includes(value);\n        });\n    },\n    isSuperset: function isSuperset(iter) {\n        iter = typeof iter.isSubset === \"function\" ? iter : Collection(iter);\n        return iter.isSubset(this);\n    },\n    keyOf: function keyOf(searchValue) {\n        return this.findKey(function(value) {\n            return is(value, searchValue);\n        });\n    },\n    keySeq: function keySeq() {\n        return this.toSeq().map(keyMapper).toIndexedSeq();\n    },\n    last: function last(notSetValue) {\n        return this.toSeq().reverse().first(notSetValue);\n    },\n    lastKeyOf: function lastKeyOf(searchValue) {\n        return this.toKeyedSeq().reverse().keyOf(searchValue);\n    },\n    max: function max(comparator) {\n        return maxFactory(this, comparator);\n    },\n    maxBy: function maxBy(mapper, comparator) {\n        return maxFactory(this, comparator, mapper);\n    },\n    min: function min(comparator) {\n        return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);\n    },\n    minBy: function minBy(mapper, comparator) {\n        return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);\n    },\n    rest: function rest() {\n        return this.slice(1);\n    },\n    skip: function skip(amount) {\n        return amount === 0 ? this : this.slice(Math.max(0, amount));\n    },\n    skipLast: function skipLast(amount) {\n        return amount === 0 ? this : this.slice(0, -Math.max(0, amount));\n    },\n    skipWhile: function skipWhile(predicate, context) {\n        return reify(this, skipWhileFactory(this, predicate, context, true));\n    },\n    skipUntil: function skipUntil(predicate, context) {\n        return this.skipWhile(not(predicate), context);\n    },\n    sortBy: function sortBy(mapper, comparator) {\n        return reify(this, sortFactory(this, comparator, mapper));\n    },\n    take: function take(amount) {\n        return this.slice(0, Math.max(0, amount));\n    },\n    takeLast: function takeLast(amount) {\n        return this.slice(-Math.max(0, amount));\n    },\n    takeWhile: function takeWhile(predicate, context) {\n        return reify(this, takeWhileFactory(this, predicate, context));\n    },\n    takeUntil: function takeUntil(predicate, context) {\n        return this.takeWhile(not(predicate), context);\n    },\n    update: function update(fn) {\n        return fn(this);\n    },\n    valueSeq: function valueSeq() {\n        return this.toIndexedSeq();\n    },\n    // ### Hashable Object\n    hashCode: function hashCode() {\n        return this.__hash || (this.__hash = hashCollection(this));\n    }\n});\nvar CollectionPrototype = Collection.prototype;\nCollectionPrototype[IS_COLLECTION_SYMBOL] = true;\nCollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.values;\nCollectionPrototype.toJSON = CollectionPrototype.toArray;\nCollectionPrototype.__toStringMapper = quoteString;\nCollectionPrototype.inspect = CollectionPrototype.toSource = function() {\n    return this.toString();\n};\nCollectionPrototype.chain = CollectionPrototype.flatMap;\nCollectionPrototype.contains = CollectionPrototype.includes;\nmixin(KeyedCollection, {\n    // ### More sequential methods\n    flip: function flip() {\n        return reify(this, flipFactory(this));\n    },\n    mapEntries: function mapEntries(mapper, context) {\n        var this$1$1 = this;\n        var iterations = 0;\n        return reify(this, this.toSeq().map(function(v, k) {\n            return mapper.call(context, [\n                k,\n                v\n            ], iterations++, this$1$1);\n        }).fromEntrySeq());\n    },\n    mapKeys: function mapKeys(mapper, context) {\n        var this$1$1 = this;\n        return reify(this, this.toSeq().flip().map(function(k, v) {\n            return mapper.call(context, k, v, this$1$1);\n        }).flip());\n    }\n});\nvar KeyedCollectionPrototype = KeyedCollection.prototype;\nKeyedCollectionPrototype[IS_KEYED_SYMBOL] = true;\nKeyedCollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.entries;\nKeyedCollectionPrototype.toJSON = toObject;\nKeyedCollectionPrototype.__toStringMapper = function(v, k) {\n    return quoteString(k) + \": \" + quoteString(v);\n};\nmixin(IndexedCollection, {\n    // ### Conversion to other types\n    toKeyedSeq: function toKeyedSeq() {\n        return new ToKeyedSequence(this, false);\n    },\n    // ### ES6 Collection methods (ES6 Array and Map)\n    filter: function filter(predicate, context) {\n        return reify(this, filterFactory(this, predicate, context, false));\n    },\n    findIndex: function findIndex(predicate, context) {\n        var entry = this.findEntry(predicate, context);\n        return entry ? entry[0] : -1;\n    },\n    indexOf: function indexOf(searchValue) {\n        var key = this.keyOf(searchValue);\n        return key === undefined ? -1 : key;\n    },\n    lastIndexOf: function lastIndexOf(searchValue) {\n        var key = this.lastKeyOf(searchValue);\n        return key === undefined ? -1 : key;\n    },\n    reverse: function reverse() {\n        return reify(this, reverseFactory(this, false));\n    },\n    slice: function slice(begin, end) {\n        return reify(this, sliceFactory(this, begin, end, false));\n    },\n    splice: function splice(index, removeNum /*, ...values*/ ) {\n        var numArgs = arguments.length;\n        removeNum = Math.max(removeNum || 0, 0);\n        if (numArgs === 0 || numArgs === 2 && !removeNum) {\n            return this;\n        }\n        // If index is negative, it should resolve relative to the size of the\n        // collection. However size may be expensive to compute if not cached, so\n        // only call count() if the number is in fact negative.\n        index = resolveBegin(index, index < 0 ? this.count() : this.size);\n        var spliced = this.slice(0, index);\n        return reify(this, numArgs === 1 ? spliced : spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum)));\n    },\n    // ### More collection methods\n    findLastIndex: function findLastIndex(predicate, context) {\n        var entry = this.findLastEntry(predicate, context);\n        return entry ? entry[0] : -1;\n    },\n    first: function first(notSetValue) {\n        return this.get(0, notSetValue);\n    },\n    flatten: function flatten(depth) {\n        return reify(this, flattenFactory(this, depth, false));\n    },\n    get: function get(index, notSetValue) {\n        index = wrapIndex(this, index);\n        return index < 0 || this.size === Infinity || this.size !== undefined && index > this.size ? notSetValue : this.find(function(_, key) {\n            return key === index;\n        }, undefined, notSetValue);\n    },\n    has: function has(index) {\n        index = wrapIndex(this, index);\n        return index >= 0 && (this.size !== undefined ? this.size === Infinity || index < this.size : this.indexOf(index) !== -1);\n    },\n    interpose: function interpose(separator) {\n        return reify(this, interposeFactory(this, separator));\n    },\n    interleave: function interleave() {\n        var collections = [\n            this\n        ].concat(arrCopy(arguments));\n        var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, collections);\n        var interleaved = zipped.flatten(true);\n        if (zipped.size) {\n            interleaved.size = zipped.size * collections.length;\n        }\n        return reify(this, interleaved);\n    },\n    keySeq: function keySeq() {\n        return Range(0, this.size);\n    },\n    last: function last(notSetValue) {\n        return this.get(-1, notSetValue);\n    },\n    skipWhile: function skipWhile(predicate, context) {\n        return reify(this, skipWhileFactory(this, predicate, context, false));\n    },\n    zip: function zip() {\n        var collections = [\n            this\n        ].concat(arrCopy(arguments));\n        return reify(this, zipWithFactory(this, defaultZipper, collections));\n    },\n    zipAll: function zipAll() {\n        var collections = [\n            this\n        ].concat(arrCopy(arguments));\n        return reify(this, zipWithFactory(this, defaultZipper, collections, true));\n    },\n    zipWith: function zipWith(zipper /*, ...collections */ ) {\n        var collections = arrCopy(arguments);\n        collections[0] = this;\n        return reify(this, zipWithFactory(this, zipper, collections));\n    }\n});\nvar IndexedCollectionPrototype = IndexedCollection.prototype;\nIndexedCollectionPrototype[IS_INDEXED_SYMBOL] = true;\nIndexedCollectionPrototype[IS_ORDERED_SYMBOL] = true;\nmixin(SetCollection, {\n    // ### ES6 Collection methods (ES6 Array and Map)\n    get: function get(value, notSetValue) {\n        return this.has(value) ? value : notSetValue;\n    },\n    includes: function includes(value) {\n        return this.has(value);\n    },\n    // ### More sequential methods\n    keySeq: function keySeq() {\n        return this.valueSeq();\n    }\n});\nvar SetCollectionPrototype = SetCollection.prototype;\nSetCollectionPrototype.has = CollectionPrototype.includes;\nSetCollectionPrototype.contains = SetCollectionPrototype.includes;\nSetCollectionPrototype.keys = SetCollectionPrototype.values;\n// Mixin subclasses\nmixin(KeyedSeq, KeyedCollectionPrototype);\nmixin(IndexedSeq, IndexedCollectionPrototype);\nmixin(SetSeq, SetCollectionPrototype);\n// #pragma Helper functions\nfunction reduce(collection, reducer, reduction, context, useFirst, reverse) {\n    assertNotInfinite(collection.size);\n    collection.__iterate(function(v, k, c) {\n        if (useFirst) {\n            useFirst = false;\n            reduction = v;\n        } else {\n            reduction = reducer.call(context, reduction, v, k, c);\n        }\n    }, reverse);\n    return reduction;\n}\nfunction keyMapper(v, k) {\n    return k;\n}\nfunction entryMapper(v, k) {\n    return [\n        k,\n        v\n    ];\n}\nfunction not(predicate) {\n    return function() {\n        return !predicate.apply(this, arguments);\n    };\n}\nfunction neg(predicate) {\n    return function() {\n        return -predicate.apply(this, arguments);\n    };\n}\nfunction defaultZipper() {\n    return arrCopy(arguments);\n}\nfunction defaultNegComparator(a, b) {\n    return a < b ? 1 : a > b ? -1 : 0;\n}\nfunction hashCollection(collection) {\n    if (collection.size === Infinity) {\n        return 0;\n    }\n    var ordered = isOrdered(collection);\n    var keyed = isKeyed(collection);\n    var h = ordered ? 1 : 0;\n    var size = collection.__iterate(keyed ? ordered ? function(v, k) {\n        h = 31 * h + hashMerge(hash(v), hash(k)) | 0;\n    } : function(v, k) {\n        h = h + hashMerge(hash(v), hash(k)) | 0;\n    } : ordered ? function(v) {\n        h = 31 * h + hash(v) | 0;\n    } : function(v) {\n        h = h + hash(v) | 0;\n    });\n    return murmurHashOfSize(size, h);\n}\nfunction murmurHashOfSize(size, h) {\n    h = imul(h, 0xcc9e2d51);\n    h = imul(h << 15 | h >>> -15, 0x1b873593);\n    h = imul(h << 13 | h >>> -13, 5);\n    h = (h + 0xe6546b64 | 0) ^ size;\n    h = imul(h ^ h >>> 16, 0x85ebca6b);\n    h = imul(h ^ h >>> 13, 0xc2b2ae35);\n    h = smi(h ^ h >>> 16);\n    return h;\n}\nfunction hashMerge(a, b) {\n    return a ^ b + 0x9e3779b9 + (a << 6) + (a >> 2) | 0; // int\n}\nvar OrderedSet = /*@__PURE__*/ function(Set) {\n    function OrderedSet(value) {\n        // eslint-disable-next-line no-constructor-return\n        return value === undefined || value === null ? emptyOrderedSet() : isOrderedSet(value) ? value : emptyOrderedSet().withMutations(function(set) {\n            var iter = SetCollection(value);\n            assertNotInfinite(iter.size);\n            iter.forEach(function(v) {\n                return set.add(v);\n            });\n        });\n    }\n    if (Set) OrderedSet.__proto__ = Set;\n    OrderedSet.prototype = Object.create(Set && Set.prototype);\n    OrderedSet.prototype.constructor = OrderedSet;\n    OrderedSet.of = function of() {\n        return this(arguments);\n    };\n    OrderedSet.fromKeys = function fromKeys(value) {\n        return this(KeyedCollection(value).keySeq());\n    };\n    OrderedSet.prototype.toString = function toString() {\n        return this.__toString(\"OrderedSet {\", \"}\");\n    };\n    return OrderedSet;\n}(Set);\nOrderedSet.isOrderedSet = isOrderedSet;\nvar OrderedSetPrototype = OrderedSet.prototype;\nOrderedSetPrototype[IS_ORDERED_SYMBOL] = true;\nOrderedSetPrototype.zip = IndexedCollectionPrototype.zip;\nOrderedSetPrototype.zipWith = IndexedCollectionPrototype.zipWith;\nOrderedSetPrototype.zipAll = IndexedCollectionPrototype.zipAll;\nOrderedSetPrototype.__empty = emptyOrderedSet;\nOrderedSetPrototype.__make = makeOrderedSet;\nfunction makeOrderedSet(map, ownerID) {\n    var set = Object.create(OrderedSetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n}\nvar EMPTY_ORDERED_SET;\nfunction emptyOrderedSet() {\n    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));\n}\nvar PairSorting = {\n    LeftThenRight: -1,\n    RightThenLeft: +1\n};\nfunction throwOnInvalidDefaultValues(defaultValues) {\n    if (isRecord(defaultValues)) {\n        throw new Error(\"Can not call `Record` with an immutable Record as default values. Use a plain javascript object instead.\");\n    }\n    if (isImmutable(defaultValues)) {\n        throw new Error(\"Can not call `Record` with an immutable Collection as default values. Use a plain javascript object instead.\");\n    }\n    if (defaultValues === null || typeof defaultValues !== \"object\") {\n        throw new Error(\"Can not call `Record` with a non-object as default values. Use a plain javascript object instead.\");\n    }\n}\nvar Record = function Record(defaultValues, name) {\n    var hasInitialized;\n    throwOnInvalidDefaultValues(defaultValues);\n    var RecordType = function Record(values) {\n        var this$1$1 = this;\n        if (values instanceof RecordType) {\n            return values;\n        }\n        if (!(this instanceof RecordType)) {\n            return new RecordType(values);\n        }\n        if (!hasInitialized) {\n            hasInitialized = true;\n            var keys = Object.keys(defaultValues);\n            var indices = RecordTypePrototype._indices = {};\n            // Deprecated: left to attempt not to break any external code which\n            // relies on a ._name property existing on record instances.\n            // Use Record.getDescriptiveName() instead\n            RecordTypePrototype._name = name;\n            RecordTypePrototype._keys = keys;\n            RecordTypePrototype._defaultValues = defaultValues;\n            for(var i = 0; i < keys.length; i++){\n                var propName = keys[i];\n                indices[propName] = i;\n                if (RecordTypePrototype[propName]) {\n                    /* eslint-disable no-console */ typeof console === \"object\" && console.warn && console.warn(\"Cannot define \" + recordName(this) + ' with property \"' + propName + '\" since that property name is part of the Record API.');\n                /* eslint-enable no-console */ } else {\n                    setProp(RecordTypePrototype, propName);\n                }\n            }\n        }\n        this.__ownerID = undefined;\n        this._values = List().withMutations(function(l) {\n            l.setSize(this$1$1._keys.length);\n            KeyedCollection(values).forEach(function(v, k) {\n                l.set(this$1$1._indices[k], v === this$1$1._defaultValues[k] ? undefined : v);\n            });\n        });\n        return this;\n    };\n    var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);\n    RecordTypePrototype.constructor = RecordType;\n    if (name) {\n        RecordType.displayName = name;\n    }\n    // eslint-disable-next-line no-constructor-return\n    return RecordType;\n};\nRecord.prototype.toString = function toString() {\n    var str = recordName(this) + \" { \";\n    var keys = this._keys;\n    var k;\n    for(var i = 0, l = keys.length; i !== l; i++){\n        k = keys[i];\n        str += (i ? \", \" : \"\") + k + \": \" + quoteString(this.get(k));\n    }\n    return str + \" }\";\n};\nRecord.prototype.equals = function equals(other) {\n    return this === other || isRecord(other) && recordSeq(this).equals(recordSeq(other));\n};\nRecord.prototype.hashCode = function hashCode() {\n    return recordSeq(this).hashCode();\n};\n// @pragma Access\nRecord.prototype.has = function has(k) {\n    return this._indices.hasOwnProperty(k);\n};\nRecord.prototype.get = function get(k, notSetValue) {\n    if (!this.has(k)) {\n        return notSetValue;\n    }\n    var index = this._indices[k];\n    var value = this._values.get(index);\n    return value === undefined ? this._defaultValues[k] : value;\n};\n// @pragma Modification\nRecord.prototype.set = function set(k, v) {\n    if (this.has(k)) {\n        var newValues = this._values.set(this._indices[k], v === this._defaultValues[k] ? undefined : v);\n        if (newValues !== this._values && !this.__ownerID) {\n            return makeRecord(this, newValues);\n        }\n    }\n    return this;\n};\nRecord.prototype.remove = function remove(k) {\n    return this.set(k);\n};\nRecord.prototype.clear = function clear() {\n    var newValues = this._values.clear().setSize(this._keys.length);\n    return this.__ownerID ? this : makeRecord(this, newValues);\n};\nRecord.prototype.wasAltered = function wasAltered() {\n    return this._values.wasAltered();\n};\nRecord.prototype.toSeq = function toSeq() {\n    return recordSeq(this);\n};\nRecord.prototype.toJS = function toJS$1() {\n    return toJS(this);\n};\nRecord.prototype.entries = function entries() {\n    return this.__iterator(ITERATE_ENTRIES);\n};\nRecord.prototype.__iterator = function __iterator(type, reverse) {\n    return recordSeq(this).__iterator(type, reverse);\n};\nRecord.prototype.__iterate = function __iterate(fn, reverse) {\n    return recordSeq(this).__iterate(fn, reverse);\n};\nRecord.prototype.__ensureOwner = function __ensureOwner(ownerID) {\n    if (ownerID === this.__ownerID) {\n        return this;\n    }\n    var newValues = this._values.__ensureOwner(ownerID);\n    if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._values = newValues;\n        return this;\n    }\n    return makeRecord(this, newValues, ownerID);\n};\nRecord.isRecord = isRecord;\nRecord.getDescriptiveName = recordName;\nvar RecordPrototype = Record.prototype;\nRecordPrototype[IS_RECORD_SYMBOL] = true;\nRecordPrototype[DELETE] = RecordPrototype.remove;\nRecordPrototype.deleteIn = RecordPrototype.removeIn = deleteIn;\nRecordPrototype.getIn = getIn;\nRecordPrototype.hasIn = CollectionPrototype.hasIn;\nRecordPrototype.merge = merge$1;\nRecordPrototype.mergeWith = mergeWith$1;\nRecordPrototype.mergeIn = mergeIn;\nRecordPrototype.mergeDeep = mergeDeep;\nRecordPrototype.mergeDeepWith = mergeDeepWith;\nRecordPrototype.mergeDeepIn = mergeDeepIn;\nRecordPrototype.setIn = setIn;\nRecordPrototype.update = update;\nRecordPrototype.updateIn = updateIn;\nRecordPrototype.withMutations = withMutations;\nRecordPrototype.asMutable = asMutable;\nRecordPrototype.asImmutable = asImmutable;\nRecordPrototype[ITERATOR_SYMBOL] = RecordPrototype.entries;\nRecordPrototype.toJSON = RecordPrototype.toObject = CollectionPrototype.toObject;\nRecordPrototype.inspect = RecordPrototype.toSource = function() {\n    return this.toString();\n};\nfunction makeRecord(likeRecord, values, ownerID) {\n    var record = Object.create(Object.getPrototypeOf(likeRecord));\n    record._values = values;\n    record.__ownerID = ownerID;\n    return record;\n}\nfunction recordName(record) {\n    return record.constructor.displayName || record.constructor.name || \"Record\";\n}\nfunction recordSeq(record) {\n    return keyedSeqFromValue(record._keys.map(function(k) {\n        return [\n            k,\n            record.get(k)\n        ];\n    }));\n}\nfunction setProp(prototype, name) {\n    try {\n        Object.defineProperty(prototype, name, {\n            get: function() {\n                return this.get(name);\n            },\n            set: function(value) {\n                invariant(this.__ownerID, \"Cannot set on an immutable record.\");\n                this.set(name, value);\n            }\n        });\n    } catch (error) {\n    // Object.defineProperty failed. Probably IE8.\n    }\n}\n/**\n * Returns a lazy Seq of `value` repeated `times` times. When `times` is\n * undefined, returns an infinite sequence of `value`.\n */ var Repeat = /*@__PURE__*/ function(IndexedSeq) {\n    function Repeat(value, times) {\n        if (!(this instanceof Repeat)) {\n            // eslint-disable-next-line no-constructor-return\n            return new Repeat(value, times);\n        }\n        this._value = value;\n        this.size = times === undefined ? Infinity : Math.max(0, times);\n        if (this.size === 0) {\n            if (EMPTY_REPEAT) {\n                // eslint-disable-next-line no-constructor-return\n                return EMPTY_REPEAT;\n            }\n            EMPTY_REPEAT = this;\n        }\n    }\n    if (IndexedSeq) Repeat.__proto__ = IndexedSeq;\n    Repeat.prototype = Object.create(IndexedSeq && IndexedSeq.prototype);\n    Repeat.prototype.constructor = Repeat;\n    Repeat.prototype.toString = function toString() {\n        if (this.size === 0) {\n            return \"Repeat []\";\n        }\n        return \"Repeat [ \" + this._value + \" \" + this.size + \" times ]\";\n    };\n    Repeat.prototype.get = function get(index, notSetValue) {\n        return this.has(index) ? this._value : notSetValue;\n    };\n    Repeat.prototype.includes = function includes(searchValue) {\n        return is(this._value, searchValue);\n    };\n    Repeat.prototype.slice = function slice(begin, end) {\n        var size = this.size;\n        return wholeSlice(begin, end, size) ? this : new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));\n    };\n    Repeat.prototype.reverse = function reverse() {\n        return this;\n    };\n    Repeat.prototype.indexOf = function indexOf(searchValue) {\n        if (is(this._value, searchValue)) {\n            return 0;\n        }\n        return -1;\n    };\n    Repeat.prototype.lastIndexOf = function lastIndexOf(searchValue) {\n        if (is(this._value, searchValue)) {\n            return this.size;\n        }\n        return -1;\n    };\n    Repeat.prototype.__iterate = function __iterate(fn, reverse) {\n        var size = this.size;\n        var i = 0;\n        while(i !== size){\n            if (fn(this._value, reverse ? size - ++i : i++, this) === false) {\n                break;\n            }\n        }\n        return i;\n    };\n    Repeat.prototype.__iterator = function __iterator(type, reverse) {\n        var this$1$1 = this;\n        var size = this.size;\n        var i = 0;\n        return new Iterator(function() {\n            return i === size ? iteratorDone() : iteratorValue(type, reverse ? size - ++i : i++, this$1$1._value);\n        });\n    };\n    Repeat.prototype.equals = function equals(other) {\n        return other instanceof Repeat ? is(this._value, other._value) : deepEqual(this, other);\n    };\n    return Repeat;\n}(IndexedSeq);\nvar EMPTY_REPEAT;\nfunction fromJS(value, converter) {\n    return fromJSWith([], converter || defaultConverter, value, \"\", converter && converter.length > 2 ? [] : undefined, {\n        \"\": value\n    });\n}\nfunction fromJSWith(stack, converter, value, key, keyPath, parentValue) {\n    if (typeof value !== \"string\" && !isImmutable(value) && (isArrayLike(value) || hasIterator(value) || isPlainObject(value))) {\n        if (~stack.indexOf(value)) {\n            throw new TypeError(\"Cannot convert circular structure to Immutable\");\n        }\n        stack.push(value);\n        keyPath && key !== \"\" && keyPath.push(key);\n        var converted = converter.call(parentValue, key, Seq(value).map(function(v, k) {\n            return fromJSWith(stack, converter, v, k, keyPath, value);\n        }), keyPath && keyPath.slice());\n        stack.pop();\n        keyPath && keyPath.pop();\n        return converted;\n    }\n    return value;\n}\nfunction defaultConverter(k, v) {\n    // Effectively the opposite of \"Collection.toSeq()\"\n    return isIndexed(v) ? v.toList() : isKeyed(v) ? v.toMap() : v.toSet();\n}\nvar version = \"4.3.7\";\nvar Immutable = {\n    version: version,\n    Collection: Collection,\n    // Note: Iterable is deprecated\n    Iterable: Collection,\n    Seq: Seq,\n    Map: Map,\n    OrderedMap: OrderedMap,\n    List: List,\n    Stack: Stack,\n    Set: Set,\n    OrderedSet: OrderedSet,\n    PairSorting: PairSorting,\n    Record: Record,\n    Range: Range,\n    Repeat: Repeat,\n    is: is,\n    fromJS: fromJS,\n    hash: hash,\n    isImmutable: isImmutable,\n    isCollection: isCollection,\n    isKeyed: isKeyed,\n    isIndexed: isIndexed,\n    isAssociative: isAssociative,\n    isOrdered: isOrdered,\n    isValueObject: isValueObject,\n    isPlainObject: isPlainObject,\n    isSeq: isSeq,\n    isList: isList,\n    isMap: isMap,\n    isOrderedMap: isOrderedMap,\n    isStack: isStack,\n    isSet: isSet,\n    isOrderedSet: isOrderedSet,\n    isRecord: isRecord,\n    get: get,\n    getIn: getIn$1,\n    has: has,\n    hasIn: hasIn$1,\n    merge: merge,\n    mergeDeep: mergeDeep$1,\n    mergeWith: mergeWith,\n    mergeDeepWith: mergeDeepWith$1,\n    remove: remove,\n    removeIn: removeIn,\n    set: set,\n    setIn: setIn$1,\n    update: update$1,\n    updateIn: updateIn$1\n};\n// Note: Iterable is deprecated\nvar Iterable = Collection;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Immutable);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/immutable/dist/immutable.es.js\n");

/***/ })

};
;