/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/draft-js";
exports.ids = ["vendor-chunks/draft-js"];
exports.modules = {

/***/ "(ssr)/./node_modules/draft-js/lib/AtomicBlockUtils.js":
/*!*******************************************************!*\
  !*** ./node_modules/draft-js/lib/AtomicBlockUtils.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar BlockMapBuilder = __webpack_require__(/*! ./BlockMapBuilder */ \"(ssr)/./node_modules/draft-js/lib/BlockMapBuilder.js\");\nvar CharacterMetadata = __webpack_require__(/*! ./CharacterMetadata */ \"(ssr)/./node_modules/draft-js/lib/CharacterMetadata.js\");\nvar ContentBlock = __webpack_require__(/*! ./ContentBlock */ \"(ssr)/./node_modules/draft-js/lib/ContentBlock.js\");\nvar ContentBlockNode = __webpack_require__(/*! ./ContentBlockNode */ \"(ssr)/./node_modules/draft-js/lib/ContentBlockNode.js\");\nvar DraftModifier = __webpack_require__(/*! ./DraftModifier */ \"(ssr)/./node_modules/draft-js/lib/DraftModifier.js\");\nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar generateRandomKey = __webpack_require__(/*! ./generateRandomKey */ \"(ssr)/./node_modules/draft-js/lib/generateRandomKey.js\");\nvar gkx = __webpack_require__(/*! ./gkx */ \"(ssr)/./node_modules/draft-js/lib/gkx.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar moveBlockInContentState = __webpack_require__(/*! ./moveBlockInContentState */ \"(ssr)/./node_modules/draft-js/lib/moveBlockInContentState.js\");\nvar experimentalTreeDataSupport = gkx(\"draft_tree_data_support\");\nvar ContentBlockRecord = experimentalTreeDataSupport ? ContentBlockNode : ContentBlock;\nvar List = Immutable.List, Repeat = Immutable.Repeat;\nvar AtomicBlockUtils = {\n    insertAtomicBlock: function insertAtomicBlock(editorState, entityKey, character) {\n        var contentState = editorState.getCurrentContent();\n        var selectionState = editorState.getSelection();\n        var afterRemoval = DraftModifier.removeRange(contentState, selectionState, \"backward\");\n        var targetSelection = afterRemoval.getSelectionAfter();\n        var afterSplit = DraftModifier.splitBlock(afterRemoval, targetSelection);\n        var insertionTarget = afterSplit.getSelectionAfter();\n        var asAtomicBlock = DraftModifier.setBlockType(afterSplit, insertionTarget, \"atomic\");\n        var charData = CharacterMetadata.create({\n            entity: entityKey\n        });\n        var atomicBlockConfig = {\n            key: generateRandomKey(),\n            type: \"atomic\",\n            text: character,\n            characterList: List(Repeat(charData, character.length))\n        };\n        var atomicDividerBlockConfig = {\n            key: generateRandomKey(),\n            type: \"unstyled\"\n        };\n        if (experimentalTreeDataSupport) {\n            atomicBlockConfig = _objectSpread({}, atomicBlockConfig, {\n                nextSibling: atomicDividerBlockConfig.key\n            });\n            atomicDividerBlockConfig = _objectSpread({}, atomicDividerBlockConfig, {\n                prevSibling: atomicBlockConfig.key\n            });\n        }\n        var fragmentArray = [\n            new ContentBlockRecord(atomicBlockConfig),\n            new ContentBlockRecord(atomicDividerBlockConfig)\n        ];\n        var fragment = BlockMapBuilder.createFromArray(fragmentArray);\n        var withAtomicBlock = DraftModifier.replaceWithFragment(asAtomicBlock, insertionTarget, fragment);\n        var newContent = withAtomicBlock.merge({\n            selectionBefore: selectionState,\n            selectionAfter: withAtomicBlock.getSelectionAfter().set(\"hasFocus\", true)\n        });\n        return EditorState.push(editorState, newContent, \"insert-fragment\");\n    },\n    moveAtomicBlock: function moveAtomicBlock(editorState, atomicBlock, targetRange, insertionMode) {\n        var contentState = editorState.getCurrentContent();\n        var selectionState = editorState.getSelection();\n        var withMovedAtomicBlock;\n        if (insertionMode === \"before\" || insertionMode === \"after\") {\n            var targetBlock = contentState.getBlockForKey(insertionMode === \"before\" ? targetRange.getStartKey() : targetRange.getEndKey());\n            withMovedAtomicBlock = moveBlockInContentState(contentState, atomicBlock, targetBlock, insertionMode);\n        } else {\n            var afterRemoval = DraftModifier.removeRange(contentState, targetRange, \"backward\");\n            var selectionAfterRemoval = afterRemoval.getSelectionAfter();\n            var _targetBlock = afterRemoval.getBlockForKey(selectionAfterRemoval.getFocusKey());\n            if (selectionAfterRemoval.getStartOffset() === 0) {\n                withMovedAtomicBlock = moveBlockInContentState(afterRemoval, atomicBlock, _targetBlock, \"before\");\n            } else if (selectionAfterRemoval.getEndOffset() === _targetBlock.getLength()) {\n                withMovedAtomicBlock = moveBlockInContentState(afterRemoval, atomicBlock, _targetBlock, \"after\");\n            } else {\n                var afterSplit = DraftModifier.splitBlock(afterRemoval, selectionAfterRemoval);\n                var selectionAfterSplit = afterSplit.getSelectionAfter();\n                var _targetBlock2 = afterSplit.getBlockForKey(selectionAfterSplit.getFocusKey());\n                withMovedAtomicBlock = moveBlockInContentState(afterSplit, atomicBlock, _targetBlock2, \"before\");\n            }\n        }\n        var newContent = withMovedAtomicBlock.merge({\n            selectionBefore: selectionState,\n            selectionAfter: withMovedAtomicBlock.getSelectionAfter().set(\"hasFocus\", true)\n        });\n        return EditorState.push(editorState, newContent, \"move-block\");\n    }\n};\nmodule.exports = AtomicBlockUtils;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/AtomicBlockUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/BlockMapBuilder.js":
/*!******************************************************!*\
  !*** ./node_modules/draft-js/lib/BlockMapBuilder.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar OrderedMap = Immutable.OrderedMap;\nvar BlockMapBuilder = {\n    createFromArray: function createFromArray(blocks) {\n        return OrderedMap(blocks.map(function(block) {\n            return [\n                block.getKey(),\n                block\n            ];\n        }));\n    }\n};\nmodule.exports = BlockMapBuilder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0Jsb2NrTWFwQnVpbGRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLElBQUlBLFlBQVlDLG1CQUFPQSxDQUFDLHlGQUFXO0FBRW5DLElBQUlDLGFBQWFGLFVBQVVFLFVBQVU7QUFDckMsSUFBSUMsa0JBQWtCO0lBQ3BCQyxpQkFBaUIsU0FBU0EsZ0JBQWdCQyxNQUFNO1FBQzlDLE9BQU9ILFdBQVdHLE9BQU9DLEdBQUcsQ0FBQyxTQUFVQyxLQUFLO1lBQzFDLE9BQU87Z0JBQUNBLE1BQU1DLE1BQU07Z0JBQUlEO2FBQU07UUFDaEM7SUFDRjtBQUNGO0FBQ0FFLE9BQU9DLE9BQU8sR0FBR1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWVsLWhhcnZlc3Rlci8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvQmxvY2tNYXBCdWlsZGVyLmpzPzE0YTciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIEltbXV0YWJsZSA9IHJlcXVpcmUoXCJpbW11dGFibGVcIik7XG5cbnZhciBPcmRlcmVkTWFwID0gSW1tdXRhYmxlLk9yZGVyZWRNYXA7XG52YXIgQmxvY2tNYXBCdWlsZGVyID0ge1xuICBjcmVhdGVGcm9tQXJyYXk6IGZ1bmN0aW9uIGNyZWF0ZUZyb21BcnJheShibG9ja3MpIHtcbiAgICByZXR1cm4gT3JkZXJlZE1hcChibG9ja3MubWFwKGZ1bmN0aW9uIChibG9jaykge1xuICAgICAgcmV0dXJuIFtibG9jay5nZXRLZXkoKSwgYmxvY2tdO1xuICAgIH0pKTtcbiAgfVxufTtcbm1vZHVsZS5leHBvcnRzID0gQmxvY2tNYXBCdWlsZGVyOyJdLCJuYW1lcyI6WyJJbW11dGFibGUiLCJyZXF1aXJlIiwiT3JkZXJlZE1hcCIsIkJsb2NrTWFwQnVpbGRlciIsImNyZWF0ZUZyb21BcnJheSIsImJsb2NrcyIsIm1hcCIsImJsb2NrIiwiZ2V0S2V5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/BlockMapBuilder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/BlockTree.js":
/*!************************************************!*\
  !*** ./node_modules/draft-js/lib/BlockTree.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nvar findRangesImmutable = __webpack_require__(/*! ./findRangesImmutable */ \"(ssr)/./node_modules/draft-js/lib/findRangesImmutable.js\");\nvar getOwnObjectValues = __webpack_require__(/*! ./getOwnObjectValues */ \"(ssr)/./node_modules/draft-js/lib/getOwnObjectValues.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar List = Immutable.List, Repeat = Immutable.Repeat, Record = Immutable.Record;\nvar returnTrue = function returnTrue() {\n    return true;\n};\nvar defaultLeafRange = {\n    start: null,\n    end: null\n};\nvar LeafRange = Record(defaultLeafRange);\nvar defaultDecoratorRange = {\n    start: null,\n    end: null,\n    decoratorKey: null,\n    leaves: null\n};\nvar DecoratorRange = Record(defaultDecoratorRange);\nvar BlockTree = {\n    /**\n   * Generate a block tree for a given ContentBlock/decorator pair.\n   */ generate: function generate(contentState, block, decorator) {\n        var textLength = block.getLength();\n        if (!textLength) {\n            return List.of(new DecoratorRange({\n                start: 0,\n                end: 0,\n                decoratorKey: null,\n                leaves: List.of(new LeafRange({\n                    start: 0,\n                    end: 0\n                }))\n            }));\n        }\n        var leafSets = [];\n        var decorations = decorator ? decorator.getDecorations(block, contentState) : List(Repeat(null, textLength));\n        var chars = block.getCharacterList();\n        findRangesImmutable(decorations, areEqual, returnTrue, function(start, end) {\n            leafSets.push(new DecoratorRange({\n                start: start,\n                end: end,\n                decoratorKey: decorations.get(start),\n                leaves: generateLeaves(chars.slice(start, end).toList(), start)\n            }));\n        });\n        return List(leafSets);\n    },\n    fromJS: function fromJS(_ref) {\n        var leaves = _ref.leaves, other = _objectWithoutPropertiesLoose(_ref, [\n            \"leaves\"\n        ]);\n        return new DecoratorRange(_objectSpread({}, other, {\n            leaves: leaves != null ? List(Array.isArray(leaves) ? leaves : getOwnObjectValues(leaves)).map(function(leaf) {\n                return LeafRange(leaf);\n            }) : null\n        }));\n    }\n};\n/**\n * Generate LeafRange records for a given character list.\n */ function generateLeaves(characters, offset) {\n    var leaves = [];\n    var inlineStyles = characters.map(function(c) {\n        return c.getStyle();\n    }).toList();\n    findRangesImmutable(inlineStyles, areEqual, returnTrue, function(start, end) {\n        leaves.push(new LeafRange({\n            start: start + offset,\n            end: end + offset\n        }));\n    });\n    return List(leaves);\n}\nfunction areEqual(a, b) {\n    return a === b;\n}\nmodule.exports = BlockTree;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/BlockTree.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/CharacterMetadata.js":
/*!********************************************************!*\
  !*** ./node_modules/draft-js/lib/CharacterMetadata.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nvar _require = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\"), Map = _require.Map, OrderedSet = _require.OrderedSet, Record = _require.Record; // Immutable.map is typed such that the value for every key in the map\n// must be the same type\nvar EMPTY_SET = OrderedSet();\nvar defaultRecord = {\n    style: EMPTY_SET,\n    entity: null\n};\nvar CharacterMetadataRecord = Record(defaultRecord);\nvar CharacterMetadata = /*#__PURE__*/ function(_CharacterMetadataRec) {\n    _inheritsLoose(CharacterMetadata, _CharacterMetadataRec);\n    function CharacterMetadata() {\n        return _CharacterMetadataRec.apply(this, arguments) || this;\n    }\n    var _proto = CharacterMetadata.prototype;\n    _proto.getStyle = function getStyle() {\n        return this.get(\"style\");\n    };\n    _proto.getEntity = function getEntity() {\n        return this.get(\"entity\");\n    };\n    _proto.hasStyle = function hasStyle(style) {\n        return this.getStyle().includes(style);\n    };\n    CharacterMetadata.applyStyle = function applyStyle(record, style) {\n        var withStyle = record.set(\"style\", record.getStyle().add(style));\n        return CharacterMetadata.create(withStyle);\n    };\n    CharacterMetadata.removeStyle = function removeStyle(record, style) {\n        var withoutStyle = record.set(\"style\", record.getStyle().remove(style));\n        return CharacterMetadata.create(withoutStyle);\n    };\n    CharacterMetadata.applyEntity = function applyEntity(record, entityKey) {\n        var withEntity = record.getEntity() === entityKey ? record : record.set(\"entity\", entityKey);\n        return CharacterMetadata.create(withEntity);\n    } /**\n   * Use this function instead of the `CharacterMetadata` constructor.\n   * Since most content generally uses only a very small number of\n   * style/entity permutations, we can reuse these objects as often as\n   * possible.\n   */ ;\n    CharacterMetadata.create = function create(config) {\n        if (!config) {\n            return EMPTY;\n        }\n        var defaultConfig = {\n            style: EMPTY_SET,\n            entity: null\n        }; // Fill in unspecified properties, if necessary.\n        var configMap = Map(defaultConfig).merge(config);\n        var existing = pool.get(configMap);\n        if (existing) {\n            return existing;\n        }\n        var newCharacter = new CharacterMetadata(configMap);\n        pool = pool.set(configMap, newCharacter);\n        return newCharacter;\n    };\n    CharacterMetadata.fromJS = function fromJS(_ref) {\n        var style = _ref.style, entity = _ref.entity;\n        return new CharacterMetadata({\n            style: Array.isArray(style) ? OrderedSet(style) : style,\n            entity: Array.isArray(entity) ? OrderedSet(entity) : entity\n        });\n    };\n    return CharacterMetadata;\n}(CharacterMetadataRecord);\nvar EMPTY = new CharacterMetadata();\nvar pool = Map([\n    [\n        Map(defaultRecord),\n        EMPTY\n    ]\n]);\nCharacterMetadata.EMPTY = EMPTY;\nmodule.exports = CharacterMetadata;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0NoYXJhY3Rlck1ldGFkYXRhLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsU0FBU0EsZUFBZUMsUUFBUSxFQUFFQyxVQUFVO0lBQUlELFNBQVNFLFNBQVMsR0FBR0MsT0FBT0MsTUFBTSxDQUFDSCxXQUFXQyxTQUFTO0lBQUdGLFNBQVNFLFNBQVMsQ0FBQ0csV0FBVyxHQUFHTDtJQUFVQSxTQUFTTSxTQUFTLEdBQUdMO0FBQVk7QUFFdEwsSUFBSU0sV0FBV0MsbUJBQU9BLENBQUMseUZBQVcsR0FDOUJDLE1BQU1GLFNBQVNFLEdBQUcsRUFDbEJDLGFBQWFILFNBQVNHLFVBQVUsRUFDaENDLFNBQVNKLFNBQVNJLE1BQU0sRUFBRSxzRUFBc0U7QUFDcEcsd0JBQXdCO0FBR3hCLElBQUlDLFlBQVlGO0FBQ2hCLElBQUlHLGdCQUFnQjtJQUNsQkMsT0FBT0Y7SUFDUEcsUUFBUTtBQUNWO0FBQ0EsSUFBSUMsMEJBQTBCTCxPQUFPRTtBQUVyQyxJQUFJSSxvQkFBb0IsV0FBVyxHQUFFLFNBQVVDLHFCQUFxQjtJQUNsRW5CLGVBQWVrQixtQkFBbUJDO0lBRWxDLFNBQVNEO1FBQ1AsT0FBT0Msc0JBQXNCQyxLQUFLLENBQUMsSUFBSSxFQUFFQyxjQUFjLElBQUk7SUFDN0Q7SUFFQSxJQUFJQyxTQUFTSixrQkFBa0JmLFNBQVM7SUFFeENtQixPQUFPQyxRQUFRLEdBQUcsU0FBU0E7UUFDekIsT0FBTyxJQUFJLENBQUNDLEdBQUcsQ0FBQztJQUNsQjtJQUVBRixPQUFPRyxTQUFTLEdBQUcsU0FBU0E7UUFDMUIsT0FBTyxJQUFJLENBQUNELEdBQUcsQ0FBQztJQUNsQjtJQUVBRixPQUFPSSxRQUFRLEdBQUcsU0FBU0EsU0FBU1gsS0FBSztRQUN2QyxPQUFPLElBQUksQ0FBQ1EsUUFBUSxHQUFHSSxRQUFRLENBQUNaO0lBQ2xDO0lBRUFHLGtCQUFrQlUsVUFBVSxHQUFHLFNBQVNBLFdBQVdDLE1BQU0sRUFBRWQsS0FBSztRQUM5RCxJQUFJZSxZQUFZRCxPQUFPRSxHQUFHLENBQUMsU0FBU0YsT0FBT04sUUFBUSxHQUFHUyxHQUFHLENBQUNqQjtRQUMxRCxPQUFPRyxrQkFBa0JiLE1BQU0sQ0FBQ3lCO0lBQ2xDO0lBRUFaLGtCQUFrQmUsV0FBVyxHQUFHLFNBQVNBLFlBQVlKLE1BQU0sRUFBRWQsS0FBSztRQUNoRSxJQUFJbUIsZUFBZUwsT0FBT0UsR0FBRyxDQUFDLFNBQVNGLE9BQU9OLFFBQVEsR0FBR1ksTUFBTSxDQUFDcEI7UUFDaEUsT0FBT0csa0JBQWtCYixNQUFNLENBQUM2QjtJQUNsQztJQUVBaEIsa0JBQWtCa0IsV0FBVyxHQUFHLFNBQVNBLFlBQVlQLE1BQU0sRUFBRVEsU0FBUztRQUNwRSxJQUFJQyxhQUFhVCxPQUFPSixTQUFTLE9BQU9ZLFlBQVlSLFNBQVNBLE9BQU9FLEdBQUcsQ0FBQyxVQUFVTTtRQUNsRixPQUFPbkIsa0JBQWtCYixNQUFNLENBQUNpQztJQUNsQyxFQUNBOzs7OztHQUtDO0lBR0RwQixrQkFBa0JiLE1BQU0sR0FBRyxTQUFTQSxPQUFPa0MsTUFBTTtRQUMvQyxJQUFJLENBQUNBLFFBQVE7WUFDWCxPQUFPQztRQUNUO1FBRUEsSUFBSUMsZ0JBQWdCO1lBQ2xCMUIsT0FBT0Y7WUFDUEcsUUFBUTtRQUNWLEdBQUcsZ0RBQWdEO1FBRW5ELElBQUkwQixZQUFZaEMsSUFBSStCLGVBQWVFLEtBQUssQ0FBQ0o7UUFDekMsSUFBSUssV0FBV0MsS0FBS3JCLEdBQUcsQ0FBQ2tCO1FBRXhCLElBQUlFLFVBQVU7WUFDWixPQUFPQTtRQUNUO1FBRUEsSUFBSUUsZUFBZSxJQUFJNUIsa0JBQWtCd0I7UUFDekNHLE9BQU9BLEtBQUtkLEdBQUcsQ0FBQ1csV0FBV0k7UUFDM0IsT0FBT0E7SUFDVDtJQUVBNUIsa0JBQWtCNkIsTUFBTSxHQUFHLFNBQVNBLE9BQU9DLElBQUk7UUFDN0MsSUFBSWpDLFFBQVFpQyxLQUFLakMsS0FBSyxFQUNsQkMsU0FBU2dDLEtBQUtoQyxNQUFNO1FBQ3hCLE9BQU8sSUFBSUUsa0JBQWtCO1lBQzNCSCxPQUFPa0MsTUFBTUMsT0FBTyxDQUFDbkMsU0FBU0osV0FBV0ksU0FBU0E7WUFDbERDLFFBQVFpQyxNQUFNQyxPQUFPLENBQUNsQyxVQUFVTCxXQUFXSyxVQUFVQTtRQUN2RDtJQUNGO0lBRUEsT0FBT0U7QUFDVCxFQUFFRDtBQUVGLElBQUl1QixRQUFRLElBQUl0QjtBQUNoQixJQUFJMkIsT0FBT25DLElBQUk7SUFBQztRQUFDQSxJQUFJSTtRQUFnQjBCO0tBQU07Q0FBQztBQUM1Q3RCLGtCQUFrQnNCLEtBQUssR0FBR0E7QUFDMUJXLE9BQU9DLE9BQU8sR0FBR2xDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVlbC1oYXJ2ZXN0ZXIvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0NoYXJhY3Rlck1ldGFkYXRhLmpzPzkyMWUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoXCJpbW11dGFibGVcIiksXG4gICAgTWFwID0gX3JlcXVpcmUuTWFwLFxuICAgIE9yZGVyZWRTZXQgPSBfcmVxdWlyZS5PcmRlcmVkU2V0LFxuICAgIFJlY29yZCA9IF9yZXF1aXJlLlJlY29yZDsgLy8gSW1tdXRhYmxlLm1hcCBpcyB0eXBlZCBzdWNoIHRoYXQgdGhlIHZhbHVlIGZvciBldmVyeSBrZXkgaW4gdGhlIG1hcFxuLy8gbXVzdCBiZSB0aGUgc2FtZSB0eXBlXG5cblxudmFyIEVNUFRZX1NFVCA9IE9yZGVyZWRTZXQoKTtcbnZhciBkZWZhdWx0UmVjb3JkID0ge1xuICBzdHlsZTogRU1QVFlfU0VULFxuICBlbnRpdHk6IG51bGxcbn07XG52YXIgQ2hhcmFjdGVyTWV0YWRhdGFSZWNvcmQgPSBSZWNvcmQoZGVmYXVsdFJlY29yZCk7XG5cbnZhciBDaGFyYWN0ZXJNZXRhZGF0YSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NoYXJhY3Rlck1ldGFkYXRhUmVjKSB7XG4gIF9pbmhlcml0c0xvb3NlKENoYXJhY3Rlck1ldGFkYXRhLCBfQ2hhcmFjdGVyTWV0YWRhdGFSZWMpO1xuXG4gIGZ1bmN0aW9uIENoYXJhY3Rlck1ldGFkYXRhKCkge1xuICAgIHJldHVybiBfQ2hhcmFjdGVyTWV0YWRhdGFSZWMuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IENoYXJhY3Rlck1ldGFkYXRhLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0U3R5bGUgPSBmdW5jdGlvbiBnZXRTdHlsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXQoJ3N0eWxlJyk7XG4gIH07XG5cbiAgX3Byb3RvLmdldEVudGl0eSA9IGZ1bmN0aW9uIGdldEVudGl0eSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXQoJ2VudGl0eScpO1xuICB9O1xuXG4gIF9wcm90by5oYXNTdHlsZSA9IGZ1bmN0aW9uIGhhc1N0eWxlKHN0eWxlKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3R5bGUoKS5pbmNsdWRlcyhzdHlsZSk7XG4gIH07XG5cbiAgQ2hhcmFjdGVyTWV0YWRhdGEuYXBwbHlTdHlsZSA9IGZ1bmN0aW9uIGFwcGx5U3R5bGUocmVjb3JkLCBzdHlsZSkge1xuICAgIHZhciB3aXRoU3R5bGUgPSByZWNvcmQuc2V0KCdzdHlsZScsIHJlY29yZC5nZXRTdHlsZSgpLmFkZChzdHlsZSkpO1xuICAgIHJldHVybiBDaGFyYWN0ZXJNZXRhZGF0YS5jcmVhdGUod2l0aFN0eWxlKTtcbiAgfTtcblxuICBDaGFyYWN0ZXJNZXRhZGF0YS5yZW1vdmVTdHlsZSA9IGZ1bmN0aW9uIHJlbW92ZVN0eWxlKHJlY29yZCwgc3R5bGUpIHtcbiAgICB2YXIgd2l0aG91dFN0eWxlID0gcmVjb3JkLnNldCgnc3R5bGUnLCByZWNvcmQuZ2V0U3R5bGUoKS5yZW1vdmUoc3R5bGUpKTtcbiAgICByZXR1cm4gQ2hhcmFjdGVyTWV0YWRhdGEuY3JlYXRlKHdpdGhvdXRTdHlsZSk7XG4gIH07XG5cbiAgQ2hhcmFjdGVyTWV0YWRhdGEuYXBwbHlFbnRpdHkgPSBmdW5jdGlvbiBhcHBseUVudGl0eShyZWNvcmQsIGVudGl0eUtleSkge1xuICAgIHZhciB3aXRoRW50aXR5ID0gcmVjb3JkLmdldEVudGl0eSgpID09PSBlbnRpdHlLZXkgPyByZWNvcmQgOiByZWNvcmQuc2V0KCdlbnRpdHknLCBlbnRpdHlLZXkpO1xuICAgIHJldHVybiBDaGFyYWN0ZXJNZXRhZGF0YS5jcmVhdGUod2l0aEVudGl0eSk7XG4gIH1cbiAgLyoqXG4gICAqIFVzZSB0aGlzIGZ1bmN0aW9uIGluc3RlYWQgb2YgdGhlIGBDaGFyYWN0ZXJNZXRhZGF0YWAgY29uc3RydWN0b3IuXG4gICAqIFNpbmNlIG1vc3QgY29udGVudCBnZW5lcmFsbHkgdXNlcyBvbmx5IGEgdmVyeSBzbWFsbCBudW1iZXIgb2ZcbiAgICogc3R5bGUvZW50aXR5IHBlcm11dGF0aW9ucywgd2UgY2FuIHJldXNlIHRoZXNlIG9iamVjdHMgYXMgb2Z0ZW4gYXNcbiAgICogcG9zc2libGUuXG4gICAqL1xuICA7XG5cbiAgQ2hhcmFjdGVyTWV0YWRhdGEuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGNvbmZpZykge1xuICAgIGlmICghY29uZmlnKSB7XG4gICAgICByZXR1cm4gRU1QVFk7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRDb25maWcgPSB7XG4gICAgICBzdHlsZTogRU1QVFlfU0VULFxuICAgICAgZW50aXR5OiBudWxsXG4gICAgfTsgLy8gRmlsbCBpbiB1bnNwZWNpZmllZCBwcm9wZXJ0aWVzLCBpZiBuZWNlc3NhcnkuXG5cbiAgICB2YXIgY29uZmlnTWFwID0gTWFwKGRlZmF1bHRDb25maWcpLm1lcmdlKGNvbmZpZyk7XG4gICAgdmFyIGV4aXN0aW5nID0gcG9vbC5nZXQoY29uZmlnTWFwKTtcblxuICAgIGlmIChleGlzdGluZykge1xuICAgICAgcmV0dXJuIGV4aXN0aW5nO1xuICAgIH1cblxuICAgIHZhciBuZXdDaGFyYWN0ZXIgPSBuZXcgQ2hhcmFjdGVyTWV0YWRhdGEoY29uZmlnTWFwKTtcbiAgICBwb29sID0gcG9vbC5zZXQoY29uZmlnTWFwLCBuZXdDaGFyYWN0ZXIpO1xuICAgIHJldHVybiBuZXdDaGFyYWN0ZXI7XG4gIH07XG5cbiAgQ2hhcmFjdGVyTWV0YWRhdGEuZnJvbUpTID0gZnVuY3Rpb24gZnJvbUpTKF9yZWYpIHtcbiAgICB2YXIgc3R5bGUgPSBfcmVmLnN0eWxlLFxuICAgICAgICBlbnRpdHkgPSBfcmVmLmVudGl0eTtcbiAgICByZXR1cm4gbmV3IENoYXJhY3Rlck1ldGFkYXRhKHtcbiAgICAgIHN0eWxlOiBBcnJheS5pc0FycmF5KHN0eWxlKSA/IE9yZGVyZWRTZXQoc3R5bGUpIDogc3R5bGUsXG4gICAgICBlbnRpdHk6IEFycmF5LmlzQXJyYXkoZW50aXR5KSA/IE9yZGVyZWRTZXQoZW50aXR5KSA6IGVudGl0eVxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBDaGFyYWN0ZXJNZXRhZGF0YTtcbn0oQ2hhcmFjdGVyTWV0YWRhdGFSZWNvcmQpO1xuXG52YXIgRU1QVFkgPSBuZXcgQ2hhcmFjdGVyTWV0YWRhdGEoKTtcbnZhciBwb29sID0gTWFwKFtbTWFwKGRlZmF1bHRSZWNvcmQpLCBFTVBUWV1dKTtcbkNoYXJhY3Rlck1ldGFkYXRhLkVNUFRZID0gRU1QVFk7XG5tb2R1bGUuZXhwb3J0cyA9IENoYXJhY3Rlck1ldGFkYXRhOyJdLCJuYW1lcyI6WyJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwiX19wcm90b19fIiwiX3JlcXVpcmUiLCJyZXF1aXJlIiwiTWFwIiwiT3JkZXJlZFNldCIsIlJlY29yZCIsIkVNUFRZX1NFVCIsImRlZmF1bHRSZWNvcmQiLCJzdHlsZSIsImVudGl0eSIsIkNoYXJhY3Rlck1ldGFkYXRhUmVjb3JkIiwiQ2hhcmFjdGVyTWV0YWRhdGEiLCJfQ2hhcmFjdGVyTWV0YWRhdGFSZWMiLCJhcHBseSIsImFyZ3VtZW50cyIsIl9wcm90byIsImdldFN0eWxlIiwiZ2V0IiwiZ2V0RW50aXR5IiwiaGFzU3R5bGUiLCJpbmNsdWRlcyIsImFwcGx5U3R5bGUiLCJyZWNvcmQiLCJ3aXRoU3R5bGUiLCJzZXQiLCJhZGQiLCJyZW1vdmVTdHlsZSIsIndpdGhvdXRTdHlsZSIsInJlbW92ZSIsImFwcGx5RW50aXR5IiwiZW50aXR5S2V5Iiwid2l0aEVudGl0eSIsImNvbmZpZyIsIkVNUFRZIiwiZGVmYXVsdENvbmZpZyIsImNvbmZpZ01hcCIsIm1lcmdlIiwiZXhpc3RpbmciLCJwb29sIiwibmV3Q2hhcmFjdGVyIiwiZnJvbUpTIiwiX3JlZiIsIkFycmF5IiwiaXNBcnJheSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/CharacterMetadata.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/CompositeDraftDecorator.js":
/*!**************************************************************!*\
  !*** ./node_modules/draft-js/lib/CompositeDraftDecorator.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar List = Immutable.List;\nvar DELIMITER = \".\";\n/**\n * A CompositeDraftDecorator traverses through a list of DraftDecorator\n * instances to identify sections of a ContentBlock that should be rendered\n * in a \"decorated\" manner. For example, hashtags, mentions, and links may\n * be intended to stand out visually, be rendered as anchors, etc.\n *\n * The list of decorators supplied to the constructor will be used in the\n * order they are provided. This allows the caller to specify a priority for\n * string matching, in case of match collisions among decorators.\n *\n * For instance, I may have a link with a `#` in its text. Though this section\n * of text may match our hashtag decorator, it should not be treated as a\n * hashtag. I should therefore list my link DraftDecorator\n * before my hashtag DraftDecorator when constructing this composite\n * decorator instance.\n *\n * Thus, when a collision like this is encountered, the earlier match is\n * preserved and the new match is discarded.\n */ var CompositeDraftDecorator = /*#__PURE__*/ function() {\n    function CompositeDraftDecorator(decorators) {\n        _defineProperty(this, \"_decorators\", void 0);\n        // Copy the decorator array, since we use this array order to determine\n        // precedence of decoration matching. If the array is mutated externally,\n        // we don't want to be affected here.\n        this._decorators = decorators.slice();\n    }\n    var _proto = CompositeDraftDecorator.prototype;\n    _proto.getDecorations = function getDecorations(block, contentState) {\n        var decorations = Array(block.getText().length).fill(null);\n        this._decorators.forEach(function(/*object*/ decorator, /*number*/ ii) {\n            var counter = 0;\n            var strategy = decorator.strategy;\n            var callback = function callback(/*number*/ start, /*number*/ end) {\n                // Find out if any of our matching range is already occupied\n                // by another decorator. If so, discard the match. Otherwise, store\n                // the component key for rendering.\n                if (canOccupySlice(decorations, start, end)) {\n                    occupySlice(decorations, start, end, ii + DELIMITER + counter);\n                    counter++;\n                }\n            };\n            strategy(block, callback, contentState);\n        });\n        return List(decorations);\n    };\n    _proto.getComponentForKey = function getComponentForKey(key) {\n        var componentKey = parseInt(key.split(DELIMITER)[0], 10);\n        return this._decorators[componentKey].component;\n    };\n    _proto.getPropsForKey = function getPropsForKey(key) {\n        var componentKey = parseInt(key.split(DELIMITER)[0], 10);\n        return this._decorators[componentKey].props;\n    };\n    return CompositeDraftDecorator;\n}();\n/**\n * Determine whether we can occupy the specified slice of the decorations\n * array.\n */ function canOccupySlice(decorations, start, end) {\n    for(var ii = start; ii < end; ii++){\n        if (decorations[ii] != null) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Splice the specified component into our decoration array at the desired\n * range.\n */ function occupySlice(targetArr, start, end, componentKey) {\n    for(var ii = start; ii < end; ii++){\n        targetArr[ii] = componentKey;\n    }\n}\nmodule.exports = CompositeDraftDecorator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/CompositeDraftDecorator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/ContentBlock.js":
/*!***************************************************!*\
  !*** ./node_modules/draft-js/lib/ContentBlock.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nvar CharacterMetadata = __webpack_require__(/*! ./CharacterMetadata */ \"(ssr)/./node_modules/draft-js/lib/CharacterMetadata.js\");\nvar findRangesImmutable = __webpack_require__(/*! ./findRangesImmutable */ \"(ssr)/./node_modules/draft-js/lib/findRangesImmutable.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar List = Immutable.List, Map = Immutable.Map, OrderedSet = Immutable.OrderedSet, Record = Immutable.Record, Repeat = Immutable.Repeat;\nvar EMPTY_SET = OrderedSet();\nvar defaultRecord = {\n    key: \"\",\n    type: \"unstyled\",\n    text: \"\",\n    characterList: List(),\n    depth: 0,\n    data: Map()\n};\nvar ContentBlockRecord = Record(defaultRecord);\nvar decorateCharacterList = function decorateCharacterList(config) {\n    if (!config) {\n        return config;\n    }\n    var characterList = config.characterList, text = config.text;\n    if (text && !characterList) {\n        config.characterList = List(Repeat(CharacterMetadata.EMPTY, text.length));\n    }\n    return config;\n};\nvar ContentBlock = /*#__PURE__*/ function(_ContentBlockRecord) {\n    _inheritsLoose(ContentBlock, _ContentBlockRecord);\n    function ContentBlock(config) {\n        return _ContentBlockRecord.call(this, decorateCharacterList(config)) || this;\n    }\n    var _proto = ContentBlock.prototype;\n    _proto.getKey = function getKey() {\n        return this.get(\"key\");\n    };\n    _proto.getType = function getType() {\n        return this.get(\"type\");\n    };\n    _proto.getText = function getText() {\n        return this.get(\"text\");\n    };\n    _proto.getCharacterList = function getCharacterList() {\n        return this.get(\"characterList\");\n    };\n    _proto.getLength = function getLength() {\n        return this.getText().length;\n    };\n    _proto.getDepth = function getDepth() {\n        return this.get(\"depth\");\n    };\n    _proto.getData = function getData() {\n        return this.get(\"data\");\n    };\n    _proto.getInlineStyleAt = function getInlineStyleAt(offset) {\n        var character = this.getCharacterList().get(offset);\n        return character ? character.getStyle() : EMPTY_SET;\n    };\n    _proto.getEntityAt = function getEntityAt(offset) {\n        var character = this.getCharacterList().get(offset);\n        return character ? character.getEntity() : null;\n    } /**\n   * Execute a callback for every contiguous range of styles within the block.\n   */ ;\n    _proto.findStyleRanges = function findStyleRanges(filterFn, callback) {\n        findRangesImmutable(this.getCharacterList(), haveEqualStyle, filterFn, callback);\n    } /**\n   * Execute a callback for every contiguous range of entities within the block.\n   */ ;\n    _proto.findEntityRanges = function findEntityRanges(filterFn, callback) {\n        findRangesImmutable(this.getCharacterList(), haveEqualEntity, filterFn, callback);\n    };\n    return ContentBlock;\n}(ContentBlockRecord);\nfunction haveEqualStyle(charA, charB) {\n    return charA.getStyle() === charB.getStyle();\n}\nfunction haveEqualEntity(charA, charB) {\n    return charA.getEntity() === charB.getEntity();\n}\nmodule.exports = ContentBlock;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/ContentBlock.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/ContentBlockNode.js":
/*!*******************************************************!*\
  !*** ./node_modules/draft-js/lib/ContentBlockNode.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n *\n * This file is a fork of ContentBlock adding support for nesting references by\n * providing links to children, parent, prevSibling, and nextSibling.\n *\n * This is unstable and not part of the public API and should not be used by\n * production systems. This file may be update/removed without notice.\n */ \nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nvar CharacterMetadata = __webpack_require__(/*! ./CharacterMetadata */ \"(ssr)/./node_modules/draft-js/lib/CharacterMetadata.js\");\nvar findRangesImmutable = __webpack_require__(/*! ./findRangesImmutable */ \"(ssr)/./node_modules/draft-js/lib/findRangesImmutable.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar List = Immutable.List, Map = Immutable.Map, OrderedSet = Immutable.OrderedSet, Record = Immutable.Record, Repeat = Immutable.Repeat;\nvar EMPTY_SET = OrderedSet();\nvar defaultRecord = {\n    parent: null,\n    characterList: List(),\n    data: Map(),\n    depth: 0,\n    key: \"\",\n    text: \"\",\n    type: \"unstyled\",\n    children: List(),\n    prevSibling: null,\n    nextSibling: null\n};\nvar haveEqualStyle = function haveEqualStyle(charA, charB) {\n    return charA.getStyle() === charB.getStyle();\n};\nvar haveEqualEntity = function haveEqualEntity(charA, charB) {\n    return charA.getEntity() === charB.getEntity();\n};\nvar decorateCharacterList = function decorateCharacterList(config) {\n    if (!config) {\n        return config;\n    }\n    var characterList = config.characterList, text = config.text;\n    if (text && !characterList) {\n        config.characterList = List(Repeat(CharacterMetadata.EMPTY, text.length));\n    }\n    return config;\n};\nvar ContentBlockNode = /*#__PURE__*/ function(_ref) {\n    _inheritsLoose(ContentBlockNode, _ref);\n    function ContentBlockNode() {\n        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultRecord;\n        /* eslint-disable-next-line constructor-super */ return _ref.call(this, decorateCharacterList(props)) || this;\n    }\n    var _proto = ContentBlockNode.prototype;\n    _proto.getKey = function getKey() {\n        return this.get(\"key\");\n    };\n    _proto.getType = function getType() {\n        return this.get(\"type\");\n    };\n    _proto.getText = function getText() {\n        return this.get(\"text\");\n    };\n    _proto.getCharacterList = function getCharacterList() {\n        return this.get(\"characterList\");\n    };\n    _proto.getLength = function getLength() {\n        return this.getText().length;\n    };\n    _proto.getDepth = function getDepth() {\n        return this.get(\"depth\");\n    };\n    _proto.getData = function getData() {\n        return this.get(\"data\");\n    };\n    _proto.getInlineStyleAt = function getInlineStyleAt(offset) {\n        var character = this.getCharacterList().get(offset);\n        return character ? character.getStyle() : EMPTY_SET;\n    };\n    _proto.getEntityAt = function getEntityAt(offset) {\n        var character = this.getCharacterList().get(offset);\n        return character ? character.getEntity() : null;\n    };\n    _proto.getChildKeys = function getChildKeys() {\n        return this.get(\"children\");\n    };\n    _proto.getParentKey = function getParentKey() {\n        return this.get(\"parent\");\n    };\n    _proto.getPrevSiblingKey = function getPrevSiblingKey() {\n        return this.get(\"prevSibling\");\n    };\n    _proto.getNextSiblingKey = function getNextSiblingKey() {\n        return this.get(\"nextSibling\");\n    };\n    _proto.findStyleRanges = function findStyleRanges(filterFn, callback) {\n        findRangesImmutable(this.getCharacterList(), haveEqualStyle, filterFn, callback);\n    };\n    _proto.findEntityRanges = function findEntityRanges(filterFn, callback) {\n        findRangesImmutable(this.getCharacterList(), haveEqualEntity, filterFn, callback);\n    };\n    return ContentBlockNode;\n}(Record(defaultRecord));\nmodule.exports = ContentBlockNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/ContentBlockNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/ContentState.js":
/*!***************************************************!*\
  !*** ./node_modules/draft-js/lib/ContentState.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nvar BlockMapBuilder = __webpack_require__(/*! ./BlockMapBuilder */ \"(ssr)/./node_modules/draft-js/lib/BlockMapBuilder.js\");\nvar CharacterMetadata = __webpack_require__(/*! ./CharacterMetadata */ \"(ssr)/./node_modules/draft-js/lib/CharacterMetadata.js\");\nvar ContentBlock = __webpack_require__(/*! ./ContentBlock */ \"(ssr)/./node_modules/draft-js/lib/ContentBlock.js\");\nvar ContentBlockNode = __webpack_require__(/*! ./ContentBlockNode */ \"(ssr)/./node_modules/draft-js/lib/ContentBlockNode.js\");\nvar DraftEntity = __webpack_require__(/*! ./DraftEntity */ \"(ssr)/./node_modules/draft-js/lib/DraftEntity.js\");\nvar SelectionState = __webpack_require__(/*! ./SelectionState */ \"(ssr)/./node_modules/draft-js/lib/SelectionState.js\");\nvar generateRandomKey = __webpack_require__(/*! ./generateRandomKey */ \"(ssr)/./node_modules/draft-js/lib/generateRandomKey.js\");\nvar getOwnObjectValues = __webpack_require__(/*! ./getOwnObjectValues */ \"(ssr)/./node_modules/draft-js/lib/getOwnObjectValues.js\");\nvar gkx = __webpack_require__(/*! ./gkx */ \"(ssr)/./node_modules/draft-js/lib/gkx.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar sanitizeDraftText = __webpack_require__(/*! ./sanitizeDraftText */ \"(ssr)/./node_modules/draft-js/lib/sanitizeDraftText.js\");\nvar List = Immutable.List, Record = Immutable.Record, Repeat = Immutable.Repeat, ImmutableMap = Immutable.Map, OrderedMap = Immutable.OrderedMap;\nvar defaultRecord = {\n    entityMap: null,\n    blockMap: null,\n    selectionBefore: null,\n    selectionAfter: null\n};\nvar ContentStateRecord = Record(defaultRecord);\n/* $FlowFixMe[signature-verification-failure] Supressing a `signature-\n * verification-failure` error here. TODO: T65949050 Clean up the branch for\n * this GK */ var ContentBlockNodeRecord = gkx(\"draft_tree_data_support\") ? ContentBlockNode : ContentBlock;\nvar ContentState = /*#__PURE__*/ function(_ContentStateRecord) {\n    _inheritsLoose(ContentState, _ContentStateRecord);\n    function ContentState() {\n        return _ContentStateRecord.apply(this, arguments) || this;\n    }\n    var _proto = ContentState.prototype;\n    _proto.getEntityMap = function getEntityMap() {\n        // TODO: update this when we fully remove DraftEntity\n        return DraftEntity;\n    };\n    _proto.getBlockMap = function getBlockMap() {\n        return this.get(\"blockMap\");\n    };\n    _proto.getSelectionBefore = function getSelectionBefore() {\n        return this.get(\"selectionBefore\");\n    };\n    _proto.getSelectionAfter = function getSelectionAfter() {\n        return this.get(\"selectionAfter\");\n    };\n    _proto.getBlockForKey = function getBlockForKey(key) {\n        var block = this.getBlockMap().get(key);\n        return block;\n    };\n    _proto.getKeyBefore = function getKeyBefore(key) {\n        return this.getBlockMap().reverse().keySeq().skipUntil(function(v) {\n            return v === key;\n        }).skip(1).first();\n    };\n    _proto.getKeyAfter = function getKeyAfter(key) {\n        return this.getBlockMap().keySeq().skipUntil(function(v) {\n            return v === key;\n        }).skip(1).first();\n    };\n    _proto.getBlockAfter = function getBlockAfter(key) {\n        return this.getBlockMap().skipUntil(function(_, k) {\n            return k === key;\n        }).skip(1).first();\n    };\n    _proto.getBlockBefore = function getBlockBefore(key) {\n        return this.getBlockMap().reverse().skipUntil(function(_, k) {\n            return k === key;\n        }).skip(1).first();\n    };\n    _proto.getBlocksAsArray = function getBlocksAsArray() {\n        return this.getBlockMap().toArray();\n    };\n    _proto.getFirstBlock = function getFirstBlock() {\n        return this.getBlockMap().first();\n    };\n    _proto.getLastBlock = function getLastBlock() {\n        return this.getBlockMap().last();\n    };\n    _proto.getPlainText = function getPlainText(delimiter) {\n        return this.getBlockMap().map(function(block) {\n            return block ? block.getText() : \"\";\n        }).join(delimiter || \"\\n\");\n    };\n    _proto.getLastCreatedEntityKey = function getLastCreatedEntityKey() {\n        // TODO: update this when we fully remove DraftEntity\n        return DraftEntity.__getLastCreatedEntityKey();\n    };\n    _proto.hasText = function hasText() {\n        var blockMap = this.getBlockMap();\n        return blockMap.size > 1 || // make sure that there are no zero width space chars\n        escape(blockMap.first().getText()).replace(/%u200B/g, \"\").length > 0;\n    };\n    _proto.createEntity = function createEntity(type, mutability, data) {\n        // TODO: update this when we fully remove DraftEntity\n        DraftEntity.__create(type, mutability, data);\n        return this;\n    };\n    _proto.mergeEntityData = function mergeEntityData(key, toMerge) {\n        // TODO: update this when we fully remove DraftEntity\n        DraftEntity.__mergeData(key, toMerge);\n        return this;\n    };\n    _proto.replaceEntityData = function replaceEntityData(key, newData) {\n        // TODO: update this when we fully remove DraftEntity\n        DraftEntity.__replaceData(key, newData);\n        return this;\n    };\n    _proto.addEntity = function addEntity(instance) {\n        // TODO: update this when we fully remove DraftEntity\n        DraftEntity.__add(instance);\n        return this;\n    };\n    _proto.getEntity = function getEntity(key) {\n        // TODO: update this when we fully remove DraftEntity\n        return DraftEntity.__get(key);\n    };\n    _proto.getAllEntities = function getAllEntities() {\n        return DraftEntity.__getAll();\n    };\n    _proto.loadWithEntities = function loadWithEntities(entities) {\n        return DraftEntity.__loadWithEntities(entities);\n    };\n    ContentState.createFromBlockArray = function createFromBlockArray(blocks, entityMap) {\n        // TODO: remove this when we completely deprecate the old entity API\n        var theBlocks = Array.isArray(blocks) ? blocks : blocks.contentBlocks;\n        var blockMap = BlockMapBuilder.createFromArray(theBlocks);\n        var selectionState = blockMap.isEmpty() ? new SelectionState() : SelectionState.createEmpty(blockMap.first().getKey());\n        return new ContentState({\n            blockMap: blockMap,\n            entityMap: entityMap || DraftEntity,\n            selectionBefore: selectionState,\n            selectionAfter: selectionState\n        });\n    };\n    ContentState.createFromText = function createFromText(text) {\n        var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /\\r\\n?|\\n/g;\n        var strings = text.split(delimiter);\n        var blocks = strings.map(function(block) {\n            block = sanitizeDraftText(block);\n            return new ContentBlockNodeRecord({\n                key: generateRandomKey(),\n                text: block,\n                type: \"unstyled\",\n                characterList: List(Repeat(CharacterMetadata.EMPTY, block.length))\n            });\n        });\n        return ContentState.createFromBlockArray(blocks);\n    };\n    ContentState.fromJS = function fromJS(state) {\n        return new ContentState(_objectSpread({}, state, {\n            blockMap: OrderedMap(state.blockMap).map(ContentState.createContentBlockFromJS),\n            selectionBefore: new SelectionState(state.selectionBefore),\n            selectionAfter: new SelectionState(state.selectionAfter)\n        }));\n    };\n    ContentState.createContentBlockFromJS = function createContentBlockFromJS(block) {\n        var characterList = block.characterList;\n        return new ContentBlockNodeRecord(_objectSpread({}, block, {\n            data: ImmutableMap(block.data),\n            characterList: characterList != null ? List((Array.isArray(characterList) ? characterList : getOwnObjectValues(characterList)).map(function(c) {\n                return CharacterMetadata.fromJS(c);\n            })) : undefined\n        }));\n    };\n    return ContentState;\n}(ContentStateRecord);\nmodule.exports = ContentState;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/ContentState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/ContentStateInlineStyle.js":
/*!**************************************************************!*\
  !*** ./node_modules/draft-js/lib/ContentStateInlineStyle.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar CharacterMetadata = __webpack_require__(/*! ./CharacterMetadata */ \"(ssr)/./node_modules/draft-js/lib/CharacterMetadata.js\");\nvar _require = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\"), Map = _require.Map;\nvar ContentStateInlineStyle = {\n    add: function add(contentState, selectionState, inlineStyle) {\n        return modifyInlineStyle(contentState, selectionState, inlineStyle, true);\n    },\n    remove: function remove(contentState, selectionState, inlineStyle) {\n        return modifyInlineStyle(contentState, selectionState, inlineStyle, false);\n    }\n};\nfunction modifyInlineStyle(contentState, selectionState, inlineStyle, addOrRemove) {\n    var blockMap = contentState.getBlockMap();\n    var startKey = selectionState.getStartKey();\n    var startOffset = selectionState.getStartOffset();\n    var endKey = selectionState.getEndKey();\n    var endOffset = selectionState.getEndOffset();\n    var newBlocks = blockMap.skipUntil(function(_, k) {\n        return k === startKey;\n    }).takeUntil(function(_, k) {\n        return k === endKey;\n    }).concat(Map([\n        [\n            endKey,\n            blockMap.get(endKey)\n        ]\n    ])).map(function(block, blockKey) {\n        var sliceStart;\n        var sliceEnd;\n        if (startKey === endKey) {\n            sliceStart = startOffset;\n            sliceEnd = endOffset;\n        } else {\n            sliceStart = blockKey === startKey ? startOffset : 0;\n            sliceEnd = blockKey === endKey ? endOffset : block.getLength();\n        }\n        var chars = block.getCharacterList();\n        var current;\n        while(sliceStart < sliceEnd){\n            current = chars.get(sliceStart);\n            chars = chars.set(sliceStart, addOrRemove ? CharacterMetadata.applyStyle(current, inlineStyle) : CharacterMetadata.removeStyle(current, inlineStyle));\n            sliceStart++;\n        }\n        return block.set(\"characterList\", chars);\n    });\n    return contentState.merge({\n        blockMap: blockMap.merge(newBlocks),\n        selectionBefore: selectionState,\n        selectionAfter: selectionState\n    });\n}\nmodule.exports = ContentStateInlineStyle;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0NvbnRlbnRTdGF0ZUlubGluZVN0eWxlLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsb0JBQW9CQyxtQkFBT0EsQ0FBQyxtRkFBcUI7QUFFckQsSUFBSUMsV0FBV0QsbUJBQU9BLENBQUMseUZBQVcsR0FDOUJFLE1BQU1ELFNBQVNDLEdBQUc7QUFFdEIsSUFBSUMsMEJBQTBCO0lBQzVCQyxLQUFLLFNBQVNBLElBQUlDLFlBQVksRUFBRUMsY0FBYyxFQUFFQyxXQUFXO1FBQ3pELE9BQU9DLGtCQUFrQkgsY0FBY0MsZ0JBQWdCQyxhQUFhO0lBQ3RFO0lBQ0FFLFFBQVEsU0FBU0EsT0FBT0osWUFBWSxFQUFFQyxjQUFjLEVBQUVDLFdBQVc7UUFDL0QsT0FBT0Msa0JBQWtCSCxjQUFjQyxnQkFBZ0JDLGFBQWE7SUFDdEU7QUFDRjtBQUVBLFNBQVNDLGtCQUFrQkgsWUFBWSxFQUFFQyxjQUFjLEVBQUVDLFdBQVcsRUFBRUcsV0FBVztJQUMvRSxJQUFJQyxXQUFXTixhQUFhTyxXQUFXO0lBQ3ZDLElBQUlDLFdBQVdQLGVBQWVRLFdBQVc7SUFDekMsSUFBSUMsY0FBY1QsZUFBZVUsY0FBYztJQUMvQyxJQUFJQyxTQUFTWCxlQUFlWSxTQUFTO0lBQ3JDLElBQUlDLFlBQVliLGVBQWVjLFlBQVk7SUFDM0MsSUFBSUMsWUFBWVYsU0FBU1csU0FBUyxDQUFDLFNBQVVDLENBQUMsRUFBRUMsQ0FBQztRQUMvQyxPQUFPQSxNQUFNWDtJQUNmLEdBQUdZLFNBQVMsQ0FBQyxTQUFVRixDQUFDLEVBQUVDLENBQUM7UUFDekIsT0FBT0EsTUFBTVA7SUFDZixHQUFHUyxNQUFNLENBQUN4QixJQUFJO1FBQUM7WUFBQ2U7WUFBUU4sU0FBU2dCLEdBQUcsQ0FBQ1Y7U0FBUTtLQUFDLEdBQUdXLEdBQUcsQ0FBQyxTQUFVQyxLQUFLLEVBQUVDLFFBQVE7UUFDNUUsSUFBSUM7UUFDSixJQUFJQztRQUVKLElBQUluQixhQUFhSSxRQUFRO1lBQ3ZCYyxhQUFhaEI7WUFDYmlCLFdBQVdiO1FBQ2IsT0FBTztZQUNMWSxhQUFhRCxhQUFhakIsV0FBV0UsY0FBYztZQUNuRGlCLFdBQVdGLGFBQWFiLFNBQVNFLFlBQVlVLE1BQU1JLFNBQVM7UUFDOUQ7UUFFQSxJQUFJQyxRQUFRTCxNQUFNTSxnQkFBZ0I7UUFDbEMsSUFBSUM7UUFFSixNQUFPTCxhQUFhQyxTQUFVO1lBQzVCSSxVQUFVRixNQUFNUCxHQUFHLENBQUNJO1lBQ3BCRyxRQUFRQSxNQUFNRyxHQUFHLENBQUNOLFlBQVlyQixjQUFjWCxrQkFBa0J1QyxVQUFVLENBQUNGLFNBQVM3QixlQUFlUixrQkFBa0J3QyxXQUFXLENBQUNILFNBQVM3QjtZQUN4SXdCO1FBQ0Y7UUFFQSxPQUFPRixNQUFNUSxHQUFHLENBQUMsaUJBQWlCSDtJQUNwQztJQUNBLE9BQU83QixhQUFhbUMsS0FBSyxDQUFDO1FBQ3hCN0IsVUFBVUEsU0FBUzZCLEtBQUssQ0FBQ25CO1FBQ3pCb0IsaUJBQWlCbkM7UUFDakJvQyxnQkFBZ0JwQztJQUNsQjtBQUNGO0FBRUFxQyxPQUFPQyxPQUFPLEdBQUd6QyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9Db250ZW50U3RhdGVJbmxpbmVTdHlsZS5qcz83OWQ4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBDaGFyYWN0ZXJNZXRhZGF0YSA9IHJlcXVpcmUoXCIuL0NoYXJhY3Rlck1ldGFkYXRhXCIpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKFwiaW1tdXRhYmxlXCIpLFxuICAgIE1hcCA9IF9yZXF1aXJlLk1hcDtcblxudmFyIENvbnRlbnRTdGF0ZUlubGluZVN0eWxlID0ge1xuICBhZGQ6IGZ1bmN0aW9uIGFkZChjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlLCBpbmxpbmVTdHlsZSkge1xuICAgIHJldHVybiBtb2RpZnlJbmxpbmVTdHlsZShjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlLCBpbmxpbmVTdHlsZSwgdHJ1ZSk7XG4gIH0sXG4gIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKGNvbnRlbnRTdGF0ZSwgc2VsZWN0aW9uU3RhdGUsIGlubGluZVN0eWxlKSB7XG4gICAgcmV0dXJuIG1vZGlmeUlubGluZVN0eWxlKGNvbnRlbnRTdGF0ZSwgc2VsZWN0aW9uU3RhdGUsIGlubGluZVN0eWxlLCBmYWxzZSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIG1vZGlmeUlubGluZVN0eWxlKGNvbnRlbnRTdGF0ZSwgc2VsZWN0aW9uU3RhdGUsIGlubGluZVN0eWxlLCBhZGRPclJlbW92ZSkge1xuICB2YXIgYmxvY2tNYXAgPSBjb250ZW50U3RhdGUuZ2V0QmxvY2tNYXAoKTtcbiAgdmFyIHN0YXJ0S2V5ID0gc2VsZWN0aW9uU3RhdGUuZ2V0U3RhcnRLZXkoKTtcbiAgdmFyIHN0YXJ0T2Zmc2V0ID0gc2VsZWN0aW9uU3RhdGUuZ2V0U3RhcnRPZmZzZXQoKTtcbiAgdmFyIGVuZEtleSA9IHNlbGVjdGlvblN0YXRlLmdldEVuZEtleSgpO1xuICB2YXIgZW5kT2Zmc2V0ID0gc2VsZWN0aW9uU3RhdGUuZ2V0RW5kT2Zmc2V0KCk7XG4gIHZhciBuZXdCbG9ja3MgPSBibG9ja01hcC5za2lwVW50aWwoZnVuY3Rpb24gKF8sIGspIHtcbiAgICByZXR1cm4gayA9PT0gc3RhcnRLZXk7XG4gIH0pLnRha2VVbnRpbChmdW5jdGlvbiAoXywgaykge1xuICAgIHJldHVybiBrID09PSBlbmRLZXk7XG4gIH0pLmNvbmNhdChNYXAoW1tlbmRLZXksIGJsb2NrTWFwLmdldChlbmRLZXkpXV0pKS5tYXAoZnVuY3Rpb24gKGJsb2NrLCBibG9ja0tleSkge1xuICAgIHZhciBzbGljZVN0YXJ0O1xuICAgIHZhciBzbGljZUVuZDtcblxuICAgIGlmIChzdGFydEtleSA9PT0gZW5kS2V5KSB7XG4gICAgICBzbGljZVN0YXJ0ID0gc3RhcnRPZmZzZXQ7XG4gICAgICBzbGljZUVuZCA9IGVuZE9mZnNldDtcbiAgICB9IGVsc2Uge1xuICAgICAgc2xpY2VTdGFydCA9IGJsb2NrS2V5ID09PSBzdGFydEtleSA/IHN0YXJ0T2Zmc2V0IDogMDtcbiAgICAgIHNsaWNlRW5kID0gYmxvY2tLZXkgPT09IGVuZEtleSA/IGVuZE9mZnNldCA6IGJsb2NrLmdldExlbmd0aCgpO1xuICAgIH1cblxuICAgIHZhciBjaGFycyA9IGJsb2NrLmdldENoYXJhY3Rlckxpc3QoKTtcbiAgICB2YXIgY3VycmVudDtcblxuICAgIHdoaWxlIChzbGljZVN0YXJ0IDwgc2xpY2VFbmQpIHtcbiAgICAgIGN1cnJlbnQgPSBjaGFycy5nZXQoc2xpY2VTdGFydCk7XG4gICAgICBjaGFycyA9IGNoYXJzLnNldChzbGljZVN0YXJ0LCBhZGRPclJlbW92ZSA/IENoYXJhY3Rlck1ldGFkYXRhLmFwcGx5U3R5bGUoY3VycmVudCwgaW5saW5lU3R5bGUpIDogQ2hhcmFjdGVyTWV0YWRhdGEucmVtb3ZlU3R5bGUoY3VycmVudCwgaW5saW5lU3R5bGUpKTtcbiAgICAgIHNsaWNlU3RhcnQrKztcbiAgICB9XG5cbiAgICByZXR1cm4gYmxvY2suc2V0KCdjaGFyYWN0ZXJMaXN0JywgY2hhcnMpO1xuICB9KTtcbiAgcmV0dXJuIGNvbnRlbnRTdGF0ZS5tZXJnZSh7XG4gICAgYmxvY2tNYXA6IGJsb2NrTWFwLm1lcmdlKG5ld0Jsb2NrcyksXG4gICAgc2VsZWN0aW9uQmVmb3JlOiBzZWxlY3Rpb25TdGF0ZSxcbiAgICBzZWxlY3Rpb25BZnRlcjogc2VsZWN0aW9uU3RhdGVcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ29udGVudFN0YXRlSW5saW5lU3R5bGU7Il0sIm5hbWVzIjpbIkNoYXJhY3Rlck1ldGFkYXRhIiwicmVxdWlyZSIsIl9yZXF1aXJlIiwiTWFwIiwiQ29udGVudFN0YXRlSW5saW5lU3R5bGUiLCJhZGQiLCJjb250ZW50U3RhdGUiLCJzZWxlY3Rpb25TdGF0ZSIsImlubGluZVN0eWxlIiwibW9kaWZ5SW5saW5lU3R5bGUiLCJyZW1vdmUiLCJhZGRPclJlbW92ZSIsImJsb2NrTWFwIiwiZ2V0QmxvY2tNYXAiLCJzdGFydEtleSIsImdldFN0YXJ0S2V5Iiwic3RhcnRPZmZzZXQiLCJnZXRTdGFydE9mZnNldCIsImVuZEtleSIsImdldEVuZEtleSIsImVuZE9mZnNldCIsImdldEVuZE9mZnNldCIsIm5ld0Jsb2NrcyIsInNraXBVbnRpbCIsIl8iLCJrIiwidGFrZVVudGlsIiwiY29uY2F0IiwiZ2V0IiwibWFwIiwiYmxvY2siLCJibG9ja0tleSIsInNsaWNlU3RhcnQiLCJzbGljZUVuZCIsImdldExlbmd0aCIsImNoYXJzIiwiZ2V0Q2hhcmFjdGVyTGlzdCIsImN1cnJlbnQiLCJzZXQiLCJhcHBseVN0eWxlIiwicmVtb3ZlU3R5bGUiLCJtZXJnZSIsInNlbGVjdGlvbkJlZm9yZSIsInNlbGVjdGlvbkFmdGVyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/ContentStateInlineStyle.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DOMObserver.js":
/*!**************************************************!*\
  !*** ./node_modules/draft-js/lib/DOMObserver.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar UserAgent = __webpack_require__(/*! fbjs/lib/UserAgent */ \"(ssr)/./node_modules/fbjs/lib/UserAgent.js\");\nvar findAncestorOffsetKey = __webpack_require__(/*! ./findAncestorOffsetKey */ \"(ssr)/./node_modules/draft-js/lib/findAncestorOffsetKey.js\");\nvar getWindowForNode = __webpack_require__(/*! ./getWindowForNode */ \"(ssr)/./node_modules/draft-js/lib/getWindowForNode.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar nullthrows = __webpack_require__(/*! fbjs/lib/nullthrows */ \"(ssr)/./node_modules/fbjs/lib/nullthrows.js\");\nvar Map = Immutable.Map;\n// Heavily based on Prosemirror's DOMObserver https://github.com/ProseMirror/prosemirror-view/blob/master/src/domobserver.js\nvar DOM_OBSERVER_OPTIONS = {\n    subtree: true,\n    characterData: true,\n    childList: true,\n    characterDataOldValue: false,\n    attributes: false\n}; // IE11 has very broken mutation observers, so we also listen to DOMCharacterDataModified\nvar USE_CHAR_DATA = UserAgent.isBrowser(\"IE <= 11\");\nvar DOMObserver = /*#__PURE__*/ function() {\n    function DOMObserver(container) {\n        var _this = this;\n        _defineProperty(this, \"observer\", void 0);\n        _defineProperty(this, \"container\", void 0);\n        _defineProperty(this, \"mutations\", void 0);\n        _defineProperty(this, \"onCharData\", void 0);\n        this.container = container;\n        this.mutations = Map();\n        var containerWindow = getWindowForNode(container);\n        if (containerWindow.MutationObserver && !USE_CHAR_DATA) {\n            this.observer = new containerWindow.MutationObserver(function(mutations) {\n                return _this.registerMutations(mutations);\n            });\n        } else {\n            this.onCharData = function(e) {\n                !(e.target instanceof Node) ?  true ? invariant(false, \"Expected target to be an instance of Node\") : 0 : void 0;\n                _this.registerMutation({\n                    type: \"characterData\",\n                    target: e.target\n                });\n            };\n        }\n    }\n    var _proto = DOMObserver.prototype;\n    _proto.start = function start() {\n        if (this.observer) {\n            this.observer.observe(this.container, DOM_OBSERVER_OPTIONS);\n        } else {\n            /* $FlowFixMe[incompatible-call] (>=0.68.0 site=www,mobile) This event\n       * type is not defined by Flow's standard library */ this.container.addEventListener(\"DOMCharacterDataModified\", this.onCharData);\n        }\n    };\n    _proto.stopAndFlushMutations = function stopAndFlushMutations() {\n        var observer = this.observer;\n        if (observer) {\n            this.registerMutations(observer.takeRecords());\n            observer.disconnect();\n        } else {\n            /* $FlowFixMe[incompatible-call] (>=0.68.0 site=www,mobile) This event\n       * type is not defined by Flow's standard library */ this.container.removeEventListener(\"DOMCharacterDataModified\", this.onCharData);\n        }\n        var mutations = this.mutations;\n        this.mutations = Map();\n        return mutations;\n    };\n    _proto.registerMutations = function registerMutations(mutations) {\n        for(var i = 0; i < mutations.length; i++){\n            this.registerMutation(mutations[i]);\n        }\n    };\n    _proto.getMutationTextContent = function getMutationTextContent(mutation) {\n        var type = mutation.type, target = mutation.target, removedNodes = mutation.removedNodes;\n        if (type === \"characterData\") {\n            // When `textContent` is '', there is a race condition that makes\n            // getting the offsetKey from the target not possible.\n            // These events are also followed by a `childList`, which is the one\n            // we are able to retrieve the offsetKey and apply the '' text.\n            if (target.textContent !== \"\") {\n                // IE 11 considers the enter keypress that concludes the composition\n                // as an input char. This strips that newline character so the draft\n                // state does not receive spurious newlines.\n                if (USE_CHAR_DATA) {\n                    return target.textContent.replace(\"\\n\", \"\");\n                }\n                return target.textContent;\n            }\n        } else if (type === \"childList\") {\n            if (removedNodes && removedNodes.length) {\n                // `characterData` events won't happen or are ignored when\n                // removing the last character of a leaf node, what happens\n                // instead is a `childList` event with a `removedNodes` array.\n                // For this case the textContent should be '' and\n                // `DraftModifier.replaceText` will make sure the content is\n                // updated properly.\n                return \"\";\n            } else if (target.textContent !== \"\") {\n                // Typing Chinese in an empty block in MS Edge results in a\n                // `childList` event with non-empty textContent.\n                // See https://github.com/facebook/draft-js/issues/2082\n                return target.textContent;\n            }\n        }\n        return null;\n    };\n    _proto.registerMutation = function registerMutation(mutation) {\n        var textContent = this.getMutationTextContent(mutation);\n        if (textContent != null) {\n            var offsetKey = nullthrows(findAncestorOffsetKey(mutation.target));\n            this.mutations = this.mutations.set(offsetKey, textContent);\n        }\n    };\n    return DOMObserver;\n}();\nmodule.exports = DOMObserver;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DOMObserver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DefaultDraftBlockRenderMap.js":
/*!*****************************************************************!*\
  !*** ./node_modules/draft-js/lib/DefaultDraftBlockRenderMap.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar cx = __webpack_require__(/*! fbjs/lib/cx */ \"(ssr)/./node_modules/fbjs/lib/cx.js\");\nvar _require = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\"), Map = _require.Map;\nvar UL_WRAP = React.createElement(\"ul\", {\n    className: cx(\"public/DraftStyleDefault/ul\")\n});\nvar OL_WRAP = React.createElement(\"ol\", {\n    className: cx(\"public/DraftStyleDefault/ol\")\n});\nvar PRE_WRAP = React.createElement(\"pre\", {\n    className: cx(\"public/DraftStyleDefault/pre\")\n});\nvar DefaultDraftBlockRenderMap = Map({\n    \"header-one\": {\n        element: \"h1\"\n    },\n    \"header-two\": {\n        element: \"h2\"\n    },\n    \"header-three\": {\n        element: \"h3\"\n    },\n    \"header-four\": {\n        element: \"h4\"\n    },\n    \"header-five\": {\n        element: \"h5\"\n    },\n    \"header-six\": {\n        element: \"h6\"\n    },\n    section: {\n        element: \"section\"\n    },\n    article: {\n        element: \"article\"\n    },\n    \"unordered-list-item\": {\n        element: \"li\",\n        wrapper: UL_WRAP\n    },\n    \"ordered-list-item\": {\n        element: \"li\",\n        wrapper: OL_WRAP\n    },\n    blockquote: {\n        element: \"blockquote\"\n    },\n    atomic: {\n        element: \"figure\"\n    },\n    \"code-block\": {\n        element: \"pre\",\n        wrapper: PRE_WRAP\n    },\n    unstyled: {\n        element: \"div\",\n        aliasedElements: [\n            \"p\"\n        ]\n    }\n});\nmodule.exports = DefaultDraftBlockRenderMap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RlZmF1bHREcmFmdEJsb2NrUmVuZGVyTWFwLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsUUFBUUMsbUJBQU9BLENBQUMsd0dBQU87QUFFM0IsSUFBSUMsS0FBS0QsbUJBQU9BLENBQUMsd0RBQWE7QUFFOUIsSUFBSUUsV0FBV0YsbUJBQU9BLENBQUMseUZBQVcsR0FDOUJHLE1BQU1ELFNBQVNDLEdBQUc7QUFFdEIsSUFBSUMsVUFBVUwsTUFBTU0sYUFBYSxDQUFDLE1BQU07SUFDdENDLFdBQVdMLEdBQUc7QUFDaEI7QUFDQSxJQUFJTSxVQUFVUixNQUFNTSxhQUFhLENBQUMsTUFBTTtJQUN0Q0MsV0FBV0wsR0FBRztBQUNoQjtBQUNBLElBQUlPLFdBQVdULE1BQU1NLGFBQWEsQ0FBQyxPQUFPO0lBQ3hDQyxXQUFXTCxHQUFHO0FBQ2hCO0FBQ0EsSUFBSVEsNkJBQTZCTixJQUFJO0lBQ25DLGNBQWM7UUFDWk8sU0FBUztJQUNYO0lBQ0EsY0FBYztRQUNaQSxTQUFTO0lBQ1g7SUFDQSxnQkFBZ0I7UUFDZEEsU0FBUztJQUNYO0lBQ0EsZUFBZTtRQUNiQSxTQUFTO0lBQ1g7SUFDQSxlQUFlO1FBQ2JBLFNBQVM7SUFDWDtJQUNBLGNBQWM7UUFDWkEsU0FBUztJQUNYO0lBQ0FDLFNBQVM7UUFDUEQsU0FBUztJQUNYO0lBQ0FFLFNBQVM7UUFDUEYsU0FBUztJQUNYO0lBQ0EsdUJBQXVCO1FBQ3JCQSxTQUFTO1FBQ1RHLFNBQVNUO0lBQ1g7SUFDQSxxQkFBcUI7UUFDbkJNLFNBQVM7UUFDVEcsU0FBU047SUFDWDtJQUNBTyxZQUFZO1FBQ1ZKLFNBQVM7SUFDWDtJQUNBSyxRQUFRO1FBQ05MLFNBQVM7SUFDWDtJQUNBLGNBQWM7UUFDWkEsU0FBUztRQUNURyxTQUFTTDtJQUNYO0lBQ0FRLFVBQVU7UUFDUk4sU0FBUztRQUNUTyxpQkFBaUI7WUFBQztTQUFJO0lBQ3hCO0FBQ0Y7QUFDQUMsT0FBT0MsT0FBTyxHQUFHViIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9EZWZhdWx0RHJhZnRCbG9ja1JlbmRlck1hcC5qcz9mNWE4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcblxudmFyIGN4ID0gcmVxdWlyZShcImZianMvbGliL2N4XCIpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKFwiaW1tdXRhYmxlXCIpLFxuICAgIE1hcCA9IF9yZXF1aXJlLk1hcDtcblxudmFyIFVMX1dSQVAgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFwidWxcIiwge1xuICBjbGFzc05hbWU6IGN4KCdwdWJsaWMvRHJhZnRTdHlsZURlZmF1bHQvdWwnKVxufSk7XG52YXIgT0xfV1JBUCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJvbFwiLCB7XG4gIGNsYXNzTmFtZTogY3goJ3B1YmxpYy9EcmFmdFN0eWxlRGVmYXVsdC9vbCcpXG59KTtcbnZhciBQUkVfV1JBUCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwcmVcIiwge1xuICBjbGFzc05hbWU6IGN4KCdwdWJsaWMvRHJhZnRTdHlsZURlZmF1bHQvcHJlJylcbn0pO1xudmFyIERlZmF1bHREcmFmdEJsb2NrUmVuZGVyTWFwID0gTWFwKHtcbiAgJ2hlYWRlci1vbmUnOiB7XG4gICAgZWxlbWVudDogJ2gxJ1xuICB9LFxuICAnaGVhZGVyLXR3byc6IHtcbiAgICBlbGVtZW50OiAnaDInXG4gIH0sXG4gICdoZWFkZXItdGhyZWUnOiB7XG4gICAgZWxlbWVudDogJ2gzJ1xuICB9LFxuICAnaGVhZGVyLWZvdXInOiB7XG4gICAgZWxlbWVudDogJ2g0J1xuICB9LFxuICAnaGVhZGVyLWZpdmUnOiB7XG4gICAgZWxlbWVudDogJ2g1J1xuICB9LFxuICAnaGVhZGVyLXNpeCc6IHtcbiAgICBlbGVtZW50OiAnaDYnXG4gIH0sXG4gIHNlY3Rpb246IHtcbiAgICBlbGVtZW50OiAnc2VjdGlvbidcbiAgfSxcbiAgYXJ0aWNsZToge1xuICAgIGVsZW1lbnQ6ICdhcnRpY2xlJ1xuICB9LFxuICAndW5vcmRlcmVkLWxpc3QtaXRlbSc6IHtcbiAgICBlbGVtZW50OiAnbGknLFxuICAgIHdyYXBwZXI6IFVMX1dSQVBcbiAgfSxcbiAgJ29yZGVyZWQtbGlzdC1pdGVtJzoge1xuICAgIGVsZW1lbnQ6ICdsaScsXG4gICAgd3JhcHBlcjogT0xfV1JBUFxuICB9LFxuICBibG9ja3F1b3RlOiB7XG4gICAgZWxlbWVudDogJ2Jsb2NrcXVvdGUnXG4gIH0sXG4gIGF0b21pYzoge1xuICAgIGVsZW1lbnQ6ICdmaWd1cmUnXG4gIH0sXG4gICdjb2RlLWJsb2NrJzoge1xuICAgIGVsZW1lbnQ6ICdwcmUnLFxuICAgIHdyYXBwZXI6IFBSRV9XUkFQXG4gIH0sXG4gIHVuc3R5bGVkOiB7XG4gICAgZWxlbWVudDogJ2RpdicsXG4gICAgYWxpYXNlZEVsZW1lbnRzOiBbJ3AnXVxuICB9XG59KTtcbm1vZHVsZS5leHBvcnRzID0gRGVmYXVsdERyYWZ0QmxvY2tSZW5kZXJNYXA7Il0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsImN4IiwiX3JlcXVpcmUiLCJNYXAiLCJVTF9XUkFQIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsIk9MX1dSQVAiLCJQUkVfV1JBUCIsIkRlZmF1bHREcmFmdEJsb2NrUmVuZGVyTWFwIiwiZWxlbWVudCIsInNlY3Rpb24iLCJhcnRpY2xlIiwid3JhcHBlciIsImJsb2NrcXVvdGUiLCJhdG9taWMiLCJ1bnN0eWxlZCIsImFsaWFzZWRFbGVtZW50cyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DefaultDraftBlockRenderMap.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DefaultDraftInlineStyle.js":
/*!**************************************************************!*\
  !*** ./node_modules/draft-js/lib/DefaultDraftInlineStyle.js ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nmodule.exports = {\n    BOLD: {\n        fontWeight: \"bold\"\n    },\n    CODE: {\n        fontFamily: \"monospace\",\n        wordWrap: \"break-word\"\n    },\n    ITALIC: {\n        fontStyle: \"italic\"\n    },\n    STRIKETHROUGH: {\n        textDecoration: \"line-through\"\n    },\n    UNDERLINE: {\n        textDecoration: \"underline\"\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RlZmF1bHREcmFmdElubGluZVN0eWxlLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUFBLE9BQU9DLE9BQU8sR0FBRztJQUNmQyxNQUFNO1FBQ0pDLFlBQVk7SUFDZDtJQUNBQyxNQUFNO1FBQ0pDLFlBQVk7UUFDWkMsVUFBVTtJQUNaO0lBQ0FDLFFBQVE7UUFDTkMsV0FBVztJQUNiO0lBQ0FDLGVBQWU7UUFDYkMsZ0JBQWdCO0lBQ2xCO0lBQ0FDLFdBQVc7UUFDVEQsZ0JBQWdCO0lBQ2xCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWVsLWhhcnZlc3Rlci8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvRGVmYXVsdERyYWZ0SW5saW5lU3R5bGUuanM/NmYzMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQk9MRDoge1xuICAgIGZvbnRXZWlnaHQ6ICdib2xkJ1xuICB9LFxuICBDT0RFOiB7XG4gICAgZm9udEZhbWlseTogJ21vbm9zcGFjZScsXG4gICAgd29yZFdyYXA6ICdicmVhay13b3JkJ1xuICB9LFxuICBJVEFMSUM6IHtcbiAgICBmb250U3R5bGU6ICdpdGFsaWMnXG4gIH0sXG4gIFNUUklLRVRIUk9VR0g6IHtcbiAgICB0ZXh0RGVjb3JhdGlvbjogJ2xpbmUtdGhyb3VnaCdcbiAgfSxcbiAgVU5ERVJMSU5FOiB7XG4gICAgdGV4dERlY29yYXRpb246ICd1bmRlcmxpbmUnXG4gIH1cbn07Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJCT0xEIiwiZm9udFdlaWdodCIsIkNPREUiLCJmb250RmFtaWx5Iiwid29yZFdyYXAiLCJJVEFMSUMiLCJmb250U3R5bGUiLCJTVFJJS0VUSFJPVUdIIiwidGV4dERlY29yYXRpb24iLCJVTkRFUkxJTkUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DefaultDraftInlineStyle.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/Draft.js":
/*!********************************************!*\
  !*** ./node_modules/draft-js/lib/Draft.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */ \nvar AtomicBlockUtils = __webpack_require__(/*! ./AtomicBlockUtils */ \"(ssr)/./node_modules/draft-js/lib/AtomicBlockUtils.js\");\nvar BlockMapBuilder = __webpack_require__(/*! ./BlockMapBuilder */ \"(ssr)/./node_modules/draft-js/lib/BlockMapBuilder.js\");\nvar CharacterMetadata = __webpack_require__(/*! ./CharacterMetadata */ \"(ssr)/./node_modules/draft-js/lib/CharacterMetadata.js\");\nvar CompositeDraftDecorator = __webpack_require__(/*! ./CompositeDraftDecorator */ \"(ssr)/./node_modules/draft-js/lib/CompositeDraftDecorator.js\");\nvar ContentBlock = __webpack_require__(/*! ./ContentBlock */ \"(ssr)/./node_modules/draft-js/lib/ContentBlock.js\");\nvar ContentState = __webpack_require__(/*! ./ContentState */ \"(ssr)/./node_modules/draft-js/lib/ContentState.js\");\nvar DefaultDraftBlockRenderMap = __webpack_require__(/*! ./DefaultDraftBlockRenderMap */ \"(ssr)/./node_modules/draft-js/lib/DefaultDraftBlockRenderMap.js\");\nvar DefaultDraftInlineStyle = __webpack_require__(/*! ./DefaultDraftInlineStyle */ \"(ssr)/./node_modules/draft-js/lib/DefaultDraftInlineStyle.js\");\nvar DraftEditor = __webpack_require__(/*! ./DraftEditor.react */ \"(ssr)/./node_modules/draft-js/lib/DraftEditor.react.js\");\nvar DraftEditorBlock = __webpack_require__(/*! ./DraftEditorBlock.react */ \"(ssr)/./node_modules/draft-js/lib/DraftEditorBlock.react.js\");\nvar DraftEntity = __webpack_require__(/*! ./DraftEntity */ \"(ssr)/./node_modules/draft-js/lib/DraftEntity.js\");\nvar DraftModifier = __webpack_require__(/*! ./DraftModifier */ \"(ssr)/./node_modules/draft-js/lib/DraftModifier.js\");\nvar DraftEntityInstance = __webpack_require__(/*! ./DraftEntityInstance */ \"(ssr)/./node_modules/draft-js/lib/DraftEntityInstance.js\");\nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar KeyBindingUtil = __webpack_require__(/*! ./KeyBindingUtil */ \"(ssr)/./node_modules/draft-js/lib/KeyBindingUtil.js\");\nvar RawDraftContentState = __webpack_require__(/*! ./RawDraftContentState */ \"(ssr)/./node_modules/draft-js/lib/RawDraftContentState.js\");\nvar RichTextEditorUtil = __webpack_require__(/*! ./RichTextEditorUtil */ \"(ssr)/./node_modules/draft-js/lib/RichTextEditorUtil.js\");\nvar SelectionState = __webpack_require__(/*! ./SelectionState */ \"(ssr)/./node_modules/draft-js/lib/SelectionState.js\");\nvar convertFromDraftStateToRaw = __webpack_require__(/*! ./convertFromDraftStateToRaw */ \"(ssr)/./node_modules/draft-js/lib/convertFromDraftStateToRaw.js\");\nvar convertFromRawToDraftState = __webpack_require__(/*! ./convertFromRawToDraftState */ \"(ssr)/./node_modules/draft-js/lib/convertFromRawToDraftState.js\");\nvar generateRandomKey = __webpack_require__(/*! ./generateRandomKey */ \"(ssr)/./node_modules/draft-js/lib/generateRandomKey.js\");\nvar getDefaultKeyBinding = __webpack_require__(/*! ./getDefaultKeyBinding */ \"(ssr)/./node_modules/draft-js/lib/getDefaultKeyBinding.js\");\nvar getVisibleSelectionRect = __webpack_require__(/*! ./getVisibleSelectionRect */ \"(ssr)/./node_modules/draft-js/lib/getVisibleSelectionRect.js\");\nvar convertFromHTML = __webpack_require__(/*! ./convertFromHTMLToContentBlocks */ \"(ssr)/./node_modules/draft-js/lib/convertFromHTMLToContentBlocks.js\");\nvar DraftPublic = {\n    Editor: DraftEditor,\n    EditorBlock: DraftEditorBlock,\n    EditorState: EditorState,\n    CompositeDecorator: CompositeDraftDecorator,\n    Entity: DraftEntity,\n    EntityInstance: DraftEntityInstance,\n    BlockMapBuilder: BlockMapBuilder,\n    CharacterMetadata: CharacterMetadata,\n    ContentBlock: ContentBlock,\n    ContentState: ContentState,\n    RawDraftContentState: RawDraftContentState,\n    SelectionState: SelectionState,\n    AtomicBlockUtils: AtomicBlockUtils,\n    KeyBindingUtil: KeyBindingUtil,\n    Modifier: DraftModifier,\n    RichUtils: RichTextEditorUtil,\n    DefaultDraftBlockRenderMap: DefaultDraftBlockRenderMap,\n    DefaultDraftInlineStyle: DefaultDraftInlineStyle,\n    convertFromHTML: convertFromHTML,\n    convertFromRaw: convertFromRawToDraftState,\n    convertToRaw: convertFromDraftStateToRaw,\n    genKey: generateRandomKey,\n    getDefaultKeyBinding: getDefaultKeyBinding,\n    getVisibleSelectionRect: getVisibleSelectionRect\n};\nmodule.exports = DraftPublic;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztDQVFDLEdBQ0Q7QUFFQSxJQUFJQSxtQkFBbUJDLG1CQUFPQSxDQUFDLGlGQUFvQjtBQUVuRCxJQUFJQyxrQkFBa0JELG1CQUFPQSxDQUFDLCtFQUFtQjtBQUVqRCxJQUFJRSxvQkFBb0JGLG1CQUFPQSxDQUFDLG1GQUFxQjtBQUVyRCxJQUFJRywwQkFBMEJILG1CQUFPQSxDQUFDLCtGQUEyQjtBQUVqRSxJQUFJSSxlQUFlSixtQkFBT0EsQ0FBQyx5RUFBZ0I7QUFFM0MsSUFBSUssZUFBZUwsbUJBQU9BLENBQUMseUVBQWdCO0FBRTNDLElBQUlNLDZCQUE2Qk4sbUJBQU9BLENBQUMscUdBQThCO0FBRXZFLElBQUlPLDBCQUEwQlAsbUJBQU9BLENBQUMsK0ZBQTJCO0FBRWpFLElBQUlRLGNBQWNSLG1CQUFPQSxDQUFDLG1GQUFxQjtBQUUvQyxJQUFJUyxtQkFBbUJULG1CQUFPQSxDQUFDLDZGQUEwQjtBQUV6RCxJQUFJVSxjQUFjVixtQkFBT0EsQ0FBQyx1RUFBZTtBQUV6QyxJQUFJVyxnQkFBZ0JYLG1CQUFPQSxDQUFDLDJFQUFpQjtBQUU3QyxJQUFJWSxzQkFBc0JaLG1CQUFPQSxDQUFDLHVGQUF1QjtBQUV6RCxJQUFJYSxjQUFjYixtQkFBT0EsQ0FBQyx1RUFBZTtBQUV6QyxJQUFJYyxpQkFBaUJkLG1CQUFPQSxDQUFDLDZFQUFrQjtBQUUvQyxJQUFJZSx1QkFBdUJmLG1CQUFPQSxDQUFDLHlGQUF3QjtBQUUzRCxJQUFJZ0IscUJBQXFCaEIsbUJBQU9BLENBQUMscUZBQXNCO0FBRXZELElBQUlpQixpQkFBaUJqQixtQkFBT0EsQ0FBQyw2RUFBa0I7QUFFL0MsSUFBSWtCLDZCQUE2QmxCLG1CQUFPQSxDQUFDLHFHQUE4QjtBQUV2RSxJQUFJbUIsNkJBQTZCbkIsbUJBQU9BLENBQUMscUdBQThCO0FBRXZFLElBQUlvQixvQkFBb0JwQixtQkFBT0EsQ0FBQyxtRkFBcUI7QUFFckQsSUFBSXFCLHVCQUF1QnJCLG1CQUFPQSxDQUFDLHlGQUF3QjtBQUUzRCxJQUFJc0IsMEJBQTBCdEIsbUJBQU9BLENBQUMsK0ZBQTJCO0FBRWpFLElBQUl1QixrQkFBa0J2QixtQkFBT0EsQ0FBQyw2R0FBa0M7QUFFaEUsSUFBSXdCLGNBQWM7SUFDaEJDLFFBQVFqQjtJQUNSa0IsYUFBYWpCO0lBQ2JJLGFBQWFBO0lBQ2JjLG9CQUFvQnhCO0lBQ3BCeUIsUUFBUWxCO0lBQ1JtQixnQkFBZ0JqQjtJQUNoQlgsaUJBQWlCQTtJQUNqQkMsbUJBQW1CQTtJQUNuQkUsY0FBY0E7SUFDZEMsY0FBY0E7SUFDZFUsc0JBQXNCQTtJQUN0QkUsZ0JBQWdCQTtJQUNoQmxCLGtCQUFrQkE7SUFDbEJlLGdCQUFnQkE7SUFDaEJnQixVQUFVbkI7SUFDVm9CLFdBQVdmO0lBQ1hWLDRCQUE0QkE7SUFDNUJDLHlCQUF5QkE7SUFDekJnQixpQkFBaUJBO0lBQ2pCUyxnQkFBZ0JiO0lBQ2hCYyxjQUFjZjtJQUNkZ0IsUUFBUWQ7SUFDUkMsc0JBQXNCQTtJQUN0QkMseUJBQXlCQTtBQUMzQjtBQUNBYSxPQUFPQyxPQUFPLEdBQUdaIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVlbC1oYXJ2ZXN0ZXIvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0LmpzPzQ0ZWEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQXRvbWljQmxvY2tVdGlscyA9IHJlcXVpcmUoXCIuL0F0b21pY0Jsb2NrVXRpbHNcIik7XG5cbnZhciBCbG9ja01hcEJ1aWxkZXIgPSByZXF1aXJlKFwiLi9CbG9ja01hcEJ1aWxkZXJcIik7XG5cbnZhciBDaGFyYWN0ZXJNZXRhZGF0YSA9IHJlcXVpcmUoXCIuL0NoYXJhY3Rlck1ldGFkYXRhXCIpO1xuXG52YXIgQ29tcG9zaXRlRHJhZnREZWNvcmF0b3IgPSByZXF1aXJlKFwiLi9Db21wb3NpdGVEcmFmdERlY29yYXRvclwiKTtcblxudmFyIENvbnRlbnRCbG9jayA9IHJlcXVpcmUoXCIuL0NvbnRlbnRCbG9ja1wiKTtcblxudmFyIENvbnRlbnRTdGF0ZSA9IHJlcXVpcmUoXCIuL0NvbnRlbnRTdGF0ZVwiKTtcblxudmFyIERlZmF1bHREcmFmdEJsb2NrUmVuZGVyTWFwID0gcmVxdWlyZShcIi4vRGVmYXVsdERyYWZ0QmxvY2tSZW5kZXJNYXBcIik7XG5cbnZhciBEZWZhdWx0RHJhZnRJbmxpbmVTdHlsZSA9IHJlcXVpcmUoXCIuL0RlZmF1bHREcmFmdElubGluZVN0eWxlXCIpO1xuXG52YXIgRHJhZnRFZGl0b3IgPSByZXF1aXJlKFwiLi9EcmFmdEVkaXRvci5yZWFjdFwiKTtcblxudmFyIERyYWZ0RWRpdG9yQmxvY2sgPSByZXF1aXJlKFwiLi9EcmFmdEVkaXRvckJsb2NrLnJlYWN0XCIpO1xuXG52YXIgRHJhZnRFbnRpdHkgPSByZXF1aXJlKFwiLi9EcmFmdEVudGl0eVwiKTtcblxudmFyIERyYWZ0TW9kaWZpZXIgPSByZXF1aXJlKFwiLi9EcmFmdE1vZGlmaWVyXCIpO1xuXG52YXIgRHJhZnRFbnRpdHlJbnN0YW5jZSA9IHJlcXVpcmUoXCIuL0RyYWZ0RW50aXR5SW5zdGFuY2VcIik7XG5cbnZhciBFZGl0b3JTdGF0ZSA9IHJlcXVpcmUoXCIuL0VkaXRvclN0YXRlXCIpO1xuXG52YXIgS2V5QmluZGluZ1V0aWwgPSByZXF1aXJlKFwiLi9LZXlCaW5kaW5nVXRpbFwiKTtcblxudmFyIFJhd0RyYWZ0Q29udGVudFN0YXRlID0gcmVxdWlyZShcIi4vUmF3RHJhZnRDb250ZW50U3RhdGVcIik7XG5cbnZhciBSaWNoVGV4dEVkaXRvclV0aWwgPSByZXF1aXJlKFwiLi9SaWNoVGV4dEVkaXRvclV0aWxcIik7XG5cbnZhciBTZWxlY3Rpb25TdGF0ZSA9IHJlcXVpcmUoXCIuL1NlbGVjdGlvblN0YXRlXCIpO1xuXG52YXIgY29udmVydEZyb21EcmFmdFN0YXRlVG9SYXcgPSByZXF1aXJlKFwiLi9jb252ZXJ0RnJvbURyYWZ0U3RhdGVUb1Jhd1wiKTtcblxudmFyIGNvbnZlcnRGcm9tUmF3VG9EcmFmdFN0YXRlID0gcmVxdWlyZShcIi4vY29udmVydEZyb21SYXdUb0RyYWZ0U3RhdGVcIik7XG5cbnZhciBnZW5lcmF0ZVJhbmRvbUtleSA9IHJlcXVpcmUoXCIuL2dlbmVyYXRlUmFuZG9tS2V5XCIpO1xuXG52YXIgZ2V0RGVmYXVsdEtleUJpbmRpbmcgPSByZXF1aXJlKFwiLi9nZXREZWZhdWx0S2V5QmluZGluZ1wiKTtcblxudmFyIGdldFZpc2libGVTZWxlY3Rpb25SZWN0ID0gcmVxdWlyZShcIi4vZ2V0VmlzaWJsZVNlbGVjdGlvblJlY3RcIik7XG5cbnZhciBjb252ZXJ0RnJvbUhUTUwgPSByZXF1aXJlKFwiLi9jb252ZXJ0RnJvbUhUTUxUb0NvbnRlbnRCbG9ja3NcIik7XG5cbnZhciBEcmFmdFB1YmxpYyA9IHtcbiAgRWRpdG9yOiBEcmFmdEVkaXRvcixcbiAgRWRpdG9yQmxvY2s6IERyYWZ0RWRpdG9yQmxvY2ssXG4gIEVkaXRvclN0YXRlOiBFZGl0b3JTdGF0ZSxcbiAgQ29tcG9zaXRlRGVjb3JhdG9yOiBDb21wb3NpdGVEcmFmdERlY29yYXRvcixcbiAgRW50aXR5OiBEcmFmdEVudGl0eSxcbiAgRW50aXR5SW5zdGFuY2U6IERyYWZ0RW50aXR5SW5zdGFuY2UsXG4gIEJsb2NrTWFwQnVpbGRlcjogQmxvY2tNYXBCdWlsZGVyLFxuICBDaGFyYWN0ZXJNZXRhZGF0YTogQ2hhcmFjdGVyTWV0YWRhdGEsXG4gIENvbnRlbnRCbG9jazogQ29udGVudEJsb2NrLFxuICBDb250ZW50U3RhdGU6IENvbnRlbnRTdGF0ZSxcbiAgUmF3RHJhZnRDb250ZW50U3RhdGU6IFJhd0RyYWZ0Q29udGVudFN0YXRlLFxuICBTZWxlY3Rpb25TdGF0ZTogU2VsZWN0aW9uU3RhdGUsXG4gIEF0b21pY0Jsb2NrVXRpbHM6IEF0b21pY0Jsb2NrVXRpbHMsXG4gIEtleUJpbmRpbmdVdGlsOiBLZXlCaW5kaW5nVXRpbCxcbiAgTW9kaWZpZXI6IERyYWZ0TW9kaWZpZXIsXG4gIFJpY2hVdGlsczogUmljaFRleHRFZGl0b3JVdGlsLFxuICBEZWZhdWx0RHJhZnRCbG9ja1JlbmRlck1hcDogRGVmYXVsdERyYWZ0QmxvY2tSZW5kZXJNYXAsXG4gIERlZmF1bHREcmFmdElubGluZVN0eWxlOiBEZWZhdWx0RHJhZnRJbmxpbmVTdHlsZSxcbiAgY29udmVydEZyb21IVE1MOiBjb252ZXJ0RnJvbUhUTUwsXG4gIGNvbnZlcnRGcm9tUmF3OiBjb252ZXJ0RnJvbVJhd1RvRHJhZnRTdGF0ZSxcbiAgY29udmVydFRvUmF3OiBjb252ZXJ0RnJvbURyYWZ0U3RhdGVUb1JhdyxcbiAgZ2VuS2V5OiBnZW5lcmF0ZVJhbmRvbUtleSxcbiAgZ2V0RGVmYXVsdEtleUJpbmRpbmc6IGdldERlZmF1bHRLZXlCaW5kaW5nLFxuICBnZXRWaXNpYmxlU2VsZWN0aW9uUmVjdDogZ2V0VmlzaWJsZVNlbGVjdGlvblJlY3Rcbn07XG5tb2R1bGUuZXhwb3J0cyA9IERyYWZ0UHVibGljOyJdLCJuYW1lcyI6WyJBdG9taWNCbG9ja1V0aWxzIiwicmVxdWlyZSIsIkJsb2NrTWFwQnVpbGRlciIsIkNoYXJhY3Rlck1ldGFkYXRhIiwiQ29tcG9zaXRlRHJhZnREZWNvcmF0b3IiLCJDb250ZW50QmxvY2siLCJDb250ZW50U3RhdGUiLCJEZWZhdWx0RHJhZnRCbG9ja1JlbmRlck1hcCIsIkRlZmF1bHREcmFmdElubGluZVN0eWxlIiwiRHJhZnRFZGl0b3IiLCJEcmFmdEVkaXRvckJsb2NrIiwiRHJhZnRFbnRpdHkiLCJEcmFmdE1vZGlmaWVyIiwiRHJhZnRFbnRpdHlJbnN0YW5jZSIsIkVkaXRvclN0YXRlIiwiS2V5QmluZGluZ1V0aWwiLCJSYXdEcmFmdENvbnRlbnRTdGF0ZSIsIlJpY2hUZXh0RWRpdG9yVXRpbCIsIlNlbGVjdGlvblN0YXRlIiwiY29udmVydEZyb21EcmFmdFN0YXRlVG9SYXciLCJjb252ZXJ0RnJvbVJhd1RvRHJhZnRTdGF0ZSIsImdlbmVyYXRlUmFuZG9tS2V5IiwiZ2V0RGVmYXVsdEtleUJpbmRpbmciLCJnZXRWaXNpYmxlU2VsZWN0aW9uUmVjdCIsImNvbnZlcnRGcm9tSFRNTCIsIkRyYWZ0UHVibGljIiwiRWRpdG9yIiwiRWRpdG9yQmxvY2siLCJDb21wb3NpdGVEZWNvcmF0b3IiLCJFbnRpdHkiLCJFbnRpdHlJbnN0YW5jZSIsIk1vZGlmaWVyIiwiUmljaFV0aWxzIiwiY29udmVydEZyb21SYXciLCJjb252ZXJ0VG9SYXciLCJnZW5LZXkiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/Draft.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEditor.react.js":
/*!********************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEditor.react.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @preventMunge\n * @emails oncall+draft_js\n */ \nvar _assign = __webpack_require__(/*! object-assign */ \"(ssr)/./node_modules/object-assign/index.js\");\nfunction _extends() {\n    _extends = _assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nvar DefaultDraftBlockRenderMap = __webpack_require__(/*! ./DefaultDraftBlockRenderMap */ \"(ssr)/./node_modules/draft-js/lib/DefaultDraftBlockRenderMap.js\");\nvar DefaultDraftInlineStyle = __webpack_require__(/*! ./DefaultDraftInlineStyle */ \"(ssr)/./node_modules/draft-js/lib/DefaultDraftInlineStyle.js\");\nvar DraftEditorCompositionHandler = __webpack_require__(/*! ./DraftEditorCompositionHandler */ \"(ssr)/./node_modules/draft-js/lib/DraftEditorCompositionHandler.js\");\nvar DraftEditorContents = __webpack_require__(/*! ./DraftEditorContents.react */ \"(ssr)/./node_modules/draft-js/lib/DraftEditorContents.react.js\");\nvar DraftEditorDragHandler = __webpack_require__(/*! ./DraftEditorDragHandler */ \"(ssr)/./node_modules/draft-js/lib/DraftEditorDragHandler.js\");\nvar DraftEditorEditHandler = __webpack_require__(/*! ./DraftEditorEditHandler */ \"(ssr)/./node_modules/draft-js/lib/DraftEditorEditHandler.js\");\nvar flushControlled = __webpack_require__(/*! ./DraftEditorFlushControlled */ \"(ssr)/./node_modules/draft-js/lib/DraftEditorFlushControlled.js\");\nvar DraftEditorPlaceholder = __webpack_require__(/*! ./DraftEditorPlaceholder.react */ \"(ssr)/./node_modules/draft-js/lib/DraftEditorPlaceholder.react.js\");\nvar DraftEffects = __webpack_require__(/*! ./DraftEffects */ \"(ssr)/./node_modules/draft-js/lib/DraftEffects.js\");\nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar Scroll = __webpack_require__(/*! fbjs/lib/Scroll */ \"(ssr)/./node_modules/fbjs/lib/Scroll.js\");\nvar Style = __webpack_require__(/*! fbjs/lib/Style */ \"(ssr)/./node_modules/fbjs/lib/Style.js\");\nvar UserAgent = __webpack_require__(/*! fbjs/lib/UserAgent */ \"(ssr)/./node_modules/fbjs/lib/UserAgent.js\");\nvar cx = __webpack_require__(/*! fbjs/lib/cx */ \"(ssr)/./node_modules/fbjs/lib/cx.js\");\nvar generateRandomKey = __webpack_require__(/*! ./generateRandomKey */ \"(ssr)/./node_modules/draft-js/lib/generateRandomKey.js\");\nvar getDefaultKeyBinding = __webpack_require__(/*! ./getDefaultKeyBinding */ \"(ssr)/./node_modules/draft-js/lib/getDefaultKeyBinding.js\");\nvar getScrollPosition = __webpack_require__(/*! fbjs/lib/getScrollPosition */ \"(ssr)/./node_modules/fbjs/lib/getScrollPosition.js\");\nvar gkx = __webpack_require__(/*! ./gkx */ \"(ssr)/./node_modules/draft-js/lib/gkx.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar isHTMLElement = __webpack_require__(/*! ./isHTMLElement */ \"(ssr)/./node_modules/draft-js/lib/isHTMLElement.js\");\nvar nullthrows = __webpack_require__(/*! fbjs/lib/nullthrows */ \"(ssr)/./node_modules/fbjs/lib/nullthrows.js\");\nvar isIE = UserAgent.isBrowser(\"IE\"); // IE does not support the `input` event on contentEditable, so we can't\n// observe spellcheck behavior.\nvar allowSpellCheck = !isIE; // Define a set of handler objects to correspond to each possible `mode`\n// of editor behavior.\nvar handlerMap = {\n    edit: DraftEditorEditHandler,\n    composite: DraftEditorCompositionHandler,\n    drag: DraftEditorDragHandler,\n    cut: null,\n    render: null\n};\nvar didInitODS = false;\nvar UpdateDraftEditorFlags = /*#__PURE__*/ function(_React$Component) {\n    _inheritsLoose(UpdateDraftEditorFlags, _React$Component);\n    function UpdateDraftEditorFlags() {\n        return _React$Component.apply(this, arguments) || this;\n    }\n    var _proto = UpdateDraftEditorFlags.prototype;\n    _proto.render = function render() {\n        return null;\n    };\n    _proto.componentDidMount = function componentDidMount() {\n        this._update();\n    };\n    _proto.componentDidUpdate = function componentDidUpdate() {\n        this._update();\n    };\n    _proto._update = function _update() {\n        var editor = this.props.editor;\n        /**\n     * Sometimes a render triggers a 'focus' or other event, and that will\n     * schedule a second render pass.\n     * In order to make sure the second render pass gets the latest editor\n     * state, we update it here.\n     * Example:\n     * render #1\n     * +\n     * |\n     * | cWU -> Nothing ... latestEditorState = STALE_STATE :(\n     * |\n     * | render -> this.props.editorState = FRESH_STATE\n     * | +         *and* set latestEditorState = FRESH_STATE\n     *   |\n     * | |\n     * | +--> triggers 'focus' event, calling 'handleFocus' with latestEditorState\n     * |                                                +\n     * |                                                |\n     * +>cdU -> latestEditorState = FRESH_STATE         | the 'handleFocus' call schedules render #2\n     *                                                  | with latestEditorState, which is FRESH_STATE\n     *                                                  |\n     * render #2 <--------------------------------------+\n     * +\n     * |\n     * | cwU -> nothing updates\n     * |\n     * | render -> this.props.editorState = FRESH_STATE which was passed in above\n     * |\n     * +>cdU fires and resets latestEditorState = FRESH_STATE\n     * ---\n     * Note that if we don't set latestEditorState in 'render' in the above\n     * diagram, then STALE_STATE gets passed to render #2.\n     */ editor._latestEditorState = this.props.editorState;\n        /**\n     * The reason we set this 'blockSelectEvents' flag is that  IE will fire a\n     * 'selectionChange' event when we programmatically change the selection,\n     * meaning it would trigger a new select event while we are in the middle\n     * of updating.\n     * We found that the 'selection.addRange' was what triggered the stray\n     * selectionchange event in IE.\n     * To be clear - we have not been able to reproduce specific bugs related\n     * to this stray selection event, but have recorded logs that some\n     * conditions do cause it to get bumped into during editOnSelect.\n     */ editor._blockSelectEvents = true;\n    };\n    return UpdateDraftEditorFlags;\n}(React.Component);\n/**\n * `DraftEditor` is the root editor component. It composes a `contentEditable`\n * div, and provides a wide variety of useful function props for managing the\n * state of the editor. See `DraftEditorProps` for details.\n */ var DraftEditor = /*#__PURE__*/ function(_React$Component2) {\n    _inheritsLoose(DraftEditor, _React$Component2);\n    /**\n   * Define proxies that can route events to the current handler.\n   */ function DraftEditor(props) {\n        var _this;\n        _this = _React$Component2.call(this, props) || this;\n        _defineProperty(_assertThisInitialized(_this), \"_blockSelectEvents\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_clipboard\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_handler\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_dragCount\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_internalDrag\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_editorKey\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_placeholderAccessibilityID\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_latestEditorState\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_latestCommittedEditorState\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_pendingStateFromBeforeInput\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onBeforeInput\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onBlur\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onCharacterData\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onCompositionEnd\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onCompositionStart\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onCopy\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onCut\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onDragEnd\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onDragOver\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onDragStart\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onDrop\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onInput\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onFocus\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onKeyDown\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onKeyPress\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onKeyUp\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onMouseDown\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onMouseUp\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onPaste\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_onSelect\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"editor\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"editorContainer\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"focus\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"blur\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"setMode\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"exitCurrentMode\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"restoreEditorDOM\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"setClipboard\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"getClipboard\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"getEditorKey\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"update\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"onDragEnter\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"onDragLeave\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_handleEditorContainerRef\", function(node) {\n            _this.editorContainer = node; // Instead of having a direct ref on the child, we'll grab it here.\n            // This is safe as long as the rendered structure is static (which it is).\n            // This lets the child support ref={props.editorRef} without merging refs.\n            _this.editor = node !== null ? node.firstChild : null;\n        });\n        _defineProperty(_assertThisInitialized(_this), \"focus\", function(scrollPosition) {\n            var editorState = _this.props.editorState;\n            var alreadyHasFocus = editorState.getSelection().getHasFocus();\n            var editorNode = _this.editor;\n            if (!editorNode) {\n                // once in a while people call 'focus' in a setTimeout, and the node has\n                // been deleted, so it can be null in that case.\n                return;\n            }\n            var scrollParent = Style.getScrollParent(editorNode);\n            var _ref = scrollPosition || getScrollPosition(scrollParent), x = _ref.x, y = _ref.y;\n            !isHTMLElement(editorNode) ?  true ? invariant(false, \"editorNode is not an HTMLElement\") : 0 : void 0;\n            editorNode.focus(); // Restore scroll position\n            if (scrollParent === window) {\n                window.scrollTo(x, y);\n            } else {\n                Scroll.setTop(scrollParent, y);\n            } // On Chrome and Safari, calling focus on contenteditable focuses the\n            // cursor at the first character. This is something you don't expect when\n            // you're clicking on an input element but not directly on a character.\n            // Put the cursor back where it was before the blur.\n            if (!alreadyHasFocus) {\n                _this.update(EditorState.forceSelection(editorState, editorState.getSelection()));\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"blur\", function() {\n            var editorNode = _this.editor;\n            if (!editorNode) {\n                return;\n            }\n            !isHTMLElement(editorNode) ?  true ? invariant(false, \"editorNode is not an HTMLElement\") : 0 : void 0;\n            editorNode.blur();\n        });\n        _defineProperty(_assertThisInitialized(_this), \"setMode\", function(mode) {\n            var _this$props = _this.props, onPaste = _this$props.onPaste, onCut = _this$props.onCut, onCopy = _this$props.onCopy;\n            var editHandler = _objectSpread({}, handlerMap.edit);\n            if (onPaste) {\n                /* $FlowFixMe[incompatible-type] (>=0.117.0 site=www,mobile) This comment\n         * suppresses an error found when Flow v0.117 was deployed. To see the\n         * error delete this comment and run Flow. */ editHandler.onPaste = onPaste;\n            }\n            if (onCut) {\n                editHandler.onCut = onCut;\n            }\n            if (onCopy) {\n                editHandler.onCopy = onCopy;\n            }\n            var handler = _objectSpread({}, handlerMap, {\n                edit: editHandler\n            });\n            _this._handler = handler[mode];\n        });\n        _defineProperty(_assertThisInitialized(_this), \"exitCurrentMode\", function() {\n            _this.setMode(\"edit\");\n        });\n        _defineProperty(_assertThisInitialized(_this), \"restoreEditorDOM\", function(scrollPosition) {\n            _this.setState({\n                contentsKey: _this.state.contentsKey + 1\n            }, function() {\n                _this.focus(scrollPosition);\n            });\n        });\n        _defineProperty(_assertThisInitialized(_this), \"setClipboard\", function(clipboard) {\n            _this._clipboard = clipboard;\n        });\n        _defineProperty(_assertThisInitialized(_this), \"getClipboard\", function() {\n            return _this._clipboard;\n        });\n        _defineProperty(_assertThisInitialized(_this), \"update\", function(editorState) {\n            _this._latestEditorState = editorState;\n            _this.props.onChange(editorState);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onDragEnter\", function() {\n            _this._dragCount++;\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onDragLeave\", function() {\n            _this._dragCount--;\n            if (_this._dragCount === 0) {\n                _this.exitCurrentMode();\n            }\n        });\n        _this._blockSelectEvents = false;\n        _this._clipboard = null;\n        _this._handler = null;\n        _this._dragCount = 0;\n        _this._editorKey = props.editorKey || generateRandomKey();\n        _this._placeholderAccessibilityID = \"placeholder-\" + _this._editorKey;\n        _this._latestEditorState = props.editorState;\n        _this._latestCommittedEditorState = props.editorState;\n        _this._onBeforeInput = _this._buildHandler(\"onBeforeInput\");\n        _this._onBlur = _this._buildHandler(\"onBlur\");\n        _this._onCharacterData = _this._buildHandler(\"onCharacterData\");\n        _this._onCompositionEnd = _this._buildHandler(\"onCompositionEnd\");\n        _this._onCompositionStart = _this._buildHandler(\"onCompositionStart\");\n        _this._onCopy = _this._buildHandler(\"onCopy\");\n        _this._onCut = _this._buildHandler(\"onCut\");\n        _this._onDragEnd = _this._buildHandler(\"onDragEnd\");\n        _this._onDragOver = _this._buildHandler(\"onDragOver\");\n        _this._onDragStart = _this._buildHandler(\"onDragStart\");\n        _this._onDrop = _this._buildHandler(\"onDrop\");\n        _this._onInput = _this._buildHandler(\"onInput\");\n        _this._onFocus = _this._buildHandler(\"onFocus\");\n        _this._onKeyDown = _this._buildHandler(\"onKeyDown\");\n        _this._onKeyPress = _this._buildHandler(\"onKeyPress\");\n        _this._onKeyUp = _this._buildHandler(\"onKeyUp\");\n        _this._onMouseDown = _this._buildHandler(\"onMouseDown\");\n        _this._onMouseUp = _this._buildHandler(\"onMouseUp\");\n        _this._onPaste = _this._buildHandler(\"onPaste\");\n        _this._onSelect = _this._buildHandler(\"onSelect\");\n        _this.getEditorKey = function() {\n            return _this._editorKey;\n        };\n        if (true) {\n            [\n                \"onDownArrow\",\n                \"onEscape\",\n                \"onLeftArrow\",\n                \"onRightArrow\",\n                \"onTab\",\n                \"onUpArrow\"\n            ].forEach(function(propName) {\n                if (props.hasOwnProperty(propName)) {\n                    // eslint-disable-next-line no-console\n                    console.warn(\"Supplying an `\".concat(propName, \"` prop to `DraftEditor` has \") + \"been deprecated. If your handler needs access to the keyboard \" + \"event, supply a custom `keyBindingFn` prop that falls back to \" + \"the default one (eg. https://is.gd/wHKQ3W).\");\n                }\n            });\n        } // See `restoreEditorDOM()`.\n        _this.state = {\n            contentsKey: 0\n        };\n        return _this;\n    }\n    /**\n   * Build a method that will pass the event to the specified handler method.\n   * This allows us to look up the correct handler function for the current\n   * editor mode, if any has been specified.\n   */ var _proto2 = DraftEditor.prototype;\n    _proto2._buildHandler = function _buildHandler(eventName) {\n        var _this2 = this;\n        // Wrap event handlers in `flushControlled`. In sync mode, this is\n        // effectively a no-op. In async mode, this ensures all updates scheduled\n        // inside the handler are flushed before React yields to the browser.\n        return function(e) {\n            if (!_this2.props.readOnly) {\n                var method = _this2._handler && _this2._handler[eventName];\n                if (method) {\n                    if (flushControlled) {\n                        flushControlled(function() {\n                            return method(_this2, e);\n                        });\n                    } else {\n                        method(_this2, e);\n                    }\n                }\n            }\n        };\n    };\n    _proto2._showPlaceholder = function _showPlaceholder() {\n        return !!this.props.placeholder && !this.props.editorState.isInCompositionMode() && !this.props.editorState.getCurrentContent().hasText();\n    };\n    _proto2._renderPlaceholder = function _renderPlaceholder() {\n        if (this._showPlaceholder()) {\n            var placeHolderProps = {\n                text: nullthrows(this.props.placeholder),\n                editorState: this.props.editorState,\n                textAlignment: this.props.textAlignment,\n                accessibilityID: this._placeholderAccessibilityID\n            };\n            /* $FlowFixMe[incompatible-type] (>=0.112.0 site=www,mobile) This comment\n       * suppresses an error found when Flow v0.112 was deployed. To see the\n       * error delete this comment and run Flow. */ return React.createElement(DraftEditorPlaceholder, placeHolderProps);\n        }\n        return null;\n    } /**\n   * returns ariaDescribedBy prop with '{{editor_id_placeholder}}' replaced with\n   * the DOM id of the placeholder (if it exists)\n   * @returns aria-describedby attribute value\n   */ ;\n    _proto2._renderARIADescribedBy = function _renderARIADescribedBy() {\n        var describedBy = this.props.ariaDescribedBy || \"\";\n        var placeholderID = this._showPlaceholder() ? this._placeholderAccessibilityID : \"\";\n        return describedBy.replace(\"{{editor_id_placeholder}}\", placeholderID) || undefined;\n    };\n    _proto2.render = function render() {\n        var _this$props2 = this.props, blockRenderMap = _this$props2.blockRenderMap, blockRendererFn = _this$props2.blockRendererFn, blockStyleFn = _this$props2.blockStyleFn, customStyleFn = _this$props2.customStyleFn, customStyleMap = _this$props2.customStyleMap, editorState = _this$props2.editorState, preventScroll = _this$props2.preventScroll, readOnly = _this$props2.readOnly, textAlignment = _this$props2.textAlignment, textDirectionality = _this$props2.textDirectionality;\n        var rootClass = cx({\n            \"DraftEditor/root\": true,\n            \"DraftEditor/alignLeft\": textAlignment === \"left\",\n            \"DraftEditor/alignRight\": textAlignment === \"right\",\n            \"DraftEditor/alignCenter\": textAlignment === \"center\"\n        });\n        var contentStyle = {\n            outline: \"none\",\n            // fix parent-draggable Safari bug. #1326\n            userSelect: \"text\",\n            WebkitUserSelect: \"text\",\n            whiteSpace: \"pre-wrap\",\n            wordWrap: \"break-word\"\n        }; // The aria-expanded and aria-haspopup properties should only be rendered\n        // for a combobox.\n        /* $FlowFixMe[prop-missing] (>=0.68.0 site=www,mobile) This comment\n     * suppresses an error found when Flow v0.68 was deployed. To see the error\n     * delete this comment and run Flow. */ var ariaRole = this.props.role || \"textbox\";\n        var ariaExpanded = ariaRole === \"combobox\" ? !!this.props.ariaExpanded : null;\n        var editorContentsProps = {\n            blockRenderMap: blockRenderMap,\n            blockRendererFn: blockRendererFn,\n            blockStyleFn: blockStyleFn,\n            customStyleMap: _objectSpread({}, DefaultDraftInlineStyle, customStyleMap),\n            customStyleFn: customStyleFn,\n            editorKey: this._editorKey,\n            editorState: editorState,\n            preventScroll: preventScroll,\n            textDirectionality: textDirectionality\n        };\n        return React.createElement(\"div\", {\n            className: rootClass\n        }, this._renderPlaceholder(), React.createElement(\"div\", {\n            className: cx(\"DraftEditor/editorContainer\"),\n            ref: this._handleEditorContainerRef\n        }, React.createElement(\"div\", {\n            \"aria-activedescendant\": readOnly ? null : this.props.ariaActiveDescendantID,\n            \"aria-autocomplete\": readOnly ? null : this.props.ariaAutoComplete,\n            \"aria-controls\": readOnly ? null : this.props.ariaControls,\n            \"aria-describedby\": this._renderARIADescribedBy(),\n            \"aria-expanded\": readOnly ? null : ariaExpanded,\n            \"aria-label\": this.props.ariaLabel,\n            \"aria-labelledby\": this.props.ariaLabelledBy,\n            \"aria-multiline\": this.props.ariaMultiline,\n            \"aria-owns\": readOnly ? null : this.props.ariaOwneeID,\n            autoCapitalize: this.props.autoCapitalize,\n            autoComplete: this.props.autoComplete,\n            autoCorrect: this.props.autoCorrect,\n            className: cx({\n                // Chrome's built-in translation feature mutates the DOM in ways\n                // that Draft doesn't expect (ex: adding <font> tags inside\n                // DraftEditorLeaf spans) and causes problems. We add notranslate\n                // here which makes its autotranslation skip over this subtree.\n                notranslate: !readOnly,\n                \"public/DraftEditor/content\": true\n            }),\n            contentEditable: !readOnly,\n            \"data-testid\": this.props.webDriverTestID,\n            onBeforeInput: this._onBeforeInput,\n            onBlur: this._onBlur,\n            onCompositionEnd: this._onCompositionEnd,\n            onCompositionStart: this._onCompositionStart,\n            onCopy: this._onCopy,\n            onCut: this._onCut,\n            onDragEnd: this._onDragEnd,\n            onDragEnter: this.onDragEnter,\n            onDragLeave: this.onDragLeave,\n            onDragOver: this._onDragOver,\n            onDragStart: this._onDragStart,\n            onDrop: this._onDrop,\n            onFocus: this._onFocus,\n            onInput: this._onInput,\n            onKeyDown: this._onKeyDown,\n            onKeyPress: this._onKeyPress,\n            onKeyUp: this._onKeyUp,\n            onMouseUp: this._onMouseUp,\n            onPaste: this._onPaste,\n            onSelect: this._onSelect,\n            ref: this.props.editorRef,\n            role: readOnly ? null : ariaRole,\n            spellCheck: allowSpellCheck && this.props.spellCheck,\n            style: contentStyle,\n            suppressContentEditableWarning: true,\n            tabIndex: this.props.tabIndex\n        }, React.createElement(UpdateDraftEditorFlags, {\n            editor: this,\n            editorState: editorState\n        }), React.createElement(DraftEditorContents, _extends({}, editorContentsProps, {\n            key: \"contents\" + this.state.contentsKey\n        })))));\n    };\n    _proto2.componentDidMount = function componentDidMount() {\n        this._blockSelectEvents = false;\n        if (!didInitODS && gkx(\"draft_ods_enabled\")) {\n            didInitODS = true;\n            DraftEffects.initODS();\n        }\n        this.setMode(\"edit\");\n        /**\n     * IE has a hardcoded \"feature\" that attempts to convert link text into\n     * anchors in contentEditable DOM. This breaks the editor's expectations of\n     * the DOM, and control is lost. Disable it to make IE behave.\n     * See: http://blogs.msdn.com/b/ieinternals/archive/2010/09/15/\n     * ie9-beta-minor-change-list.aspx\n     */ if (isIE) {\n            // editor can be null after mounting\n            // https://stackoverflow.com/questions/44074747/componentdidmount-called-before-ref-callback\n            if (!this.editor) {\n                global.execCommand(\"AutoUrlDetect\", false, false);\n            } else {\n                this.editor.ownerDocument.execCommand(\"AutoUrlDetect\", false, false);\n            }\n        }\n    };\n    _proto2.componentDidUpdate = function componentDidUpdate() {\n        this._blockSelectEvents = false;\n        this._latestEditorState = this.props.editorState;\n        this._latestCommittedEditorState = this.props.editorState;\n    } /**\n   * Used via `this.focus()`.\n   *\n   * Force focus back onto the editor node.\n   *\n   * We attempt to preserve scroll position when focusing. You can also pass\n   * a specified scroll position (for cases like `cut` behavior where it should\n   * be restored to a known position).\n   */ ;\n    return DraftEditor;\n}(React.Component);\n_defineProperty(DraftEditor, \"defaultProps\", {\n    ariaDescribedBy: \"{{editor_id_placeholder}}\",\n    blockRenderMap: DefaultDraftBlockRenderMap,\n    blockRendererFn: function blockRendererFn() {\n        return null;\n    },\n    blockStyleFn: function blockStyleFn() {\n        return \"\";\n    },\n    keyBindingFn: getDefaultKeyBinding,\n    readOnly: false,\n    spellCheck: false,\n    stripPastedStyles: false\n});\nmodule.exports = DraftEditor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEditor.react.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEditorBlock.react.js":
/*!*************************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEditorBlock.react.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar _assign = __webpack_require__(/*! object-assign */ \"(ssr)/./node_modules/object-assign/index.js\");\nfunction _extends() {\n    _extends = _assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar DraftEditorLeaf = __webpack_require__(/*! ./DraftEditorLeaf.react */ \"(ssr)/./node_modules/draft-js/lib/DraftEditorLeaf.react.js\");\nvar DraftOffsetKey = __webpack_require__(/*! ./DraftOffsetKey */ \"(ssr)/./node_modules/draft-js/lib/DraftOffsetKey.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar Scroll = __webpack_require__(/*! fbjs/lib/Scroll */ \"(ssr)/./node_modules/fbjs/lib/Scroll.js\");\nvar Style = __webpack_require__(/*! fbjs/lib/Style */ \"(ssr)/./node_modules/fbjs/lib/Style.js\");\nvar UnicodeBidi = __webpack_require__(/*! fbjs/lib/UnicodeBidi */ \"(ssr)/./node_modules/fbjs/lib/UnicodeBidi.js\");\nvar UnicodeBidiDirection = __webpack_require__(/*! fbjs/lib/UnicodeBidiDirection */ \"(ssr)/./node_modules/fbjs/lib/UnicodeBidiDirection.js\");\nvar cx = __webpack_require__(/*! fbjs/lib/cx */ \"(ssr)/./node_modules/fbjs/lib/cx.js\");\nvar getElementPosition = __webpack_require__(/*! fbjs/lib/getElementPosition */ \"(ssr)/./node_modules/fbjs/lib/getElementPosition.js\");\nvar getScrollPosition = __webpack_require__(/*! fbjs/lib/getScrollPosition */ \"(ssr)/./node_modules/fbjs/lib/getScrollPosition.js\");\nvar getViewportDimensions = __webpack_require__(/*! fbjs/lib/getViewportDimensions */ \"(ssr)/./node_modules/fbjs/lib/getViewportDimensions.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar isHTMLElement = __webpack_require__(/*! ./isHTMLElement */ \"(ssr)/./node_modules/draft-js/lib/isHTMLElement.js\");\nvar nullthrows = __webpack_require__(/*! fbjs/lib/nullthrows */ \"(ssr)/./node_modules/fbjs/lib/nullthrows.js\");\nvar SCROLL_BUFFER = 10;\n/**\n * Return whether a block overlaps with either edge of the `SelectionState`.\n */ var isBlockOnSelectionEdge = function isBlockOnSelectionEdge(selection, key) {\n    return selection.getAnchorKey() === key || selection.getFocusKey() === key;\n};\n/**\n * The default block renderer for a `DraftEditor` component.\n *\n * A `DraftEditorBlock` is able to render a given `ContentBlock` to its\n * appropriate decorator and inline style components.\n */ var DraftEditorBlock = /*#__PURE__*/ function(_React$Component) {\n    _inheritsLoose(DraftEditorBlock, _React$Component);\n    function DraftEditorBlock() {\n        var _this;\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _React$Component.call.apply(_React$Component, [\n            this\n        ].concat(args)) || this;\n        _defineProperty(_assertThisInitialized(_this), \"_node\", void 0);\n        return _this;\n    }\n    var _proto = DraftEditorBlock.prototype;\n    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n        return this.props.block !== nextProps.block || this.props.tree !== nextProps.tree || this.props.direction !== nextProps.direction || isBlockOnSelectionEdge(nextProps.selection, nextProps.block.getKey()) && nextProps.forceSelection;\n    } /**\n   * When a block is mounted and overlaps the selection state, we need to make\n   * sure that the cursor is visible to match native behavior. This may not\n   * be the case if the user has pressed `RETURN` or pasted some content, since\n   * programmatically creating these new blocks and setting the DOM selection\n   * will miss out on the browser natively scrolling to that position.\n   *\n   * To replicate native behavior, if the block overlaps the selection state\n   * on mount, force the scroll position. Check the scroll state of the scroll\n   * parent, and adjust it to align the entire block to the bottom of the\n   * scroll parent.\n   */ ;\n    _proto.componentDidMount = function componentDidMount() {\n        if (this.props.preventScroll) {\n            return;\n        }\n        var selection = this.props.selection;\n        var endKey = selection.getEndKey();\n        if (!selection.getHasFocus() || endKey !== this.props.block.getKey()) {\n            return;\n        }\n        var blockNode = this._node;\n        if (blockNode == null) {\n            return;\n        }\n        var scrollParent = Style.getScrollParent(blockNode);\n        var scrollPosition = getScrollPosition(scrollParent);\n        var scrollDelta;\n        if (scrollParent === window) {\n            var nodePosition = getElementPosition(blockNode);\n            var nodeBottom = nodePosition.y + nodePosition.height;\n            var viewportHeight = getViewportDimensions().height;\n            scrollDelta = nodeBottom - viewportHeight;\n            if (scrollDelta > 0) {\n                window.scrollTo(scrollPosition.x, scrollPosition.y + scrollDelta + SCROLL_BUFFER);\n            }\n        } else {\n            !isHTMLElement(blockNode) ?  true ? invariant(false, \"blockNode is not an HTMLElement\") : 0 : void 0;\n            var blockBottom = blockNode.offsetHeight + blockNode.offsetTop;\n            var pOffset = scrollParent.offsetTop + scrollParent.offsetHeight;\n            var scrollBottom = pOffset + scrollPosition.y;\n            scrollDelta = blockBottom - scrollBottom;\n            if (scrollDelta > 0) {\n                Scroll.setTop(scrollParent, Scroll.getTop(scrollParent) + scrollDelta + SCROLL_BUFFER);\n            }\n        }\n    };\n    _proto._renderChildren = function _renderChildren() {\n        var _this2 = this;\n        var block = this.props.block;\n        var blockKey = block.getKey();\n        var text = block.getText();\n        var lastLeafSet = this.props.tree.size - 1;\n        var hasSelection = isBlockOnSelectionEdge(this.props.selection, blockKey);\n        return this.props.tree.map(function(leafSet, ii) {\n            var leavesForLeafSet = leafSet.get(\"leaves\"); // T44088704\n            if (leavesForLeafSet.size === 0) {\n                return null;\n            }\n            var lastLeaf = leavesForLeafSet.size - 1;\n            var leaves = leavesForLeafSet.map(function(leaf, jj) {\n                var offsetKey = DraftOffsetKey.encode(blockKey, ii, jj);\n                var start = leaf.get(\"start\");\n                var end = leaf.get(\"end\");\n                return React.createElement(DraftEditorLeaf, {\n                    key: offsetKey,\n                    offsetKey: offsetKey,\n                    block: block,\n                    start: start,\n                    selection: hasSelection ? _this2.props.selection : null,\n                    forceSelection: _this2.props.forceSelection,\n                    text: text.slice(start, end),\n                    styleSet: block.getInlineStyleAt(start),\n                    customStyleMap: _this2.props.customStyleMap,\n                    customStyleFn: _this2.props.customStyleFn,\n                    isLast: ii === lastLeafSet && jj === lastLeaf\n                });\n            }).toArray();\n            var decoratorKey = leafSet.get(\"decoratorKey\");\n            if (decoratorKey == null) {\n                return leaves;\n            }\n            if (!_this2.props.decorator) {\n                return leaves;\n            }\n            var decorator = nullthrows(_this2.props.decorator);\n            var DecoratorComponent = decorator.getComponentForKey(decoratorKey);\n            if (!DecoratorComponent) {\n                return leaves;\n            }\n            var decoratorProps = decorator.getPropsForKey(decoratorKey);\n            var decoratorOffsetKey = DraftOffsetKey.encode(blockKey, ii, 0);\n            var start = leavesForLeafSet.first().get(\"start\");\n            var end = leavesForLeafSet.last().get(\"end\");\n            var decoratedText = text.slice(start, end);\n            var entityKey = block.getEntityAt(leafSet.get(\"start\")); // Resetting dir to the same value on a child node makes Chrome/Firefox\n            // confused on cursor movement. See http://jsfiddle.net/d157kLck/3/\n            var dir = UnicodeBidiDirection.getHTMLDirIfDifferent(UnicodeBidi.getDirection(decoratedText), _this2.props.direction);\n            var commonProps = {\n                contentState: _this2.props.contentState,\n                decoratedText: decoratedText,\n                dir: dir,\n                start: start,\n                end: end,\n                blockKey: blockKey,\n                entityKey: entityKey,\n                offsetKey: decoratorOffsetKey\n            };\n            return React.createElement(DecoratorComponent, _extends({}, decoratorProps, commonProps, {\n                key: decoratorOffsetKey\n            }), leaves);\n        }).toArray();\n    };\n    _proto.render = function render() {\n        var _this3 = this;\n        var _this$props = this.props, direction = _this$props.direction, offsetKey = _this$props.offsetKey;\n        var className = cx({\n            \"public/DraftStyleDefault/block\": true,\n            \"public/DraftStyleDefault/ltr\": direction === \"LTR\",\n            \"public/DraftStyleDefault/rtl\": direction === \"RTL\"\n        });\n        return React.createElement(\"div\", {\n            \"data-offset-key\": offsetKey,\n            className: className,\n            ref: function ref(_ref) {\n                return _this3._node = _ref;\n            }\n        }, this._renderChildren());\n    };\n    return DraftEditorBlock;\n}(React.Component);\nmodule.exports = DraftEditorBlock;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEditorBlock.react.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEditorBlockNode.react.js":
/*!*****************************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEditorBlockNode.react.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n *\n * This file is a fork of DraftEditorBlock.react.js and DraftEditorContents.react.js\n *\n * This is unstable and not part of the public API and should not be used by\n * production systems. This file may be update/removed without notice.\n */ \nvar _assign = __webpack_require__(/*! object-assign */ \"(ssr)/./node_modules/object-assign/index.js\");\nfunction _extends() {\n    _extends = _assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar DraftEditorNode = __webpack_require__(/*! ./DraftEditorNode.react */ \"(ssr)/./node_modules/draft-js/lib/DraftEditorNode.react.js\");\nvar DraftOffsetKey = __webpack_require__(/*! ./DraftOffsetKey */ \"(ssr)/./node_modules/draft-js/lib/DraftOffsetKey.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar Scroll = __webpack_require__(/*! fbjs/lib/Scroll */ \"(ssr)/./node_modules/fbjs/lib/Scroll.js\");\nvar Style = __webpack_require__(/*! fbjs/lib/Style */ \"(ssr)/./node_modules/fbjs/lib/Style.js\");\nvar getElementPosition = __webpack_require__(/*! fbjs/lib/getElementPosition */ \"(ssr)/./node_modules/fbjs/lib/getElementPosition.js\");\nvar getScrollPosition = __webpack_require__(/*! fbjs/lib/getScrollPosition */ \"(ssr)/./node_modules/fbjs/lib/getScrollPosition.js\");\nvar getViewportDimensions = __webpack_require__(/*! fbjs/lib/getViewportDimensions */ \"(ssr)/./node_modules/fbjs/lib/getViewportDimensions.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar isHTMLElement = __webpack_require__(/*! ./isHTMLElement */ \"(ssr)/./node_modules/draft-js/lib/isHTMLElement.js\");\nvar SCROLL_BUFFER = 10;\nvar List = Immutable.List; // we should harden up the bellow flow types to make them more strict\n/**\n * Return whether a block overlaps with either edge of the `SelectionState`.\n */ var isBlockOnSelectionEdge = function isBlockOnSelectionEdge(selection, key) {\n    return selection.getAnchorKey() === key || selection.getFocusKey() === key;\n};\n/**\n * We will use this helper to identify blocks that need to be wrapped but have siblings that\n * also share the same wrapper element, this way we can do the wrapping once the last sibling\n * is added.\n */ var shouldNotAddWrapperElement = function shouldNotAddWrapperElement(block, contentState) {\n    var nextSiblingKey = block.getNextSiblingKey();\n    return nextSiblingKey ? contentState.getBlockForKey(nextSiblingKey).getType() === block.getType() : false;\n};\nvar applyWrapperElementToSiblings = function applyWrapperElementToSiblings(wrapperTemplate, Element, nodes) {\n    var wrappedSiblings = []; // we check back until we find a sibling that does not have same wrapper\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n    try {\n        for(var _iterator = nodes.reverse()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var sibling = _step.value;\n            if (sibling.type !== Element) {\n                break;\n            }\n            wrappedSiblings.push(sibling);\n        } // we now should remove from acc the wrappedSiblings and add them back under same wrap\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n                _iterator[\"return\"]();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    nodes.splice(nodes.indexOf(wrappedSiblings[0]), wrappedSiblings.length + 1);\n    var childrenIs = wrappedSiblings.reverse();\n    var key = childrenIs[0].key;\n    nodes.push(React.cloneElement(wrapperTemplate, {\n        key: \"\".concat(key, \"-wrap\"),\n        \"data-offset-key\": DraftOffsetKey.encode(key, 0, 0)\n    }, childrenIs));\n    return nodes;\n};\nvar getDraftRenderConfig = function getDraftRenderConfig(block, blockRenderMap) {\n    var configForType = blockRenderMap.get(block.getType()) || blockRenderMap.get(\"unstyled\");\n    var wrapperTemplate = configForType.wrapper;\n    var Element = configForType.element || blockRenderMap.get(\"unstyled\").element;\n    return {\n        Element: Element,\n        wrapperTemplate: wrapperTemplate\n    };\n};\nvar getCustomRenderConfig = function getCustomRenderConfig(block, blockRendererFn) {\n    var customRenderer = blockRendererFn(block);\n    if (!customRenderer) {\n        return {};\n    }\n    var CustomComponent = customRenderer.component, customProps = customRenderer.props, customEditable = customRenderer.editable;\n    return {\n        CustomComponent: CustomComponent,\n        customProps: customProps,\n        customEditable: customEditable\n    };\n};\nvar getElementPropsConfig = function getElementPropsConfig(block, editorKey, offsetKey, blockStyleFn, customConfig, ref) {\n    var elementProps = {\n        \"data-block\": true,\n        \"data-editor\": editorKey,\n        \"data-offset-key\": offsetKey,\n        key: block.getKey(),\n        ref: ref\n    };\n    var customClass = blockStyleFn(block);\n    if (customClass) {\n        elementProps.className = customClass;\n    }\n    if (customConfig.customEditable !== undefined) {\n        elementProps = _objectSpread({}, elementProps, {\n            contentEditable: customConfig.customEditable,\n            suppressContentEditableWarning: true\n        });\n    }\n    return elementProps;\n};\nvar DraftEditorBlockNode = /*#__PURE__*/ function(_React$Component) {\n    _inheritsLoose(DraftEditorBlockNode, _React$Component);\n    function DraftEditorBlockNode() {\n        var _this;\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _React$Component.call.apply(_React$Component, [\n            this\n        ].concat(args)) || this;\n        _defineProperty(_assertThisInitialized(_this), \"wrapperRef\", React.createRef());\n        return _this;\n    }\n    var _proto = DraftEditorBlockNode.prototype;\n    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n        var _this$props = this.props, block = _this$props.block, direction = _this$props.direction, tree = _this$props.tree;\n        var isContainerNode = !block.getChildKeys().isEmpty();\n        var blockHasChanged = block !== nextProps.block || tree !== nextProps.tree || direction !== nextProps.direction || isBlockOnSelectionEdge(nextProps.selection, nextProps.block.getKey()) && nextProps.forceSelection; // if we have children at this stage we always re-render container nodes\n        // else if its a root node we avoid re-rendering by checking for block updates\n        return isContainerNode || blockHasChanged;\n    } /**\n   * When a block is mounted and overlaps the selection state, we need to make\n   * sure that the cursor is visible to match native behavior. This may not\n   * be the case if the user has pressed `RETURN` or pasted some content, since\n   * programatically creating these new blocks and setting the DOM selection\n   * will miss out on the browser natively scrolling to that position.\n   *\n   * To replicate native behavior, if the block overlaps the selection state\n   * on mount, force the scroll position. Check the scroll state of the scroll\n   * parent, and adjust it to align the entire block to the bottom of the\n   * scroll parent.\n   */ ;\n    _proto.componentDidMount = function componentDidMount() {\n        var selection = this.props.selection;\n        var endKey = selection.getEndKey();\n        if (!selection.getHasFocus() || endKey !== this.props.block.getKey()) {\n            return;\n        }\n        var blockNode = this.wrapperRef.current;\n        if (!blockNode) {\n            // This Block Node was rendered without a wrapper element.\n            return;\n        }\n        var scrollParent = Style.getScrollParent(blockNode);\n        var scrollPosition = getScrollPosition(scrollParent);\n        var scrollDelta;\n        if (scrollParent === window) {\n            var nodePosition = getElementPosition(blockNode);\n            var nodeBottom = nodePosition.y + nodePosition.height;\n            var viewportHeight = getViewportDimensions().height;\n            scrollDelta = nodeBottom - viewportHeight;\n            if (scrollDelta > 0) {\n                window.scrollTo(scrollPosition.x, scrollPosition.y + scrollDelta + SCROLL_BUFFER);\n            }\n        } else {\n            !isHTMLElement(blockNode) ?  true ? invariant(false, \"blockNode is not an HTMLElement\") : 0 : void 0;\n            var htmlBlockNode = blockNode;\n            var blockBottom = htmlBlockNode.offsetHeight + htmlBlockNode.offsetTop;\n            var scrollBottom = scrollParent.offsetHeight + scrollPosition.y;\n            scrollDelta = blockBottom - scrollBottom;\n            if (scrollDelta > 0) {\n                Scroll.setTop(scrollParent, Scroll.getTop(scrollParent) + scrollDelta + SCROLL_BUFFER);\n            }\n        }\n    };\n    _proto.render = function render() {\n        var _this2 = this;\n        var _this$props2 = this.props, block = _this$props2.block, blockRenderMap = _this$props2.blockRenderMap, blockRendererFn = _this$props2.blockRendererFn, blockStyleFn = _this$props2.blockStyleFn, contentState = _this$props2.contentState, decorator = _this$props2.decorator, editorKey = _this$props2.editorKey, editorState = _this$props2.editorState, customStyleFn = _this$props2.customStyleFn, customStyleMap = _this$props2.customStyleMap, direction = _this$props2.direction, forceSelection = _this$props2.forceSelection, selection = _this$props2.selection, tree = _this$props2.tree;\n        var children = null;\n        if (block.children.size) {\n            children = block.children.reduce(function(acc, key) {\n                var offsetKey = DraftOffsetKey.encode(key, 0, 0);\n                var child = contentState.getBlockForKey(key);\n                var customConfig = getCustomRenderConfig(child, blockRendererFn);\n                var Component = customConfig.CustomComponent || DraftEditorBlockNode;\n                var _getDraftRenderConfig = getDraftRenderConfig(child, blockRenderMap), Element = _getDraftRenderConfig.Element, wrapperTemplate = _getDraftRenderConfig.wrapperTemplate;\n                var elementProps = getElementPropsConfig(child, editorKey, offsetKey, blockStyleFn, customConfig, null);\n                var childProps = _objectSpread({}, _this2.props, {\n                    tree: editorState.getBlockTree(key),\n                    blockProps: customConfig.customProps,\n                    offsetKey: offsetKey,\n                    block: child\n                });\n                acc.push(React.createElement(Element, elementProps, React.createElement(Component, childProps)));\n                if (!wrapperTemplate || shouldNotAddWrapperElement(child, contentState)) {\n                    return acc;\n                } // if we are here it means we are the last block\n                // that has a wrapperTemplate so we should wrap itself\n                // and all other previous siblings that share the same wrapper\n                applyWrapperElementToSiblings(wrapperTemplate, Element, acc);\n                return acc;\n            }, []);\n        }\n        var blockKey = block.getKey();\n        var offsetKey = DraftOffsetKey.encode(blockKey, 0, 0);\n        var customConfig = getCustomRenderConfig(block, blockRendererFn);\n        var Component = customConfig.CustomComponent;\n        var blockNode = Component != null ? React.createElement(Component, _extends({}, this.props, {\n            tree: editorState.getBlockTree(blockKey),\n            blockProps: customConfig.customProps,\n            offsetKey: offsetKey,\n            block: block\n        })) : React.createElement(DraftEditorNode, {\n            block: block,\n            children: children,\n            contentState: contentState,\n            customStyleFn: customStyleFn,\n            customStyleMap: customStyleMap,\n            decorator: decorator,\n            direction: direction,\n            forceSelection: forceSelection,\n            hasSelection: isBlockOnSelectionEdge(selection, blockKey),\n            selection: selection,\n            tree: tree\n        });\n        if (block.getParentKey()) {\n            return blockNode;\n        }\n        var _getDraftRenderConfig2 = getDraftRenderConfig(block, blockRenderMap), Element = _getDraftRenderConfig2.Element;\n        var elementProps = getElementPropsConfig(block, editorKey, offsetKey, blockStyleFn, customConfig, this.wrapperRef); // root block nodes needs to be wrapped\n        return React.createElement(Element, elementProps, blockNode);\n    };\n    return DraftEditorBlockNode;\n}(React.Component);\nmodule.exports = DraftEditorBlockNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEditorBlockNode.react.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEditorCompositionHandler.js":
/*!********************************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEditorCompositionHandler.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DOMObserver = __webpack_require__(/*! ./DOMObserver */ \"(ssr)/./node_modules/draft-js/lib/DOMObserver.js\");\nvar DraftModifier = __webpack_require__(/*! ./DraftModifier */ \"(ssr)/./node_modules/draft-js/lib/DraftModifier.js\");\nvar DraftOffsetKey = __webpack_require__(/*! ./DraftOffsetKey */ \"(ssr)/./node_modules/draft-js/lib/DraftOffsetKey.js\");\nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar Keys = __webpack_require__(/*! fbjs/lib/Keys */ \"(ssr)/./node_modules/fbjs/lib/Keys.js\");\nvar UserAgent = __webpack_require__(/*! fbjs/lib/UserAgent */ \"(ssr)/./node_modules/fbjs/lib/UserAgent.js\");\nvar editOnSelect = __webpack_require__(/*! ./editOnSelect */ \"(ssr)/./node_modules/draft-js/lib/editOnSelect.js\");\nvar getContentEditableContainer = __webpack_require__(/*! ./getContentEditableContainer */ \"(ssr)/./node_modules/draft-js/lib/getContentEditableContainer.js\");\nvar getDraftEditorSelection = __webpack_require__(/*! ./getDraftEditorSelection */ \"(ssr)/./node_modules/draft-js/lib/getDraftEditorSelection.js\");\nvar getEntityKeyForSelection = __webpack_require__(/*! ./getEntityKeyForSelection */ \"(ssr)/./node_modules/draft-js/lib/getEntityKeyForSelection.js\");\nvar nullthrows = __webpack_require__(/*! fbjs/lib/nullthrows */ \"(ssr)/./node_modules/fbjs/lib/nullthrows.js\");\nvar isIE = UserAgent.isBrowser(\"IE\");\n/**\n * Millisecond delay to allow `compositionstart` to fire again upon\n * `compositionend`.\n *\n * This is used for Korean input to ensure that typing can continue without\n * the editor trying to render too quickly. More specifically, Safari 7.1+\n * triggers `compositionstart` a little slower than Chrome/FF, which\n * leads to composed characters being resolved and re-render occurring\n * sooner than we want.\n */ var RESOLVE_DELAY = 20;\n/**\n * A handful of variables used to track the current composition and its\n * resolution status. These exist at the module level because it is not\n * possible to have compositions occurring in multiple editors simultaneously,\n * and it simplifies state management with respect to the DraftEditor component.\n */ var resolved = false;\nvar stillComposing = false;\nvar domObserver = null;\nfunction startDOMObserver(editor) {\n    if (!domObserver) {\n        domObserver = new DOMObserver(getContentEditableContainer(editor));\n        domObserver.start();\n    }\n}\nvar DraftEditorCompositionHandler = {\n    /**\n   * A `compositionstart` event has fired while we're still in composition\n   * mode. Continue the current composition session to prevent a re-render.\n   */ onCompositionStart: function onCompositionStart(editor) {\n        stillComposing = true;\n        startDOMObserver(editor);\n    },\n    /**\n   * Attempt to end the current composition session.\n   *\n   * Defer handling because browser will still insert the chars into active\n   * element after `compositionend`. If a `compositionstart` event fires\n   * before `resolveComposition` executes, our composition session will\n   * continue.\n   *\n   * The `resolved` flag is useful because certain IME interfaces fire the\n   * `compositionend` event multiple times, thus queueing up multiple attempts\n   * at handling the composition. Since handling the same composition event\n   * twice could break the DOM, we only use the first event. Example: Arabic\n   * Google Input Tools on Windows 8.1 fires `compositionend` three times.\n   */ onCompositionEnd: function onCompositionEnd(editor) {\n        resolved = false;\n        stillComposing = false;\n        setTimeout(function() {\n            if (!resolved) {\n                DraftEditorCompositionHandler.resolveComposition(editor);\n            }\n        }, RESOLVE_DELAY);\n    },\n    onSelect: editOnSelect,\n    /**\n   * In Safari, keydown events may fire when committing compositions. If\n   * the arrow keys are used to commit, prevent default so that the cursor\n   * doesn't move, otherwise it will jump back noticeably on re-render.\n   */ onKeyDown: function onKeyDown(editor, e) {\n        if (!stillComposing) {\n            // If a keydown event is received after compositionend but before the\n            // 20ms timer expires (ex: type option-E then backspace, or type A then\n            // backspace in 2-Set Korean), we should immediately resolve the\n            // composition and reinterpret the key press in edit mode.\n            DraftEditorCompositionHandler.resolveComposition(editor);\n            editor._onKeyDown(e);\n            return;\n        }\n        if (e.which === Keys.RIGHT || e.which === Keys.LEFT) {\n            e.preventDefault();\n        }\n    },\n    /**\n   * Keypress events may fire when committing compositions. In Firefox,\n   * pressing RETURN commits the composition and inserts extra newline\n   * characters that we do not want. `preventDefault` allows the composition\n   * to be committed while preventing the extra characters.\n   */ onKeyPress: function onKeyPress(_editor, e) {\n        if (e.which === Keys.RETURN) {\n            e.preventDefault();\n        }\n    },\n    /**\n   * Attempt to insert composed characters into the document.\n   *\n   * If we are still in a composition session, do nothing. Otherwise, insert\n   * the characters into the document and terminate the composition session.\n   *\n   * If no characters were composed -- for instance, the user\n   * deleted all composed characters and committed nothing new --\n   * force a re-render. We also re-render when the composition occurs\n   * at the beginning of a leaf, to ensure that if the browser has\n   * created a new text node for the composition, we will discard it.\n   *\n   * Resetting innerHTML will move focus to the beginning of the editor,\n   * so we update to force it back to the correct place.\n   */ resolveComposition: function resolveComposition(editor) {\n        if (stillComposing) {\n            return;\n        }\n        var mutations = nullthrows(domObserver).stopAndFlushMutations();\n        domObserver = null;\n        resolved = true;\n        var editorState = EditorState.set(editor._latestEditorState, {\n            inCompositionMode: false\n        });\n        editor.exitCurrentMode();\n        if (!mutations.size) {\n            editor.update(editorState);\n            return;\n        } // TODO, check if Facebook still needs this flag or if it could be removed.\n        // Since there can be multiple mutations providing a `composedChars` doesn't\n        // apply well on this new model.\n        // if (\n        //   gkx('draft_handlebeforeinput_composed_text') &&\n        //   editor.props.handleBeforeInput &&\n        //   isEventHandled(\n        //     editor.props.handleBeforeInput(\n        //       composedChars,\n        //       editorState,\n        //       event.timeStamp,\n        //     ),\n        //   )\n        // ) {\n        //   return;\n        // }\n        var contentState = editorState.getCurrentContent();\n        mutations.forEach(function(composedChars, offsetKey) {\n            var _DraftOffsetKey$decod = DraftOffsetKey.decode(offsetKey), blockKey = _DraftOffsetKey$decod.blockKey, decoratorKey = _DraftOffsetKey$decod.decoratorKey, leafKey = _DraftOffsetKey$decod.leafKey;\n            var _editorState$getBlock = editorState.getBlockTree(blockKey).getIn([\n                decoratorKey,\n                \"leaves\",\n                leafKey\n            ]), start = _editorState$getBlock.start, end = _editorState$getBlock.end;\n            var replacementRange = editorState.getSelection().merge({\n                anchorKey: blockKey,\n                focusKey: blockKey,\n                anchorOffset: start,\n                focusOffset: end,\n                isBackward: false\n            });\n            var entityKey = getEntityKeyForSelection(contentState, replacementRange);\n            var currentStyle = contentState.getBlockForKey(blockKey).getInlineStyleAt(start);\n            contentState = DraftModifier.replaceText(contentState, replacementRange, composedChars, currentStyle, entityKey); // We need to update the editorState so the leaf node ranges are properly\n            // updated and multiple mutations are correctly applied.\n            editorState = EditorState.set(editorState, {\n                currentContent: contentState\n            });\n        }); // When we apply the text changes to the ContentState, the selection always\n        // goes to the end of the field, but it should just stay where it is\n        // after compositionEnd.\n        var documentSelection = getDraftEditorSelection(editorState, getContentEditableContainer(editor));\n        var compositionEndSelectionState = documentSelection.selectionState;\n        editor.restoreEditorDOM(); // See:\n        // - https://github.com/facebook/draft-js/issues/2093\n        // - https://github.com/facebook/draft-js/pull/2094\n        // Apply this fix only in IE for now. We can test it in\n        // other browsers in the future to ensure no regressions\n        var editorStateWithUpdatedSelection = isIE ? EditorState.forceSelection(editorState, compositionEndSelectionState) : EditorState.acceptSelection(editorState, compositionEndSelectionState);\n        editor.update(EditorState.push(editorStateWithUpdatedSelection, contentState, \"insert-characters\"));\n    }\n};\nmodule.exports = DraftEditorCompositionHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEditorCompositionHandler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEditorContents-core.react.js":
/*!*********************************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEditorContents-core.react.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar _assign = __webpack_require__(/*! object-assign */ \"(ssr)/./node_modules/object-assign/index.js\");\nfunction _extends() {\n    _extends = _assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nvar DraftEditorBlock = __webpack_require__(/*! ./DraftEditorBlock.react */ \"(ssr)/./node_modules/draft-js/lib/DraftEditorBlock.react.js\");\nvar DraftOffsetKey = __webpack_require__(/*! ./DraftOffsetKey */ \"(ssr)/./node_modules/draft-js/lib/DraftOffsetKey.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar cx = __webpack_require__(/*! fbjs/lib/cx */ \"(ssr)/./node_modules/fbjs/lib/cx.js\");\nvar joinClasses = __webpack_require__(/*! fbjs/lib/joinClasses */ \"(ssr)/./node_modules/fbjs/lib/joinClasses.js\");\nvar nullthrows = __webpack_require__(/*! fbjs/lib/nullthrows */ \"(ssr)/./node_modules/fbjs/lib/nullthrows.js\");\n/**\n * Provide default styling for list items. This way, lists will be styled with\n * proper counters and indentation even if the caller does not specify\n * their own styling at all. If more than five levels of nesting are needed,\n * the necessary CSS classes can be provided via `blockStyleFn` configuration.\n */ var getListItemClasses = function getListItemClasses(type, depth, shouldResetCount, direction) {\n    return cx({\n        \"public/DraftStyleDefault/unorderedListItem\": type === \"unordered-list-item\",\n        \"public/DraftStyleDefault/orderedListItem\": type === \"ordered-list-item\",\n        \"public/DraftStyleDefault/reset\": shouldResetCount,\n        \"public/DraftStyleDefault/depth0\": depth === 0,\n        \"public/DraftStyleDefault/depth1\": depth === 1,\n        \"public/DraftStyleDefault/depth2\": depth === 2,\n        \"public/DraftStyleDefault/depth3\": depth === 3,\n        \"public/DraftStyleDefault/depth4\": depth >= 4,\n        \"public/DraftStyleDefault/listLTR\": direction === \"LTR\",\n        \"public/DraftStyleDefault/listRTL\": direction === \"RTL\"\n    });\n};\n/**\n * `DraftEditorContents` is the container component for all block components\n * rendered for a `DraftEditor`. It is optimized to aggressively avoid\n * re-rendering blocks whenever possible.\n *\n * This component is separate from `DraftEditor` because certain props\n * (for instance, ARIA props) must be allowed to update without affecting\n * the contents of the editor.\n */ var DraftEditorContents = /*#__PURE__*/ function(_React$Component) {\n    _inheritsLoose(DraftEditorContents, _React$Component);\n    function DraftEditorContents() {\n        return _React$Component.apply(this, arguments) || this;\n    }\n    var _proto = DraftEditorContents.prototype;\n    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n        var prevEditorState = this.props.editorState;\n        var nextEditorState = nextProps.editorState;\n        var prevDirectionMap = prevEditorState.getDirectionMap();\n        var nextDirectionMap = nextEditorState.getDirectionMap(); // Text direction has changed for one or more blocks. We must re-render.\n        if (prevDirectionMap !== nextDirectionMap) {\n            return true;\n        }\n        var didHaveFocus = prevEditorState.getSelection().getHasFocus();\n        var nowHasFocus = nextEditorState.getSelection().getHasFocus();\n        if (didHaveFocus !== nowHasFocus) {\n            return true;\n        }\n        var nextNativeContent = nextEditorState.getNativelyRenderedContent();\n        var wasComposing = prevEditorState.isInCompositionMode();\n        var nowComposing = nextEditorState.isInCompositionMode(); // If the state is unchanged or we're currently rendering a natively\n        // rendered state, there's nothing new to be done.\n        if (prevEditorState === nextEditorState || nextNativeContent !== null && nextEditorState.getCurrentContent() === nextNativeContent || wasComposing && nowComposing) {\n            return false;\n        }\n        var prevContent = prevEditorState.getCurrentContent();\n        var nextContent = nextEditorState.getCurrentContent();\n        var prevDecorator = prevEditorState.getDecorator();\n        var nextDecorator = nextEditorState.getDecorator();\n        return wasComposing !== nowComposing || prevContent !== nextContent || prevDecorator !== nextDecorator || nextEditorState.mustForceSelection();\n    };\n    _proto.render = function render() {\n        var _this$props = this.props, blockRenderMap = _this$props.blockRenderMap, blockRendererFn = _this$props.blockRendererFn, blockStyleFn = _this$props.blockStyleFn, customStyleMap = _this$props.customStyleMap, customStyleFn = _this$props.customStyleFn, editorState = _this$props.editorState, editorKey = _this$props.editorKey, preventScroll = _this$props.preventScroll, textDirectionality = _this$props.textDirectionality;\n        var content = editorState.getCurrentContent();\n        var selection = editorState.getSelection();\n        var forceSelection = editorState.mustForceSelection();\n        var decorator = editorState.getDecorator();\n        var directionMap = nullthrows(editorState.getDirectionMap());\n        var blocksAsArray = content.getBlocksAsArray();\n        var processedBlocks = [];\n        var currentDepth = null;\n        var lastWrapperTemplate = null;\n        for(var ii = 0; ii < blocksAsArray.length; ii++){\n            var _block = blocksAsArray[ii];\n            var key = _block.getKey();\n            var blockType = _block.getType();\n            var customRenderer = blockRendererFn(_block);\n            var CustomComponent = void 0, customProps = void 0, customEditable = void 0;\n            if (customRenderer) {\n                CustomComponent = customRenderer.component;\n                customProps = customRenderer.props;\n                customEditable = customRenderer.editable;\n            }\n            var direction = textDirectionality ? textDirectionality : directionMap.get(key);\n            var offsetKey = DraftOffsetKey.encode(key, 0, 0);\n            var componentProps = {\n                contentState: content,\n                block: _block,\n                blockProps: customProps,\n                blockStyleFn: blockStyleFn,\n                customStyleMap: customStyleMap,\n                customStyleFn: customStyleFn,\n                decorator: decorator,\n                direction: direction,\n                forceSelection: forceSelection,\n                offsetKey: offsetKey,\n                preventScroll: preventScroll,\n                selection: selection,\n                tree: editorState.getBlockTree(key)\n            };\n            var configForType = blockRenderMap.get(blockType) || blockRenderMap.get(\"unstyled\");\n            var wrapperTemplate = configForType.wrapper;\n            var Element = configForType.element || blockRenderMap.get(\"unstyled\").element;\n            var depth = _block.getDepth();\n            var _className = \"\";\n            if (blockStyleFn) {\n                _className = blockStyleFn(_block);\n            } // List items are special snowflakes, since we handle nesting and\n            // counters manually.\n            if (Element === \"li\") {\n                var shouldResetCount = lastWrapperTemplate !== wrapperTemplate || currentDepth === null || depth > currentDepth;\n                _className = joinClasses(_className, getListItemClasses(blockType, depth, shouldResetCount, direction));\n            }\n            var Component = CustomComponent || DraftEditorBlock;\n            var childProps = {\n                className: _className,\n                \"data-block\": true,\n                \"data-editor\": editorKey,\n                \"data-offset-key\": offsetKey,\n                key: key\n            };\n            if (customEditable !== undefined) {\n                childProps = _objectSpread({}, childProps, {\n                    contentEditable: customEditable,\n                    suppressContentEditableWarning: true\n                });\n            }\n            var child = React.createElement(Element, childProps, /* $FlowFixMe[incompatible-type] (>=0.112.0 site=www,mobile) This\n       * comment suppresses an error found when Flow v0.112 was deployed. To\n       * see the error delete this comment and run Flow. */ React.createElement(Component, _extends({}, componentProps, {\n                key: key\n            })));\n            processedBlocks.push({\n                block: child,\n                wrapperTemplate: wrapperTemplate,\n                key: key,\n                offsetKey: offsetKey\n            });\n            if (wrapperTemplate) {\n                currentDepth = _block.getDepth();\n            } else {\n                currentDepth = null;\n            }\n            lastWrapperTemplate = wrapperTemplate;\n        } // Group contiguous runs of blocks that have the same wrapperTemplate\n        var outputBlocks = [];\n        for(var _ii = 0; _ii < processedBlocks.length;){\n            var info = processedBlocks[_ii];\n            if (info.wrapperTemplate) {\n                var blocks = [];\n                do {\n                    blocks.push(processedBlocks[_ii].block);\n                    _ii++;\n                }while (_ii < processedBlocks.length && processedBlocks[_ii].wrapperTemplate === info.wrapperTemplate);\n                var wrapperElement = React.cloneElement(info.wrapperTemplate, {\n                    key: info.key + \"-wrap\",\n                    \"data-offset-key\": info.offsetKey\n                }, blocks);\n                outputBlocks.push(wrapperElement);\n            } else {\n                outputBlocks.push(info.block);\n                _ii++;\n            }\n        }\n        return React.createElement(\"div\", {\n            \"data-contents\": \"true\"\n        }, outputBlocks);\n    };\n    return DraftEditorContents;\n}(React.Component);\nmodule.exports = DraftEditorContents;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEditorContents-core.react.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEditorContents.react.js":
/*!****************************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEditorContents.react.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */ \nvar gkx = __webpack_require__(/*! ./gkx */ \"(ssr)/./node_modules/draft-js/lib/gkx.js\");\nvar experimentalTreeDataSupport = gkx(\"draft_tree_data_support\");\nmodule.exports = experimentalTreeDataSupport ? __webpack_require__(/*! ./DraftEditorContentsExperimental.react */ \"(ssr)/./node_modules/draft-js/lib/DraftEditorContentsExperimental.react.js\") : __webpack_require__(/*! ./DraftEditorContents-core.react */ \"(ssr)/./node_modules/draft-js/lib/DraftEditorContents-core.react.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0RWRpdG9yQ29udGVudHMucmVhY3QuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0NBUUMsR0FDRDtBQUVBLElBQUlBLE1BQU1DLG1CQUFPQSxDQUFDLHVEQUFPO0FBRXpCLElBQUlDLDhCQUE4QkYsSUFBSTtBQUN0Q0csT0FBT0MsT0FBTyxHQUFHRiw4QkFBOEJELG1CQUFPQSxDQUFDLDJIQUF5QyxJQUFJQSxtQkFBT0EsQ0FBQyw2R0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWVsLWhhcnZlc3Rlci8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvRHJhZnRFZGl0b3JDb250ZW50cy5yZWFjdC5qcz8yZWY0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIGdreCA9IHJlcXVpcmUoXCIuL2dreFwiKTtcblxudmFyIGV4cGVyaW1lbnRhbFRyZWVEYXRhU3VwcG9ydCA9IGdreCgnZHJhZnRfdHJlZV9kYXRhX3N1cHBvcnQnKTtcbm1vZHVsZS5leHBvcnRzID0gZXhwZXJpbWVudGFsVHJlZURhdGFTdXBwb3J0ID8gcmVxdWlyZShcIi4vRHJhZnRFZGl0b3JDb250ZW50c0V4cGVyaW1lbnRhbC5yZWFjdFwiKSA6IHJlcXVpcmUoXCIuL0RyYWZ0RWRpdG9yQ29udGVudHMtY29yZS5yZWFjdFwiKTsiXSwibmFtZXMiOlsiZ2t4IiwicmVxdWlyZSIsImV4cGVyaW1lbnRhbFRyZWVEYXRhU3VwcG9ydCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEditorContents.react.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEditorContentsExperimental.react.js":
/*!****************************************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEditorContentsExperimental.react.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n *\n * This file is a fork of DraftEditorContents.react.js for tree nodes\n *\n * This is unstable and not part of the public API and should not be used by\n * production systems. This file may be update/removed without notice.\n */ \nvar _assign = __webpack_require__(/*! object-assign */ \"(ssr)/./node_modules/object-assign/index.js\");\nfunction _extends() {\n    _extends = _assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nvar DraftEditorBlockNode = __webpack_require__(/*! ./DraftEditorBlockNode.react */ \"(ssr)/./node_modules/draft-js/lib/DraftEditorBlockNode.react.js\");\nvar DraftOffsetKey = __webpack_require__(/*! ./DraftOffsetKey */ \"(ssr)/./node_modules/draft-js/lib/DraftOffsetKey.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar nullthrows = __webpack_require__(/*! fbjs/lib/nullthrows */ \"(ssr)/./node_modules/fbjs/lib/nullthrows.js\");\n/**\n * `DraftEditorContents` is the container component for all block components\n * rendered for a `DraftEditor`. It is optimized to aggressively avoid\n * re-rendering blocks whenever possible.\n *\n * This component is separate from `DraftEditor` because certain props\n * (for instance, ARIA props) must be allowed to update without affecting\n * the contents of the editor.\n */ var DraftEditorContentsExperimental = /*#__PURE__*/ function(_React$Component) {\n    _inheritsLoose(DraftEditorContentsExperimental, _React$Component);\n    function DraftEditorContentsExperimental() {\n        return _React$Component.apply(this, arguments) || this;\n    }\n    var _proto = DraftEditorContentsExperimental.prototype;\n    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n        var prevEditorState = this.props.editorState;\n        var nextEditorState = nextProps.editorState;\n        var prevDirectionMap = prevEditorState.getDirectionMap();\n        var nextDirectionMap = nextEditorState.getDirectionMap(); // Text direction has changed for one or more blocks. We must re-render.\n        if (prevDirectionMap !== nextDirectionMap) {\n            return true;\n        }\n        var didHaveFocus = prevEditorState.getSelection().getHasFocus();\n        var nowHasFocus = nextEditorState.getSelection().getHasFocus();\n        if (didHaveFocus !== nowHasFocus) {\n            return true;\n        }\n        var nextNativeContent = nextEditorState.getNativelyRenderedContent();\n        var wasComposing = prevEditorState.isInCompositionMode();\n        var nowComposing = nextEditorState.isInCompositionMode(); // If the state is unchanged or we're currently rendering a natively\n        // rendered state, there's nothing new to be done.\n        if (prevEditorState === nextEditorState || nextNativeContent !== null && nextEditorState.getCurrentContent() === nextNativeContent || wasComposing && nowComposing) {\n            return false;\n        }\n        var prevContent = prevEditorState.getCurrentContent();\n        var nextContent = nextEditorState.getCurrentContent();\n        var prevDecorator = prevEditorState.getDecorator();\n        var nextDecorator = nextEditorState.getDecorator();\n        return wasComposing !== nowComposing || prevContent !== nextContent || prevDecorator !== nextDecorator || nextEditorState.mustForceSelection();\n    };\n    _proto.render = function render() {\n        var _this$props = this.props, blockRenderMap = _this$props.blockRenderMap, blockRendererFn = _this$props.blockRendererFn, blockStyleFn = _this$props.blockStyleFn, customStyleMap = _this$props.customStyleMap, customStyleFn = _this$props.customStyleFn, editorState = _this$props.editorState, editorKey = _this$props.editorKey, textDirectionality = _this$props.textDirectionality;\n        var content = editorState.getCurrentContent();\n        var selection = editorState.getSelection();\n        var forceSelection = editorState.mustForceSelection();\n        var decorator = editorState.getDecorator();\n        var directionMap = nullthrows(editorState.getDirectionMap());\n        var blocksAsArray = content.getBlocksAsArray();\n        var rootBlock = blocksAsArray[0];\n        var processedBlocks = [];\n        var nodeBlock = rootBlock;\n        while(nodeBlock){\n            var blockKey = nodeBlock.getKey();\n            var blockProps = {\n                blockRenderMap: blockRenderMap,\n                blockRendererFn: blockRendererFn,\n                blockStyleFn: blockStyleFn,\n                contentState: content,\n                customStyleFn: customStyleFn,\n                customStyleMap: customStyleMap,\n                decorator: decorator,\n                editorKey: editorKey,\n                editorState: editorState,\n                forceSelection: forceSelection,\n                selection: selection,\n                block: nodeBlock,\n                direction: textDirectionality ? textDirectionality : directionMap.get(blockKey),\n                tree: editorState.getBlockTree(blockKey)\n            };\n            var configForType = blockRenderMap.get(nodeBlock.getType()) || blockRenderMap.get(\"unstyled\");\n            var wrapperTemplate = configForType.wrapper;\n            processedBlocks.push({\n                /* $FlowFixMe[incompatible-type] (>=0.112.0 site=www,mobile) This\n         * comment suppresses an error found when Flow v0.112 was deployed. To\n         * see the error delete this comment and run Flow. */ block: React.createElement(DraftEditorBlockNode, _extends({\n                    key: blockKey\n                }, blockProps)),\n                wrapperTemplate: wrapperTemplate,\n                key: blockKey,\n                offsetKey: DraftOffsetKey.encode(blockKey, 0, 0)\n            });\n            var nextBlockKey = nodeBlock.getNextSiblingKey();\n            nodeBlock = nextBlockKey ? content.getBlockForKey(nextBlockKey) : null;\n        } // Group contiguous runs of blocks that have the same wrapperTemplate\n        var outputBlocks = [];\n        for(var ii = 0; ii < processedBlocks.length;){\n            var info = processedBlocks[ii];\n            if (info.wrapperTemplate) {\n                var blocks = [];\n                do {\n                    blocks.push(processedBlocks[ii].block);\n                    ii++;\n                }while (ii < processedBlocks.length && processedBlocks[ii].wrapperTemplate === info.wrapperTemplate);\n                var wrapperElement = React.cloneElement(info.wrapperTemplate, {\n                    key: info.key + \"-wrap\",\n                    \"data-offset-key\": info.offsetKey\n                }, blocks);\n                outputBlocks.push(wrapperElement);\n            } else {\n                outputBlocks.push(info.block);\n                ii++;\n            }\n        }\n        return React.createElement(\"div\", {\n            \"data-contents\": \"true\"\n        }, outputBlocks);\n    };\n    return DraftEditorContentsExperimental;\n}(React.Component);\nmodule.exports = DraftEditorContentsExperimental;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEditorContentsExperimental.react.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEditorDecoratedLeaves.react.js":
/*!***********************************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEditorDecoratedLeaves.react.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n *\n * This is unstable and not part of the public API and should not be used by\n * production systems. This file may be update/removed without notice.\n */ \nvar _assign = __webpack_require__(/*! object-assign */ \"(ssr)/./node_modules/object-assign/index.js\");\nfunction _extends() {\n    _extends = _assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nvar DraftOffsetKey = __webpack_require__(/*! ./DraftOffsetKey */ \"(ssr)/./node_modules/draft-js/lib/DraftOffsetKey.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar UnicodeBidi = __webpack_require__(/*! fbjs/lib/UnicodeBidi */ \"(ssr)/./node_modules/fbjs/lib/UnicodeBidi.js\");\nvar UnicodeBidiDirection = __webpack_require__(/*! fbjs/lib/UnicodeBidiDirection */ \"(ssr)/./node_modules/fbjs/lib/UnicodeBidiDirection.js\");\nvar DraftEditorDecoratedLeaves = /*#__PURE__*/ function(_React$Component) {\n    _inheritsLoose(DraftEditorDecoratedLeaves, _React$Component);\n    function DraftEditorDecoratedLeaves() {\n        return _React$Component.apply(this, arguments) || this;\n    }\n    var _proto = DraftEditorDecoratedLeaves.prototype;\n    _proto.render = function render() {\n        var _this$props = this.props, block = _this$props.block, children = _this$props.children, contentState = _this$props.contentState, decorator = _this$props.decorator, decoratorKey = _this$props.decoratorKey, direction = _this$props.direction, leafSet = _this$props.leafSet, text = _this$props.text;\n        var blockKey = block.getKey();\n        var leavesForLeafSet = leafSet.get(\"leaves\");\n        var DecoratorComponent = decorator.getComponentForKey(decoratorKey);\n        var decoratorProps = decorator.getPropsForKey(decoratorKey);\n        var decoratorOffsetKey = DraftOffsetKey.encode(blockKey, parseInt(decoratorKey, 10), 0);\n        var decoratedText = text.slice(leavesForLeafSet.first().get(\"start\"), leavesForLeafSet.last().get(\"end\")); // Resetting dir to the same value on a child node makes Chrome/Firefox\n        // confused on cursor movement. See http://jsfiddle.net/d157kLck/3/\n        var dir = UnicodeBidiDirection.getHTMLDirIfDifferent(UnicodeBidi.getDirection(decoratedText), direction);\n        return React.createElement(DecoratorComponent, _extends({}, decoratorProps, {\n            contentState: contentState,\n            decoratedText: decoratedText,\n            dir: dir,\n            key: decoratorOffsetKey,\n            entityKey: block.getEntityAt(leafSet.get(\"start\")),\n            offsetKey: decoratorOffsetKey\n        }), children);\n    };\n    return DraftEditorDecoratedLeaves;\n}(React.Component);\nmodule.exports = DraftEditorDecoratedLeaves;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0RWRpdG9yRGVjb3JhdGVkTGVhdmVzLnJlYWN0LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Q0FZQyxHQUNEO0FBRUEsSUFBSUEsVUFBVUMsbUJBQU9BLENBQUMsa0VBQWU7QUFFckMsU0FBU0M7SUFBYUEsV0FBV0YsV0FBVyxTQUFVRyxNQUFNO1FBQUksSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlDLFVBQVVDLE1BQU0sRUFBRUYsSUFBSztZQUFFLElBQUlHLFNBQVNGLFNBQVMsQ0FBQ0QsRUFBRTtZQUFFLElBQUssSUFBSUksT0FBT0QsT0FBUTtnQkFBRSxJQUFJRSxPQUFPQyxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDTCxRQUFRQyxNQUFNO29CQUFFTCxNQUFNLENBQUNLLElBQUksR0FBR0QsTUFBTSxDQUFDQyxJQUFJO2dCQUFFO1lBQUU7UUFBRTtRQUFFLE9BQU9MO0lBQVE7SUFBRyxPQUFPRCxTQUFTVyxLQUFLLENBQUMsSUFBSSxFQUFFUjtBQUFZO0FBRXRULFNBQVNTLGVBQWVDLFFBQVEsRUFBRUMsVUFBVTtJQUFJRCxTQUFTTCxTQUFTLEdBQUdELE9BQU9RLE1BQU0sQ0FBQ0QsV0FBV04sU0FBUztJQUFHSyxTQUFTTCxTQUFTLENBQUNRLFdBQVcsR0FBR0g7SUFBVUEsU0FBU0ksU0FBUyxHQUFHSDtBQUFZO0FBRXRMLElBQUlJLGlCQUFpQm5CLG1CQUFPQSxDQUFDLDZFQUFrQjtBQUUvQyxJQUFJb0IsUUFBUXBCLG1CQUFPQSxDQUFDLHdHQUFPO0FBRTNCLElBQUlxQixjQUFjckIsbUJBQU9BLENBQUMsMEVBQXNCO0FBRWhELElBQUlzQix1QkFBdUJ0QixtQkFBT0EsQ0FBQyw0RkFBK0I7QUFFbEUsSUFBSXVCLDZCQUE2QixXQUFXLEdBQUUsU0FBVUMsZ0JBQWdCO0lBQ3RFWCxlQUFlVSw0QkFBNEJDO0lBRTNDLFNBQVNEO1FBQ1AsT0FBT0MsaUJBQWlCWixLQUFLLENBQUMsSUFBSSxFQUFFUixjQUFjLElBQUk7SUFDeEQ7SUFFQSxJQUFJcUIsU0FBU0YsMkJBQTJCZCxTQUFTO0lBRWpEZ0IsT0FBT0MsTUFBTSxHQUFHLFNBQVNBO1FBQ3ZCLElBQUlDLGNBQWMsSUFBSSxDQUFDQyxLQUFLLEVBQ3hCQyxRQUFRRixZQUFZRSxLQUFLLEVBQ3pCQyxXQUFXSCxZQUFZRyxRQUFRLEVBQy9CQyxlQUFlSixZQUFZSSxZQUFZLEVBQ3ZDQyxZQUFZTCxZQUFZSyxTQUFTLEVBQ2pDQyxlQUFlTixZQUFZTSxZQUFZLEVBQ3ZDQyxZQUFZUCxZQUFZTyxTQUFTLEVBQ2pDQyxVQUFVUixZQUFZUSxPQUFPLEVBQzdCQyxPQUFPVCxZQUFZUyxJQUFJO1FBQzNCLElBQUlDLFdBQVdSLE1BQU1TLE1BQU07UUFDM0IsSUFBSUMsbUJBQW1CSixRQUFRSyxHQUFHLENBQUM7UUFDbkMsSUFBSUMscUJBQXFCVCxVQUFVVSxrQkFBa0IsQ0FBQ1Q7UUFDdEQsSUFBSVUsaUJBQWlCWCxVQUFVWSxjQUFjLENBQUNYO1FBQzlDLElBQUlZLHFCQUFxQjFCLGVBQWUyQixNQUFNLENBQUNULFVBQVVVLFNBQVNkLGNBQWMsS0FBSztRQUNyRixJQUFJZSxnQkFBZ0JaLEtBQUthLEtBQUssQ0FBQ1YsaUJBQWlCVyxLQUFLLEdBQUdWLEdBQUcsQ0FBQyxVQUFVRCxpQkFBaUJZLElBQUksR0FBR1gsR0FBRyxDQUFDLFNBQVMsdUVBQXVFO1FBQ2xMLG1FQUFtRTtRQUVuRSxJQUFJWSxNQUFNOUIscUJBQXFCK0IscUJBQXFCLENBQUNoQyxZQUFZaUMsWUFBWSxDQUFDTixnQkFBZ0JkO1FBQzlGLE9BQU9kLE1BQU1tQyxhQUFhLENBQUNkLG9CQUFvQnhDLFNBQVMsQ0FBQyxHQUFHMEMsZ0JBQWdCO1lBQzFFWixjQUFjQTtZQUNkaUIsZUFBZUE7WUFDZkksS0FBS0E7WUFDTDdDLEtBQUtzQztZQUNMVyxXQUFXM0IsTUFBTTRCLFdBQVcsQ0FBQ3RCLFFBQVFLLEdBQUcsQ0FBQztZQUN6Q2tCLFdBQVdiO1FBQ2IsSUFBSWY7SUFDTjtJQUVBLE9BQU9QO0FBQ1QsRUFBRUgsTUFBTXVDLFNBQVM7QUFFakJDLE9BQU9DLE9BQU8sR0FBR3RDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVlbC1oYXJ2ZXN0ZXIvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0RWRpdG9yRGVjb3JhdGVkTGVhdmVzLnJlYWN0LmpzPzBmYzUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKlxuICogVGhpcyBpcyB1bnN0YWJsZSBhbmQgbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgYW5kIHNob3VsZCBub3QgYmUgdXNlZCBieVxuICogcHJvZHVjdGlvbiBzeXN0ZW1zLiBUaGlzIGZpbGUgbWF5IGJlIHVwZGF0ZS9yZW1vdmVkIHdpdGhvdXQgbm90aWNlLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIik7XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IF9hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgRHJhZnRPZmZzZXRLZXkgPSByZXF1aXJlKFwiLi9EcmFmdE9mZnNldEtleVwiKTtcblxudmFyIFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuXG52YXIgVW5pY29kZUJpZGkgPSByZXF1aXJlKFwiZmJqcy9saWIvVW5pY29kZUJpZGlcIik7XG5cbnZhciBVbmljb2RlQmlkaURpcmVjdGlvbiA9IHJlcXVpcmUoXCJmYmpzL2xpYi9Vbmljb2RlQmlkaURpcmVjdGlvblwiKTtcblxudmFyIERyYWZ0RWRpdG9yRGVjb3JhdGVkTGVhdmVzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKERyYWZ0RWRpdG9yRGVjb3JhdGVkTGVhdmVzLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBEcmFmdEVkaXRvckRlY29yYXRlZExlYXZlcygpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRHJhZnRFZGl0b3JEZWNvcmF0ZWRMZWF2ZXMucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYmxvY2sgPSBfdGhpcyRwcm9wcy5ibG9jayxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgY29udGVudFN0YXRlID0gX3RoaXMkcHJvcHMuY29udGVudFN0YXRlLFxuICAgICAgICBkZWNvcmF0b3IgPSBfdGhpcyRwcm9wcy5kZWNvcmF0b3IsXG4gICAgICAgIGRlY29yYXRvcktleSA9IF90aGlzJHByb3BzLmRlY29yYXRvcktleSxcbiAgICAgICAgZGlyZWN0aW9uID0gX3RoaXMkcHJvcHMuZGlyZWN0aW9uLFxuICAgICAgICBsZWFmU2V0ID0gX3RoaXMkcHJvcHMubGVhZlNldCxcbiAgICAgICAgdGV4dCA9IF90aGlzJHByb3BzLnRleHQ7XG4gICAgdmFyIGJsb2NrS2V5ID0gYmxvY2suZ2V0S2V5KCk7XG4gICAgdmFyIGxlYXZlc0ZvckxlYWZTZXQgPSBsZWFmU2V0LmdldCgnbGVhdmVzJyk7XG4gICAgdmFyIERlY29yYXRvckNvbXBvbmVudCA9IGRlY29yYXRvci5nZXRDb21wb25lbnRGb3JLZXkoZGVjb3JhdG9yS2V5KTtcbiAgICB2YXIgZGVjb3JhdG9yUHJvcHMgPSBkZWNvcmF0b3IuZ2V0UHJvcHNGb3JLZXkoZGVjb3JhdG9yS2V5KTtcbiAgICB2YXIgZGVjb3JhdG9yT2Zmc2V0S2V5ID0gRHJhZnRPZmZzZXRLZXkuZW5jb2RlKGJsb2NrS2V5LCBwYXJzZUludChkZWNvcmF0b3JLZXksIDEwKSwgMCk7XG4gICAgdmFyIGRlY29yYXRlZFRleHQgPSB0ZXh0LnNsaWNlKGxlYXZlc0ZvckxlYWZTZXQuZmlyc3QoKS5nZXQoJ3N0YXJ0JyksIGxlYXZlc0ZvckxlYWZTZXQubGFzdCgpLmdldCgnZW5kJykpOyAvLyBSZXNldHRpbmcgZGlyIHRvIHRoZSBzYW1lIHZhbHVlIG9uIGEgY2hpbGQgbm9kZSBtYWtlcyBDaHJvbWUvRmlyZWZveFxuICAgIC8vIGNvbmZ1c2VkIG9uIGN1cnNvciBtb3ZlbWVudC4gU2VlIGh0dHA6Ly9qc2ZpZGRsZS5uZXQvZDE1N2tMY2svMy9cblxuICAgIHZhciBkaXIgPSBVbmljb2RlQmlkaURpcmVjdGlvbi5nZXRIVE1MRGlySWZEaWZmZXJlbnQoVW5pY29kZUJpZGkuZ2V0RGlyZWN0aW9uKGRlY29yYXRlZFRleHQpLCBkaXJlY3Rpb24pO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KERlY29yYXRvckNvbXBvbmVudCwgX2V4dGVuZHMoe30sIGRlY29yYXRvclByb3BzLCB7XG4gICAgICBjb250ZW50U3RhdGU6IGNvbnRlbnRTdGF0ZSxcbiAgICAgIGRlY29yYXRlZFRleHQ6IGRlY29yYXRlZFRleHQsXG4gICAgICBkaXI6IGRpcixcbiAgICAgIGtleTogZGVjb3JhdG9yT2Zmc2V0S2V5LFxuICAgICAgZW50aXR5S2V5OiBibG9jay5nZXRFbnRpdHlBdChsZWFmU2V0LmdldCgnc3RhcnQnKSksXG4gICAgICBvZmZzZXRLZXk6IGRlY29yYXRvck9mZnNldEtleVxuICAgIH0pLCBjaGlsZHJlbik7XG4gIH07XG5cbiAgcmV0dXJuIERyYWZ0RWRpdG9yRGVjb3JhdGVkTGVhdmVzO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERyYWZ0RWRpdG9yRGVjb3JhdGVkTGVhdmVzOyJdLCJuYW1lcyI6WyJfYXNzaWduIiwicmVxdWlyZSIsIl9leHRlbmRzIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImtleSIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImFwcGx5IiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsIl9fcHJvdG9fXyIsIkRyYWZ0T2Zmc2V0S2V5IiwiUmVhY3QiLCJVbmljb2RlQmlkaSIsIlVuaWNvZGVCaWRpRGlyZWN0aW9uIiwiRHJhZnRFZGl0b3JEZWNvcmF0ZWRMZWF2ZXMiLCJfUmVhY3QkQ29tcG9uZW50IiwiX3Byb3RvIiwicmVuZGVyIiwiX3RoaXMkcHJvcHMiLCJwcm9wcyIsImJsb2NrIiwiY2hpbGRyZW4iLCJjb250ZW50U3RhdGUiLCJkZWNvcmF0b3IiLCJkZWNvcmF0b3JLZXkiLCJkaXJlY3Rpb24iLCJsZWFmU2V0IiwidGV4dCIsImJsb2NrS2V5IiwiZ2V0S2V5IiwibGVhdmVzRm9yTGVhZlNldCIsImdldCIsIkRlY29yYXRvckNvbXBvbmVudCIsImdldENvbXBvbmVudEZvcktleSIsImRlY29yYXRvclByb3BzIiwiZ2V0UHJvcHNGb3JLZXkiLCJkZWNvcmF0b3JPZmZzZXRLZXkiLCJlbmNvZGUiLCJwYXJzZUludCIsImRlY29yYXRlZFRleHQiLCJzbGljZSIsImZpcnN0IiwibGFzdCIsImRpciIsImdldEhUTUxEaXJJZkRpZmZlcmVudCIsImdldERpcmVjdGlvbiIsImNyZWF0ZUVsZW1lbnQiLCJlbnRpdHlLZXkiLCJnZXRFbnRpdHlBdCIsIm9mZnNldEtleSIsIkNvbXBvbmVudCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEditorDecoratedLeaves.react.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEditorDragHandler.js":
/*!*************************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEditorDragHandler.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DataTransfer = __webpack_require__(/*! fbjs/lib/DataTransfer */ \"(ssr)/./node_modules/fbjs/lib/DataTransfer.js\");\nvar DraftModifier = __webpack_require__(/*! ./DraftModifier */ \"(ssr)/./node_modules/draft-js/lib/DraftModifier.js\");\nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar findAncestorOffsetKey = __webpack_require__(/*! ./findAncestorOffsetKey */ \"(ssr)/./node_modules/draft-js/lib/findAncestorOffsetKey.js\");\nvar getCorrectDocumentFromNode = __webpack_require__(/*! ./getCorrectDocumentFromNode */ \"(ssr)/./node_modules/draft-js/lib/getCorrectDocumentFromNode.js\");\nvar getTextContentFromFiles = __webpack_require__(/*! ./getTextContentFromFiles */ \"(ssr)/./node_modules/draft-js/lib/getTextContentFromFiles.js\");\nvar getUpdatedSelectionState = __webpack_require__(/*! ./getUpdatedSelectionState */ \"(ssr)/./node_modules/draft-js/lib/getUpdatedSelectionState.js\");\nvar getWindowForNode = __webpack_require__(/*! ./getWindowForNode */ \"(ssr)/./node_modules/draft-js/lib/getWindowForNode.js\");\nvar isEventHandled = __webpack_require__(/*! ./isEventHandled */ \"(ssr)/./node_modules/draft-js/lib/isEventHandled.js\");\nvar nullthrows = __webpack_require__(/*! fbjs/lib/nullthrows */ \"(ssr)/./node_modules/fbjs/lib/nullthrows.js\");\n/**\n * Get a SelectionState for the supplied mouse event.\n */ function getSelectionForEvent(event, editorState) {\n    var node = null;\n    var offset = null;\n    var eventTargetDocument = getCorrectDocumentFromNode(event.currentTarget);\n    /* $FlowFixMe[prop-missing] (>=0.68.0 site=www,mobile) This comment\n   * suppresses an error found when Flow v0.68 was deployed. To see the error\n   * delete this comment and run Flow. */ if (typeof eventTargetDocument.caretRangeFromPoint === \"function\") {\n        /* $FlowFixMe[incompatible-use] (>=0.68.0 site=www,mobile) This comment\n     * suppresses an error found when Flow v0.68 was deployed. To see the error\n     * delete this comment and run Flow. */ var dropRange = eventTargetDocument.caretRangeFromPoint(event.x, event.y);\n        node = dropRange.startContainer;\n        offset = dropRange.startOffset;\n    } else if (event.rangeParent) {\n        node = event.rangeParent;\n        offset = event.rangeOffset;\n    } else {\n        return null;\n    }\n    node = nullthrows(node);\n    offset = nullthrows(offset);\n    var offsetKey = nullthrows(findAncestorOffsetKey(node));\n    return getUpdatedSelectionState(editorState, offsetKey, offset, offsetKey, offset);\n}\nvar DraftEditorDragHandler = {\n    /**\n   * Drag originating from input terminated.\n   */ onDragEnd: function onDragEnd(editor) {\n        editor.exitCurrentMode();\n        endDrag(editor);\n    },\n    /**\n   * Handle data being dropped.\n   */ onDrop: function onDrop(editor, e) {\n        var data = new DataTransfer(e.nativeEvent.dataTransfer);\n        var editorState = editor._latestEditorState;\n        var dropSelection = getSelectionForEvent(e.nativeEvent, editorState);\n        e.preventDefault();\n        editor._dragCount = 0;\n        editor.exitCurrentMode();\n        if (dropSelection == null) {\n            return;\n        }\n        var files = data.getFiles();\n        if (files.length > 0) {\n            if (editor.props.handleDroppedFiles && isEventHandled(editor.props.handleDroppedFiles(dropSelection, files))) {\n                return;\n            }\n            /* $FlowFixMe[incompatible-call] This comment suppresses an error found\n       * DataTransfer was typed. getFiles() returns an array of <Files extends\n       * Blob>, not Blob */ getTextContentFromFiles(files, function(fileText) {\n                fileText && editor.update(insertTextAtSelection(editorState, dropSelection, fileText));\n            });\n            return;\n        }\n        var dragType = editor._internalDrag ? \"internal\" : \"external\";\n        if (editor.props.handleDrop && isEventHandled(editor.props.handleDrop(dropSelection, data, dragType))) {} else if (editor._internalDrag) {\n            editor.update(moveText(editorState, dropSelection));\n        } else {\n            editor.update(insertTextAtSelection(editorState, dropSelection, data.getText()));\n        }\n        endDrag(editor);\n    }\n};\nfunction endDrag(editor) {\n    editor._internalDrag = false; // Fix issue #1383\n    // Prior to React v16.5.0 onDrop breaks onSelect event:\n    // https://github.com/facebook/react/issues/11379.\n    // Dispatching a mouseup event on DOM node will make it go back to normal.\n    var editorNode = editor.editorContainer;\n    if (editorNode) {\n        var mouseUpEvent = new MouseEvent(\"mouseup\", {\n            view: getWindowForNode(editorNode),\n            bubbles: true,\n            cancelable: true\n        });\n        editorNode.dispatchEvent(mouseUpEvent);\n    }\n}\nfunction moveText(editorState, targetSelection) {\n    var newContentState = DraftModifier.moveText(editorState.getCurrentContent(), editorState.getSelection(), targetSelection);\n    return EditorState.push(editorState, newContentState, \"insert-fragment\");\n}\n/**\n * Insert text at a specified selection.\n */ function insertTextAtSelection(editorState, selection, text) {\n    var newContentState = DraftModifier.insertText(editorState.getCurrentContent(), selection, text, editorState.getCurrentInlineStyle());\n    return EditorState.push(editorState, newContentState, \"insert-fragment\");\n}\nmodule.exports = DraftEditorDragHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEditorDragHandler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEditorEditHandler.js":
/*!*************************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEditorEditHandler.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar UserAgent = __webpack_require__(/*! fbjs/lib/UserAgent */ \"(ssr)/./node_modules/fbjs/lib/UserAgent.js\");\nvar onBeforeInput = __webpack_require__(/*! ./editOnBeforeInput */ \"(ssr)/./node_modules/draft-js/lib/editOnBeforeInput.js\");\nvar onBlur = __webpack_require__(/*! ./editOnBlur */ \"(ssr)/./node_modules/draft-js/lib/editOnBlur.js\");\nvar onCompositionStart = __webpack_require__(/*! ./editOnCompositionStart */ \"(ssr)/./node_modules/draft-js/lib/editOnCompositionStart.js\");\nvar onCopy = __webpack_require__(/*! ./editOnCopy */ \"(ssr)/./node_modules/draft-js/lib/editOnCopy.js\");\nvar onCut = __webpack_require__(/*! ./editOnCut */ \"(ssr)/./node_modules/draft-js/lib/editOnCut.js\");\nvar onDragOver = __webpack_require__(/*! ./editOnDragOver */ \"(ssr)/./node_modules/draft-js/lib/editOnDragOver.js\");\nvar onDragStart = __webpack_require__(/*! ./editOnDragStart */ \"(ssr)/./node_modules/draft-js/lib/editOnDragStart.js\");\nvar onFocus = __webpack_require__(/*! ./editOnFocus */ \"(ssr)/./node_modules/draft-js/lib/editOnFocus.js\");\nvar onInput = __webpack_require__(/*! ./editOnInput */ \"(ssr)/./node_modules/draft-js/lib/editOnInput.js\");\nvar onKeyDown = __webpack_require__(/*! ./editOnKeyDown */ \"(ssr)/./node_modules/draft-js/lib/editOnKeyDown.js\");\nvar onPaste = __webpack_require__(/*! ./editOnPaste */ \"(ssr)/./node_modules/draft-js/lib/editOnPaste.js\");\nvar onSelect = __webpack_require__(/*! ./editOnSelect */ \"(ssr)/./node_modules/draft-js/lib/editOnSelect.js\");\nvar isChrome = UserAgent.isBrowser(\"Chrome\");\nvar isFirefox = UserAgent.isBrowser(\"Firefox\");\nvar selectionHandler = isChrome || isFirefox ? onSelect : function(e) {};\nvar DraftEditorEditHandler = {\n    onBeforeInput: onBeforeInput,\n    onBlur: onBlur,\n    onCompositionStart: onCompositionStart,\n    onCopy: onCopy,\n    onCut: onCut,\n    onDragOver: onDragOver,\n    onDragStart: onDragStart,\n    onFocus: onFocus,\n    onInput: onInput,\n    onKeyDown: onKeyDown,\n    onPaste: onPaste,\n    onSelect: onSelect,\n    // In certain cases, contenteditable on chrome does not fire the onSelect\n    // event, causing problems with cursor positioning. Therefore, the selection\n    // state update handler is added to more events to ensure that the selection\n    // state is always synced with the actual cursor positions.\n    onMouseUp: selectionHandler,\n    onKeyUp: selectionHandler\n};\nmodule.exports = DraftEditorEditHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0RWRpdG9yRWRpdEhhbmRsZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFFQSxJQUFJQSxZQUFZQyxtQkFBT0EsQ0FBQyxzRUFBb0I7QUFFNUMsSUFBSUMsZ0JBQWdCRCxtQkFBT0EsQ0FBQyxtRkFBcUI7QUFFakQsSUFBSUUsU0FBU0YsbUJBQU9BLENBQUMscUVBQWM7QUFFbkMsSUFBSUcscUJBQXFCSCxtQkFBT0EsQ0FBQyw2RkFBMEI7QUFFM0QsSUFBSUksU0FBU0osbUJBQU9BLENBQUMscUVBQWM7QUFFbkMsSUFBSUssUUFBUUwsbUJBQU9BLENBQUMsbUVBQWE7QUFFakMsSUFBSU0sYUFBYU4sbUJBQU9BLENBQUMsNkVBQWtCO0FBRTNDLElBQUlPLGNBQWNQLG1CQUFPQSxDQUFDLCtFQUFtQjtBQUU3QyxJQUFJUSxVQUFVUixtQkFBT0EsQ0FBQyx1RUFBZTtBQUVyQyxJQUFJUyxVQUFVVCxtQkFBT0EsQ0FBQyx1RUFBZTtBQUVyQyxJQUFJVSxZQUFZVixtQkFBT0EsQ0FBQywyRUFBaUI7QUFFekMsSUFBSVcsVUFBVVgsbUJBQU9BLENBQUMsdUVBQWU7QUFFckMsSUFBSVksV0FBV1osbUJBQU9BLENBQUMseUVBQWdCO0FBRXZDLElBQUlhLFdBQVdkLFVBQVVlLFNBQVMsQ0FBQztBQUNuQyxJQUFJQyxZQUFZaEIsVUFBVWUsU0FBUyxDQUFDO0FBQ3BDLElBQUlFLG1CQUFtQkgsWUFBWUUsWUFBWUgsV0FBVyxTQUFVSyxDQUFDLEdBQUc7QUFDeEUsSUFBSUMseUJBQXlCO0lBQzNCakIsZUFBZUE7SUFDZkMsUUFBUUE7SUFDUkMsb0JBQW9CQTtJQUNwQkMsUUFBUUE7SUFDUkMsT0FBT0E7SUFDUEMsWUFBWUE7SUFDWkMsYUFBYUE7SUFDYkMsU0FBU0E7SUFDVEMsU0FBU0E7SUFDVEMsV0FBV0E7SUFDWEMsU0FBU0E7SUFDVEMsVUFBVUE7SUFDVix5RUFBeUU7SUFDekUsNEVBQTRFO0lBQzVFLDRFQUE0RTtJQUM1RSwyREFBMkQ7SUFDM0RPLFdBQVdIO0lBQ1hJLFNBQVNKO0FBQ1g7QUFDQUssT0FBT0MsT0FBTyxHQUFHSiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9EcmFmdEVkaXRvckVkaXRIYW5kbGVyLmpzPzViOGMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIFVzZXJBZ2VudCA9IHJlcXVpcmUoXCJmYmpzL2xpYi9Vc2VyQWdlbnRcIik7XG5cbnZhciBvbkJlZm9yZUlucHV0ID0gcmVxdWlyZShcIi4vZWRpdE9uQmVmb3JlSW5wdXRcIik7XG5cbnZhciBvbkJsdXIgPSByZXF1aXJlKFwiLi9lZGl0T25CbHVyXCIpO1xuXG52YXIgb25Db21wb3NpdGlvblN0YXJ0ID0gcmVxdWlyZShcIi4vZWRpdE9uQ29tcG9zaXRpb25TdGFydFwiKTtcblxudmFyIG9uQ29weSA9IHJlcXVpcmUoXCIuL2VkaXRPbkNvcHlcIik7XG5cbnZhciBvbkN1dCA9IHJlcXVpcmUoXCIuL2VkaXRPbkN1dFwiKTtcblxudmFyIG9uRHJhZ092ZXIgPSByZXF1aXJlKFwiLi9lZGl0T25EcmFnT3ZlclwiKTtcblxudmFyIG9uRHJhZ1N0YXJ0ID0gcmVxdWlyZShcIi4vZWRpdE9uRHJhZ1N0YXJ0XCIpO1xuXG52YXIgb25Gb2N1cyA9IHJlcXVpcmUoXCIuL2VkaXRPbkZvY3VzXCIpO1xuXG52YXIgb25JbnB1dCA9IHJlcXVpcmUoXCIuL2VkaXRPbklucHV0XCIpO1xuXG52YXIgb25LZXlEb3duID0gcmVxdWlyZShcIi4vZWRpdE9uS2V5RG93blwiKTtcblxudmFyIG9uUGFzdGUgPSByZXF1aXJlKFwiLi9lZGl0T25QYXN0ZVwiKTtcblxudmFyIG9uU2VsZWN0ID0gcmVxdWlyZShcIi4vZWRpdE9uU2VsZWN0XCIpO1xuXG52YXIgaXNDaHJvbWUgPSBVc2VyQWdlbnQuaXNCcm93c2VyKCdDaHJvbWUnKTtcbnZhciBpc0ZpcmVmb3ggPSBVc2VyQWdlbnQuaXNCcm93c2VyKCdGaXJlZm94Jyk7XG52YXIgc2VsZWN0aW9uSGFuZGxlciA9IGlzQ2hyb21lIHx8IGlzRmlyZWZveCA/IG9uU2VsZWN0IDogZnVuY3Rpb24gKGUpIHt9O1xudmFyIERyYWZ0RWRpdG9yRWRpdEhhbmRsZXIgPSB7XG4gIG9uQmVmb3JlSW5wdXQ6IG9uQmVmb3JlSW5wdXQsXG4gIG9uQmx1cjogb25CbHVyLFxuICBvbkNvbXBvc2l0aW9uU3RhcnQ6IG9uQ29tcG9zaXRpb25TdGFydCxcbiAgb25Db3B5OiBvbkNvcHksXG4gIG9uQ3V0OiBvbkN1dCxcbiAgb25EcmFnT3Zlcjogb25EcmFnT3ZlcixcbiAgb25EcmFnU3RhcnQ6IG9uRHJhZ1N0YXJ0LFxuICBvbkZvY3VzOiBvbkZvY3VzLFxuICBvbklucHV0OiBvbklucHV0LFxuICBvbktleURvd246IG9uS2V5RG93bixcbiAgb25QYXN0ZTogb25QYXN0ZSxcbiAgb25TZWxlY3Q6IG9uU2VsZWN0LFxuICAvLyBJbiBjZXJ0YWluIGNhc2VzLCBjb250ZW50ZWRpdGFibGUgb24gY2hyb21lIGRvZXMgbm90IGZpcmUgdGhlIG9uU2VsZWN0XG4gIC8vIGV2ZW50LCBjYXVzaW5nIHByb2JsZW1zIHdpdGggY3Vyc29yIHBvc2l0aW9uaW5nLiBUaGVyZWZvcmUsIHRoZSBzZWxlY3Rpb25cbiAgLy8gc3RhdGUgdXBkYXRlIGhhbmRsZXIgaXMgYWRkZWQgdG8gbW9yZSBldmVudHMgdG8gZW5zdXJlIHRoYXQgdGhlIHNlbGVjdGlvblxuICAvLyBzdGF0ZSBpcyBhbHdheXMgc3luY2VkIHdpdGggdGhlIGFjdHVhbCBjdXJzb3IgcG9zaXRpb25zLlxuICBvbk1vdXNlVXA6IHNlbGVjdGlvbkhhbmRsZXIsXG4gIG9uS2V5VXA6IHNlbGVjdGlvbkhhbmRsZXJcbn07XG5tb2R1bGUuZXhwb3J0cyA9IERyYWZ0RWRpdG9yRWRpdEhhbmRsZXI7Il0sIm5hbWVzIjpbIlVzZXJBZ2VudCIsInJlcXVpcmUiLCJvbkJlZm9yZUlucHV0Iiwib25CbHVyIiwib25Db21wb3NpdGlvblN0YXJ0Iiwib25Db3B5Iiwib25DdXQiLCJvbkRyYWdPdmVyIiwib25EcmFnU3RhcnQiLCJvbkZvY3VzIiwib25JbnB1dCIsIm9uS2V5RG93biIsIm9uUGFzdGUiLCJvblNlbGVjdCIsImlzQ2hyb21lIiwiaXNCcm93c2VyIiwiaXNGaXJlZm94Iiwic2VsZWN0aW9uSGFuZGxlciIsImUiLCJEcmFmdEVkaXRvckVkaXRIYW5kbGVyIiwib25Nb3VzZVVwIiwib25LZXlVcCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEditorEditHandler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEditorFlushControlled.js":
/*!*****************************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEditorFlushControlled.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ var ReactDOMComet = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\nvar flushControlled = ReactDOMComet.unstable_flushControlled;\nmodule.exports = flushControlled;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0RWRpdG9yRmx1c2hDb250cm9sbGVkLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWI7Ozs7Ozs7OztDQVNDLEdBQ0QsSUFBSUEsZ0JBQWdCQyxtQkFBT0EsQ0FBQyxnSEFBVztBQUV2QyxJQUFJQyxrQkFBa0JGLGNBQWNHLHdCQUF3QjtBQUM1REMsT0FBT0MsT0FBTyxHQUFHSCIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9EcmFmdEVkaXRvckZsdXNoQ29udHJvbGxlZC5qcz83MGM4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xudmFyIFJlYWN0RE9NQ29tZXQgPSByZXF1aXJlKFwicmVhY3QtZG9tXCIpO1xuXG52YXIgZmx1c2hDb250cm9sbGVkID0gUmVhY3RET01Db21ldC51bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQ7XG5tb2R1bGUuZXhwb3J0cyA9IGZsdXNoQ29udHJvbGxlZDsiXSwibmFtZXMiOlsiUmVhY3RET01Db21ldCIsInJlcXVpcmUiLCJmbHVzaENvbnRyb2xsZWQiLCJ1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEditorFlushControlled.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEditorLeaf.react.js":
/*!************************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEditorLeaf.react.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar _assign = __webpack_require__(/*! object-assign */ \"(ssr)/./node_modules/object-assign/index.js\");\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar DraftEditorTextNode = __webpack_require__(/*! ./DraftEditorTextNode.react */ \"(ssr)/./node_modules/draft-js/lib/DraftEditorTextNode.react.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar isHTMLBRElement = __webpack_require__(/*! ./isHTMLBRElement */ \"(ssr)/./node_modules/draft-js/lib/isHTMLBRElement.js\");\nvar setDraftEditorSelection = (__webpack_require__(/*! ./setDraftEditorSelection */ \"(ssr)/./node_modules/draft-js/lib/setDraftEditorSelection.js\").setDraftEditorSelection);\n/**\n * All leaf nodes in the editor are spans with single text nodes. Leaf\n * elements are styled based on the merging of an optional custom style map\n * and a default style map.\n *\n * `DraftEditorLeaf` also provides a wrapper for calling into the imperative\n * DOM Selection API. In this way, top-level components can declaratively\n * maintain the selection state.\n */ var DraftEditorLeaf = /*#__PURE__*/ function(_React$Component) {\n    _inheritsLoose(DraftEditorLeaf, _React$Component);\n    function DraftEditorLeaf() {\n        var _this;\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _React$Component.call.apply(_React$Component, [\n            this\n        ].concat(args)) || this;\n        _defineProperty(_assertThisInitialized(_this), \"leaf\", void 0);\n        return _this;\n    }\n    var _proto = DraftEditorLeaf.prototype;\n    _proto._setSelection = function _setSelection() {\n        var selection = this.props.selection; // If selection state is irrelevant to the parent block, no-op.\n        if (selection == null || !selection.getHasFocus()) {\n            return;\n        }\n        var _this$props = this.props, block = _this$props.block, start = _this$props.start, text = _this$props.text;\n        var blockKey = block.getKey();\n        var end = start + text.length;\n        if (!selection.hasEdgeWithin(blockKey, start, end)) {\n            return;\n        } // Determine the appropriate target node for selection. If the child\n        // is not a text node, it is a <br /> spacer. In this case, use the\n        // <span> itself as the selection target.\n        var node = this.leaf;\n        !node ?  true ? invariant(false, \"Missing node\") : 0 : void 0;\n        var child = node.firstChild;\n        !child ?  true ? invariant(false, \"Missing child\") : 0 : void 0;\n        var targetNode;\n        if (child.nodeType === Node.TEXT_NODE) {\n            targetNode = child;\n        } else if (isHTMLBRElement(child)) {\n            targetNode = node;\n        } else {\n            targetNode = child.firstChild;\n            !targetNode ?  true ? invariant(false, \"Missing targetNode\") : 0 : void 0;\n        }\n        setDraftEditorSelection(selection, targetNode, blockKey, start, end);\n    };\n    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n        var leafNode = this.leaf;\n        !leafNode ?  true ? invariant(false, \"Missing leafNode\") : 0 : void 0;\n        var shouldUpdate = leafNode.textContent !== nextProps.text || nextProps.styleSet !== this.props.styleSet || nextProps.forceSelection;\n        return shouldUpdate;\n    };\n    _proto.componentDidUpdate = function componentDidUpdate() {\n        this._setSelection();\n    };\n    _proto.componentDidMount = function componentDidMount() {\n        this._setSelection();\n    };\n    _proto.render = function render() {\n        var _this2 = this;\n        var block = this.props.block;\n        var text = this.props.text; // If the leaf is at the end of its block and ends in a soft newline, append\n        // an extra line feed character. Browsers collapse trailing newline\n        // characters, which leaves the cursor in the wrong place after a\n        // shift+enter. The extra character repairs this.\n        if (text.endsWith(\"\\n\") && this.props.isLast) {\n            text += \"\\n\";\n        }\n        var _this$props2 = this.props, customStyleMap = _this$props2.customStyleMap, customStyleFn = _this$props2.customStyleFn, offsetKey = _this$props2.offsetKey, styleSet = _this$props2.styleSet;\n        var styleObj = styleSet.reduce(function(map, styleName) {\n            var mergedStyles = {};\n            var style = customStyleMap[styleName];\n            if (style !== undefined && map.textDecoration !== style.textDecoration) {\n                // .trim() is necessary for IE9/10/11 and Edge\n                mergedStyles.textDecoration = [\n                    map.textDecoration,\n                    style.textDecoration\n                ].join(\" \").trim();\n            }\n            return _assign(map, style, mergedStyles);\n        }, {});\n        if (customStyleFn) {\n            var newStyles = customStyleFn(styleSet, block);\n            styleObj = _assign(styleObj, newStyles);\n        }\n        return React.createElement(\"span\", {\n            \"data-offset-key\": offsetKey,\n            ref: function ref(_ref) {\n                return _this2.leaf = _ref;\n            },\n            style: styleObj\n        }, React.createElement(DraftEditorTextNode, null, text));\n    };\n    return DraftEditorLeaf;\n}(React.Component);\nmodule.exports = DraftEditorLeaf;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEditorLeaf.react.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEditorNode.react.js":
/*!************************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEditorNode.react.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n *\n * This is unstable and not part of the public API and should not be used by\n * production systems. This file may be update/removed without notice.\n */ \nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nvar DraftEditorDecoratedLeaves = __webpack_require__(/*! ./DraftEditorDecoratedLeaves.react */ \"(ssr)/./node_modules/draft-js/lib/DraftEditorDecoratedLeaves.react.js\");\nvar DraftEditorLeaf = __webpack_require__(/*! ./DraftEditorLeaf.react */ \"(ssr)/./node_modules/draft-js/lib/DraftEditorLeaf.react.js\");\nvar DraftOffsetKey = __webpack_require__(/*! ./DraftOffsetKey */ \"(ssr)/./node_modules/draft-js/lib/DraftOffsetKey.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar cx = __webpack_require__(/*! fbjs/lib/cx */ \"(ssr)/./node_modules/fbjs/lib/cx.js\");\nvar List = Immutable.List;\nvar DraftEditorNode = /*#__PURE__*/ function(_React$Component) {\n    _inheritsLoose(DraftEditorNode, _React$Component);\n    function DraftEditorNode() {\n        return _React$Component.apply(this, arguments) || this;\n    }\n    var _proto = DraftEditorNode.prototype;\n    _proto.render = function render() {\n        var _this$props = this.props, block = _this$props.block, contentState = _this$props.contentState, customStyleFn = _this$props.customStyleFn, customStyleMap = _this$props.customStyleMap, decorator = _this$props.decorator, direction = _this$props.direction, forceSelection = _this$props.forceSelection, hasSelection = _this$props.hasSelection, selection = _this$props.selection, tree = _this$props.tree;\n        var blockKey = block.getKey();\n        var text = block.getText();\n        var lastLeafSet = tree.size - 1;\n        var children = this.props.children || tree.map(function(leafSet, ii) {\n            var decoratorKey = leafSet.get(\"decoratorKey\");\n            var leavesForLeafSet = leafSet.get(\"leaves\");\n            var lastLeaf = leavesForLeafSet.size - 1;\n            var Leaves = leavesForLeafSet.map(function(leaf, jj) {\n                var offsetKey = DraftOffsetKey.encode(blockKey, ii, jj);\n                var start = leaf.get(\"start\");\n                var end = leaf.get(\"end\");\n                return React.createElement(DraftEditorLeaf, {\n                    key: offsetKey,\n                    offsetKey: offsetKey,\n                    block: block,\n                    start: start,\n                    selection: hasSelection ? selection : null,\n                    forceSelection: forceSelection,\n                    text: text.slice(start, end),\n                    styleSet: block.getInlineStyleAt(start),\n                    customStyleMap: customStyleMap,\n                    customStyleFn: customStyleFn,\n                    isLast: decoratorKey === lastLeafSet && jj === lastLeaf\n                });\n            }).toArray();\n            if (!decoratorKey || !decorator) {\n                return Leaves;\n            }\n            return React.createElement(DraftEditorDecoratedLeaves, {\n                block: block,\n                children: Leaves,\n                contentState: contentState,\n                decorator: decorator,\n                decoratorKey: decoratorKey,\n                direction: direction,\n                leafSet: leafSet,\n                text: text,\n                key: ii\n            });\n        }).toArray();\n        return React.createElement(\"div\", {\n            \"data-offset-key\": DraftOffsetKey.encode(blockKey, 0, 0),\n            className: cx({\n                \"public/DraftStyleDefault/block\": true,\n                \"public/DraftStyleDefault/ltr\": direction === \"LTR\",\n                \"public/DraftStyleDefault/rtl\": direction === \"RTL\"\n            })\n        }, children);\n    };\n    return DraftEditorNode;\n}(React.Component);\nmodule.exports = DraftEditorNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEditorNode.react.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEditorPlaceholder.react.js":
/*!*******************************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEditorPlaceholder.react.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar cx = __webpack_require__(/*! fbjs/lib/cx */ \"(ssr)/./node_modules/fbjs/lib/cx.js\");\n/**\n * This component is responsible for rendering placeholder text for the\n * `DraftEditor` component.\n *\n * Override placeholder style via CSS.\n */ var DraftEditorPlaceholder = /*#__PURE__*/ function(_React$Component) {\n    _inheritsLoose(DraftEditorPlaceholder, _React$Component);\n    function DraftEditorPlaceholder() {\n        return _React$Component.apply(this, arguments) || this;\n    }\n    var _proto = DraftEditorPlaceholder.prototype;\n    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n        return this.props.text !== nextProps.text || this.props.editorState.getSelection().getHasFocus() !== nextProps.editorState.getSelection().getHasFocus();\n    };\n    _proto.render = function render() {\n        var hasFocus = this.props.editorState.getSelection().getHasFocus();\n        var className = cx({\n            \"public/DraftEditorPlaceholder/root\": true,\n            \"public/DraftEditorPlaceholder/hasFocus\": hasFocus\n        });\n        var contentStyle = {\n            whiteSpace: \"pre-wrap\"\n        };\n        return React.createElement(\"div\", {\n            className: className\n        }, React.createElement(\"div\", {\n            className: cx(\"public/DraftEditorPlaceholder/inner\"),\n            id: this.props.accessibilityID,\n            style: contentStyle\n        }, this.props.text));\n    };\n    return DraftEditorPlaceholder;\n}(React.Component);\nmodule.exports = DraftEditorPlaceholder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0RWRpdG9yUGxhY2Vob2xkZXIucmVhY3QuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFFQSxTQUFTQSxlQUFlQyxRQUFRLEVBQUVDLFVBQVU7SUFBSUQsU0FBU0UsU0FBUyxHQUFHQyxPQUFPQyxNQUFNLENBQUNILFdBQVdDLFNBQVM7SUFBR0YsU0FBU0UsU0FBUyxDQUFDRyxXQUFXLEdBQUdMO0lBQVVBLFNBQVNNLFNBQVMsR0FBR0w7QUFBWTtBQUV0TCxJQUFJTSxRQUFRQyxtQkFBT0EsQ0FBQyx3R0FBTztBQUUzQixJQUFJQyxLQUFLRCxtQkFBT0EsQ0FBQyx3REFBYTtBQUU5Qjs7Ozs7Q0FLQyxHQUNELElBQUlFLHlCQUF5QixXQUFXLEdBQUUsU0FBVUMsZ0JBQWdCO0lBQ2xFWixlQUFlVyx3QkFBd0JDO0lBRXZDLFNBQVNEO1FBQ1AsT0FBT0MsaUJBQWlCQyxLQUFLLENBQUMsSUFBSSxFQUFFQyxjQUFjLElBQUk7SUFDeEQ7SUFFQSxJQUFJQyxTQUFTSix1QkFBdUJSLFNBQVM7SUFFN0NZLE9BQU9DLHFCQUFxQixHQUFHLFNBQVNBLHNCQUFzQkMsU0FBUztRQUNyRSxPQUFPLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxJQUFJLEtBQUtGLFVBQVVFLElBQUksSUFBSSxJQUFJLENBQUNELEtBQUssQ0FBQ0UsV0FBVyxDQUFDQyxZQUFZLEdBQUdDLFdBQVcsT0FBT0wsVUFBVUcsV0FBVyxDQUFDQyxZQUFZLEdBQUdDLFdBQVc7SUFDdko7SUFFQVAsT0FBT1EsTUFBTSxHQUFHLFNBQVNBO1FBQ3ZCLElBQUlDLFdBQVcsSUFBSSxDQUFDTixLQUFLLENBQUNFLFdBQVcsQ0FBQ0MsWUFBWSxHQUFHQyxXQUFXO1FBQ2hFLElBQUlHLFlBQVlmLEdBQUc7WUFDakIsc0NBQXNDO1lBQ3RDLDBDQUEwQ2M7UUFDNUM7UUFDQSxJQUFJRSxlQUFlO1lBQ2pCQyxZQUFZO1FBQ2Q7UUFDQSxPQUFPbkIsTUFBTW9CLGFBQWEsQ0FBQyxPQUFPO1lBQ2hDSCxXQUFXQTtRQUNiLEdBQUdqQixNQUFNb0IsYUFBYSxDQUFDLE9BQU87WUFDNUJILFdBQVdmLEdBQUc7WUFDZG1CLElBQUksSUFBSSxDQUFDWCxLQUFLLENBQUNZLGVBQWU7WUFDOUJDLE9BQU9MO1FBQ1QsR0FBRyxJQUFJLENBQUNSLEtBQUssQ0FBQ0MsSUFBSTtJQUNwQjtJQUVBLE9BQU9SO0FBQ1QsRUFBRUgsTUFBTXdCLFNBQVM7QUFFakJDLE9BQU9DLE9BQU8sR0FBR3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVlbC1oYXJ2ZXN0ZXIvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0RWRpdG9yUGxhY2Vob2xkZXIucmVhY3QuanM/NmQ0MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuXG52YXIgY3ggPSByZXF1aXJlKFwiZmJqcy9saWIvY3hcIik7XG5cbi8qKlxuICogVGhpcyBjb21wb25lbnQgaXMgcmVzcG9uc2libGUgZm9yIHJlbmRlcmluZyBwbGFjZWhvbGRlciB0ZXh0IGZvciB0aGVcbiAqIGBEcmFmdEVkaXRvcmAgY29tcG9uZW50LlxuICpcbiAqIE92ZXJyaWRlIHBsYWNlaG9sZGVyIHN0eWxlIHZpYSBDU1MuXG4gKi9cbnZhciBEcmFmdEVkaXRvclBsYWNlaG9sZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKERyYWZ0RWRpdG9yUGxhY2Vob2xkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIERyYWZ0RWRpdG9yUGxhY2Vob2xkZXIoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IERyYWZ0RWRpdG9yUGxhY2Vob2xkZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMudGV4dCAhPT0gbmV4dFByb3BzLnRleHQgfHwgdGhpcy5wcm9wcy5lZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKS5nZXRIYXNGb2N1cygpICE9PSBuZXh0UHJvcHMuZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCkuZ2V0SGFzRm9jdXMoKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBoYXNGb2N1cyA9IHRoaXMucHJvcHMuZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCkuZ2V0SGFzRm9jdXMoKTtcbiAgICB2YXIgY2xhc3NOYW1lID0gY3goe1xuICAgICAgJ3B1YmxpYy9EcmFmdEVkaXRvclBsYWNlaG9sZGVyL3Jvb3QnOiB0cnVlLFxuICAgICAgJ3B1YmxpYy9EcmFmdEVkaXRvclBsYWNlaG9sZGVyL2hhc0ZvY3VzJzogaGFzRm9jdXNcbiAgICB9KTtcbiAgICB2YXIgY29udGVudFN0eWxlID0ge1xuICAgICAgd2hpdGVTcGFjZTogJ3ByZS13cmFwJ1xuICAgIH07XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY3goJ3B1YmxpYy9EcmFmdEVkaXRvclBsYWNlaG9sZGVyL2lubmVyJyksXG4gICAgICBpZDogdGhpcy5wcm9wcy5hY2Nlc3NpYmlsaXR5SUQsXG4gICAgICBzdHlsZTogY29udGVudFN0eWxlXG4gICAgfSwgdGhpcy5wcm9wcy50ZXh0KSk7XG4gIH07XG5cbiAgcmV0dXJuIERyYWZ0RWRpdG9yUGxhY2Vob2xkZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbm1vZHVsZS5leHBvcnRzID0gRHJhZnRFZGl0b3JQbGFjZWhvbGRlcjsiXSwibmFtZXMiOlsiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsIl9fcHJvdG9fXyIsIlJlYWN0IiwicmVxdWlyZSIsImN4IiwiRHJhZnRFZGl0b3JQbGFjZWhvbGRlciIsIl9SZWFjdCRDb21wb25lbnQiLCJhcHBseSIsImFyZ3VtZW50cyIsIl9wcm90byIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsIm5leHRQcm9wcyIsInByb3BzIiwidGV4dCIsImVkaXRvclN0YXRlIiwiZ2V0U2VsZWN0aW9uIiwiZ2V0SGFzRm9jdXMiLCJyZW5kZXIiLCJoYXNGb2N1cyIsImNsYXNzTmFtZSIsImNvbnRlbnRTdHlsZSIsIndoaXRlU3BhY2UiLCJjcmVhdGVFbGVtZW50IiwiaWQiLCJhY2Nlc3NpYmlsaXR5SUQiLCJzdHlsZSIsIkNvbXBvbmVudCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEditorPlaceholder.react.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEditorTextNode.react.js":
/*!****************************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEditorTextNode.react.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar UserAgent = __webpack_require__(/*! fbjs/lib/UserAgent */ \"(ssr)/./node_modules/fbjs/lib/UserAgent.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar isElement = __webpack_require__(/*! ./isElement */ \"(ssr)/./node_modules/draft-js/lib/isElement.js\"); // In IE, spans with <br> tags render as two newlines. By rendering a span\n// with only a newline character, we can be sure to render a single line.\nvar useNewlineChar = UserAgent.isBrowser(\"IE <= 11\");\n/**\n * Check whether the node should be considered a newline.\n */ function isNewline(node) {\n    return useNewlineChar ? node.textContent === \"\\n\" : node.tagName === \"BR\";\n}\n/**\n * Placeholder elements for empty text content.\n *\n * What is this `data-text` attribute, anyway? It turns out that we need to\n * put an attribute on the lowest-level text node in order to preserve correct\n * spellcheck handling. If the <span> is naked, Chrome and Safari may do\n * bizarre things to do the DOM -- split text nodes, create extra spans, etc.\n * If the <span> has an attribute, this appears not to happen.\n * See http://jsfiddle.net/9khdavod/ for the failure case, and\n * http://jsfiddle.net/7pg143f7/ for the fixed case.\n */ var NEWLINE_A = function NEWLINE_A(ref) {\n    return useNewlineChar ? React.createElement(\"span\", {\n        key: \"A\",\n        \"data-text\": \"true\",\n        ref: ref\n    }, \"\\n\") : React.createElement(\"br\", {\n        key: \"A\",\n        \"data-text\": \"true\",\n        ref: ref\n    });\n};\nvar NEWLINE_B = function NEWLINE_B(ref) {\n    return useNewlineChar ? React.createElement(\"span\", {\n        key: \"B\",\n        \"data-text\": \"true\",\n        ref: ref\n    }, \"\\n\") : React.createElement(\"br\", {\n        key: \"B\",\n        \"data-text\": \"true\",\n        ref: ref\n    });\n};\n/**\n * The lowest-level component in a `DraftEditor`, the text node component\n * replaces the default React text node implementation. This allows us to\n * perform custom handling of newline behavior and avoid re-rendering text\n * nodes with DOM state that already matches the expectations of our immutable\n * editor state.\n */ var DraftEditorTextNode = /*#__PURE__*/ function(_React$Component) {\n    _inheritsLoose(DraftEditorTextNode, _React$Component);\n    function DraftEditorTextNode(props) {\n        var _this;\n        _this = _React$Component.call(this, props) || this; // By flipping this flag, we also keep flipping keys which forces\n        // React to remount this node every time it rerenders.\n        _defineProperty(_assertThisInitialized(_this), \"_forceFlag\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_node\", void 0);\n        _this._forceFlag = false;\n        return _this;\n    }\n    var _proto = DraftEditorTextNode.prototype;\n    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n        var node = this._node;\n        var shouldBeNewline = nextProps.children === \"\";\n        !isElement(node) ?  true ? invariant(false, \"node is not an Element\") : 0 : void 0;\n        var elementNode = node;\n        if (shouldBeNewline) {\n            return !isNewline(elementNode);\n        }\n        return elementNode.textContent !== nextProps.children;\n    };\n    _proto.componentDidMount = function componentDidMount() {\n        this._forceFlag = !this._forceFlag;\n    };\n    _proto.componentDidUpdate = function componentDidUpdate() {\n        this._forceFlag = !this._forceFlag;\n    };\n    _proto.render = function render() {\n        var _this2 = this;\n        if (this.props.children === \"\") {\n            return this._forceFlag ? NEWLINE_A(function(ref) {\n                return _this2._node = ref;\n            }) : NEWLINE_B(function(ref) {\n                return _this2._node = ref;\n            });\n        }\n        return React.createElement(\"span\", {\n            key: this._forceFlag ? \"A\" : \"B\",\n            \"data-text\": \"true\",\n            ref: function ref(_ref) {\n                return _this2._node = _ref;\n            }\n        }, this.props.children);\n    };\n    return DraftEditorTextNode;\n}(React.Component);\nmodule.exports = DraftEditorTextNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEditorTextNode.react.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEffects.js":
/*!***************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEffects.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */ \nmodule.exports = {\n    initODS: function initODS() {},\n    handleExtensionCausedError: function handleExtensionCausedError() {}\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0RWZmZWN0cy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0NBTUMsR0FDRDtBQUVBQSxPQUFPQyxPQUFPLEdBQUc7SUFDZkMsU0FBUyxTQUFTQSxXQUFXO0lBQzdCQyw0QkFBNEIsU0FBU0EsOEJBQThCO0FBQ3JFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVlbC1oYXJ2ZXN0ZXIvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0RWZmZWN0cy5qcz8yYzZkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpbml0T0RTOiBmdW5jdGlvbiBpbml0T0RTKCkge30sXG4gIGhhbmRsZUV4dGVuc2lvbkNhdXNlZEVycm9yOiBmdW5jdGlvbiBoYW5kbGVFeHRlbnNpb25DYXVzZWRFcnJvcigpIHt9XG59OyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiaW5pdE9EUyIsImhhbmRsZUV4dGVuc2lvbkNhdXNlZEVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEffects.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEntity.js":
/*!**************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEntity.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ var DraftEntityInstance = __webpack_require__(/*! ./DraftEntityInstance */ \"(ssr)/./node_modules/draft-js/lib/DraftEntityInstance.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar uuid = __webpack_require__(/*! ./uuid */ \"(ssr)/./node_modules/draft-js/lib/uuid.js\");\nvar Map = Immutable.Map;\nvar instances = Map();\nvar instanceKey = uuid();\n/**\n * Temporary utility for generating the warnings\n */ function logWarning(oldMethodCall, newMethodCall) {\n    console.warn(\"WARNING: \" + oldMethodCall + ' will be deprecated soon!\\nPlease use \"' + newMethodCall + '\" instead.');\n}\n/**\n * A \"document entity\" is an object containing metadata associated with a\n * piece of text in a ContentBlock.\n *\n * For example, a `link` entity might include a `uri` property. When a\n * ContentBlock is rendered in the browser, text that refers to that link\n * entity may be rendered as an anchor, with the `uri` as the href value.\n *\n * In a ContentBlock, every position in the text may correspond to zero\n * or one entities. This correspondence is tracked using a key string,\n * generated via DraftEntity.create() and used to obtain entity metadata\n * via DraftEntity.get().\n */ var DraftEntity = {\n    /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.getLastCreatedEntityKey' instead.\n   * ---\n   * Get the random key string from whatever entity was last created.\n   * We need this to support the new API, as part of transitioning to put Entity\n   * storage in contentState.\n   */ getLastCreatedEntityKey: function getLastCreatedEntityKey() {\n        logWarning(\"DraftEntity.getLastCreatedEntityKey\", \"contentState.getLastCreatedEntityKey\");\n        return DraftEntity.__getLastCreatedEntityKey();\n    },\n    /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.createEntity' instead.\n   * ---\n   * Create a DraftEntityInstance and store it for later retrieval.\n   *\n   * A random key string will be generated and returned. This key may\n   * be used to track the entity's usage in a ContentBlock, and for\n   * retrieving data about the entity at render time.\n   */ create: function create(type, mutability, data) {\n        logWarning(\"DraftEntity.create\", \"contentState.createEntity\");\n        return DraftEntity.__create(type, mutability, data);\n    },\n    /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.addEntity' instead.\n   * ---\n   * Add an existing DraftEntityInstance to the DraftEntity map. This is\n   * useful when restoring instances from the server.\n   */ add: function add(instance) {\n        logWarning(\"DraftEntity.add\", \"contentState.addEntity\");\n        return DraftEntity.__add(instance);\n    },\n    /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.getEntity' instead.\n   * ---\n   * Retrieve the entity corresponding to the supplied key string.\n   */ get: function get(key) {\n        logWarning(\"DraftEntity.get\", \"contentState.getEntity\");\n        return DraftEntity.__get(key);\n    },\n    /**\n   * Get all the entities in the content state.\n   */ __getAll: function __getAll() {\n        return instances;\n    },\n    /**\n   * Load the entity map with the given set of entities.\n   */ __loadWithEntities: function __loadWithEntities(entities) {\n        instances = entities;\n        instanceKey = uuid();\n    },\n    /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.mergeEntityData' instead.\n   * ---\n   * Entity instances are immutable. If you need to update the data for an\n   * instance, this method will merge your data updates and return a new\n   * instance.\n   */ mergeData: function mergeData(key, toMerge) {\n        logWarning(\"DraftEntity.mergeData\", \"contentState.mergeEntityData\");\n        return DraftEntity.__mergeData(key, toMerge);\n    },\n    /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.replaceEntityData' instead.\n   * ---\n   * Completely replace the data for a given instance.\n   */ replaceData: function replaceData(key, newData) {\n        logWarning(\"DraftEntity.replaceData\", \"contentState.replaceEntityData\");\n        return DraftEntity.__replaceData(key, newData);\n    },\n    // ***********************************WARNING******************************\n    // --- the above public API will be deprecated in the next version of Draft!\n    // The methods below this line are private - don't call them directly.\n    /**\n   * Get the random key string from whatever entity was last created.\n   * We need this to support the new API, as part of transitioning to put Entity\n   * storage in contentState.\n   */ __getLastCreatedEntityKey: function __getLastCreatedEntityKey() {\n        return instanceKey;\n    },\n    /**\n   * Create a DraftEntityInstance and store it for later retrieval.\n   *\n   * A random key string will be generated and returned. This key may\n   * be used to track the entity's usage in a ContentBlock, and for\n   * retrieving data about the entity at render time.\n   */ __create: function __create(type, mutability, data) {\n        return DraftEntity.__add(new DraftEntityInstance({\n            type: type,\n            mutability: mutability,\n            data: data || {}\n        }));\n    },\n    /**\n   * Add an existing DraftEntityInstance to the DraftEntity map. This is\n   * useful when restoring instances from the server.\n   */ __add: function __add(instance) {\n        instanceKey = uuid();\n        instances = instances.set(instanceKey, instance);\n        return instanceKey;\n    },\n    /**\n   * Retrieve the entity corresponding to the supplied key string.\n   */ __get: function __get(key) {\n        var instance = instances.get(key);\n        !!!instance ?  true ? invariant(false, \"Unknown DraftEntity key: %s.\", key) : 0 : void 0;\n        return instance;\n    },\n    /**\n   * Entity instances are immutable. If you need to update the data for an\n   * instance, this method will merge your data updates and return a new\n   * instance.\n   */ __mergeData: function __mergeData(key, toMerge) {\n        var instance = DraftEntity.__get(key);\n        var newData = _objectSpread({}, instance.getData(), toMerge);\n        var newInstance = instance.set(\"data\", newData);\n        instances = instances.set(key, newInstance);\n        return newInstance;\n    },\n    /**\n   * Completely replace the data for a given instance.\n   */ __replaceData: function __replaceData(key, newData) {\n        var instance = DraftEntity.__get(key);\n        var newInstance = instance.set(\"data\", newData);\n        instances = instances.set(key, newInstance);\n        return newInstance;\n    }\n};\nmodule.exports = DraftEntity;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEntity.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEntityInstance.js":
/*!**********************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEntityInstance.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @legacyServerCallableInstance\n * @format\n * \n * @emails oncall+draft_js\n */ \nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar Record = Immutable.Record;\nvar DraftEntityInstanceRecord = Record({\n    type: \"TOKEN\",\n    mutability: \"IMMUTABLE\",\n    data: Object\n});\n/**\n * An instance of a document entity, consisting of a `type` and relevant\n * `data`, metadata about the entity.\n *\n * For instance, a \"link\" entity might provide a URI, and a \"mention\"\n * entity might provide the mentioned user's ID. These pieces of data\n * may be used when rendering the entity as part of a ContentBlock DOM\n * representation. For a link, the data would be used as an href for\n * the rendered anchor. For a mention, the ID could be used to retrieve\n * a hovercard.\n */ var DraftEntityInstance = /*#__PURE__*/ function(_DraftEntityInstanceR) {\n    _inheritsLoose(DraftEntityInstance, _DraftEntityInstanceR);\n    function DraftEntityInstance() {\n        return _DraftEntityInstanceR.apply(this, arguments) || this;\n    }\n    var _proto = DraftEntityInstance.prototype;\n    _proto.getType = function getType() {\n        return this.get(\"type\");\n    };\n    _proto.getMutability = function getMutability() {\n        return this.get(\"mutability\");\n    };\n    _proto.getData = function getData() {\n        return this.get(\"data\");\n    };\n    return DraftEntityInstance;\n}(DraftEntityInstanceRecord);\nmodule.exports = DraftEntityInstance;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0RW50aXR5SW5zdGFuY2UuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Q0FVQyxHQUNEO0FBRUEsU0FBU0EsZUFBZUMsUUFBUSxFQUFFQyxVQUFVO0lBQUlELFNBQVNFLFNBQVMsR0FBR0MsT0FBT0MsTUFBTSxDQUFDSCxXQUFXQyxTQUFTO0lBQUdGLFNBQVNFLFNBQVMsQ0FBQ0csV0FBVyxHQUFHTDtJQUFVQSxTQUFTTSxTQUFTLEdBQUdMO0FBQVk7QUFFdEwsSUFBSU0sWUFBWUMsbUJBQU9BLENBQUMseUZBQVc7QUFFbkMsSUFBSUMsU0FBU0YsVUFBVUUsTUFBTTtBQUM3QixJQUFJQyw0QkFBNEJELE9BQU87SUFDckNFLE1BQU07SUFDTkMsWUFBWTtJQUNaQyxNQUFNVjtBQUNSO0FBQ0E7Ozs7Ozs7Ozs7Q0FVQyxHQUVELElBQUlXLHNCQUFzQixXQUFXLEdBQUUsU0FBVUMscUJBQXFCO0lBQ3BFaEIsZUFBZWUscUJBQXFCQztJQUVwQyxTQUFTRDtRQUNQLE9BQU9DLHNCQUFzQkMsS0FBSyxDQUFDLElBQUksRUFBRUMsY0FBYyxJQUFJO0lBQzdEO0lBRUEsSUFBSUMsU0FBU0osb0JBQW9CWixTQUFTO0lBRTFDZ0IsT0FBT0MsT0FBTyxHQUFHLFNBQVNBO1FBQ3hCLE9BQU8sSUFBSSxDQUFDQyxHQUFHLENBQUM7SUFDbEI7SUFFQUYsT0FBT0csYUFBYSxHQUFHLFNBQVNBO1FBQzlCLE9BQU8sSUFBSSxDQUFDRCxHQUFHLENBQUM7SUFDbEI7SUFFQUYsT0FBT0ksT0FBTyxHQUFHLFNBQVNBO1FBQ3hCLE9BQU8sSUFBSSxDQUFDRixHQUFHLENBQUM7SUFDbEI7SUFFQSxPQUFPTjtBQUNULEVBQUVKO0FBRUZhLE9BQU9DLE9BQU8sR0FBR1YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWVsLWhhcnZlc3Rlci8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvRHJhZnRFbnRpdHlJbnN0YW5jZS5qcz83YTBkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGxlZ2FjeVNlcnZlckNhbGxhYmxlSW5zdGFuY2VcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEltbXV0YWJsZSA9IHJlcXVpcmUoXCJpbW11dGFibGVcIik7XG5cbnZhciBSZWNvcmQgPSBJbW11dGFibGUuUmVjb3JkO1xudmFyIERyYWZ0RW50aXR5SW5zdGFuY2VSZWNvcmQgPSBSZWNvcmQoe1xuICB0eXBlOiAnVE9LRU4nLFxuICBtdXRhYmlsaXR5OiAnSU1NVVRBQkxFJyxcbiAgZGF0YTogT2JqZWN0XG59KTtcbi8qKlxuICogQW4gaW5zdGFuY2Ugb2YgYSBkb2N1bWVudCBlbnRpdHksIGNvbnNpc3Rpbmcgb2YgYSBgdHlwZWAgYW5kIHJlbGV2YW50XG4gKiBgZGF0YWAsIG1ldGFkYXRhIGFib3V0IHRoZSBlbnRpdHkuXG4gKlxuICogRm9yIGluc3RhbmNlLCBhIFwibGlua1wiIGVudGl0eSBtaWdodCBwcm92aWRlIGEgVVJJLCBhbmQgYSBcIm1lbnRpb25cIlxuICogZW50aXR5IG1pZ2h0IHByb3ZpZGUgdGhlIG1lbnRpb25lZCB1c2VyJ3MgSUQuIFRoZXNlIHBpZWNlcyBvZiBkYXRhXG4gKiBtYXkgYmUgdXNlZCB3aGVuIHJlbmRlcmluZyB0aGUgZW50aXR5IGFzIHBhcnQgb2YgYSBDb250ZW50QmxvY2sgRE9NXG4gKiByZXByZXNlbnRhdGlvbi4gRm9yIGEgbGluaywgdGhlIGRhdGEgd291bGQgYmUgdXNlZCBhcyBhbiBocmVmIGZvclxuICogdGhlIHJlbmRlcmVkIGFuY2hvci4gRm9yIGEgbWVudGlvbiwgdGhlIElEIGNvdWxkIGJlIHVzZWQgdG8gcmV0cmlldmVcbiAqIGEgaG92ZXJjYXJkLlxuICovXG5cbnZhciBEcmFmdEVudGl0eUluc3RhbmNlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfRHJhZnRFbnRpdHlJbnN0YW5jZVIpIHtcbiAgX2luaGVyaXRzTG9vc2UoRHJhZnRFbnRpdHlJbnN0YW5jZSwgX0RyYWZ0RW50aXR5SW5zdGFuY2VSKTtcblxuICBmdW5jdGlvbiBEcmFmdEVudGl0eUluc3RhbmNlKCkge1xuICAgIHJldHVybiBfRHJhZnRFbnRpdHlJbnN0YW5jZVIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IERyYWZ0RW50aXR5SW5zdGFuY2UucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRUeXBlID0gZnVuY3Rpb24gZ2V0VHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXQoJ3R5cGUnKTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0TXV0YWJpbGl0eSA9IGZ1bmN0aW9uIGdldE11dGFiaWxpdHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCdtdXRhYmlsaXR5Jyk7XG4gIH07XG5cbiAgX3Byb3RvLmdldERhdGEgPSBmdW5jdGlvbiBnZXREYXRhKCkge1xuICAgIHJldHVybiB0aGlzLmdldCgnZGF0YScpO1xuICB9O1xuXG4gIHJldHVybiBEcmFmdEVudGl0eUluc3RhbmNlO1xufShEcmFmdEVudGl0eUluc3RhbmNlUmVjb3JkKTtcblxubW9kdWxlLmV4cG9ydHMgPSBEcmFmdEVudGl0eUluc3RhbmNlOyJdLCJuYW1lcyI6WyJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwiX19wcm90b19fIiwiSW1tdXRhYmxlIiwicmVxdWlyZSIsIlJlY29yZCIsIkRyYWZ0RW50aXR5SW5zdGFuY2VSZWNvcmQiLCJ0eXBlIiwibXV0YWJpbGl0eSIsImRhdGEiLCJEcmFmdEVudGl0eUluc3RhbmNlIiwiX0RyYWZ0RW50aXR5SW5zdGFuY2VSIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJfcHJvdG8iLCJnZXRUeXBlIiwiZ2V0IiwiZ2V0TXV0YWJpbGl0eSIsImdldERhdGEiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEntityInstance.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftEntitySegments.js":
/*!**********************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftEntitySegments.js ***!
  \**********************************************************/
/***/ ((module) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \n/**\n * Identify the range to delete from a segmented entity.\n *\n * Rules:\n *\n *  Example: 'John F. Kennedy'\n *\n *   - Deletion from within any non-whitespace (i.e. ['John', 'F.', 'Kennedy'])\n *     will return the range of that text.\n *\n *       'John F. Kennedy' -> 'John F.'\n *                  ^\n *\n *   - Forward deletion of whitespace will remove the following section:\n *\n *       'John F. Kennedy' -> 'John Kennedy'\n *            ^\n *\n *   - Backward deletion of whitespace will remove the previous section:\n *\n *       'John F. Kennedy' -> 'F. Kennedy'\n *            ^\n */ var DraftEntitySegments = {\n    getRemovalRange: function getRemovalRange(selectionStart, selectionEnd, text, entityStart, direction) {\n        var segments = text.split(\" \");\n        segments = segments.map(function(/*string*/ segment, /*number*/ ii) {\n            if (direction === \"forward\") {\n                if (ii > 0) {\n                    return \" \" + segment;\n                }\n            } else if (ii < segments.length - 1) {\n                return segment + \" \";\n            }\n            return segment;\n        });\n        var segmentStart = entityStart;\n        var segmentEnd;\n        var segment;\n        var removalStart = null;\n        var removalEnd = null;\n        for(var jj = 0; jj < segments.length; jj++){\n            segment = segments[jj];\n            segmentEnd = segmentStart + segment.length; // Our selection overlaps this segment.\n            if (selectionStart < segmentEnd && segmentStart < selectionEnd) {\n                if (removalStart !== null) {\n                    removalEnd = segmentEnd;\n                } else {\n                    removalStart = segmentStart;\n                    removalEnd = segmentEnd;\n                }\n            } else if (removalStart !== null) {\n                break;\n            }\n            segmentStart = segmentEnd;\n        }\n        var entityEnd = entityStart + text.length;\n        var atStart = removalStart === entityStart;\n        var atEnd = removalEnd === entityEnd;\n        if (!atStart && atEnd || atStart && !atEnd) {\n            if (direction === \"forward\") {\n                if (removalEnd !== entityEnd) {\n                    removalEnd++;\n                }\n            } else if (removalStart !== entityStart) {\n                removalStart--;\n            }\n        }\n        return {\n            start: removalStart,\n            end: removalEnd\n        };\n    }\n};\nmodule.exports = DraftEntitySegments;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0RW50aXR5U2VnbWVudHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXNCQyxHQUNELElBQUlBLHNCQUFzQjtJQUN4QkMsaUJBQWlCLFNBQVNBLGdCQUFnQkMsY0FBYyxFQUFFQyxZQUFZLEVBQUVDLElBQUksRUFBRUMsV0FBVyxFQUFFQyxTQUFTO1FBQ2xHLElBQUlDLFdBQVdILEtBQUtJLEtBQUssQ0FBQztRQUMxQkQsV0FBV0EsU0FBU0UsR0FBRyxDQUFDLFNBQ3hCLFFBQVEsR0FDUkMsT0FBTyxFQUNQLFFBQVEsR0FDUkMsRUFBRTtZQUNBLElBQUlMLGNBQWMsV0FBVztnQkFDM0IsSUFBSUssS0FBSyxHQUFHO29CQUNWLE9BQU8sTUFBTUQ7Z0JBQ2Y7WUFDRixPQUFPLElBQUlDLEtBQUtKLFNBQVNLLE1BQU0sR0FBRyxHQUFHO2dCQUNuQyxPQUFPRixVQUFVO1lBQ25CO1lBRUEsT0FBT0E7UUFDVDtRQUNBLElBQUlHLGVBQWVSO1FBQ25CLElBQUlTO1FBQ0osSUFBSUo7UUFDSixJQUFJSyxlQUFlO1FBQ25CLElBQUlDLGFBQWE7UUFFakIsSUFBSyxJQUFJQyxLQUFLLEdBQUdBLEtBQUtWLFNBQVNLLE1BQU0sRUFBRUssS0FBTTtZQUMzQ1AsVUFBVUgsUUFBUSxDQUFDVSxHQUFHO1lBQ3RCSCxhQUFhRCxlQUFlSCxRQUFRRSxNQUFNLEVBQUUsdUNBQXVDO1lBRW5GLElBQUlWLGlCQUFpQlksY0FBY0QsZUFBZVYsY0FBYztnQkFDOUQsSUFBSVksaUJBQWlCLE1BQU07b0JBQ3pCQyxhQUFhRjtnQkFDZixPQUFPO29CQUNMQyxlQUFlRjtvQkFDZkcsYUFBYUY7Z0JBQ2Y7WUFDRixPQUFPLElBQUlDLGlCQUFpQixNQUFNO2dCQUNoQztZQUNGO1lBRUFGLGVBQWVDO1FBQ2pCO1FBRUEsSUFBSUksWUFBWWIsY0FBY0QsS0FBS1EsTUFBTTtRQUN6QyxJQUFJTyxVQUFVSixpQkFBaUJWO1FBQy9CLElBQUllLFFBQVFKLGVBQWVFO1FBRTNCLElBQUksQ0FBQ0MsV0FBV0MsU0FBU0QsV0FBVyxDQUFDQyxPQUFPO1lBQzFDLElBQUlkLGNBQWMsV0FBVztnQkFDM0IsSUFBSVUsZUFBZUUsV0FBVztvQkFDNUJGO2dCQUNGO1lBQ0YsT0FBTyxJQUFJRCxpQkFBaUJWLGFBQWE7Z0JBQ3ZDVTtZQUNGO1FBQ0Y7UUFFQSxPQUFPO1lBQ0xNLE9BQU9OO1lBQ1BPLEtBQUtOO1FBQ1A7SUFDRjtBQUNGO0FBQ0FPLE9BQU9DLE9BQU8sR0FBR3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVlbC1oYXJ2ZXN0ZXIvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0RW50aXR5U2VnbWVudHMuanM/M2I5NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIElkZW50aWZ5IHRoZSByYW5nZSB0byBkZWxldGUgZnJvbSBhIHNlZ21lbnRlZCBlbnRpdHkuXG4gKlxuICogUnVsZXM6XG4gKlxuICogIEV4YW1wbGU6ICdKb2huIEYuIEtlbm5lZHknXG4gKlxuICogICAtIERlbGV0aW9uIGZyb20gd2l0aGluIGFueSBub24td2hpdGVzcGFjZSAoaS5lLiBbJ0pvaG4nLCAnRi4nLCAnS2VubmVkeSddKVxuICogICAgIHdpbGwgcmV0dXJuIHRoZSByYW5nZSBvZiB0aGF0IHRleHQuXG4gKlxuICogICAgICAgJ0pvaG4gRi4gS2VubmVkeScgLT4gJ0pvaG4gRi4nXG4gKiAgICAgICAgICAgICAgICAgIF5cbiAqXG4gKiAgIC0gRm9yd2FyZCBkZWxldGlvbiBvZiB3aGl0ZXNwYWNlIHdpbGwgcmVtb3ZlIHRoZSBmb2xsb3dpbmcgc2VjdGlvbjpcbiAqXG4gKiAgICAgICAnSm9obiBGLiBLZW5uZWR5JyAtPiAnSm9obiBLZW5uZWR5J1xuICogICAgICAgICAgICBeXG4gKlxuICogICAtIEJhY2t3YXJkIGRlbGV0aW9uIG9mIHdoaXRlc3BhY2Ugd2lsbCByZW1vdmUgdGhlIHByZXZpb3VzIHNlY3Rpb246XG4gKlxuICogICAgICAgJ0pvaG4gRi4gS2VubmVkeScgLT4gJ0YuIEtlbm5lZHknXG4gKiAgICAgICAgICAgIF5cbiAqL1xudmFyIERyYWZ0RW50aXR5U2VnbWVudHMgPSB7XG4gIGdldFJlbW92YWxSYW5nZTogZnVuY3Rpb24gZ2V0UmVtb3ZhbFJhbmdlKHNlbGVjdGlvblN0YXJ0LCBzZWxlY3Rpb25FbmQsIHRleHQsIGVudGl0eVN0YXJ0LCBkaXJlY3Rpb24pIHtcbiAgICB2YXIgc2VnbWVudHMgPSB0ZXh0LnNwbGl0KCcgJyk7XG4gICAgc2VnbWVudHMgPSBzZWdtZW50cy5tYXAoZnVuY3Rpb24gKFxuICAgIC8qc3RyaW5nKi9cbiAgICBzZWdtZW50LFxuICAgIC8qbnVtYmVyKi9cbiAgICBpaSkge1xuICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ2ZvcndhcmQnKSB7XG4gICAgICAgIGlmIChpaSA+IDApIHtcbiAgICAgICAgICByZXR1cm4gJyAnICsgc2VnbWVudDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpaSA8IHNlZ21lbnRzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgcmV0dXJuIHNlZ21lbnQgKyAnICc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWdtZW50O1xuICAgIH0pO1xuICAgIHZhciBzZWdtZW50U3RhcnQgPSBlbnRpdHlTdGFydDtcbiAgICB2YXIgc2VnbWVudEVuZDtcbiAgICB2YXIgc2VnbWVudDtcbiAgICB2YXIgcmVtb3ZhbFN0YXJ0ID0gbnVsbDtcbiAgICB2YXIgcmVtb3ZhbEVuZCA9IG51bGw7XG5cbiAgICBmb3IgKHZhciBqaiA9IDA7IGpqIDwgc2VnbWVudHMubGVuZ3RoOyBqaisrKSB7XG4gICAgICBzZWdtZW50ID0gc2VnbWVudHNbampdO1xuICAgICAgc2VnbWVudEVuZCA9IHNlZ21lbnRTdGFydCArIHNlZ21lbnQubGVuZ3RoOyAvLyBPdXIgc2VsZWN0aW9uIG92ZXJsYXBzIHRoaXMgc2VnbWVudC5cblxuICAgICAgaWYgKHNlbGVjdGlvblN0YXJ0IDwgc2VnbWVudEVuZCAmJiBzZWdtZW50U3RhcnQgPCBzZWxlY3Rpb25FbmQpIHtcbiAgICAgICAgaWYgKHJlbW92YWxTdGFydCAhPT0gbnVsbCkge1xuICAgICAgICAgIHJlbW92YWxFbmQgPSBzZWdtZW50RW5kO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlbW92YWxTdGFydCA9IHNlZ21lbnRTdGFydDtcbiAgICAgICAgICByZW1vdmFsRW5kID0gc2VnbWVudEVuZDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChyZW1vdmFsU3RhcnQgIT09IG51bGwpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHNlZ21lbnRTdGFydCA9IHNlZ21lbnRFbmQ7XG4gICAgfVxuXG4gICAgdmFyIGVudGl0eUVuZCA9IGVudGl0eVN0YXJ0ICsgdGV4dC5sZW5ndGg7XG4gICAgdmFyIGF0U3RhcnQgPSByZW1vdmFsU3RhcnQgPT09IGVudGl0eVN0YXJ0O1xuICAgIHZhciBhdEVuZCA9IHJlbW92YWxFbmQgPT09IGVudGl0eUVuZDtcblxuICAgIGlmICghYXRTdGFydCAmJiBhdEVuZCB8fCBhdFN0YXJ0ICYmICFhdEVuZCkge1xuICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ2ZvcndhcmQnKSB7XG4gICAgICAgIGlmIChyZW1vdmFsRW5kICE9PSBlbnRpdHlFbmQpIHtcbiAgICAgICAgICByZW1vdmFsRW5kKys7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocmVtb3ZhbFN0YXJ0ICE9PSBlbnRpdHlTdGFydCkge1xuICAgICAgICByZW1vdmFsU3RhcnQtLTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgc3RhcnQ6IHJlbW92YWxTdGFydCxcbiAgICAgIGVuZDogcmVtb3ZhbEVuZFxuICAgIH07XG4gIH1cbn07XG5tb2R1bGUuZXhwb3J0cyA9IERyYWZ0RW50aXR5U2VnbWVudHM7Il0sIm5hbWVzIjpbIkRyYWZ0RW50aXR5U2VnbWVudHMiLCJnZXRSZW1vdmFsUmFuZ2UiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsInRleHQiLCJlbnRpdHlTdGFydCIsImRpcmVjdGlvbiIsInNlZ21lbnRzIiwic3BsaXQiLCJtYXAiLCJzZWdtZW50IiwiaWkiLCJsZW5ndGgiLCJzZWdtZW50U3RhcnQiLCJzZWdtZW50RW5kIiwicmVtb3ZhbFN0YXJ0IiwicmVtb3ZhbEVuZCIsImpqIiwiZW50aXR5RW5kIiwiYXRTdGFydCIsImF0RW5kIiwic3RhcnQiLCJlbmQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftEntitySegments.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftJsDebugLogging.js":
/*!**********************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftJsDebugLogging.js ***!
  \**********************************************************/
/***/ ((module) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */ \nmodule.exports = {\n    logBlockedSelectionEvent: function logBlockedSelectionEvent() {\n        return null;\n    },\n    logSelectionStateFailure: function logSelectionStateFailure() {\n        return null;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0SnNEZWJ1Z0xvZ2dpbmcuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztDQU1DLEdBQ0Q7QUFFQUEsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZDLDBCQUEwQixTQUFTQTtRQUNqQyxPQUFPO0lBQ1Q7SUFDQUMsMEJBQTBCLFNBQVNBO1FBQ2pDLE9BQU87SUFDVDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVlbC1oYXJ2ZXN0ZXIvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0SnNEZWJ1Z0xvZ2dpbmcuanM/NzQ5MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgbG9nQmxvY2tlZFNlbGVjdGlvbkV2ZW50OiBmdW5jdGlvbiBsb2dCbG9ja2VkU2VsZWN0aW9uRXZlbnQoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIGxvZ1NlbGVjdGlvblN0YXRlRmFpbHVyZTogZnVuY3Rpb24gbG9nU2VsZWN0aW9uU3RhdGVGYWlsdXJlKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59OyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibG9nQmxvY2tlZFNlbGVjdGlvbkV2ZW50IiwibG9nU2VsZWN0aW9uU3RhdGVGYWlsdXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftJsDebugLogging.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftModifier.js":
/*!****************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftModifier.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar CharacterMetadata = __webpack_require__(/*! ./CharacterMetadata */ \"(ssr)/./node_modules/draft-js/lib/CharacterMetadata.js\");\nvar ContentStateInlineStyle = __webpack_require__(/*! ./ContentStateInlineStyle */ \"(ssr)/./node_modules/draft-js/lib/ContentStateInlineStyle.js\");\nvar applyEntityToContentState = __webpack_require__(/*! ./applyEntityToContentState */ \"(ssr)/./node_modules/draft-js/lib/applyEntityToContentState.js\");\nvar getCharacterRemovalRange = __webpack_require__(/*! ./getCharacterRemovalRange */ \"(ssr)/./node_modules/draft-js/lib/getCharacterRemovalRange.js\");\nvar getContentStateFragment = __webpack_require__(/*! ./getContentStateFragment */ \"(ssr)/./node_modules/draft-js/lib/getContentStateFragment.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar insertFragmentIntoContentState = __webpack_require__(/*! ./insertFragmentIntoContentState */ \"(ssr)/./node_modules/draft-js/lib/insertFragmentIntoContentState.js\");\nvar insertTextIntoContentState = __webpack_require__(/*! ./insertTextIntoContentState */ \"(ssr)/./node_modules/draft-js/lib/insertTextIntoContentState.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar modifyBlockForContentState = __webpack_require__(/*! ./modifyBlockForContentState */ \"(ssr)/./node_modules/draft-js/lib/modifyBlockForContentState.js\");\nvar removeEntitiesAtEdges = __webpack_require__(/*! ./removeEntitiesAtEdges */ \"(ssr)/./node_modules/draft-js/lib/removeEntitiesAtEdges.js\");\nvar removeRangeFromContentState = __webpack_require__(/*! ./removeRangeFromContentState */ \"(ssr)/./node_modules/draft-js/lib/removeRangeFromContentState.js\");\nvar splitBlockInContentState = __webpack_require__(/*! ./splitBlockInContentState */ \"(ssr)/./node_modules/draft-js/lib/splitBlockInContentState.js\");\nvar OrderedSet = Immutable.OrderedSet;\n/**\n * `DraftModifier` provides a set of convenience methods that apply\n * modifications to a `ContentState` object based on a target `SelectionState`.\n *\n * Any change to a `ContentState` should be decomposable into a series of\n * transaction functions that apply the required changes and return output\n * `ContentState` objects.\n *\n * These functions encapsulate some of the most common transaction sequences.\n */ var DraftModifier = {\n    replaceText: function replaceText(contentState, rangeToReplace, text, inlineStyle, entityKey) {\n        var withoutEntities = removeEntitiesAtEdges(contentState, rangeToReplace);\n        var withoutText = removeRangeFromContentState(withoutEntities, rangeToReplace);\n        var character = CharacterMetadata.create({\n            style: inlineStyle || OrderedSet(),\n            entity: entityKey || null\n        });\n        return insertTextIntoContentState(withoutText, withoutText.getSelectionAfter(), text, character);\n    },\n    insertText: function insertText(contentState, targetRange, text, inlineStyle, entityKey) {\n        !targetRange.isCollapsed() ?  true ? invariant(false, \"Target range must be collapsed for `insertText`.\") : 0 : void 0;\n        return DraftModifier.replaceText(contentState, targetRange, text, inlineStyle, entityKey);\n    },\n    moveText: function moveText(contentState, removalRange, targetRange) {\n        var movedFragment = getContentStateFragment(contentState, removalRange);\n        var afterRemoval = DraftModifier.removeRange(contentState, removalRange, \"backward\");\n        return DraftModifier.replaceWithFragment(afterRemoval, targetRange, movedFragment);\n    },\n    replaceWithFragment: function replaceWithFragment(contentState, targetRange, fragment) {\n        var mergeBlockData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"REPLACE_WITH_NEW_DATA\";\n        var withoutEntities = removeEntitiesAtEdges(contentState, targetRange);\n        var withoutText = removeRangeFromContentState(withoutEntities, targetRange);\n        return insertFragmentIntoContentState(withoutText, withoutText.getSelectionAfter(), fragment, mergeBlockData);\n    },\n    removeRange: function removeRange(contentState, rangeToRemove, removalDirection) {\n        var startKey, endKey, startBlock, endBlock;\n        if (rangeToRemove.getIsBackward()) {\n            rangeToRemove = rangeToRemove.merge({\n                anchorKey: rangeToRemove.getFocusKey(),\n                anchorOffset: rangeToRemove.getFocusOffset(),\n                focusKey: rangeToRemove.getAnchorKey(),\n                focusOffset: rangeToRemove.getAnchorOffset(),\n                isBackward: false\n            });\n        }\n        startKey = rangeToRemove.getAnchorKey();\n        endKey = rangeToRemove.getFocusKey();\n        startBlock = contentState.getBlockForKey(startKey);\n        endBlock = contentState.getBlockForKey(endKey);\n        var startOffset = rangeToRemove.getStartOffset();\n        var endOffset = rangeToRemove.getEndOffset();\n        var startEntityKey = startBlock.getEntityAt(startOffset);\n        var endEntityKey = endBlock.getEntityAt(endOffset - 1); // Check whether the selection state overlaps with a single entity.\n        // If so, try to remove the appropriate substring of the entity text.\n        if (startKey === endKey) {\n            if (startEntityKey && startEntityKey === endEntityKey) {\n                var adjustedRemovalRange = getCharacterRemovalRange(contentState.getEntityMap(), startBlock, endBlock, rangeToRemove, removalDirection);\n                return removeRangeFromContentState(contentState, adjustedRemovalRange);\n            }\n        }\n        var withoutEntities = removeEntitiesAtEdges(contentState, rangeToRemove);\n        return removeRangeFromContentState(withoutEntities, rangeToRemove);\n    },\n    splitBlock: function splitBlock(contentState, selectionState) {\n        var withoutEntities = removeEntitiesAtEdges(contentState, selectionState);\n        var withoutText = removeRangeFromContentState(withoutEntities, selectionState);\n        return splitBlockInContentState(withoutText, withoutText.getSelectionAfter());\n    },\n    applyInlineStyle: function applyInlineStyle(contentState, selectionState, inlineStyle) {\n        return ContentStateInlineStyle.add(contentState, selectionState, inlineStyle);\n    },\n    removeInlineStyle: function removeInlineStyle(contentState, selectionState, inlineStyle) {\n        return ContentStateInlineStyle.remove(contentState, selectionState, inlineStyle);\n    },\n    setBlockType: function setBlockType(contentState, selectionState, blockType) {\n        return modifyBlockForContentState(contentState, selectionState, function(block) {\n            return block.merge({\n                type: blockType,\n                depth: 0\n            });\n        });\n    },\n    setBlockData: function setBlockData(contentState, selectionState, blockData) {\n        return modifyBlockForContentState(contentState, selectionState, function(block) {\n            return block.merge({\n                data: blockData\n            });\n        });\n    },\n    mergeBlockData: function mergeBlockData(contentState, selectionState, blockData) {\n        return modifyBlockForContentState(contentState, selectionState, function(block) {\n            return block.merge({\n                data: block.getData().merge(blockData)\n            });\n        });\n    },\n    applyEntity: function applyEntity(contentState, selectionState, entityKey) {\n        var withoutEntities = removeEntitiesAtEdges(contentState, selectionState);\n        return applyEntityToContentState(withoutEntities, selectionState, entityKey);\n    }\n};\nmodule.exports = DraftModifier;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftModifier.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftOffsetKey.js":
/*!*****************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftOffsetKey.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar KEY_DELIMITER = \"-\";\nvar DraftOffsetKey = {\n    encode: function encode(blockKey, decoratorKey, leafKey) {\n        return blockKey + KEY_DELIMITER + decoratorKey + KEY_DELIMITER + leafKey;\n    },\n    decode: function decode(offsetKey) {\n        // Extracts the last two parts of offsetKey and captures the rest in blockKeyParts\n        var _offsetKey$split$reve = offsetKey.split(KEY_DELIMITER).reverse(), leafKey = _offsetKey$split$reve[0], decoratorKey = _offsetKey$split$reve[1], blockKeyParts = _offsetKey$split$reve.slice(2);\n        return {\n            // Recomposes the parts of blockKey after reversing them\n            blockKey: blockKeyParts.reverse().join(KEY_DELIMITER),\n            decoratorKey: parseInt(decoratorKey, 10),\n            leafKey: parseInt(leafKey, 10)\n        };\n    }\n};\nmodule.exports = DraftOffsetKey;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0T2Zmc2V0S2V5LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsZ0JBQWdCO0FBQ3BCLElBQUlDLGlCQUFpQjtJQUNuQkMsUUFBUSxTQUFTQSxPQUFPQyxRQUFRLEVBQUVDLFlBQVksRUFBRUMsT0FBTztRQUNyRCxPQUFPRixXQUFXSCxnQkFBZ0JJLGVBQWVKLGdCQUFnQks7SUFDbkU7SUFDQUMsUUFBUSxTQUFTQSxPQUFPQyxTQUFTO1FBQy9CLGtGQUFrRjtRQUNsRixJQUFJQyx3QkFBd0JELFVBQVVFLEtBQUssQ0FBQ1QsZUFBZVUsT0FBTyxJQUM5REwsVUFBVUcscUJBQXFCLENBQUMsRUFBRSxFQUNsQ0osZUFBZUkscUJBQXFCLENBQUMsRUFBRSxFQUN2Q0csZ0JBQWdCSCxzQkFBc0JJLEtBQUssQ0FBQztRQUVoRCxPQUFPO1lBQ0wsd0RBQXdEO1lBQ3hEVCxVQUFVUSxjQUFjRCxPQUFPLEdBQUdHLElBQUksQ0FBQ2I7WUFDdkNJLGNBQWNVLFNBQVNWLGNBQWM7WUFDckNDLFNBQVNTLFNBQVNULFNBQVM7UUFDN0I7SUFDRjtBQUNGO0FBQ0FVLE9BQU9DLE9BQU8sR0FBR2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWVsLWhhcnZlc3Rlci8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvRHJhZnRPZmZzZXRLZXkuanM/NGViZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgS0VZX0RFTElNSVRFUiA9ICctJztcbnZhciBEcmFmdE9mZnNldEtleSA9IHtcbiAgZW5jb2RlOiBmdW5jdGlvbiBlbmNvZGUoYmxvY2tLZXksIGRlY29yYXRvcktleSwgbGVhZktleSkge1xuICAgIHJldHVybiBibG9ja0tleSArIEtFWV9ERUxJTUlURVIgKyBkZWNvcmF0b3JLZXkgKyBLRVlfREVMSU1JVEVSICsgbGVhZktleTtcbiAgfSxcbiAgZGVjb2RlOiBmdW5jdGlvbiBkZWNvZGUob2Zmc2V0S2V5KSB7XG4gICAgLy8gRXh0cmFjdHMgdGhlIGxhc3QgdHdvIHBhcnRzIG9mIG9mZnNldEtleSBhbmQgY2FwdHVyZXMgdGhlIHJlc3QgaW4gYmxvY2tLZXlQYXJ0c1xuICAgIHZhciBfb2Zmc2V0S2V5JHNwbGl0JHJldmUgPSBvZmZzZXRLZXkuc3BsaXQoS0VZX0RFTElNSVRFUikucmV2ZXJzZSgpLFxuICAgICAgICBsZWFmS2V5ID0gX29mZnNldEtleSRzcGxpdCRyZXZlWzBdLFxuICAgICAgICBkZWNvcmF0b3JLZXkgPSBfb2Zmc2V0S2V5JHNwbGl0JHJldmVbMV0sXG4gICAgICAgIGJsb2NrS2V5UGFydHMgPSBfb2Zmc2V0S2V5JHNwbGl0JHJldmUuc2xpY2UoMik7XG5cbiAgICByZXR1cm4ge1xuICAgICAgLy8gUmVjb21wb3NlcyB0aGUgcGFydHMgb2YgYmxvY2tLZXkgYWZ0ZXIgcmV2ZXJzaW5nIHRoZW1cbiAgICAgIGJsb2NrS2V5OiBibG9ja0tleVBhcnRzLnJldmVyc2UoKS5qb2luKEtFWV9ERUxJTUlURVIpLFxuICAgICAgZGVjb3JhdG9yS2V5OiBwYXJzZUludChkZWNvcmF0b3JLZXksIDEwKSxcbiAgICAgIGxlYWZLZXk6IHBhcnNlSW50KGxlYWZLZXksIDEwKVxuICAgIH07XG4gIH1cbn07XG5tb2R1bGUuZXhwb3J0cyA9IERyYWZ0T2Zmc2V0S2V5OyJdLCJuYW1lcyI6WyJLRVlfREVMSU1JVEVSIiwiRHJhZnRPZmZzZXRLZXkiLCJlbmNvZGUiLCJibG9ja0tleSIsImRlY29yYXRvcktleSIsImxlYWZLZXkiLCJkZWNvZGUiLCJvZmZzZXRLZXkiLCJfb2Zmc2V0S2V5JHNwbGl0JHJldmUiLCJzcGxpdCIsInJldmVyc2UiLCJibG9ja0tleVBhcnRzIiwic2xpY2UiLCJqb2luIiwicGFyc2VJbnQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftOffsetKey.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftPasteProcessor.js":
/*!**********************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftPasteProcessor.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar ContentBlock = __webpack_require__(/*! ./ContentBlock */ \"(ssr)/./node_modules/draft-js/lib/ContentBlock.js\");\nvar ContentBlockNode = __webpack_require__(/*! ./ContentBlockNode */ \"(ssr)/./node_modules/draft-js/lib/ContentBlockNode.js\");\nvar convertFromHTMLToContentBlocks = __webpack_require__(/*! ./convertFromHTMLToContentBlocks */ \"(ssr)/./node_modules/draft-js/lib/convertFromHTMLToContentBlocks.js\");\nvar generateRandomKey = __webpack_require__(/*! ./generateRandomKey */ \"(ssr)/./node_modules/draft-js/lib/generateRandomKey.js\");\nvar getSafeBodyFromHTML = __webpack_require__(/*! ./getSafeBodyFromHTML */ \"(ssr)/./node_modules/draft-js/lib/getSafeBodyFromHTML.js\");\nvar gkx = __webpack_require__(/*! ./gkx */ \"(ssr)/./node_modules/draft-js/lib/gkx.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar sanitizeDraftText = __webpack_require__(/*! ./sanitizeDraftText */ \"(ssr)/./node_modules/draft-js/lib/sanitizeDraftText.js\");\nvar List = Immutable.List, Repeat = Immutable.Repeat;\nvar experimentalTreeDataSupport = gkx(\"draft_tree_data_support\");\nvar ContentBlockRecord = experimentalTreeDataSupport ? ContentBlockNode : ContentBlock;\nvar DraftPasteProcessor = {\n    processHTML: function processHTML(html, blockRenderMap) {\n        return convertFromHTMLToContentBlocks(html, getSafeBodyFromHTML, blockRenderMap);\n    },\n    processText: function processText(textBlocks, character, type) {\n        return textBlocks.reduce(function(acc, textLine, index) {\n            textLine = sanitizeDraftText(textLine);\n            var key = generateRandomKey();\n            var blockNodeConfig = {\n                key: key,\n                type: type,\n                text: textLine,\n                characterList: List(Repeat(character, textLine.length))\n            }; // next block updates previous block\n            if (experimentalTreeDataSupport && index !== 0) {\n                var prevSiblingIndex = index - 1; // update previous block\n                var previousBlock = acc[prevSiblingIndex] = acc[prevSiblingIndex].merge({\n                    nextSibling: key\n                });\n                blockNodeConfig = _objectSpread({}, blockNodeConfig, {\n                    prevSibling: previousBlock.getKey()\n                });\n            }\n            acc.push(new ContentBlockRecord(blockNodeConfig));\n            return acc;\n        }, []);\n    }\n};\nmodule.exports = DraftPasteProcessor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0UGFzdGVQcm9jZXNzb3IuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFFQSxTQUFTQSxjQUFjQyxNQUFNO0lBQUksSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlDLFVBQVVDLE1BQU0sRUFBRUYsSUFBSztRQUFFLElBQUlHLFNBQVNGLFNBQVMsQ0FBQ0QsRUFBRSxJQUFJLE9BQU9DLFNBQVMsQ0FBQ0QsRUFBRSxHQUFHLENBQUM7UUFBRyxJQUFJSSxVQUFVQyxPQUFPQyxJQUFJLENBQUNIO1FBQVMsSUFBSSxPQUFPRSxPQUFPRSxxQkFBcUIsS0FBSyxZQUFZO1lBQUVILFVBQVVBLFFBQVFJLE1BQU0sQ0FBQ0gsT0FBT0UscUJBQXFCLENBQUNKLFFBQVFNLE1BQU0sQ0FBQyxTQUFVQyxHQUFHO2dCQUFJLE9BQU9MLE9BQU9NLHdCQUF3QixDQUFDUixRQUFRTyxLQUFLRSxVQUFVO1lBQUU7UUFBSztRQUFFUixRQUFRUyxPQUFPLENBQUMsU0FBVUMsR0FBRztZQUFJQyxnQkFBZ0JoQixRQUFRZSxLQUFLWCxNQUFNLENBQUNXLElBQUk7UUFBRztJQUFJO0lBQUUsT0FBT2Y7QUFBUTtBQUVoZSxTQUFTZ0IsZ0JBQWdCQyxHQUFHLEVBQUVGLEdBQUcsRUFBRUcsS0FBSztJQUFJLElBQUlILE9BQU9FLEtBQUs7UUFBRVgsT0FBT2EsY0FBYyxDQUFDRixLQUFLRixLQUFLO1lBQUVHLE9BQU9BO1lBQU9MLFlBQVk7WUFBTU8sY0FBYztZQUFNQyxVQUFVO1FBQUs7SUFBSSxPQUFPO1FBQUVKLEdBQUcsQ0FBQ0YsSUFBSSxHQUFHRztJQUFPO0lBQUUsT0FBT0Q7QUFBSztBQUVoTixJQUFJSyxlQUFlQyxtQkFBT0EsQ0FBQyx5RUFBZ0I7QUFFM0MsSUFBSUMsbUJBQW1CRCxtQkFBT0EsQ0FBQyxpRkFBb0I7QUFFbkQsSUFBSUUsaUNBQWlDRixtQkFBT0EsQ0FBQyw2R0FBa0M7QUFFL0UsSUFBSUcsb0JBQW9CSCxtQkFBT0EsQ0FBQyxtRkFBcUI7QUFFckQsSUFBSUksc0JBQXNCSixtQkFBT0EsQ0FBQyx1RkFBdUI7QUFFekQsSUFBSUssTUFBTUwsbUJBQU9BLENBQUMsdURBQU87QUFFekIsSUFBSU0sWUFBWU4sbUJBQU9BLENBQUMseUZBQVc7QUFFbkMsSUFBSU8sb0JBQW9CUCxtQkFBT0EsQ0FBQyxtRkFBcUI7QUFFckQsSUFBSVEsT0FBT0YsVUFBVUUsSUFBSSxFQUNyQkMsU0FBU0gsVUFBVUcsTUFBTTtBQUM3QixJQUFJQyw4QkFBOEJMLElBQUk7QUFDdEMsSUFBSU0scUJBQXFCRCw4QkFBOEJULG1CQUFtQkY7QUFDMUUsSUFBSWEsc0JBQXNCO0lBQ3hCQyxhQUFhLFNBQVNBLFlBQVlDLElBQUksRUFBRUMsY0FBYztRQUNwRCxPQUFPYiwrQkFBK0JZLE1BQU1WLHFCQUFxQlc7SUFDbkU7SUFDQUMsYUFBYSxTQUFTQSxZQUFZQyxVQUFVLEVBQUVDLFNBQVMsRUFBRUMsSUFBSTtRQUMzRCxPQUFPRixXQUFXRyxNQUFNLENBQUMsU0FBVUMsR0FBRyxFQUFFQyxRQUFRLEVBQUVDLEtBQUs7WUFDckRELFdBQVdmLGtCQUFrQmU7WUFDN0IsSUFBSTlCLE1BQU1XO1lBQ1YsSUFBSXFCLGtCQUFrQjtnQkFDcEJoQyxLQUFLQTtnQkFDTDJCLE1BQU1BO2dCQUNOTSxNQUFNSDtnQkFDTkksZUFBZWxCLEtBQUtDLE9BQU9TLFdBQVdJLFNBQVMxQyxNQUFNO1lBQ3ZELEdBQUcsb0NBQW9DO1lBRXZDLElBQUk4QiwrQkFBK0JhLFVBQVUsR0FBRztnQkFDOUMsSUFBSUksbUJBQW1CSixRQUFRLEdBQUcsd0JBQXdCO2dCQUUxRCxJQUFJSyxnQkFBZ0JQLEdBQUcsQ0FBQ00saUJBQWlCLEdBQUdOLEdBQUcsQ0FBQ00saUJBQWlCLENBQUNFLEtBQUssQ0FBQztvQkFDdEVDLGFBQWF0QztnQkFDZjtnQkFDQWdDLGtCQUFrQmhELGNBQWMsQ0FBQyxHQUFHZ0QsaUJBQWlCO29CQUNuRE8sYUFBYUgsY0FBY0ksTUFBTTtnQkFDbkM7WUFDRjtZQUVBWCxJQUFJWSxJQUFJLENBQUMsSUFBSXRCLG1CQUFtQmE7WUFDaEMsT0FBT0g7UUFDVCxHQUFHLEVBQUU7SUFDUDtBQUNGO0FBQ0FhLE9BQU9DLE9BQU8sR0FBR3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVlbC1oYXJ2ZXN0ZXIvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0UGFzdGVQcm9jZXNzb3IuanM/NTllYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgdmFyIG93bktleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyBpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbicpIHsgb3duS2V5cyA9IG93bktleXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIHN5bSkuZW51bWVyYWJsZTsgfSkpOyB9IG93bktleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBDb250ZW50QmxvY2sgPSByZXF1aXJlKFwiLi9Db250ZW50QmxvY2tcIik7XG5cbnZhciBDb250ZW50QmxvY2tOb2RlID0gcmVxdWlyZShcIi4vQ29udGVudEJsb2NrTm9kZVwiKTtcblxudmFyIGNvbnZlcnRGcm9tSFRNTFRvQ29udGVudEJsb2NrcyA9IHJlcXVpcmUoXCIuL2NvbnZlcnRGcm9tSFRNTFRvQ29udGVudEJsb2Nrc1wiKTtcblxudmFyIGdlbmVyYXRlUmFuZG9tS2V5ID0gcmVxdWlyZShcIi4vZ2VuZXJhdGVSYW5kb21LZXlcIik7XG5cbnZhciBnZXRTYWZlQm9keUZyb21IVE1MID0gcmVxdWlyZShcIi4vZ2V0U2FmZUJvZHlGcm9tSFRNTFwiKTtcblxudmFyIGdreCA9IHJlcXVpcmUoXCIuL2dreFwiKTtcblxudmFyIEltbXV0YWJsZSA9IHJlcXVpcmUoXCJpbW11dGFibGVcIik7XG5cbnZhciBzYW5pdGl6ZURyYWZ0VGV4dCA9IHJlcXVpcmUoXCIuL3Nhbml0aXplRHJhZnRUZXh0XCIpO1xuXG52YXIgTGlzdCA9IEltbXV0YWJsZS5MaXN0LFxuICAgIFJlcGVhdCA9IEltbXV0YWJsZS5SZXBlYXQ7XG52YXIgZXhwZXJpbWVudGFsVHJlZURhdGFTdXBwb3J0ID0gZ2t4KCdkcmFmdF90cmVlX2RhdGFfc3VwcG9ydCcpO1xudmFyIENvbnRlbnRCbG9ja1JlY29yZCA9IGV4cGVyaW1lbnRhbFRyZWVEYXRhU3VwcG9ydCA/IENvbnRlbnRCbG9ja05vZGUgOiBDb250ZW50QmxvY2s7XG52YXIgRHJhZnRQYXN0ZVByb2Nlc3NvciA9IHtcbiAgcHJvY2Vzc0hUTUw6IGZ1bmN0aW9uIHByb2Nlc3NIVE1MKGh0bWwsIGJsb2NrUmVuZGVyTWFwKSB7XG4gICAgcmV0dXJuIGNvbnZlcnRGcm9tSFRNTFRvQ29udGVudEJsb2NrcyhodG1sLCBnZXRTYWZlQm9keUZyb21IVE1MLCBibG9ja1JlbmRlck1hcCk7XG4gIH0sXG4gIHByb2Nlc3NUZXh0OiBmdW5jdGlvbiBwcm9jZXNzVGV4dCh0ZXh0QmxvY2tzLCBjaGFyYWN0ZXIsIHR5cGUpIHtcbiAgICByZXR1cm4gdGV4dEJsb2Nrcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgdGV4dExpbmUsIGluZGV4KSB7XG4gICAgICB0ZXh0TGluZSA9IHNhbml0aXplRHJhZnRUZXh0KHRleHRMaW5lKTtcbiAgICAgIHZhciBrZXkgPSBnZW5lcmF0ZVJhbmRvbUtleSgpO1xuICAgICAgdmFyIGJsb2NrTm9kZUNvbmZpZyA9IHtcbiAgICAgICAga2V5OiBrZXksXG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIHRleHQ6IHRleHRMaW5lLFxuICAgICAgICBjaGFyYWN0ZXJMaXN0OiBMaXN0KFJlcGVhdChjaGFyYWN0ZXIsIHRleHRMaW5lLmxlbmd0aCkpXG4gICAgICB9OyAvLyBuZXh0IGJsb2NrIHVwZGF0ZXMgcHJldmlvdXMgYmxvY2tcblxuICAgICAgaWYgKGV4cGVyaW1lbnRhbFRyZWVEYXRhU3VwcG9ydCAmJiBpbmRleCAhPT0gMCkge1xuICAgICAgICB2YXIgcHJldlNpYmxpbmdJbmRleCA9IGluZGV4IC0gMTsgLy8gdXBkYXRlIHByZXZpb3VzIGJsb2NrXG5cbiAgICAgICAgdmFyIHByZXZpb3VzQmxvY2sgPSBhY2NbcHJldlNpYmxpbmdJbmRleF0gPSBhY2NbcHJldlNpYmxpbmdJbmRleF0ubWVyZ2Uoe1xuICAgICAgICAgIG5leHRTaWJsaW5nOiBrZXlcbiAgICAgICAgfSk7XG4gICAgICAgIGJsb2NrTm9kZUNvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIGJsb2NrTm9kZUNvbmZpZywge1xuICAgICAgICAgIHByZXZTaWJsaW5nOiBwcmV2aW91c0Jsb2NrLmdldEtleSgpXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBhY2MucHVzaChuZXcgQ29udGVudEJsb2NrUmVjb3JkKGJsb2NrTm9kZUNvbmZpZykpO1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBbXSk7XG4gIH1cbn07XG5tb2R1bGUuZXhwb3J0cyA9IERyYWZ0UGFzdGVQcm9jZXNzb3I7Il0sIm5hbWVzIjpbIl9vYmplY3RTcHJlYWQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwib3duS2V5cyIsIk9iamVjdCIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJjb25jYXQiLCJmaWx0ZXIiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiZm9yRWFjaCIsImtleSIsIl9kZWZpbmVQcm9wZXJ0eSIsIm9iaiIsInZhbHVlIiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIkNvbnRlbnRCbG9jayIsInJlcXVpcmUiLCJDb250ZW50QmxvY2tOb2RlIiwiY29udmVydEZyb21IVE1MVG9Db250ZW50QmxvY2tzIiwiZ2VuZXJhdGVSYW5kb21LZXkiLCJnZXRTYWZlQm9keUZyb21IVE1MIiwiZ2t4IiwiSW1tdXRhYmxlIiwic2FuaXRpemVEcmFmdFRleHQiLCJMaXN0IiwiUmVwZWF0IiwiZXhwZXJpbWVudGFsVHJlZURhdGFTdXBwb3J0IiwiQ29udGVudEJsb2NrUmVjb3JkIiwiRHJhZnRQYXN0ZVByb2Nlc3NvciIsInByb2Nlc3NIVE1MIiwiaHRtbCIsImJsb2NrUmVuZGVyTWFwIiwicHJvY2Vzc1RleHQiLCJ0ZXh0QmxvY2tzIiwiY2hhcmFjdGVyIiwidHlwZSIsInJlZHVjZSIsImFjYyIsInRleHRMaW5lIiwiaW5kZXgiLCJibG9ja05vZGVDb25maWciLCJ0ZXh0IiwiY2hhcmFjdGVyTGlzdCIsInByZXZTaWJsaW5nSW5kZXgiLCJwcmV2aW91c0Jsb2NrIiwibWVyZ2UiLCJuZXh0U2libGluZyIsInByZXZTaWJsaW5nIiwiZ2V0S2V5IiwicHVzaCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftPasteProcessor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftRemovableWord.js":
/*!*********************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftRemovableWord.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar TokenizeUtil = __webpack_require__(/*! fbjs/lib/TokenizeUtil */ \"(ssr)/./node_modules/fbjs/lib/TokenizeUtil.js\");\nvar punctuation = TokenizeUtil.getPunctuation(); // The apostrophe and curly single quotes behave in a curious way: when\n// surrounded on both sides by word characters, they behave as word chars; when\n// either neighbor is punctuation or an end of the string, they behave as\n// punctuation.\nvar CHAMELEON_CHARS = \"['‘’]\"; // Remove the underscore, which should count as part of the removable word. The\n// \"chameleon chars\" also count as punctuation in this regex.\nvar WHITESPACE_AND_PUNCTUATION = \"\\\\s|(?![_])\" + punctuation;\nvar DELETE_STRING = \"^\" + \"(?:\" + WHITESPACE_AND_PUNCTUATION + \")*\" + \"(?:\" + CHAMELEON_CHARS + \"|(?!\" + WHITESPACE_AND_PUNCTUATION + \").)*\" + \"(?:(?!\" + WHITESPACE_AND_PUNCTUATION + \").)\";\nvar DELETE_REGEX = new RegExp(DELETE_STRING);\nvar BACKSPACE_STRING = \"(?:(?!\" + WHITESPACE_AND_PUNCTUATION + \").)\" + \"(?:\" + CHAMELEON_CHARS + \"|(?!\" + WHITESPACE_AND_PUNCTUATION + \").)*\" + \"(?:\" + WHITESPACE_AND_PUNCTUATION + \")*\" + \"$\";\nvar BACKSPACE_REGEX = new RegExp(BACKSPACE_STRING);\nfunction getRemovableWord(text, isBackward) {\n    var matches = isBackward ? BACKSPACE_REGEX.exec(text) : DELETE_REGEX.exec(text);\n    return matches ? matches[0] : text;\n}\nvar DraftRemovableWord = {\n    getBackward: function getBackward(text) {\n        return getRemovableWord(text, true);\n    },\n    getForward: function getForward(text) {\n        return getRemovableWord(text, false);\n    }\n};\nmodule.exports = DraftRemovableWord;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0UmVtb3ZhYmxlV29yZC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLElBQUlBLGVBQWVDLG1CQUFPQSxDQUFDLDRFQUF1QjtBQUVsRCxJQUFJQyxjQUFjRixhQUFhRyxjQUFjLElBQUksdUVBQXVFO0FBQ3hILCtFQUErRTtBQUMvRSx5RUFBeUU7QUFDekUsZUFBZTtBQUVmLElBQUlDLGtCQUFrQixTQUFtQiwrRUFBK0U7QUFDeEgsNkRBQTZEO0FBRTdELElBQUlDLDZCQUE2QixnQkFBZ0JIO0FBQ2pELElBQUlJLGdCQUFnQixNQUFNLFFBQVFELDZCQUE2QixPQUFPLFFBQVFELGtCQUFrQixTQUFTQyw2QkFBNkIsU0FBUyxXQUFXQSw2QkFBNkI7QUFDdkwsSUFBSUUsZUFBZSxJQUFJQyxPQUFPRjtBQUM5QixJQUFJRyxtQkFBbUIsV0FBV0osNkJBQTZCLFFBQVEsUUFBUUQsa0JBQWtCLFNBQVNDLDZCQUE2QixTQUFTLFFBQVFBLDZCQUE2QixPQUFPO0FBQzVMLElBQUlLLGtCQUFrQixJQUFJRixPQUFPQztBQUVqQyxTQUFTRSxpQkFBaUJDLElBQUksRUFBRUMsVUFBVTtJQUN4QyxJQUFJQyxVQUFVRCxhQUFhSCxnQkFBZ0JLLElBQUksQ0FBQ0gsUUFBUUwsYUFBYVEsSUFBSSxDQUFDSDtJQUMxRSxPQUFPRSxVQUFVQSxPQUFPLENBQUMsRUFBRSxHQUFHRjtBQUNoQztBQUVBLElBQUlJLHFCQUFxQjtJQUN2QkMsYUFBYSxTQUFTQSxZQUFZTCxJQUFJO1FBQ3BDLE9BQU9ELGlCQUFpQkMsTUFBTTtJQUNoQztJQUNBTSxZQUFZLFNBQVNBLFdBQVdOLElBQUk7UUFDbEMsT0FBT0QsaUJBQWlCQyxNQUFNO0lBQ2hDO0FBQ0Y7QUFDQU8sT0FBT0MsT0FBTyxHQUFHSiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9EcmFmdFJlbW92YWJsZVdvcmQuanM/ZDI2MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgVG9rZW5pemVVdGlsID0gcmVxdWlyZShcImZianMvbGliL1Rva2VuaXplVXRpbFwiKTtcblxudmFyIHB1bmN0dWF0aW9uID0gVG9rZW5pemVVdGlsLmdldFB1bmN0dWF0aW9uKCk7IC8vIFRoZSBhcG9zdHJvcGhlIGFuZCBjdXJseSBzaW5nbGUgcXVvdGVzIGJlaGF2ZSBpbiBhIGN1cmlvdXMgd2F5OiB3aGVuXG4vLyBzdXJyb3VuZGVkIG9uIGJvdGggc2lkZXMgYnkgd29yZCBjaGFyYWN0ZXJzLCB0aGV5IGJlaGF2ZSBhcyB3b3JkIGNoYXJzOyB3aGVuXG4vLyBlaXRoZXIgbmVpZ2hib3IgaXMgcHVuY3R1YXRpb24gb3IgYW4gZW5kIG9mIHRoZSBzdHJpbmcsIHRoZXkgYmVoYXZlIGFzXG4vLyBwdW5jdHVhdGlvbi5cblxudmFyIENIQU1FTEVPTl9DSEFSUyA9IFwiWydcXHUyMDE4XFx1MjAxOV1cIjsgLy8gUmVtb3ZlIHRoZSB1bmRlcnNjb3JlLCB3aGljaCBzaG91bGQgY291bnQgYXMgcGFydCBvZiB0aGUgcmVtb3ZhYmxlIHdvcmQuIFRoZVxuLy8gXCJjaGFtZWxlb24gY2hhcnNcIiBhbHNvIGNvdW50IGFzIHB1bmN0dWF0aW9uIGluIHRoaXMgcmVnZXguXG5cbnZhciBXSElURVNQQUNFX0FORF9QVU5DVFVBVElPTiA9ICdcXFxcc3woPyFbX10pJyArIHB1bmN0dWF0aW9uO1xudmFyIERFTEVURV9TVFJJTkcgPSAnXicgKyAnKD86JyArIFdISVRFU1BBQ0VfQU5EX1BVTkNUVUFUSU9OICsgJykqJyArICcoPzonICsgQ0hBTUVMRU9OX0NIQVJTICsgJ3woPyEnICsgV0hJVEVTUEFDRV9BTkRfUFVOQ1RVQVRJT04gKyAnKS4pKicgKyAnKD86KD8hJyArIFdISVRFU1BBQ0VfQU5EX1BVTkNUVUFUSU9OICsgJykuKSc7XG52YXIgREVMRVRFX1JFR0VYID0gbmV3IFJlZ0V4cChERUxFVEVfU1RSSU5HKTtcbnZhciBCQUNLU1BBQ0VfU1RSSU5HID0gJyg/Oig/IScgKyBXSElURVNQQUNFX0FORF9QVU5DVFVBVElPTiArICcpLiknICsgJyg/OicgKyBDSEFNRUxFT05fQ0hBUlMgKyAnfCg/IScgKyBXSElURVNQQUNFX0FORF9QVU5DVFVBVElPTiArICcpLikqJyArICcoPzonICsgV0hJVEVTUEFDRV9BTkRfUFVOQ1RVQVRJT04gKyAnKSonICsgJyQnO1xudmFyIEJBQ0tTUEFDRV9SRUdFWCA9IG5ldyBSZWdFeHAoQkFDS1NQQUNFX1NUUklORyk7XG5cbmZ1bmN0aW9uIGdldFJlbW92YWJsZVdvcmQodGV4dCwgaXNCYWNrd2FyZCkge1xuICB2YXIgbWF0Y2hlcyA9IGlzQmFja3dhcmQgPyBCQUNLU1BBQ0VfUkVHRVguZXhlYyh0ZXh0KSA6IERFTEVURV9SRUdFWC5leGVjKHRleHQpO1xuICByZXR1cm4gbWF0Y2hlcyA/IG1hdGNoZXNbMF0gOiB0ZXh0O1xufVxuXG52YXIgRHJhZnRSZW1vdmFibGVXb3JkID0ge1xuICBnZXRCYWNrd2FyZDogZnVuY3Rpb24gZ2V0QmFja3dhcmQodGV4dCkge1xuICAgIHJldHVybiBnZXRSZW1vdmFibGVXb3JkKHRleHQsIHRydWUpO1xuICB9LFxuICBnZXRGb3J3YXJkOiBmdW5jdGlvbiBnZXRGb3J3YXJkKHRleHQpIHtcbiAgICByZXR1cm4gZ2V0UmVtb3ZhYmxlV29yZCh0ZXh0LCBmYWxzZSk7XG4gIH1cbn07XG5tb2R1bGUuZXhwb3J0cyA9IERyYWZ0UmVtb3ZhYmxlV29yZDsiXSwibmFtZXMiOlsiVG9rZW5pemVVdGlsIiwicmVxdWlyZSIsInB1bmN0dWF0aW9uIiwiZ2V0UHVuY3R1YXRpb24iLCJDSEFNRUxFT05fQ0hBUlMiLCJXSElURVNQQUNFX0FORF9QVU5DVFVBVElPTiIsIkRFTEVURV9TVFJJTkciLCJERUxFVEVfUkVHRVgiLCJSZWdFeHAiLCJCQUNLU1BBQ0VfU1RSSU5HIiwiQkFDS1NQQUNFX1JFR0VYIiwiZ2V0UmVtb3ZhYmxlV29yZCIsInRleHQiLCJpc0JhY2t3YXJkIiwibWF0Y2hlcyIsImV4ZWMiLCJEcmFmdFJlbW92YWJsZVdvcmQiLCJnZXRCYWNrd2FyZCIsImdldEZvcndhcmQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftRemovableWord.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftStringKey.js":
/*!*****************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftStringKey.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DraftStringKey = {\n    stringify: function stringify(key) {\n        return \"_\" + String(key);\n    },\n    unstringify: function unstringify(key) {\n        return key.slice(1);\n    }\n};\nmodule.exports = DraftStringKey;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0RyYWZ0U3RyaW5nS2V5LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsaUJBQWlCO0lBQ25CQyxXQUFXLFNBQVNBLFVBQVVDLEdBQUc7UUFDL0IsT0FBTyxNQUFNQyxPQUFPRDtJQUN0QjtJQUNBRSxhQUFhLFNBQVNBLFlBQVlGLEdBQUc7UUFDbkMsT0FBT0EsSUFBSUcsS0FBSyxDQUFDO0lBQ25CO0FBQ0Y7QUFDQUMsT0FBT0MsT0FBTyxHQUFHUCIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9EcmFmdFN0cmluZ0tleS5qcz8wZmJjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBEcmFmdFN0cmluZ0tleSA9IHtcbiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoa2V5KSB7XG4gICAgcmV0dXJuICdfJyArIFN0cmluZyhrZXkpO1xuICB9LFxuICB1bnN0cmluZ2lmeTogZnVuY3Rpb24gdW5zdHJpbmdpZnkoa2V5KSB7XG4gICAgcmV0dXJuIGtleS5zbGljZSgxKTtcbiAgfVxufTtcbm1vZHVsZS5leHBvcnRzID0gRHJhZnRTdHJpbmdLZXk7Il0sIm5hbWVzIjpbIkRyYWZ0U3RyaW5nS2V5Iiwic3RyaW5naWZ5Iiwia2V5IiwiU3RyaW5nIiwidW5zdHJpbmdpZnkiLCJzbGljZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftStringKey.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftTreeAdapter.js":
/*!*******************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftTreeAdapter.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n *\n * This is unstable and not part of the public API and should not be used by\n * production systems. This file may be update/removed without notice.\n */ var generateRandomKey = __webpack_require__(/*! ./generateRandomKey */ \"(ssr)/./node_modules/draft-js/lib/generateRandomKey.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar traverseInDepthOrder = function traverseInDepthOrder(blocks, fn) {\n    var stack = [].concat(blocks).reverse();\n    while(stack.length){\n        var _block = stack.pop();\n        fn(_block);\n        var children = _block.children;\n        !Array.isArray(children) ?  true ? invariant(false, \"Invalid tree raw block\") : 0 : void 0;\n        stack = stack.concat([].concat(children.reverse()));\n    }\n};\nvar isListBlock = function isListBlock(block) {\n    if (!(block && block.type)) {\n        return false;\n    }\n    var type = block.type;\n    return type === \"unordered-list-item\" || type === \"ordered-list-item\";\n};\nvar addDepthToChildren = function addDepthToChildren(block) {\n    if (Array.isArray(block.children)) {\n        block.children = block.children.map(function(child) {\n            return child.type === block.type ? _objectSpread({}, child, {\n                depth: (block.depth || 0) + 1\n            }) : child;\n        });\n    }\n};\n/**\n * This adapter is intended to be be used as an adapter to draft tree data\n *\n * draft state <=====> draft tree state\n */ var DraftTreeAdapter = {\n    /**\n   * Converts from a tree raw state back to draft raw state\n   */ fromRawTreeStateToRawState: function fromRawTreeStateToRawState(draftTreeState) {\n        var blocks = draftTreeState.blocks;\n        var transformedBlocks = [];\n        !Array.isArray(blocks) ?  true ? invariant(false, \"Invalid raw state\") : 0 : void 0;\n        if (!Array.isArray(blocks) || !blocks.length) {\n            return draftTreeState;\n        }\n        traverseInDepthOrder(blocks, function(block) {\n            var newBlock = _objectSpread({}, block);\n            if (isListBlock(block)) {\n                newBlock.depth = newBlock.depth || 0;\n                addDepthToChildren(block); // if it's a non-leaf node, we don't do anything else\n                if (block.children != null && block.children.length > 0) {\n                    return;\n                }\n            }\n            delete newBlock.children;\n            transformedBlocks.push(newBlock);\n        });\n        draftTreeState.blocks = transformedBlocks;\n        return _objectSpread({}, draftTreeState, {\n            blocks: transformedBlocks\n        });\n    },\n    /**\n   * Converts from draft raw state to tree draft state\n   */ fromRawStateToRawTreeState: function fromRawStateToRawTreeState(draftState) {\n        var transformedBlocks = [];\n        var parentStack = [];\n        draftState.blocks.forEach(function(block) {\n            var isList = isListBlock(block);\n            var depth = block.depth || 0;\n            var treeBlock = _objectSpread({}, block, {\n                children: []\n            });\n            if (!isList) {\n                transformedBlocks.push(treeBlock);\n                return;\n            }\n            var lastParent = parentStack[0]; // block is non-nested & there are no nested blocks, directly push block\n            if (lastParent == null && depth === 0) {\n                transformedBlocks.push(treeBlock); // block is first nested block or previous nested block is at a lower level\n            } else if (lastParent == null || lastParent.depth < depth - 1) {\n                // create new parent block\n                var newParent = {\n                    key: generateRandomKey(),\n                    text: \"\",\n                    depth: depth - 1,\n                    type: block.type,\n                    children: [],\n                    entityRanges: [],\n                    inlineStyleRanges: []\n                };\n                parentStack.unshift(newParent);\n                if (depth === 1) {\n                    // add as a root-level block\n                    transformedBlocks.push(newParent);\n                } else if (lastParent != null) {\n                    // depth > 1 => also add as previous parent's child\n                    lastParent.children.push(newParent);\n                }\n                newParent.children.push(treeBlock);\n            } else if (lastParent.depth === depth - 1) {\n                // add as child of last parent\n                lastParent.children.push(treeBlock);\n            } else {\n                // pop out parents at levels above this one from the parent stack\n                while(lastParent != null && lastParent.depth >= depth){\n                    parentStack.shift();\n                    lastParent = parentStack[0];\n                }\n                if (depth > 0) {\n                    lastParent.children.push(treeBlock);\n                } else {\n                    transformedBlocks.push(treeBlock);\n                }\n            }\n        });\n        return _objectSpread({}, draftState, {\n            blocks: transformedBlocks\n        });\n    }\n};\nmodule.exports = DraftTreeAdapter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftTreeAdapter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/DraftTreeInvariants.js":
/*!**********************************************************!*\
  !*** ./node_modules/draft-js/lib/DraftTreeInvariants.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n *\n * This is unstable and not part of the public API and should not be used by\n * production systems. This file may be update/removed without notice.\n */ var warning = __webpack_require__(/*! fbjs/lib/warning */ \"(ssr)/./node_modules/fbjs/lib/warning.js\");\nvar DraftTreeInvariants = {\n    /**\n   * Check if the block is valid\n   */ isValidBlock: function isValidBlock(block, blockMap) {\n        var key = block.getKey(); // is its parent's child\n        var parentKey = block.getParentKey();\n        if (parentKey != null) {\n            var parent = blockMap.get(parentKey);\n            if (!parent.getChildKeys().includes(key)) {\n                 true ? warning(true, \"Tree is missing parent -> child pointer on %s\", key) : 0;\n                return false;\n            }\n        } // is its children's parent\n        var children = block.getChildKeys().map(function(k) {\n            return blockMap.get(k);\n        });\n        if (!children.every(function(c) {\n            return c.getParentKey() === key;\n        })) {\n             true ? warning(true, \"Tree is missing child -> parent pointer on %s\", key) : 0;\n            return false;\n        } // is its previous sibling's next sibling\n        var prevSiblingKey = block.getPrevSiblingKey();\n        if (prevSiblingKey != null) {\n            var prevSibling = blockMap.get(prevSiblingKey);\n            if (prevSibling.getNextSiblingKey() !== key) {\n                 true ? warning(true, \"Tree is missing nextSibling pointer on %s's prevSibling\", key) : 0;\n                return false;\n            }\n        } // is its next sibling's previous sibling\n        var nextSiblingKey = block.getNextSiblingKey();\n        if (nextSiblingKey != null) {\n            var nextSibling = blockMap.get(nextSiblingKey);\n            if (nextSibling.getPrevSiblingKey() !== key) {\n                 true ? warning(true, \"Tree is missing prevSibling pointer on %s's nextSibling\", key) : 0;\n                return false;\n            }\n        } // no 2-node cycles\n        if (nextSiblingKey !== null && prevSiblingKey !== null) {\n            if (prevSiblingKey === nextSiblingKey) {\n                 true ? warning(true, \"Tree has a two-node cycle at %s\", key) : 0;\n                return false;\n            }\n        } // if it's a leaf node, it has text but no children\n        if (block.text != \"\") {\n            if (block.getChildKeys().size > 0) {\n                 true ? warning(true, \"Leaf node %s has children\", key) : 0;\n                return false;\n            }\n        }\n        return true;\n    },\n    /**\n   * Checks that this is a connected tree on all the blocks\n   * starting from the first block, traversing nextSibling and child pointers\n   * should be a tree (preorder traversal - parent, then children)\n   * num of connected node === number of blocks\n   */ isConnectedTree: function isConnectedTree(blockMap) {\n        // exactly one node has no previous sibling + no parent\n        var eligibleFirstNodes = blockMap.toArray().filter(function(block) {\n            return block.getParentKey() == null && block.getPrevSiblingKey() == null;\n        });\n        if (eligibleFirstNodes.length !== 1) {\n             true ? warning(true, \"Tree is not connected. More or less than one first node\") : 0;\n            return false;\n        }\n        var firstNode = eligibleFirstNodes.shift();\n        var nodesSeen = 0;\n        var currentKey = firstNode.getKey();\n        var visitedStack = [];\n        while(currentKey != null){\n            var currentNode = blockMap.get(currentKey);\n            var childKeys = currentNode.getChildKeys();\n            var nextSiblingKey = currentNode.getNextSiblingKey(); // if the node has children, add parent's next sibling to stack and go to children\n            if (childKeys.size > 0) {\n                if (nextSiblingKey != null) {\n                    visitedStack.unshift(nextSiblingKey);\n                }\n                var children = childKeys.map(function(k) {\n                    return blockMap.get(k);\n                });\n                var _firstNode = children.find(function(block) {\n                    return block.getPrevSiblingKey() == null;\n                });\n                if (_firstNode == null) {\n                     true ? warning(true, \"%s has no first child\", currentKey) : 0;\n                    return false;\n                }\n                currentKey = _firstNode.getKey(); // TODO(T32490138): Deal with multi-node cycles here\n            } else {\n                if (currentNode.getNextSiblingKey() != null) {\n                    currentKey = currentNode.getNextSiblingKey();\n                } else {\n                    currentKey = visitedStack.shift();\n                }\n            }\n            nodesSeen++;\n        }\n        if (nodesSeen !== blockMap.size) {\n             true ? warning(true, \"Tree is not connected. %s nodes were seen instead of %s\", nodesSeen, blockMap.size) : 0;\n            return false;\n        }\n        return true;\n    },\n    /**\n   * Checks that the block map is a connected tree with valid blocks\n   */ isValidTree: function isValidTree(blockMap) {\n        var _this = this;\n        var blocks = blockMap.toArray();\n        if (!blocks.every(function(block) {\n            return _this.isValidBlock(block, blockMap);\n        })) {\n            return false;\n        }\n        return this.isConnectedTree(blockMap);\n    }\n};\nmodule.exports = DraftTreeInvariants;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/DraftTreeInvariants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/EditorBidiService.js":
/*!********************************************************!*\
  !*** ./node_modules/draft-js/lib/EditorBidiService.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar UnicodeBidiService = __webpack_require__(/*! fbjs/lib/UnicodeBidiService */ \"(ssr)/./node_modules/fbjs/lib/UnicodeBidiService.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar nullthrows = __webpack_require__(/*! fbjs/lib/nullthrows */ \"(ssr)/./node_modules/fbjs/lib/nullthrows.js\");\nvar OrderedMap = Immutable.OrderedMap;\nvar bidiService;\nvar EditorBidiService = {\n    getDirectionMap: function getDirectionMap(content, prevBidiMap) {\n        if (!bidiService) {\n            bidiService = new UnicodeBidiService();\n        } else {\n            bidiService.reset();\n        }\n        var blockMap = content.getBlockMap();\n        var nextBidi = blockMap.valueSeq().map(function(block) {\n            return nullthrows(bidiService).getDirection(block.getText());\n        });\n        var bidiMap = OrderedMap(blockMap.keySeq().zip(nextBidi));\n        if (prevBidiMap != null && Immutable.is(prevBidiMap, bidiMap)) {\n            return prevBidiMap;\n        }\n        return bidiMap;\n    }\n};\nmodule.exports = EditorBidiService;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0VkaXRvckJpZGlTZXJ2aWNlLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEscUJBQXFCQyxtQkFBT0EsQ0FBQyx3RkFBNkI7QUFFOUQsSUFBSUMsWUFBWUQsbUJBQU9BLENBQUMseUZBQVc7QUFFbkMsSUFBSUUsYUFBYUYsbUJBQU9BLENBQUMsd0VBQXFCO0FBRTlDLElBQUlHLGFBQWFGLFVBQVVFLFVBQVU7QUFDckMsSUFBSUM7QUFDSixJQUFJQyxvQkFBb0I7SUFDdEJDLGlCQUFpQixTQUFTQSxnQkFBZ0JDLE9BQU8sRUFBRUMsV0FBVztRQUM1RCxJQUFJLENBQUNKLGFBQWE7WUFDaEJBLGNBQWMsSUFBSUw7UUFDcEIsT0FBTztZQUNMSyxZQUFZSyxLQUFLO1FBQ25CO1FBRUEsSUFBSUMsV0FBV0gsUUFBUUksV0FBVztRQUNsQyxJQUFJQyxXQUFXRixTQUFTRyxRQUFRLEdBQUdDLEdBQUcsQ0FBQyxTQUFVQyxLQUFLO1lBQ3BELE9BQU9iLFdBQVdFLGFBQWFZLFlBQVksQ0FBQ0QsTUFBTUUsT0FBTztRQUMzRDtRQUNBLElBQUlDLFVBQVVmLFdBQVdPLFNBQVNTLE1BQU0sR0FBR0MsR0FBRyxDQUFDUjtRQUUvQyxJQUFJSixlQUFlLFFBQVFQLFVBQVVvQixFQUFFLENBQUNiLGFBQWFVLFVBQVU7WUFDN0QsT0FBT1Y7UUFDVDtRQUVBLE9BQU9VO0lBQ1Q7QUFDRjtBQUNBSSxPQUFPQyxPQUFPLEdBQUdsQiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9FZGl0b3JCaWRpU2VydmljZS5qcz9lZWViIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBVbmljb2RlQmlkaVNlcnZpY2UgPSByZXF1aXJlKFwiZmJqcy9saWIvVW5pY29kZUJpZGlTZXJ2aWNlXCIpO1xuXG52YXIgSW1tdXRhYmxlID0gcmVxdWlyZShcImltbXV0YWJsZVwiKTtcblxudmFyIG51bGx0aHJvd3MgPSByZXF1aXJlKFwiZmJqcy9saWIvbnVsbHRocm93c1wiKTtcblxudmFyIE9yZGVyZWRNYXAgPSBJbW11dGFibGUuT3JkZXJlZE1hcDtcbnZhciBiaWRpU2VydmljZTtcbnZhciBFZGl0b3JCaWRpU2VydmljZSA9IHtcbiAgZ2V0RGlyZWN0aW9uTWFwOiBmdW5jdGlvbiBnZXREaXJlY3Rpb25NYXAoY29udGVudCwgcHJldkJpZGlNYXApIHtcbiAgICBpZiAoIWJpZGlTZXJ2aWNlKSB7XG4gICAgICBiaWRpU2VydmljZSA9IG5ldyBVbmljb2RlQmlkaVNlcnZpY2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYmlkaVNlcnZpY2UucmVzZXQoKTtcbiAgICB9XG5cbiAgICB2YXIgYmxvY2tNYXAgPSBjb250ZW50LmdldEJsb2NrTWFwKCk7XG4gICAgdmFyIG5leHRCaWRpID0gYmxvY2tNYXAudmFsdWVTZXEoKS5tYXAoZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICByZXR1cm4gbnVsbHRocm93cyhiaWRpU2VydmljZSkuZ2V0RGlyZWN0aW9uKGJsb2NrLmdldFRleHQoKSk7XG4gICAgfSk7XG4gICAgdmFyIGJpZGlNYXAgPSBPcmRlcmVkTWFwKGJsb2NrTWFwLmtleVNlcSgpLnppcChuZXh0QmlkaSkpO1xuXG4gICAgaWYgKHByZXZCaWRpTWFwICE9IG51bGwgJiYgSW1tdXRhYmxlLmlzKHByZXZCaWRpTWFwLCBiaWRpTWFwKSkge1xuICAgICAgcmV0dXJuIHByZXZCaWRpTWFwO1xuICAgIH1cblxuICAgIHJldHVybiBiaWRpTWFwO1xuICB9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBFZGl0b3JCaWRpU2VydmljZTsiXSwibmFtZXMiOlsiVW5pY29kZUJpZGlTZXJ2aWNlIiwicmVxdWlyZSIsIkltbXV0YWJsZSIsIm51bGx0aHJvd3MiLCJPcmRlcmVkTWFwIiwiYmlkaVNlcnZpY2UiLCJFZGl0b3JCaWRpU2VydmljZSIsImdldERpcmVjdGlvbk1hcCIsImNvbnRlbnQiLCJwcmV2QmlkaU1hcCIsInJlc2V0IiwiYmxvY2tNYXAiLCJnZXRCbG9ja01hcCIsIm5leHRCaWRpIiwidmFsdWVTZXEiLCJtYXAiLCJibG9jayIsImdldERpcmVjdGlvbiIsImdldFRleHQiLCJiaWRpTWFwIiwia2V5U2VxIiwiemlwIiwiaXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/EditorBidiService.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/EditorState.js":
/*!**************************************************!*\
  !*** ./node_modules/draft-js/lib/EditorState.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar BlockTree = __webpack_require__(/*! ./BlockTree */ \"(ssr)/./node_modules/draft-js/lib/BlockTree.js\");\nvar ContentState = __webpack_require__(/*! ./ContentState */ \"(ssr)/./node_modules/draft-js/lib/ContentState.js\");\nvar EditorBidiService = __webpack_require__(/*! ./EditorBidiService */ \"(ssr)/./node_modules/draft-js/lib/EditorBidiService.js\");\nvar SelectionState = __webpack_require__(/*! ./SelectionState */ \"(ssr)/./node_modules/draft-js/lib/SelectionState.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar OrderedSet = Immutable.OrderedSet, Record = Immutable.Record, Stack = Immutable.Stack, OrderedMap = Immutable.OrderedMap, List = Immutable.List; // When configuring an editor, the user can chose to provide or not provide\n// basically all keys. `currentContent` varies, so this type doesn't include it.\n// (See the types defined below.)\nvar defaultRecord = {\n    allowUndo: true,\n    currentContent: null,\n    decorator: null,\n    directionMap: null,\n    forceSelection: false,\n    inCompositionMode: false,\n    inlineStyleOverride: null,\n    lastChangeType: null,\n    nativelyRenderedContent: null,\n    redoStack: Stack(),\n    selection: null,\n    treeMap: null,\n    undoStack: Stack()\n};\nvar EditorStateRecord = Record(defaultRecord);\nvar EditorState = /*#__PURE__*/ function() {\n    EditorState.createEmpty = function createEmpty(decorator) {\n        return this.createWithText(\"\", decorator);\n    };\n    EditorState.createWithText = function createWithText(text, decorator) {\n        return EditorState.createWithContent(ContentState.createFromText(text), decorator);\n    };\n    EditorState.createWithContent = function createWithContent(contentState, decorator) {\n        if (contentState.getBlockMap().count() === 0) {\n            return EditorState.createEmpty(decorator);\n        }\n        var firstKey = contentState.getBlockMap().first().getKey();\n        return EditorState.create({\n            currentContent: contentState,\n            undoStack: Stack(),\n            redoStack: Stack(),\n            decorator: decorator || null,\n            selection: SelectionState.createEmpty(firstKey)\n        });\n    };\n    EditorState.create = function create(config) {\n        var currentContent = config.currentContent, decorator = config.decorator;\n        var recordConfig = _objectSpread({}, config, {\n            treeMap: generateNewTreeMap(currentContent, decorator),\n            directionMap: EditorBidiService.getDirectionMap(currentContent)\n        });\n        return new EditorState(new EditorStateRecord(recordConfig));\n    };\n    EditorState.fromJS = function fromJS(config) {\n        return new EditorState(new EditorStateRecord(_objectSpread({}, config, {\n            directionMap: config.directionMap != null ? OrderedMap(config.directionMap) : config.directionMap,\n            inlineStyleOverride: config.inlineStyleOverride != null ? OrderedSet(config.inlineStyleOverride) : config.inlineStyleOverride,\n            nativelyRenderedContent: config.nativelyRenderedContent != null ? ContentState.fromJS(config.nativelyRenderedContent) : config.nativelyRenderedContent,\n            redoStack: config.redoStack != null ? Stack(config.redoStack.map(function(v) {\n                return ContentState.fromJS(v);\n            })) : config.redoStack,\n            selection: config.selection != null ? new SelectionState(config.selection) : config.selection,\n            treeMap: config.treeMap != null ? OrderedMap(config.treeMap).map(function(v) {\n                return List(v).map(function(v) {\n                    return BlockTree.fromJS(v);\n                });\n            }) : config.treeMap,\n            undoStack: config.undoStack != null ? Stack(config.undoStack.map(function(v) {\n                return ContentState.fromJS(v);\n            })) : config.undoStack,\n            currentContent: ContentState.fromJS(config.currentContent)\n        })));\n    };\n    EditorState.set = function set(editorState, put) {\n        var map = editorState.getImmutable().withMutations(function(state) {\n            var existingDecorator = state.get(\"decorator\");\n            var decorator = existingDecorator;\n            if (put.decorator === null) {\n                decorator = null;\n            } else if (put.decorator) {\n                decorator = put.decorator;\n            }\n            var newContent = put.currentContent || editorState.getCurrentContent();\n            if (decorator !== existingDecorator) {\n                var treeMap = state.get(\"treeMap\");\n                var newTreeMap;\n                if (decorator && existingDecorator) {\n                    newTreeMap = regenerateTreeForNewDecorator(newContent, newContent.getBlockMap(), treeMap, decorator, existingDecorator);\n                } else {\n                    newTreeMap = generateNewTreeMap(newContent, decorator);\n                }\n                state.merge({\n                    decorator: decorator,\n                    treeMap: newTreeMap,\n                    nativelyRenderedContent: null\n                });\n                return;\n            }\n            var existingContent = editorState.getCurrentContent();\n            if (newContent !== existingContent) {\n                state.set(\"treeMap\", regenerateTreeForNewBlocks(editorState, newContent.getBlockMap(), newContent.getEntityMap(), decorator));\n            }\n            state.merge(put);\n        });\n        return new EditorState(map);\n    };\n    var _proto = EditorState.prototype;\n    _proto.toJS = function toJS() {\n        return this.getImmutable().toJS();\n    };\n    _proto.getAllowUndo = function getAllowUndo() {\n        return this.getImmutable().get(\"allowUndo\");\n    };\n    _proto.getCurrentContent = function getCurrentContent() {\n        return this.getImmutable().get(\"currentContent\");\n    };\n    _proto.getUndoStack = function getUndoStack() {\n        return this.getImmutable().get(\"undoStack\");\n    };\n    _proto.getRedoStack = function getRedoStack() {\n        return this.getImmutable().get(\"redoStack\");\n    };\n    _proto.getSelection = function getSelection() {\n        return this.getImmutable().get(\"selection\");\n    };\n    _proto.getDecorator = function getDecorator() {\n        return this.getImmutable().get(\"decorator\");\n    };\n    _proto.isInCompositionMode = function isInCompositionMode() {\n        return this.getImmutable().get(\"inCompositionMode\");\n    };\n    _proto.mustForceSelection = function mustForceSelection() {\n        return this.getImmutable().get(\"forceSelection\");\n    };\n    _proto.getNativelyRenderedContent = function getNativelyRenderedContent() {\n        return this.getImmutable().get(\"nativelyRenderedContent\");\n    };\n    _proto.getLastChangeType = function getLastChangeType() {\n        return this.getImmutable().get(\"lastChangeType\");\n    } /**\n   * While editing, the user may apply inline style commands with a collapsed\n   * cursor, intending to type text that adopts the specified style. In this\n   * case, we track the specified style as an \"override\" that takes precedence\n   * over the inline style of the text adjacent to the cursor.\n   *\n   * If null, there is no override in place.\n   */ ;\n    _proto.getInlineStyleOverride = function getInlineStyleOverride() {\n        return this.getImmutable().get(\"inlineStyleOverride\");\n    };\n    EditorState.setInlineStyleOverride = function setInlineStyleOverride(editorState, inlineStyleOverride) {\n        return EditorState.set(editorState, {\n            inlineStyleOverride: inlineStyleOverride\n        });\n    } /**\n   * Get the appropriate inline style for the editor state. If an\n   * override is in place, use it. Otherwise, the current style is\n   * based on the location of the selection state.\n   */ ;\n    _proto.getCurrentInlineStyle = function getCurrentInlineStyle() {\n        var override = this.getInlineStyleOverride();\n        if (override != null) {\n            return override;\n        }\n        var content = this.getCurrentContent();\n        var selection = this.getSelection();\n        if (selection.isCollapsed()) {\n            return getInlineStyleForCollapsedSelection(content, selection);\n        }\n        return getInlineStyleForNonCollapsedSelection(content, selection);\n    };\n    _proto.getBlockTree = function getBlockTree(blockKey) {\n        return this.getImmutable().getIn([\n            \"treeMap\",\n            blockKey\n        ]);\n    };\n    _proto.isSelectionAtStartOfContent = function isSelectionAtStartOfContent() {\n        var firstKey = this.getCurrentContent().getBlockMap().first().getKey();\n        return this.getSelection().hasEdgeWithin(firstKey, 0, 0);\n    };\n    _proto.isSelectionAtEndOfContent = function isSelectionAtEndOfContent() {\n        var content = this.getCurrentContent();\n        var blockMap = content.getBlockMap();\n        var last = blockMap.last();\n        var end = last.getLength();\n        return this.getSelection().hasEdgeWithin(last.getKey(), end, end);\n    };\n    _proto.getDirectionMap = function getDirectionMap() {\n        return this.getImmutable().get(\"directionMap\");\n    } /**\n   * Incorporate native DOM selection changes into the EditorState. This\n   * method can be used when we simply want to accept whatever the DOM\n   * has given us to represent selection, and we do not need to re-render\n   * the editor.\n   *\n   * To forcibly move the DOM selection, see `EditorState.forceSelection`.\n   */ ;\n    EditorState.acceptSelection = function acceptSelection(editorState, selection) {\n        return updateSelection(editorState, selection, false);\n    } /**\n   * At times, we need to force the DOM selection to be where we\n   * need it to be. This can occur when the anchor or focus nodes\n   * are non-text nodes, for instance. In this case, we want to trigger\n   * a re-render of the editor, which in turn forces selection into\n   * the correct place in the DOM. The `forceSelection` method\n   * accomplishes this.\n   *\n   * This method should be used in cases where you need to explicitly\n   * move the DOM selection from one place to another without a change\n   * in ContentState.\n   */ ;\n    EditorState.forceSelection = function forceSelection(editorState, selection) {\n        if (!selection.getHasFocus()) {\n            selection = selection.set(\"hasFocus\", true);\n        }\n        return updateSelection(editorState, selection, true);\n    } /**\n   * Move selection to the end of the editor without forcing focus.\n   */ ;\n    EditorState.moveSelectionToEnd = function moveSelectionToEnd(editorState) {\n        var content = editorState.getCurrentContent();\n        var lastBlock = content.getLastBlock();\n        var lastKey = lastBlock.getKey();\n        var length = lastBlock.getLength();\n        return EditorState.acceptSelection(editorState, new SelectionState({\n            anchorKey: lastKey,\n            anchorOffset: length,\n            focusKey: lastKey,\n            focusOffset: length,\n            isBackward: false\n        }));\n    } /**\n   * Force focus to the end of the editor. This is useful in scenarios\n   * where we want to programmatically focus the input and it makes sense\n   * to allow the user to continue working seamlessly.\n   */ ;\n    EditorState.moveFocusToEnd = function moveFocusToEnd(editorState) {\n        var afterSelectionMove = EditorState.moveSelectionToEnd(editorState);\n        return EditorState.forceSelection(afterSelectionMove, afterSelectionMove.getSelection());\n    } /**\n   * Push the current ContentState onto the undo stack if it should be\n   * considered a boundary state, and set the provided ContentState as the\n   * new current content.\n   */ ;\n    EditorState.push = function push(editorState, contentState, changeType) {\n        var forceSelection = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n        if (editorState.getCurrentContent() === contentState) {\n            return editorState;\n        }\n        var directionMap = EditorBidiService.getDirectionMap(contentState, editorState.getDirectionMap());\n        if (!editorState.getAllowUndo()) {\n            return EditorState.set(editorState, {\n                currentContent: contentState,\n                directionMap: directionMap,\n                lastChangeType: changeType,\n                selection: contentState.getSelectionAfter(),\n                forceSelection: forceSelection,\n                inlineStyleOverride: null\n            });\n        }\n        var selection = editorState.getSelection();\n        var currentContent = editorState.getCurrentContent();\n        var undoStack = editorState.getUndoStack();\n        var newContent = contentState;\n        if (selection !== currentContent.getSelectionAfter() || mustBecomeBoundary(editorState, changeType)) {\n            undoStack = undoStack.push(currentContent);\n            newContent = newContent.set(\"selectionBefore\", selection);\n        } else if (changeType === \"insert-characters\" || changeType === \"backspace-character\" || changeType === \"delete-character\") {\n            // Preserve the previous selection.\n            newContent = newContent.set(\"selectionBefore\", currentContent.getSelectionBefore());\n        }\n        var inlineStyleOverride = editorState.getInlineStyleOverride(); // Don't discard inline style overrides for the following change types:\n        var overrideChangeTypes = [\n            \"adjust-depth\",\n            \"change-block-type\",\n            \"split-block\"\n        ];\n        if (overrideChangeTypes.indexOf(changeType) === -1) {\n            inlineStyleOverride = null;\n        }\n        var editorStateChanges = {\n            currentContent: newContent,\n            directionMap: directionMap,\n            undoStack: undoStack,\n            redoStack: Stack(),\n            lastChangeType: changeType,\n            selection: contentState.getSelectionAfter(),\n            forceSelection: forceSelection,\n            inlineStyleOverride: inlineStyleOverride\n        };\n        return EditorState.set(editorState, editorStateChanges);\n    } /**\n   * Make the top ContentState in the undo stack the new current content and\n   * push the current content onto the redo stack.\n   */ ;\n    EditorState.undo = function undo(editorState) {\n        if (!editorState.getAllowUndo()) {\n            return editorState;\n        }\n        var undoStack = editorState.getUndoStack();\n        var newCurrentContent = undoStack.peek();\n        if (!newCurrentContent) {\n            return editorState;\n        }\n        var currentContent = editorState.getCurrentContent();\n        var directionMap = EditorBidiService.getDirectionMap(newCurrentContent, editorState.getDirectionMap());\n        return EditorState.set(editorState, {\n            currentContent: newCurrentContent,\n            directionMap: directionMap,\n            undoStack: undoStack.shift(),\n            redoStack: editorState.getRedoStack().push(currentContent),\n            forceSelection: true,\n            inlineStyleOverride: null,\n            lastChangeType: \"undo\",\n            nativelyRenderedContent: null,\n            selection: currentContent.getSelectionBefore()\n        });\n    } /**\n   * Make the top ContentState in the redo stack the new current content and\n   * push the current content onto the undo stack.\n   */ ;\n    EditorState.redo = function redo(editorState) {\n        if (!editorState.getAllowUndo()) {\n            return editorState;\n        }\n        var redoStack = editorState.getRedoStack();\n        var newCurrentContent = redoStack.peek();\n        if (!newCurrentContent) {\n            return editorState;\n        }\n        var currentContent = editorState.getCurrentContent();\n        var directionMap = EditorBidiService.getDirectionMap(newCurrentContent, editorState.getDirectionMap());\n        return EditorState.set(editorState, {\n            currentContent: newCurrentContent,\n            directionMap: directionMap,\n            undoStack: editorState.getUndoStack().push(currentContent),\n            redoStack: redoStack.shift(),\n            forceSelection: true,\n            inlineStyleOverride: null,\n            lastChangeType: \"redo\",\n            nativelyRenderedContent: null,\n            selection: newCurrentContent.getSelectionAfter()\n        });\n    } /**\n   * Not for public consumption.\n   */ ;\n    function EditorState(immutable) {\n        _defineProperty(this, \"_immutable\", void 0);\n        this._immutable = immutable;\n    }\n    /**\n   * Not for public consumption.\n   */ _proto.getImmutable = function getImmutable() {\n        return this._immutable;\n    };\n    return EditorState;\n}();\n/**\n * Set the supplied SelectionState as the new current selection, and set\n * the `force` flag to trigger manual selection placement by the view.\n */ function updateSelection(editorState, selection, forceSelection) {\n    return EditorState.set(editorState, {\n        selection: selection,\n        forceSelection: forceSelection,\n        nativelyRenderedContent: null,\n        inlineStyleOverride: null\n    });\n}\n/**\n * Regenerate the entire tree map for a given ContentState and decorator.\n * Returns an OrderedMap that maps all available ContentBlock objects.\n */ function generateNewTreeMap(contentState, decorator) {\n    return contentState.getBlockMap().map(function(block) {\n        return BlockTree.generate(contentState, block, decorator);\n    }).toOrderedMap();\n}\n/**\n * Regenerate tree map objects for all ContentBlocks that have changed\n * between the current editorState and newContent. Returns an OrderedMap\n * with only changed regenerated tree map objects.\n */ function regenerateTreeForNewBlocks(editorState, newBlockMap, newEntityMap, decorator) {\n    var contentState = editorState.getCurrentContent().set(\"entityMap\", newEntityMap);\n    var prevBlockMap = contentState.getBlockMap();\n    var prevTreeMap = editorState.getImmutable().get(\"treeMap\");\n    return prevTreeMap.merge(newBlockMap.toSeq().filter(function(block, key) {\n        return block !== prevBlockMap.get(key);\n    }).map(function(block) {\n        return BlockTree.generate(contentState, block, decorator);\n    }));\n}\n/**\n * Generate tree map objects for a new decorator object, preserving any\n * decorations that are unchanged from the previous decorator.\n *\n * Note that in order for this to perform optimally, decoration Lists for\n * decorators should be preserved when possible to allow for direct immutable\n * List comparison.\n */ function regenerateTreeForNewDecorator(content, blockMap, previousTreeMap, decorator, existingDecorator) {\n    return previousTreeMap.merge(blockMap.toSeq().filter(function(block) {\n        return decorator.getDecorations(block, content) !== existingDecorator.getDecorations(block, content);\n    }).map(function(block) {\n        return BlockTree.generate(content, block, decorator);\n    }));\n}\n/**\n * Return whether a change should be considered a boundary state, given\n * the previous change type. Allows us to discard potential boundary states\n * during standard typing or deletion behavior.\n */ function mustBecomeBoundary(editorState, changeType) {\n    var lastChangeType = editorState.getLastChangeType();\n    return changeType !== lastChangeType || changeType !== \"insert-characters\" && changeType !== \"backspace-character\" && changeType !== \"delete-character\";\n}\nfunction getInlineStyleForCollapsedSelection(content, selection) {\n    var startKey = selection.getStartKey();\n    var startOffset = selection.getStartOffset();\n    var startBlock = content.getBlockForKey(startKey); // If the cursor is not at the start of the block, look backward to\n    // preserve the style of the preceding character.\n    if (startOffset > 0) {\n        return startBlock.getInlineStyleAt(startOffset - 1);\n    } // The caret is at position zero in this block. If the block has any\n    // text at all, use the style of the first character.\n    if (startBlock.getLength()) {\n        return startBlock.getInlineStyleAt(0);\n    } // Otherwise, look upward in the document to find the closest character.\n    return lookUpwardForInlineStyle(content, startKey);\n}\nfunction getInlineStyleForNonCollapsedSelection(content, selection) {\n    var startKey = selection.getStartKey();\n    var startOffset = selection.getStartOffset();\n    var startBlock = content.getBlockForKey(startKey); // If there is a character just inside the selection, use its style.\n    if (startOffset < startBlock.getLength()) {\n        return startBlock.getInlineStyleAt(startOffset);\n    } // Check if the selection at the end of a non-empty block. Use the last\n    // style in the block.\n    if (startOffset > 0) {\n        return startBlock.getInlineStyleAt(startOffset - 1);\n    } // Otherwise, look upward in the document to find the closest character.\n    return lookUpwardForInlineStyle(content, startKey);\n}\nfunction lookUpwardForInlineStyle(content, fromKey) {\n    var lastNonEmpty = content.getBlockMap().reverse().skipUntil(function(_, k) {\n        return k === fromKey;\n    }).skip(1).skipUntil(function(block, _) {\n        return block.getLength();\n    }).first();\n    if (lastNonEmpty) {\n        return lastNonEmpty.getInlineStyleAt(lastNonEmpty.getLength() - 1);\n    }\n    return OrderedSet();\n}\nmodule.exports = EditorState;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/EditorState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/KeyBindingUtil.js":
/*!*****************************************************!*\
  !*** ./node_modules/draft-js/lib/KeyBindingUtil.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar UserAgent = __webpack_require__(/*! fbjs/lib/UserAgent */ \"(ssr)/./node_modules/fbjs/lib/UserAgent.js\");\nvar isSoftNewlineEvent = __webpack_require__(/*! ./isSoftNewlineEvent */ \"(ssr)/./node_modules/draft-js/lib/isSoftNewlineEvent.js\");\nvar isOSX = UserAgent.isPlatform(\"Mac OS X\");\nvar KeyBindingUtil = {\n    /**\n   * Check whether the ctrlKey modifier is *not* being used in conjunction with\n   * the altKey modifier. If they are combined, the result is an `altGraph`\n   * key modifier, which should not be handled by this set of key bindings.\n   */ isCtrlKeyCommand: function isCtrlKeyCommand(e) {\n        return !!e.ctrlKey && !e.altKey;\n    },\n    isOptionKeyCommand: function isOptionKeyCommand(e) {\n        return isOSX && e.altKey;\n    },\n    usesMacOSHeuristics: function usesMacOSHeuristics() {\n        return isOSX;\n    },\n    hasCommandModifier: function hasCommandModifier(e) {\n        return isOSX ? !!e.metaKey && !e.altKey : KeyBindingUtil.isCtrlKeyCommand(e);\n    },\n    isSoftNewlineEvent: isSoftNewlineEvent\n};\nmodule.exports = KeyBindingUtil;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL0tleUJpbmRpbmdVdGlsLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsWUFBWUMsbUJBQU9BLENBQUMsc0VBQW9CO0FBRTVDLElBQUlDLHFCQUFxQkQsbUJBQU9BLENBQUMscUZBQXNCO0FBRXZELElBQUlFLFFBQVFILFVBQVVJLFVBQVUsQ0FBQztBQUNqQyxJQUFJQyxpQkFBaUI7SUFDbkI7Ozs7R0FJQyxHQUNEQyxrQkFBa0IsU0FBU0EsaUJBQWlCQyxDQUFDO1FBQzNDLE9BQU8sQ0FBQyxDQUFDQSxFQUFFQyxPQUFPLElBQUksQ0FBQ0QsRUFBRUUsTUFBTTtJQUNqQztJQUNBQyxvQkFBb0IsU0FBU0EsbUJBQW1CSCxDQUFDO1FBQy9DLE9BQU9KLFNBQVNJLEVBQUVFLE1BQU07SUFDMUI7SUFDQUUscUJBQXFCLFNBQVNBO1FBQzVCLE9BQU9SO0lBQ1Q7SUFDQVMsb0JBQW9CLFNBQVNBLG1CQUFtQkwsQ0FBQztRQUMvQyxPQUFPSixRQUFRLENBQUMsQ0FBQ0ksRUFBRU0sT0FBTyxJQUFJLENBQUNOLEVBQUVFLE1BQU0sR0FBR0osZUFBZUMsZ0JBQWdCLENBQUNDO0lBQzVFO0lBQ0FMLG9CQUFvQkE7QUFDdEI7QUFDQVksT0FBT0MsT0FBTyxHQUFHViIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9LZXlCaW5kaW5nVXRpbC5qcz9iZmQ4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBVc2VyQWdlbnQgPSByZXF1aXJlKFwiZmJqcy9saWIvVXNlckFnZW50XCIpO1xuXG52YXIgaXNTb2Z0TmV3bGluZUV2ZW50ID0gcmVxdWlyZShcIi4vaXNTb2Z0TmV3bGluZUV2ZW50XCIpO1xuXG52YXIgaXNPU1ggPSBVc2VyQWdlbnQuaXNQbGF0Zm9ybSgnTWFjIE9TIFgnKTtcbnZhciBLZXlCaW5kaW5nVXRpbCA9IHtcbiAgLyoqXG4gICAqIENoZWNrIHdoZXRoZXIgdGhlIGN0cmxLZXkgbW9kaWZpZXIgaXMgKm5vdCogYmVpbmcgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoXG4gICAqIHRoZSBhbHRLZXkgbW9kaWZpZXIuIElmIHRoZXkgYXJlIGNvbWJpbmVkLCB0aGUgcmVzdWx0IGlzIGFuIGBhbHRHcmFwaGBcbiAgICoga2V5IG1vZGlmaWVyLCB3aGljaCBzaG91bGQgbm90IGJlIGhhbmRsZWQgYnkgdGhpcyBzZXQgb2Yga2V5IGJpbmRpbmdzLlxuICAgKi9cbiAgaXNDdHJsS2V5Q29tbWFuZDogZnVuY3Rpb24gaXNDdHJsS2V5Q29tbWFuZChlKSB7XG4gICAgcmV0dXJuICEhZS5jdHJsS2V5ICYmICFlLmFsdEtleTtcbiAgfSxcbiAgaXNPcHRpb25LZXlDb21tYW5kOiBmdW5jdGlvbiBpc09wdGlvbktleUNvbW1hbmQoZSkge1xuICAgIHJldHVybiBpc09TWCAmJiBlLmFsdEtleTtcbiAgfSxcbiAgdXNlc01hY09TSGV1cmlzdGljczogZnVuY3Rpb24gdXNlc01hY09TSGV1cmlzdGljcygpIHtcbiAgICByZXR1cm4gaXNPU1g7XG4gIH0sXG4gIGhhc0NvbW1hbmRNb2RpZmllcjogZnVuY3Rpb24gaGFzQ29tbWFuZE1vZGlmaWVyKGUpIHtcbiAgICByZXR1cm4gaXNPU1ggPyAhIWUubWV0YUtleSAmJiAhZS5hbHRLZXkgOiBLZXlCaW5kaW5nVXRpbC5pc0N0cmxLZXlDb21tYW5kKGUpO1xuICB9LFxuICBpc1NvZnROZXdsaW5lRXZlbnQ6IGlzU29mdE5ld2xpbmVFdmVudFxufTtcbm1vZHVsZS5leHBvcnRzID0gS2V5QmluZGluZ1V0aWw7Il0sIm5hbWVzIjpbIlVzZXJBZ2VudCIsInJlcXVpcmUiLCJpc1NvZnROZXdsaW5lRXZlbnQiLCJpc09TWCIsImlzUGxhdGZvcm0iLCJLZXlCaW5kaW5nVXRpbCIsImlzQ3RybEtleUNvbW1hbmQiLCJlIiwiY3RybEtleSIsImFsdEtleSIsImlzT3B0aW9uS2V5Q29tbWFuZCIsInVzZXNNYWNPU0hldXJpc3RpY3MiLCJoYXNDb21tYW5kTW9kaWZpZXIiLCJtZXRhS2V5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/KeyBindingUtil.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/RawDraftContentState.js":
/*!***********************************************************!*\
  !*** ./node_modules/draft-js/lib/RawDraftContentState.js ***!
  \***********************************************************/
/***/ (() => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL1Jhd0RyYWZ0Q29udGVudFN0YXRlLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVlbC1oYXJ2ZXN0ZXIvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL1Jhd0RyYWZ0Q29udGVudFN0YXRlLmpzPzAyYmIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JzsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/RawDraftContentState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/RichTextEditorUtil.js":
/*!*********************************************************!*\
  !*** ./node_modules/draft-js/lib/RichTextEditorUtil.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DraftModifier = __webpack_require__(/*! ./DraftModifier */ \"(ssr)/./node_modules/draft-js/lib/DraftModifier.js\");\nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar adjustBlockDepthForContentState = __webpack_require__(/*! ./adjustBlockDepthForContentState */ \"(ssr)/./node_modules/draft-js/lib/adjustBlockDepthForContentState.js\");\nvar nullthrows = __webpack_require__(/*! fbjs/lib/nullthrows */ \"(ssr)/./node_modules/fbjs/lib/nullthrows.js\");\nvar RichTextEditorUtil = {\n    currentBlockContainsLink: function currentBlockContainsLink(editorState) {\n        var selection = editorState.getSelection();\n        var contentState = editorState.getCurrentContent();\n        var entityMap = contentState.getEntityMap();\n        return contentState.getBlockForKey(selection.getAnchorKey()).getCharacterList().slice(selection.getStartOffset(), selection.getEndOffset()).some(function(v) {\n            var entity = v.getEntity();\n            return !!entity && entityMap.__get(entity).getType() === \"LINK\";\n        });\n    },\n    getCurrentBlockType: function getCurrentBlockType(editorState) {\n        var selection = editorState.getSelection();\n        return editorState.getCurrentContent().getBlockForKey(selection.getStartKey()).getType();\n    },\n    getDataObjectForLinkURL: function getDataObjectForLinkURL(uri) {\n        return {\n            url: uri.toString()\n        };\n    },\n    handleKeyCommand: function handleKeyCommand(editorState, command, eventTimeStamp) {\n        switch(command){\n            case \"bold\":\n                return RichTextEditorUtil.toggleInlineStyle(editorState, \"BOLD\");\n            case \"italic\":\n                return RichTextEditorUtil.toggleInlineStyle(editorState, \"ITALIC\");\n            case \"underline\":\n                return RichTextEditorUtil.toggleInlineStyle(editorState, \"UNDERLINE\");\n            case \"code\":\n                return RichTextEditorUtil.toggleCode(editorState);\n            case \"backspace\":\n            case \"backspace-word\":\n            case \"backspace-to-start-of-line\":\n                return RichTextEditorUtil.onBackspace(editorState);\n            case \"delete\":\n            case \"delete-word\":\n            case \"delete-to-end-of-block\":\n                return RichTextEditorUtil.onDelete(editorState);\n            default:\n                // they may have custom editor commands; ignore those\n                return null;\n        }\n    },\n    insertSoftNewline: function insertSoftNewline(editorState) {\n        var contentState = DraftModifier.insertText(editorState.getCurrentContent(), editorState.getSelection(), \"\\n\", editorState.getCurrentInlineStyle(), null);\n        var newEditorState = EditorState.push(editorState, contentState, \"insert-characters\");\n        return EditorState.forceSelection(newEditorState, contentState.getSelectionAfter());\n    },\n    /**\n   * For collapsed selections at the start of styled blocks, backspace should\n   * just remove the existing style.\n   */ onBackspace: function onBackspace(editorState) {\n        var selection = editorState.getSelection();\n        if (!selection.isCollapsed() || selection.getAnchorOffset() || selection.getFocusOffset()) {\n            return null;\n        } // First, try to remove a preceding atomic block.\n        var content = editorState.getCurrentContent();\n        var startKey = selection.getStartKey();\n        var blockBefore = content.getBlockBefore(startKey);\n        if (blockBefore && blockBefore.getType() === \"atomic\") {\n            var blockMap = content.getBlockMap()[\"delete\"](blockBefore.getKey());\n            var withoutAtomicBlock = content.merge({\n                blockMap: blockMap,\n                selectionAfter: selection\n            });\n            if (withoutAtomicBlock !== content) {\n                return EditorState.push(editorState, withoutAtomicBlock, \"remove-range\");\n            }\n        } // If that doesn't succeed, try to remove the current block style.\n        var withoutBlockStyle = RichTextEditorUtil.tryToRemoveBlockStyle(editorState);\n        if (withoutBlockStyle) {\n            return EditorState.push(editorState, withoutBlockStyle, \"change-block-type\");\n        }\n        return null;\n    },\n    onDelete: function onDelete(editorState) {\n        var selection = editorState.getSelection();\n        if (!selection.isCollapsed()) {\n            return null;\n        }\n        var content = editorState.getCurrentContent();\n        var startKey = selection.getStartKey();\n        var block = content.getBlockForKey(startKey);\n        var length = block.getLength(); // The cursor is somewhere within the text. Behave normally.\n        if (selection.getStartOffset() < length) {\n            return null;\n        }\n        var blockAfter = content.getBlockAfter(startKey);\n        if (!blockAfter || blockAfter.getType() !== \"atomic\") {\n            return null;\n        }\n        var atomicBlockTarget = selection.merge({\n            focusKey: blockAfter.getKey(),\n            focusOffset: blockAfter.getLength()\n        });\n        var withoutAtomicBlock = DraftModifier.removeRange(content, atomicBlockTarget, \"forward\");\n        if (withoutAtomicBlock !== content) {\n            return EditorState.push(editorState, withoutAtomicBlock, \"remove-range\");\n        }\n        return null;\n    },\n    onTab: function onTab(event, editorState, maxDepth) {\n        var selection = editorState.getSelection();\n        var key = selection.getAnchorKey();\n        if (key !== selection.getFocusKey()) {\n            return editorState;\n        }\n        var content = editorState.getCurrentContent();\n        var block = content.getBlockForKey(key);\n        var type = block.getType();\n        if (type !== \"unordered-list-item\" && type !== \"ordered-list-item\") {\n            return editorState;\n        }\n        event.preventDefault();\n        var depth = block.getDepth();\n        if (!event.shiftKey && depth === maxDepth) {\n            return editorState;\n        }\n        var withAdjustment = adjustBlockDepthForContentState(content, selection, event.shiftKey ? -1 : 1, maxDepth);\n        return EditorState.push(editorState, withAdjustment, \"adjust-depth\");\n    },\n    toggleBlockType: function toggleBlockType(editorState, blockType) {\n        var selection = editorState.getSelection();\n        var startKey = selection.getStartKey();\n        var endKey = selection.getEndKey();\n        var content = editorState.getCurrentContent();\n        var target = selection; // Triple-click can lead to a selection that includes offset 0 of the\n        // following block. The `SelectionState` for this case is accurate, but\n        // we should avoid toggling block type for the trailing block because it\n        // is a confusing interaction.\n        if (startKey !== endKey && selection.getEndOffset() === 0) {\n            var blockBefore = nullthrows(content.getBlockBefore(endKey));\n            endKey = blockBefore.getKey();\n            target = target.merge({\n                anchorKey: startKey,\n                anchorOffset: selection.getStartOffset(),\n                focusKey: endKey,\n                focusOffset: blockBefore.getLength(),\n                isBackward: false\n            });\n        }\n        var hasAtomicBlock = content.getBlockMap().skipWhile(function(_, k) {\n            return k !== startKey;\n        }).reverse().skipWhile(function(_, k) {\n            return k !== endKey;\n        }).some(function(v) {\n            return v.getType() === \"atomic\";\n        });\n        if (hasAtomicBlock) {\n            return editorState;\n        }\n        var typeToSet = content.getBlockForKey(startKey).getType() === blockType ? \"unstyled\" : blockType;\n        return EditorState.push(editorState, DraftModifier.setBlockType(content, target, typeToSet), \"change-block-type\");\n    },\n    toggleCode: function toggleCode(editorState) {\n        var selection = editorState.getSelection();\n        var anchorKey = selection.getAnchorKey();\n        var focusKey = selection.getFocusKey();\n        if (selection.isCollapsed() || anchorKey !== focusKey) {\n            return RichTextEditorUtil.toggleBlockType(editorState, \"code-block\");\n        }\n        return RichTextEditorUtil.toggleInlineStyle(editorState, \"CODE\");\n    },\n    /**\n   * Toggle the specified inline style for the selection. If the\n   * user's selection is collapsed, apply or remove the style for the\n   * internal state. If it is not collapsed, apply the change directly\n   * to the document state.\n   */ toggleInlineStyle: function toggleInlineStyle(editorState, inlineStyle) {\n        var selection = editorState.getSelection();\n        var currentStyle = editorState.getCurrentInlineStyle(); // If the selection is collapsed, toggle the specified style on or off and\n        // set the result as the new inline style override. This will then be\n        // used as the inline style for the next character to be inserted.\n        if (selection.isCollapsed()) {\n            return EditorState.setInlineStyleOverride(editorState, currentStyle.has(inlineStyle) ? currentStyle.remove(inlineStyle) : currentStyle.add(inlineStyle));\n        } // If characters are selected, immediately apply or remove the\n        // inline style on the document state itself.\n        var content = editorState.getCurrentContent();\n        var newContent; // If the style is already present for the selection range, remove it.\n        // Otherwise, apply it.\n        if (currentStyle.has(inlineStyle)) {\n            newContent = DraftModifier.removeInlineStyle(content, selection, inlineStyle);\n        } else {\n            newContent = DraftModifier.applyInlineStyle(content, selection, inlineStyle);\n        }\n        return EditorState.push(editorState, newContent, \"change-inline-style\");\n    },\n    toggleLink: function toggleLink(editorState, targetSelection, entityKey) {\n        var withoutLink = DraftModifier.applyEntity(editorState.getCurrentContent(), targetSelection, entityKey);\n        return EditorState.push(editorState, withoutLink, \"apply-entity\");\n    },\n    /**\n   * When a collapsed cursor is at the start of a styled block, changes block\n   * type to 'unstyled'. Returns null if selection does not meet that criteria.\n   */ tryToRemoveBlockStyle: function tryToRemoveBlockStyle(editorState) {\n        var selection = editorState.getSelection();\n        var offset = selection.getAnchorOffset();\n        if (selection.isCollapsed() && offset === 0) {\n            var key = selection.getAnchorKey();\n            var content = editorState.getCurrentContent();\n            var block = content.getBlockForKey(key);\n            var type = block.getType();\n            var blockBefore = content.getBlockBefore(key);\n            if (type === \"code-block\" && blockBefore && blockBefore.getType() === \"code-block\" && blockBefore.getLength() !== 0) {\n                return null;\n            }\n            if (type !== \"unstyled\") {\n                return DraftModifier.setBlockType(content, selection, \"unstyled\");\n            }\n        }\n        return null;\n    }\n};\nmodule.exports = RichTextEditorUtil;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/RichTextEditorUtil.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/SecondaryClipboard.js":
/*!*********************************************************!*\
  !*** ./node_modules/draft-js/lib/SecondaryClipboard.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DraftModifier = __webpack_require__(/*! ./DraftModifier */ \"(ssr)/./node_modules/draft-js/lib/DraftModifier.js\");\nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar getContentStateFragment = __webpack_require__(/*! ./getContentStateFragment */ \"(ssr)/./node_modules/draft-js/lib/getContentStateFragment.js\");\nvar nullthrows = __webpack_require__(/*! fbjs/lib/nullthrows */ \"(ssr)/./node_modules/fbjs/lib/nullthrows.js\");\nvar clipboard = null;\n/**\n * Some systems offer a \"secondary\" clipboard to allow quick internal cut\n * and paste behavior. For instance, Ctrl+K (cut) and Ctrl+Y (paste).\n */ var SecondaryClipboard = {\n    cut: function cut(editorState) {\n        var content = editorState.getCurrentContent();\n        var selection = editorState.getSelection();\n        var targetRange = null;\n        if (selection.isCollapsed()) {\n            var anchorKey = selection.getAnchorKey();\n            var blockEnd = content.getBlockForKey(anchorKey).getLength();\n            if (blockEnd === selection.getAnchorOffset()) {\n                var keyAfter = content.getKeyAfter(anchorKey);\n                if (keyAfter == null) {\n                    return editorState;\n                }\n                targetRange = selection.set(\"focusKey\", keyAfter).set(\"focusOffset\", 0);\n            } else {\n                targetRange = selection.set(\"focusOffset\", blockEnd);\n            }\n        } else {\n            targetRange = selection;\n        }\n        targetRange = nullthrows(targetRange); // TODO: This should actually append to the current state when doing\n        // successive ^K commands without any other cursor movement\n        clipboard = getContentStateFragment(content, targetRange);\n        var afterRemoval = DraftModifier.removeRange(content, targetRange, \"forward\");\n        if (afterRemoval === content) {\n            return editorState;\n        }\n        return EditorState.push(editorState, afterRemoval, \"remove-range\");\n    },\n    paste: function paste(editorState) {\n        if (!clipboard) {\n            return editorState;\n        }\n        var newContent = DraftModifier.replaceWithFragment(editorState.getCurrentContent(), editorState.getSelection(), clipboard);\n        return EditorState.push(editorState, newContent, \"insert-fragment\");\n    }\n};\nmodule.exports = SecondaryClipboard;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL1NlY29uZGFyeUNsaXBib2FyZC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLElBQUlBLGdCQUFnQkMsbUJBQU9BLENBQUMsMkVBQWlCO0FBRTdDLElBQUlDLGNBQWNELG1CQUFPQSxDQUFDLHVFQUFlO0FBRXpDLElBQUlFLDBCQUEwQkYsbUJBQU9BLENBQUMsK0ZBQTJCO0FBRWpFLElBQUlHLGFBQWFILG1CQUFPQSxDQUFDLHdFQUFxQjtBQUU5QyxJQUFJSSxZQUFZO0FBQ2hCOzs7Q0FHQyxHQUVELElBQUlDLHFCQUFxQjtJQUN2QkMsS0FBSyxTQUFTQSxJQUFJQyxXQUFXO1FBQzNCLElBQUlDLFVBQVVELFlBQVlFLGlCQUFpQjtRQUMzQyxJQUFJQyxZQUFZSCxZQUFZSSxZQUFZO1FBQ3hDLElBQUlDLGNBQWM7UUFFbEIsSUFBSUYsVUFBVUcsV0FBVyxJQUFJO1lBQzNCLElBQUlDLFlBQVlKLFVBQVVLLFlBQVk7WUFDdEMsSUFBSUMsV0FBV1IsUUFBUVMsY0FBYyxDQUFDSCxXQUFXSSxTQUFTO1lBRTFELElBQUlGLGFBQWFOLFVBQVVTLGVBQWUsSUFBSTtnQkFDNUMsSUFBSUMsV0FBV1osUUFBUWEsV0FBVyxDQUFDUDtnQkFFbkMsSUFBSU0sWUFBWSxNQUFNO29CQUNwQixPQUFPYjtnQkFDVDtnQkFFQUssY0FBY0YsVUFBVVksR0FBRyxDQUFDLFlBQVlGLFVBQVVFLEdBQUcsQ0FBQyxlQUFlO1lBQ3ZFLE9BQU87Z0JBQ0xWLGNBQWNGLFVBQVVZLEdBQUcsQ0FBQyxlQUFlTjtZQUM3QztRQUNGLE9BQU87WUFDTEosY0FBY0Y7UUFDaEI7UUFFQUUsY0FBY1QsV0FBV1MsY0FBYyxvRUFBb0U7UUFDM0csMkRBQTJEO1FBRTNEUixZQUFZRix3QkFBd0JNLFNBQVNJO1FBQzdDLElBQUlXLGVBQWV4QixjQUFjeUIsV0FBVyxDQUFDaEIsU0FBU0ksYUFBYTtRQUVuRSxJQUFJVyxpQkFBaUJmLFNBQVM7WUFDNUIsT0FBT0Q7UUFDVDtRQUVBLE9BQU9OLFlBQVl3QixJQUFJLENBQUNsQixhQUFhZ0IsY0FBYztJQUNyRDtJQUNBRyxPQUFPLFNBQVNBLE1BQU1uQixXQUFXO1FBQy9CLElBQUksQ0FBQ0gsV0FBVztZQUNkLE9BQU9HO1FBQ1Q7UUFFQSxJQUFJb0IsYUFBYTVCLGNBQWM2QixtQkFBbUIsQ0FBQ3JCLFlBQVlFLGlCQUFpQixJQUFJRixZQUFZSSxZQUFZLElBQUlQO1FBQ2hILE9BQU9ILFlBQVl3QixJQUFJLENBQUNsQixhQUFhb0IsWUFBWTtJQUNuRDtBQUNGO0FBQ0FFLE9BQU9DLE9BQU8sR0FBR3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVlbC1oYXJ2ZXN0ZXIvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL1NlY29uZGFyeUNsaXBib2FyZC5qcz85MzRhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBEcmFmdE1vZGlmaWVyID0gcmVxdWlyZShcIi4vRHJhZnRNb2RpZmllclwiKTtcblxudmFyIEVkaXRvclN0YXRlID0gcmVxdWlyZShcIi4vRWRpdG9yU3RhdGVcIik7XG5cbnZhciBnZXRDb250ZW50U3RhdGVGcmFnbWVudCA9IHJlcXVpcmUoXCIuL2dldENvbnRlbnRTdGF0ZUZyYWdtZW50XCIpO1xuXG52YXIgbnVsbHRocm93cyA9IHJlcXVpcmUoXCJmYmpzL2xpYi9udWxsdGhyb3dzXCIpO1xuXG52YXIgY2xpcGJvYXJkID0gbnVsbDtcbi8qKlxuICogU29tZSBzeXN0ZW1zIG9mZmVyIGEgXCJzZWNvbmRhcnlcIiBjbGlwYm9hcmQgdG8gYWxsb3cgcXVpY2sgaW50ZXJuYWwgY3V0XG4gKiBhbmQgcGFzdGUgYmVoYXZpb3IuIEZvciBpbnN0YW5jZSwgQ3RybCtLIChjdXQpIGFuZCBDdHJsK1kgKHBhc3RlKS5cbiAqL1xuXG52YXIgU2Vjb25kYXJ5Q2xpcGJvYXJkID0ge1xuICBjdXQ6IGZ1bmN0aW9uIGN1dChlZGl0b3JTdGF0ZSkge1xuICAgIHZhciBjb250ZW50ID0gZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKTtcbiAgICB2YXIgc2VsZWN0aW9uID0gZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCk7XG4gICAgdmFyIHRhcmdldFJhbmdlID0gbnVsbDtcblxuICAgIGlmIChzZWxlY3Rpb24uaXNDb2xsYXBzZWQoKSkge1xuICAgICAgdmFyIGFuY2hvcktleSA9IHNlbGVjdGlvbi5nZXRBbmNob3JLZXkoKTtcbiAgICAgIHZhciBibG9ja0VuZCA9IGNvbnRlbnQuZ2V0QmxvY2tGb3JLZXkoYW5jaG9yS2V5KS5nZXRMZW5ndGgoKTtcblxuICAgICAgaWYgKGJsb2NrRW5kID09PSBzZWxlY3Rpb24uZ2V0QW5jaG9yT2Zmc2V0KCkpIHtcbiAgICAgICAgdmFyIGtleUFmdGVyID0gY29udGVudC5nZXRLZXlBZnRlcihhbmNob3JLZXkpO1xuXG4gICAgICAgIGlmIChrZXlBZnRlciA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGVkaXRvclN0YXRlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGFyZ2V0UmFuZ2UgPSBzZWxlY3Rpb24uc2V0KCdmb2N1c0tleScsIGtleUFmdGVyKS5zZXQoJ2ZvY3VzT2Zmc2V0JywgMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXRSYW5nZSA9IHNlbGVjdGlvbi5zZXQoJ2ZvY3VzT2Zmc2V0JywgYmxvY2tFbmQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXRSYW5nZSA9IHNlbGVjdGlvbjtcbiAgICB9XG5cbiAgICB0YXJnZXRSYW5nZSA9IG51bGx0aHJvd3ModGFyZ2V0UmFuZ2UpOyAvLyBUT0RPOiBUaGlzIHNob3VsZCBhY3R1YWxseSBhcHBlbmQgdG8gdGhlIGN1cnJlbnQgc3RhdGUgd2hlbiBkb2luZ1xuICAgIC8vIHN1Y2Nlc3NpdmUgXksgY29tbWFuZHMgd2l0aG91dCBhbnkgb3RoZXIgY3Vyc29yIG1vdmVtZW50XG5cbiAgICBjbGlwYm9hcmQgPSBnZXRDb250ZW50U3RhdGVGcmFnbWVudChjb250ZW50LCB0YXJnZXRSYW5nZSk7XG4gICAgdmFyIGFmdGVyUmVtb3ZhbCA9IERyYWZ0TW9kaWZpZXIucmVtb3ZlUmFuZ2UoY29udGVudCwgdGFyZ2V0UmFuZ2UsICdmb3J3YXJkJyk7XG5cbiAgICBpZiAoYWZ0ZXJSZW1vdmFsID09PSBjb250ZW50KSB7XG4gICAgICByZXR1cm4gZWRpdG9yU3RhdGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIEVkaXRvclN0YXRlLnB1c2goZWRpdG9yU3RhdGUsIGFmdGVyUmVtb3ZhbCwgJ3JlbW92ZS1yYW5nZScpO1xuICB9LFxuICBwYXN0ZTogZnVuY3Rpb24gcGFzdGUoZWRpdG9yU3RhdGUpIHtcbiAgICBpZiAoIWNsaXBib2FyZCkge1xuICAgICAgcmV0dXJuIGVkaXRvclN0YXRlO1xuICAgIH1cblxuICAgIHZhciBuZXdDb250ZW50ID0gRHJhZnRNb2RpZmllci5yZXBsYWNlV2l0aEZyYWdtZW50KGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCksIGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpLCBjbGlwYm9hcmQpO1xuICAgIHJldHVybiBFZGl0b3JTdGF0ZS5wdXNoKGVkaXRvclN0YXRlLCBuZXdDb250ZW50LCAnaW5zZXJ0LWZyYWdtZW50Jyk7XG4gIH1cbn07XG5tb2R1bGUuZXhwb3J0cyA9IFNlY29uZGFyeUNsaXBib2FyZDsiXSwibmFtZXMiOlsiRHJhZnRNb2RpZmllciIsInJlcXVpcmUiLCJFZGl0b3JTdGF0ZSIsImdldENvbnRlbnRTdGF0ZUZyYWdtZW50IiwibnVsbHRocm93cyIsImNsaXBib2FyZCIsIlNlY29uZGFyeUNsaXBib2FyZCIsImN1dCIsImVkaXRvclN0YXRlIiwiY29udGVudCIsImdldEN1cnJlbnRDb250ZW50Iiwic2VsZWN0aW9uIiwiZ2V0U2VsZWN0aW9uIiwidGFyZ2V0UmFuZ2UiLCJpc0NvbGxhcHNlZCIsImFuY2hvcktleSIsImdldEFuY2hvcktleSIsImJsb2NrRW5kIiwiZ2V0QmxvY2tGb3JLZXkiLCJnZXRMZW5ndGgiLCJnZXRBbmNob3JPZmZzZXQiLCJrZXlBZnRlciIsImdldEtleUFmdGVyIiwic2V0IiwiYWZ0ZXJSZW1vdmFsIiwicmVtb3ZlUmFuZ2UiLCJwdXNoIiwicGFzdGUiLCJuZXdDb250ZW50IiwicmVwbGFjZVdpdGhGcmFnbWVudCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/SecondaryClipboard.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/SelectionState.js":
/*!*****************************************************!*\
  !*** ./node_modules/draft-js/lib/SelectionState.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar Record = Immutable.Record;\nvar defaultRecord = {\n    anchorKey: \"\",\n    anchorOffset: 0,\n    focusKey: \"\",\n    focusOffset: 0,\n    isBackward: false,\n    hasFocus: false\n};\n/* $FlowFixMe[unclear-type] This comment suppresses an error found when\n * automatically adding a type annotation with the codemod Komodo/Annotate_\n * exports. To see the error delete this comment and run Flow. */ var SelectionStateRecord = Record(defaultRecord);\nvar SelectionState = /*#__PURE__*/ function(_SelectionStateRecord) {\n    _inheritsLoose(SelectionState, _SelectionStateRecord);\n    function SelectionState() {\n        return _SelectionStateRecord.apply(this, arguments) || this;\n    }\n    var _proto = SelectionState.prototype;\n    _proto.serialize = function serialize() {\n        return \"Anchor: \" + this.getAnchorKey() + \":\" + this.getAnchorOffset() + \", \" + \"Focus: \" + this.getFocusKey() + \":\" + this.getFocusOffset() + \", \" + \"Is Backward: \" + String(this.getIsBackward()) + \", \" + \"Has Focus: \" + String(this.getHasFocus());\n    };\n    _proto.getAnchorKey = function getAnchorKey() {\n        return this.get(\"anchorKey\");\n    };\n    _proto.getAnchorOffset = function getAnchorOffset() {\n        return this.get(\"anchorOffset\");\n    };\n    _proto.getFocusKey = function getFocusKey() {\n        return this.get(\"focusKey\");\n    };\n    _proto.getFocusOffset = function getFocusOffset() {\n        return this.get(\"focusOffset\");\n    };\n    _proto.getIsBackward = function getIsBackward() {\n        return this.get(\"isBackward\");\n    };\n    _proto.getHasFocus = function getHasFocus() {\n        return this.get(\"hasFocus\");\n    } /**\n   * Return whether the specified range overlaps with an edge of the\n   * SelectionState.\n   */ ;\n    _proto.hasEdgeWithin = function hasEdgeWithin(blockKey, start, end) {\n        var anchorKey = this.getAnchorKey();\n        var focusKey = this.getFocusKey();\n        if (anchorKey === focusKey && anchorKey === blockKey) {\n            var selectionStart = this.getStartOffset();\n            var selectionEnd = this.getEndOffset();\n            return start <= selectionStart && selectionStart <= end || // selectionStart is between start and end, or\n            start <= selectionEnd && selectionEnd <= end // selectionEnd is between start and end\n            ;\n        }\n        if (blockKey !== anchorKey && blockKey !== focusKey) {\n            return false;\n        }\n        var offsetToCheck = blockKey === anchorKey ? this.getAnchorOffset() : this.getFocusOffset();\n        return start <= offsetToCheck && end >= offsetToCheck;\n    };\n    _proto.isCollapsed = function isCollapsed() {\n        return this.getAnchorKey() === this.getFocusKey() && this.getAnchorOffset() === this.getFocusOffset();\n    };\n    _proto.getStartKey = function getStartKey() {\n        return this.getIsBackward() ? this.getFocusKey() : this.getAnchorKey();\n    };\n    _proto.getStartOffset = function getStartOffset() {\n        return this.getIsBackward() ? this.getFocusOffset() : this.getAnchorOffset();\n    };\n    _proto.getEndKey = function getEndKey() {\n        return this.getIsBackward() ? this.getAnchorKey() : this.getFocusKey();\n    };\n    _proto.getEndOffset = function getEndOffset() {\n        return this.getIsBackward() ? this.getAnchorOffset() : this.getFocusOffset();\n    };\n    SelectionState.createEmpty = function createEmpty(key) {\n        return new SelectionState({\n            anchorKey: key,\n            anchorOffset: 0,\n            focusKey: key,\n            focusOffset: 0,\n            isBackward: false,\n            hasFocus: false\n        });\n    };\n    return SelectionState;\n}(SelectionStateRecord);\nmodule.exports = SelectionState;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/SelectionState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/adjustBlockDepthForContentState.js":
/*!**********************************************************************!*\
  !*** ./node_modules/draft-js/lib/adjustBlockDepthForContentState.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nfunction adjustBlockDepthForContentState(contentState, selectionState, adjustment, maxDepth) {\n    var startKey = selectionState.getStartKey();\n    var endKey = selectionState.getEndKey();\n    var blockMap = contentState.getBlockMap();\n    var blocks = blockMap.toSeq().skipUntil(function(_, k) {\n        return k === startKey;\n    }).takeUntil(function(_, k) {\n        return k === endKey;\n    }).concat([\n        [\n            endKey,\n            blockMap.get(endKey)\n        ]\n    ]).map(function(block) {\n        var depth = block.getDepth() + adjustment;\n        depth = Math.max(0, Math.min(depth, maxDepth));\n        return block.set(\"depth\", depth);\n    });\n    blockMap = blockMap.merge(blocks);\n    return contentState.merge({\n        blockMap: blockMap,\n        selectionBefore: selectionState,\n        selectionAfter: selectionState\n    });\n}\nmodule.exports = adjustBlockDepthForContentState;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2FkanVzdEJsb2NrRGVwdGhGb3JDb250ZW50U3RhdGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFFQSxTQUFTQSxnQ0FBZ0NDLFlBQVksRUFBRUMsY0FBYyxFQUFFQyxVQUFVLEVBQUVDLFFBQVE7SUFDekYsSUFBSUMsV0FBV0gsZUFBZUksV0FBVztJQUN6QyxJQUFJQyxTQUFTTCxlQUFlTSxTQUFTO0lBQ3JDLElBQUlDLFdBQVdSLGFBQWFTLFdBQVc7SUFDdkMsSUFBSUMsU0FBU0YsU0FBU0csS0FBSyxHQUFHQyxTQUFTLENBQUMsU0FBVUMsQ0FBQyxFQUFFQyxDQUFDO1FBQ3BELE9BQU9BLE1BQU1WO0lBQ2YsR0FBR1csU0FBUyxDQUFDLFNBQVVGLENBQUMsRUFBRUMsQ0FBQztRQUN6QixPQUFPQSxNQUFNUjtJQUNmLEdBQUdVLE1BQU0sQ0FBQztRQUFDO1lBQUNWO1lBQVFFLFNBQVNTLEdBQUcsQ0FBQ1g7U0FBUTtLQUFDLEVBQUVZLEdBQUcsQ0FBQyxTQUFVQyxLQUFLO1FBQzdELElBQUlDLFFBQVFELE1BQU1FLFFBQVEsS0FBS25CO1FBQy9Ca0IsUUFBUUUsS0FBS0MsR0FBRyxDQUFDLEdBQUdELEtBQUtFLEdBQUcsQ0FBQ0osT0FBT2pCO1FBQ3BDLE9BQU9nQixNQUFNTSxHQUFHLENBQUMsU0FBU0w7SUFDNUI7SUFDQVosV0FBV0EsU0FBU2tCLEtBQUssQ0FBQ2hCO0lBQzFCLE9BQU9WLGFBQWEwQixLQUFLLENBQUM7UUFDeEJsQixVQUFVQTtRQUNWbUIsaUJBQWlCMUI7UUFDakIyQixnQkFBZ0IzQjtJQUNsQjtBQUNGO0FBRUE0QixPQUFPQyxPQUFPLEdBQUcvQiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9hZGp1c3RCbG9ja0RlcHRoRm9yQ29udGVudFN0YXRlLmpzPzRkNGQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gYWRqdXN0QmxvY2tEZXB0aEZvckNvbnRlbnRTdGF0ZShjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlLCBhZGp1c3RtZW50LCBtYXhEZXB0aCkge1xuICB2YXIgc3RhcnRLZXkgPSBzZWxlY3Rpb25TdGF0ZS5nZXRTdGFydEtleSgpO1xuICB2YXIgZW5kS2V5ID0gc2VsZWN0aW9uU3RhdGUuZ2V0RW5kS2V5KCk7XG4gIHZhciBibG9ja01hcCA9IGNvbnRlbnRTdGF0ZS5nZXRCbG9ja01hcCgpO1xuICB2YXIgYmxvY2tzID0gYmxvY2tNYXAudG9TZXEoKS5za2lwVW50aWwoZnVuY3Rpb24gKF8sIGspIHtcbiAgICByZXR1cm4gayA9PT0gc3RhcnRLZXk7XG4gIH0pLnRha2VVbnRpbChmdW5jdGlvbiAoXywgaykge1xuICAgIHJldHVybiBrID09PSBlbmRLZXk7XG4gIH0pLmNvbmNhdChbW2VuZEtleSwgYmxvY2tNYXAuZ2V0KGVuZEtleSldXSkubWFwKGZ1bmN0aW9uIChibG9jaykge1xuICAgIHZhciBkZXB0aCA9IGJsb2NrLmdldERlcHRoKCkgKyBhZGp1c3RtZW50O1xuICAgIGRlcHRoID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oZGVwdGgsIG1heERlcHRoKSk7XG4gICAgcmV0dXJuIGJsb2NrLnNldCgnZGVwdGgnLCBkZXB0aCk7XG4gIH0pO1xuICBibG9ja01hcCA9IGJsb2NrTWFwLm1lcmdlKGJsb2Nrcyk7XG4gIHJldHVybiBjb250ZW50U3RhdGUubWVyZ2Uoe1xuICAgIGJsb2NrTWFwOiBibG9ja01hcCxcbiAgICBzZWxlY3Rpb25CZWZvcmU6IHNlbGVjdGlvblN0YXRlLFxuICAgIHNlbGVjdGlvbkFmdGVyOiBzZWxlY3Rpb25TdGF0ZVxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhZGp1c3RCbG9ja0RlcHRoRm9yQ29udGVudFN0YXRlOyJdLCJuYW1lcyI6WyJhZGp1c3RCbG9ja0RlcHRoRm9yQ29udGVudFN0YXRlIiwiY29udGVudFN0YXRlIiwic2VsZWN0aW9uU3RhdGUiLCJhZGp1c3RtZW50IiwibWF4RGVwdGgiLCJzdGFydEtleSIsImdldFN0YXJ0S2V5IiwiZW5kS2V5IiwiZ2V0RW5kS2V5IiwiYmxvY2tNYXAiLCJnZXRCbG9ja01hcCIsImJsb2NrcyIsInRvU2VxIiwic2tpcFVudGlsIiwiXyIsImsiLCJ0YWtlVW50aWwiLCJjb25jYXQiLCJnZXQiLCJtYXAiLCJibG9jayIsImRlcHRoIiwiZ2V0RGVwdGgiLCJNYXRoIiwibWF4IiwibWluIiwic2V0IiwibWVyZ2UiLCJzZWxlY3Rpb25CZWZvcmUiLCJzZWxlY3Rpb25BZnRlciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/adjustBlockDepthForContentState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/applyEntityToContentBlock.js":
/*!****************************************************************!*\
  !*** ./node_modules/draft-js/lib/applyEntityToContentBlock.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar CharacterMetadata = __webpack_require__(/*! ./CharacterMetadata */ \"(ssr)/./node_modules/draft-js/lib/CharacterMetadata.js\");\nfunction applyEntityToContentBlock(contentBlock, startArg, end, entityKey) {\n    var start = startArg;\n    var characterList = contentBlock.getCharacterList();\n    while(start < end){\n        characterList = characterList.set(start, CharacterMetadata.applyEntity(characterList.get(start), entityKey));\n        start++;\n    }\n    return contentBlock.set(\"characterList\", characterList);\n}\nmodule.exports = applyEntityToContentBlock;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2FwcGx5RW50aXR5VG9Db250ZW50QmxvY2suanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFFQSxJQUFJQSxvQkFBb0JDLG1CQUFPQSxDQUFDLG1GQUFxQjtBQUVyRCxTQUFTQywwQkFBMEJDLFlBQVksRUFBRUMsUUFBUSxFQUFFQyxHQUFHLEVBQUVDLFNBQVM7SUFDdkUsSUFBSUMsUUFBUUg7SUFDWixJQUFJSSxnQkFBZ0JMLGFBQWFNLGdCQUFnQjtJQUVqRCxNQUFPRixRQUFRRixJQUFLO1FBQ2xCRyxnQkFBZ0JBLGNBQWNFLEdBQUcsQ0FBQ0gsT0FBT1Asa0JBQWtCVyxXQUFXLENBQUNILGNBQWNJLEdBQUcsQ0FBQ0wsUUFBUUQ7UUFDakdDO0lBQ0Y7SUFFQSxPQUFPSixhQUFhTyxHQUFHLENBQUMsaUJBQWlCRjtBQUMzQztBQUVBSyxPQUFPQyxPQUFPLEdBQUdaIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVlbC1oYXJ2ZXN0ZXIvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2FwcGx5RW50aXR5VG9Db250ZW50QmxvY2suanM/MWVmMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2hhcmFjdGVyTWV0YWRhdGEgPSByZXF1aXJlKFwiLi9DaGFyYWN0ZXJNZXRhZGF0YVwiKTtcblxuZnVuY3Rpb24gYXBwbHlFbnRpdHlUb0NvbnRlbnRCbG9jayhjb250ZW50QmxvY2ssIHN0YXJ0QXJnLCBlbmQsIGVudGl0eUtleSkge1xuICB2YXIgc3RhcnQgPSBzdGFydEFyZztcbiAgdmFyIGNoYXJhY3Rlckxpc3QgPSBjb250ZW50QmxvY2suZ2V0Q2hhcmFjdGVyTGlzdCgpO1xuXG4gIHdoaWxlIChzdGFydCA8IGVuZCkge1xuICAgIGNoYXJhY3Rlckxpc3QgPSBjaGFyYWN0ZXJMaXN0LnNldChzdGFydCwgQ2hhcmFjdGVyTWV0YWRhdGEuYXBwbHlFbnRpdHkoY2hhcmFjdGVyTGlzdC5nZXQoc3RhcnQpLCBlbnRpdHlLZXkpKTtcbiAgICBzdGFydCsrO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRlbnRCbG9jay5zZXQoJ2NoYXJhY3Rlckxpc3QnLCBjaGFyYWN0ZXJMaXN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcHBseUVudGl0eVRvQ29udGVudEJsb2NrOyJdLCJuYW1lcyI6WyJDaGFyYWN0ZXJNZXRhZGF0YSIsInJlcXVpcmUiLCJhcHBseUVudGl0eVRvQ29udGVudEJsb2NrIiwiY29udGVudEJsb2NrIiwic3RhcnRBcmciLCJlbmQiLCJlbnRpdHlLZXkiLCJzdGFydCIsImNoYXJhY3Rlckxpc3QiLCJnZXRDaGFyYWN0ZXJMaXN0Iiwic2V0IiwiYXBwbHlFbnRpdHkiLCJnZXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/applyEntityToContentBlock.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/applyEntityToContentState.js":
/*!****************************************************************!*\
  !*** ./node_modules/draft-js/lib/applyEntityToContentState.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar applyEntityToContentBlock = __webpack_require__(/*! ./applyEntityToContentBlock */ \"(ssr)/./node_modules/draft-js/lib/applyEntityToContentBlock.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nfunction applyEntityToContentState(contentState, selectionState, entityKey) {\n    var blockMap = contentState.getBlockMap();\n    var startKey = selectionState.getStartKey();\n    var startOffset = selectionState.getStartOffset();\n    var endKey = selectionState.getEndKey();\n    var endOffset = selectionState.getEndOffset();\n    var newBlocks = blockMap.skipUntil(function(_, k) {\n        return k === startKey;\n    }).takeUntil(function(_, k) {\n        return k === endKey;\n    }).toOrderedMap().merge(Immutable.OrderedMap([\n        [\n            endKey,\n            blockMap.get(endKey)\n        ]\n    ])).map(function(block, blockKey) {\n        var sliceStart = blockKey === startKey ? startOffset : 0;\n        var sliceEnd = blockKey === endKey ? endOffset : block.getLength();\n        return applyEntityToContentBlock(block, sliceStart, sliceEnd, entityKey);\n    });\n    return contentState.merge({\n        blockMap: blockMap.merge(newBlocks),\n        selectionBefore: selectionState,\n        selectionAfter: selectionState\n    });\n}\nmodule.exports = applyEntityToContentState;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2FwcGx5RW50aXR5VG9Db250ZW50U3RhdGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFFQSxJQUFJQSw0QkFBNEJDLG1CQUFPQSxDQUFDLG1HQUE2QjtBQUVyRSxJQUFJQyxZQUFZRCxtQkFBT0EsQ0FBQyx5RkFBVztBQUVuQyxTQUFTRSwwQkFBMEJDLFlBQVksRUFBRUMsY0FBYyxFQUFFQyxTQUFTO0lBQ3hFLElBQUlDLFdBQVdILGFBQWFJLFdBQVc7SUFDdkMsSUFBSUMsV0FBV0osZUFBZUssV0FBVztJQUN6QyxJQUFJQyxjQUFjTixlQUFlTyxjQUFjO0lBQy9DLElBQUlDLFNBQVNSLGVBQWVTLFNBQVM7SUFDckMsSUFBSUMsWUFBWVYsZUFBZVcsWUFBWTtJQUMzQyxJQUFJQyxZQUFZVixTQUFTVyxTQUFTLENBQUMsU0FBVUMsQ0FBQyxFQUFFQyxDQUFDO1FBQy9DLE9BQU9BLE1BQU1YO0lBQ2YsR0FBR1ksU0FBUyxDQUFDLFNBQVVGLENBQUMsRUFBRUMsQ0FBQztRQUN6QixPQUFPQSxNQUFNUDtJQUNmLEdBQUdTLFlBQVksR0FBR0MsS0FBSyxDQUFDckIsVUFBVXNCLFVBQVUsQ0FBQztRQUFDO1lBQUNYO1lBQVFOLFNBQVNrQixHQUFHLENBQUNaO1NBQVE7S0FBQyxHQUFHYSxHQUFHLENBQUMsU0FBVUMsS0FBSyxFQUFFQyxRQUFRO1FBQzNHLElBQUlDLGFBQWFELGFBQWFuQixXQUFXRSxjQUFjO1FBQ3ZELElBQUltQixXQUFXRixhQUFhZixTQUFTRSxZQUFZWSxNQUFNSSxTQUFTO1FBQ2hFLE9BQU8vQiwwQkFBMEIyQixPQUFPRSxZQUFZQyxVQUFVeEI7SUFDaEU7SUFDQSxPQUFPRixhQUFhbUIsS0FBSyxDQUFDO1FBQ3hCaEIsVUFBVUEsU0FBU2dCLEtBQUssQ0FBQ047UUFDekJlLGlCQUFpQjNCO1FBQ2pCNEIsZ0JBQWdCNUI7SUFDbEI7QUFDRjtBQUVBNkIsT0FBT0MsT0FBTyxHQUFHaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWVsLWhhcnZlc3Rlci8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvYXBwbHlFbnRpdHlUb0NvbnRlbnRTdGF0ZS5qcz9iNjhmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBhcHBseUVudGl0eVRvQ29udGVudEJsb2NrID0gcmVxdWlyZShcIi4vYXBwbHlFbnRpdHlUb0NvbnRlbnRCbG9ja1wiKTtcblxudmFyIEltbXV0YWJsZSA9IHJlcXVpcmUoXCJpbW11dGFibGVcIik7XG5cbmZ1bmN0aW9uIGFwcGx5RW50aXR5VG9Db250ZW50U3RhdGUoY29udGVudFN0YXRlLCBzZWxlY3Rpb25TdGF0ZSwgZW50aXR5S2V5KSB7XG4gIHZhciBibG9ja01hcCA9IGNvbnRlbnRTdGF0ZS5nZXRCbG9ja01hcCgpO1xuICB2YXIgc3RhcnRLZXkgPSBzZWxlY3Rpb25TdGF0ZS5nZXRTdGFydEtleSgpO1xuICB2YXIgc3RhcnRPZmZzZXQgPSBzZWxlY3Rpb25TdGF0ZS5nZXRTdGFydE9mZnNldCgpO1xuICB2YXIgZW5kS2V5ID0gc2VsZWN0aW9uU3RhdGUuZ2V0RW5kS2V5KCk7XG4gIHZhciBlbmRPZmZzZXQgPSBzZWxlY3Rpb25TdGF0ZS5nZXRFbmRPZmZzZXQoKTtcbiAgdmFyIG5ld0Jsb2NrcyA9IGJsb2NrTWFwLnNraXBVbnRpbChmdW5jdGlvbiAoXywgaykge1xuICAgIHJldHVybiBrID09PSBzdGFydEtleTtcbiAgfSkudGFrZVVudGlsKGZ1bmN0aW9uIChfLCBrKSB7XG4gICAgcmV0dXJuIGsgPT09IGVuZEtleTtcbiAgfSkudG9PcmRlcmVkTWFwKCkubWVyZ2UoSW1tdXRhYmxlLk9yZGVyZWRNYXAoW1tlbmRLZXksIGJsb2NrTWFwLmdldChlbmRLZXkpXV0pKS5tYXAoZnVuY3Rpb24gKGJsb2NrLCBibG9ja0tleSkge1xuICAgIHZhciBzbGljZVN0YXJ0ID0gYmxvY2tLZXkgPT09IHN0YXJ0S2V5ID8gc3RhcnRPZmZzZXQgOiAwO1xuICAgIHZhciBzbGljZUVuZCA9IGJsb2NrS2V5ID09PSBlbmRLZXkgPyBlbmRPZmZzZXQgOiBibG9jay5nZXRMZW5ndGgoKTtcbiAgICByZXR1cm4gYXBwbHlFbnRpdHlUb0NvbnRlbnRCbG9jayhibG9jaywgc2xpY2VTdGFydCwgc2xpY2VFbmQsIGVudGl0eUtleSk7XG4gIH0pO1xuICByZXR1cm4gY29udGVudFN0YXRlLm1lcmdlKHtcbiAgICBibG9ja01hcDogYmxvY2tNYXAubWVyZ2UobmV3QmxvY2tzKSxcbiAgICBzZWxlY3Rpb25CZWZvcmU6IHNlbGVjdGlvblN0YXRlLFxuICAgIHNlbGVjdGlvbkFmdGVyOiBzZWxlY3Rpb25TdGF0ZVxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcHBseUVudGl0eVRvQ29udGVudFN0YXRlOyJdLCJuYW1lcyI6WyJhcHBseUVudGl0eVRvQ29udGVudEJsb2NrIiwicmVxdWlyZSIsIkltbXV0YWJsZSIsImFwcGx5RW50aXR5VG9Db250ZW50U3RhdGUiLCJjb250ZW50U3RhdGUiLCJzZWxlY3Rpb25TdGF0ZSIsImVudGl0eUtleSIsImJsb2NrTWFwIiwiZ2V0QmxvY2tNYXAiLCJzdGFydEtleSIsImdldFN0YXJ0S2V5Iiwic3RhcnRPZmZzZXQiLCJnZXRTdGFydE9mZnNldCIsImVuZEtleSIsImdldEVuZEtleSIsImVuZE9mZnNldCIsImdldEVuZE9mZnNldCIsIm5ld0Jsb2NrcyIsInNraXBVbnRpbCIsIl8iLCJrIiwidGFrZVVudGlsIiwidG9PcmRlcmVkTWFwIiwibWVyZ2UiLCJPcmRlcmVkTWFwIiwiZ2V0IiwibWFwIiwiYmxvY2siLCJibG9ja0tleSIsInNsaWNlU3RhcnQiLCJzbGljZUVuZCIsImdldExlbmd0aCIsInNlbGVjdGlvbkJlZm9yZSIsInNlbGVjdGlvbkFmdGVyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/applyEntityToContentState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/convertFromDraftStateToRaw.js":
/*!*****************************************************************!*\
  !*** ./node_modules/draft-js/lib/convertFromDraftStateToRaw.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar ContentBlock = __webpack_require__(/*! ./ContentBlock */ \"(ssr)/./node_modules/draft-js/lib/ContentBlock.js\");\nvar ContentBlockNode = __webpack_require__(/*! ./ContentBlockNode */ \"(ssr)/./node_modules/draft-js/lib/ContentBlockNode.js\");\nvar DraftStringKey = __webpack_require__(/*! ./DraftStringKey */ \"(ssr)/./node_modules/draft-js/lib/DraftStringKey.js\");\nvar encodeEntityRanges = __webpack_require__(/*! ./encodeEntityRanges */ \"(ssr)/./node_modules/draft-js/lib/encodeEntityRanges.js\");\nvar encodeInlineStyleRanges = __webpack_require__(/*! ./encodeInlineStyleRanges */ \"(ssr)/./node_modules/draft-js/lib/encodeInlineStyleRanges.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar createRawBlock = function createRawBlock(block, entityStorageMap) {\n    return {\n        key: block.getKey(),\n        text: block.getText(),\n        type: block.getType(),\n        depth: block.getDepth(),\n        inlineStyleRanges: encodeInlineStyleRanges(block),\n        entityRanges: encodeEntityRanges(block, entityStorageMap),\n        data: block.getData().toObject()\n    };\n};\nvar insertRawBlock = function insertRawBlock(block, entityMap, rawBlocks, blockCacheRef) {\n    if (block instanceof ContentBlock) {\n        rawBlocks.push(createRawBlock(block, entityMap));\n        return;\n    }\n    !(block instanceof ContentBlockNode) ?  true ? invariant(false, \"block is not a BlockNode\") : 0 : void 0;\n    var parentKey = block.getParentKey();\n    var rawBlock = blockCacheRef[block.getKey()] = _objectSpread({}, createRawBlock(block, entityMap), {\n        children: []\n    });\n    if (parentKey) {\n        blockCacheRef[parentKey].children.push(rawBlock);\n        return;\n    }\n    rawBlocks.push(rawBlock);\n};\nvar encodeRawBlocks = function encodeRawBlocks(contentState, rawState) {\n    var entityMap = rawState.entityMap;\n    var rawBlocks = [];\n    var blockCacheRef = {};\n    var entityCacheRef = {};\n    var entityStorageKey = 0;\n    contentState.getBlockMap().forEach(function(block) {\n        block.findEntityRanges(function(character) {\n            return character.getEntity() !== null;\n        }, function(start) {\n            var entityKey = block.getEntityAt(start); // Stringify to maintain order of otherwise numeric keys.\n            var stringifiedEntityKey = DraftStringKey.stringify(entityKey); // This makes this function resilient to two entities\n            // erroneously having the same key\n            if (entityCacheRef[stringifiedEntityKey]) {\n                return;\n            }\n            entityCacheRef[stringifiedEntityKey] = entityKey; // we need the `any` casting here since this is a temporary state\n            // where we will later on flip the entity map and populate it with\n            // real entity, at this stage we just need to map back the entity\n            // key used by the BlockNode\n            entityMap[stringifiedEntityKey] = \"\".concat(entityStorageKey);\n            entityStorageKey++;\n        });\n        insertRawBlock(block, entityMap, rawBlocks, blockCacheRef);\n    });\n    return {\n        blocks: rawBlocks,\n        entityMap: entityMap\n    };\n}; // Flip storage map so that our storage keys map to global\n// DraftEntity keys.\nvar encodeRawEntityMap = function encodeRawEntityMap(contentState, rawState) {\n    var blocks = rawState.blocks, entityMap = rawState.entityMap;\n    var rawEntityMap = {};\n    Object.keys(entityMap).forEach(function(key, index) {\n        var entity = contentState.getEntity(DraftStringKey.unstringify(key));\n        rawEntityMap[index] = {\n            type: entity.getType(),\n            mutability: entity.getMutability(),\n            data: entity.getData()\n        };\n    });\n    return {\n        blocks: blocks,\n        entityMap: rawEntityMap\n    };\n};\nvar convertFromDraftStateToRaw = function convertFromDraftStateToRaw(contentState) {\n    var rawDraftContentState = {\n        entityMap: {},\n        blocks: []\n    }; // add blocks\n    rawDraftContentState = encodeRawBlocks(contentState, rawDraftContentState); // add entities\n    rawDraftContentState = encodeRawEntityMap(contentState, rawDraftContentState);\n    return rawDraftContentState;\n};\nmodule.exports = convertFromDraftStateToRaw;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/convertFromDraftStateToRaw.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/convertFromHTMLToContentBlocks.js":
/*!*********************************************************************!*\
  !*** ./node_modules/draft-js/lib/convertFromHTMLToContentBlocks.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar _knownListItemDepthCl;\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar CharacterMetadata = __webpack_require__(/*! ./CharacterMetadata */ \"(ssr)/./node_modules/draft-js/lib/CharacterMetadata.js\");\nvar ContentBlock = __webpack_require__(/*! ./ContentBlock */ \"(ssr)/./node_modules/draft-js/lib/ContentBlock.js\");\nvar ContentBlockNode = __webpack_require__(/*! ./ContentBlockNode */ \"(ssr)/./node_modules/draft-js/lib/ContentBlockNode.js\");\nvar DefaultDraftBlockRenderMap = __webpack_require__(/*! ./DefaultDraftBlockRenderMap */ \"(ssr)/./node_modules/draft-js/lib/DefaultDraftBlockRenderMap.js\");\nvar DraftEntity = __webpack_require__(/*! ./DraftEntity */ \"(ssr)/./node_modules/draft-js/lib/DraftEntity.js\");\nvar URI = __webpack_require__(/*! fbjs/lib/URI */ \"(ssr)/./node_modules/fbjs/lib/URI.js\");\nvar cx = __webpack_require__(/*! fbjs/lib/cx */ \"(ssr)/./node_modules/fbjs/lib/cx.js\");\nvar generateRandomKey = __webpack_require__(/*! ./generateRandomKey */ \"(ssr)/./node_modules/draft-js/lib/generateRandomKey.js\");\nvar getSafeBodyFromHTML = __webpack_require__(/*! ./getSafeBodyFromHTML */ \"(ssr)/./node_modules/draft-js/lib/getSafeBodyFromHTML.js\");\nvar gkx = __webpack_require__(/*! ./gkx */ \"(ssr)/./node_modules/draft-js/lib/gkx.js\");\nvar _require = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\"), List = _require.List, Map = _require.Map, OrderedSet = _require.OrderedSet;\nvar isHTMLAnchorElement = __webpack_require__(/*! ./isHTMLAnchorElement */ \"(ssr)/./node_modules/draft-js/lib/isHTMLAnchorElement.js\");\nvar isHTMLBRElement = __webpack_require__(/*! ./isHTMLBRElement */ \"(ssr)/./node_modules/draft-js/lib/isHTMLBRElement.js\");\nvar isHTMLElement = __webpack_require__(/*! ./isHTMLElement */ \"(ssr)/./node_modules/draft-js/lib/isHTMLElement.js\");\nvar isHTMLImageElement = __webpack_require__(/*! ./isHTMLImageElement */ \"(ssr)/./node_modules/draft-js/lib/isHTMLImageElement.js\");\nvar experimentalTreeDataSupport = gkx(\"draft_tree_data_support\");\nvar NBSP = \"&nbsp;\";\nvar SPACE = \" \"; // used for replacing characters in HTML\nvar REGEX_CR = new RegExp(\"\\r\", \"g\");\nvar REGEX_LF = new RegExp(\"\\n\", \"g\");\nvar REGEX_LEADING_LF = new RegExp(\"^\\n\", \"g\");\nvar REGEX_NBSP = new RegExp(NBSP, \"g\");\nvar REGEX_CARRIAGE = new RegExp(\"&#13;?\", \"g\");\nvar REGEX_ZWS = new RegExp(\"&#8203;?\", \"g\"); // https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight\nvar boldValues = [\n    \"bold\",\n    \"bolder\",\n    \"500\",\n    \"600\",\n    \"700\",\n    \"800\",\n    \"900\"\n];\nvar notBoldValues = [\n    \"light\",\n    \"lighter\",\n    \"normal\",\n    \"100\",\n    \"200\",\n    \"300\",\n    \"400\"\n];\nvar anchorAttr = [\n    \"className\",\n    \"href\",\n    \"rel\",\n    \"target\",\n    \"title\"\n];\nvar imgAttr = [\n    \"alt\",\n    \"className\",\n    \"height\",\n    \"src\",\n    \"width\"\n];\nvar knownListItemDepthClasses = (_knownListItemDepthCl = {}, _defineProperty(_knownListItemDepthCl, cx(\"public/DraftStyleDefault/depth0\"), 0), _defineProperty(_knownListItemDepthCl, cx(\"public/DraftStyleDefault/depth1\"), 1), _defineProperty(_knownListItemDepthCl, cx(\"public/DraftStyleDefault/depth2\"), 2), _defineProperty(_knownListItemDepthCl, cx(\"public/DraftStyleDefault/depth3\"), 3), _defineProperty(_knownListItemDepthCl, cx(\"public/DraftStyleDefault/depth4\"), 4), _knownListItemDepthCl);\nvar HTMLTagToRawInlineStyleMap = Map({\n    b: \"BOLD\",\n    code: \"CODE\",\n    del: \"STRIKETHROUGH\",\n    em: \"ITALIC\",\n    i: \"ITALIC\",\n    s: \"STRIKETHROUGH\",\n    strike: \"STRIKETHROUGH\",\n    strong: \"BOLD\",\n    u: \"UNDERLINE\",\n    mark: \"HIGHLIGHT\"\n});\n/**\n * Build a mapping from HTML tags to draftjs block types\n * out of a BlockRenderMap.\n *\n * The BlockTypeMap for the default BlockRenderMap looks like this:\n *   Map({\n *     h1: 'header-one',\n *     h2: 'header-two',\n *     h3: 'header-three',\n *     h4: 'header-four',\n *     h5: 'header-five',\n *     h6: 'header-six',\n *     blockquote: 'blockquote',\n *     figure: 'atomic',\n *     pre: ['code-block'],\n *     div: 'unstyled',\n *     p: 'unstyled',\n *     li: ['ordered-list-item', 'unordered-list-item'],\n *   })\n */ var buildBlockTypeMap = function buildBlockTypeMap(blockRenderMap) {\n    var blockTypeMap = {};\n    blockRenderMap.mapKeys(function(blockType, desc) {\n        var elements = [\n            desc.element\n        ];\n        if (desc.aliasedElements !== undefined) {\n            elements.push.apply(elements, desc.aliasedElements);\n        }\n        elements.forEach(function(element) {\n            if (blockTypeMap[element] === undefined) {\n                blockTypeMap[element] = blockType;\n            } else if (typeof blockTypeMap[element] === \"string\") {\n                blockTypeMap[element] = [\n                    blockTypeMap[element],\n                    blockType\n                ];\n            } else {\n                blockTypeMap[element].push(blockType);\n            }\n        });\n    });\n    return Map(blockTypeMap);\n};\nvar detectInlineStyle = function detectInlineStyle(node) {\n    if (isHTMLElement(node)) {\n        var element = node; // Currently only used to detect preformatted inline code\n        if (element.style.fontFamily.includes(\"monospace\")) {\n            return \"CODE\";\n        }\n    }\n    return null;\n};\n/**\n * If we're pasting from one DraftEditor to another we can check to see if\n * existing list item depth classes are being used and preserve this style\n */ var getListItemDepth = function getListItemDepth(node) {\n    var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    Object.keys(knownListItemDepthClasses).some(function(depthClass) {\n        if (node.classList.contains(depthClass)) {\n            depth = knownListItemDepthClasses[depthClass];\n        }\n    });\n    return depth;\n};\n/**\n * Return true if the provided HTML Element can be used to build a\n * Draftjs-compatible link.\n */ var isValidAnchor = function isValidAnchor(node) {\n    if (!isHTMLAnchorElement(node)) {\n        return false;\n    }\n    var anchorNode = node;\n    if (!anchorNode.href || anchorNode.protocol !== \"http:\" && anchorNode.protocol !== \"https:\" && anchorNode.protocol !== \"mailto:\" && anchorNode.protocol !== \"tel:\") {\n        return false;\n    }\n    try {\n        // Just checking whether we can actually create a URI\n        var _ = new URI(anchorNode.href);\n        return true; // We need our catch statements to have arguments, else\n    // UglifyJS (which we use for our OSS builds) will crash.\n    // eslint-disable-next-line fb-www/no-unused-catch-bindings\n    } catch (_) {\n        return false;\n    }\n};\n/**\n * Return true if the provided HTML Element can be used to build a\n * Draftjs-compatible image.\n */ var isValidImage = function isValidImage(node) {\n    if (!isHTMLImageElement(node)) {\n        return false;\n    }\n    var imageNode = node;\n    return !!(imageNode.attributes.getNamedItem(\"src\") && imageNode.attributes.getNamedItem(\"src\").value);\n};\n/**\n * Try to guess the inline style of an HTML element based on its css\n * styles (font-weight, font-style and text-decoration).\n */ var styleFromNodeAttributes = function styleFromNodeAttributes(node, style) {\n    if (!isHTMLElement(node)) {\n        return style;\n    }\n    var htmlElement = node;\n    var fontWeight = htmlElement.style.fontWeight;\n    var fontStyle = htmlElement.style.fontStyle;\n    var textDecoration = htmlElement.style.textDecoration;\n    return style.withMutations(function(style) {\n        if (boldValues.indexOf(fontWeight) >= 0) {\n            style.add(\"BOLD\");\n        } else if (notBoldValues.indexOf(fontWeight) >= 0) {\n            style.remove(\"BOLD\");\n        }\n        if (fontStyle === \"italic\") {\n            style.add(\"ITALIC\");\n        } else if (fontStyle === \"normal\") {\n            style.remove(\"ITALIC\");\n        }\n        if (textDecoration === \"underline\") {\n            style.add(\"UNDERLINE\");\n        }\n        if (textDecoration === \"line-through\") {\n            style.add(\"STRIKETHROUGH\");\n        }\n        if (textDecoration === \"none\") {\n            style.remove(\"UNDERLINE\");\n            style.remove(\"STRIKETHROUGH\");\n        }\n    });\n};\n/**\n * Determine if a nodeName is a list type, 'ul' or 'ol'\n */ var isListNode = function isListNode(nodeName) {\n    return nodeName === \"ul\" || nodeName === \"ol\";\n};\n/**\n *  ContentBlockConfig is a mutable data structure that holds all\n *  the information required to build a ContentBlock and an array of\n *  all the child nodes (childConfigs).\n *  It is being used a temporary data structure by the\n *  ContentBlocksBuilder class.\n */ /**\n * ContentBlocksBuilder builds a list of ContentBlocks and an Entity Map\n * out of one (or several) HTMLElement(s).\n *\n * The algorithm has two passes: first it builds a tree of ContentBlockConfigs\n * by walking through the HTML nodes and their children, then it walks the\n * ContentBlockConfigs tree to compute parents/siblings and create\n * the actual ContentBlocks.\n *\n * Typical usage is:\n *     new ContentBlocksBuilder()\n *        .addDOMNode(someHTMLNode)\n *        .addDOMNode(someOtherHTMLNode)\n *       .getContentBlocks();\n *\n */ var ContentBlocksBuilder = /*#__PURE__*/ function() {\n    // Most of the method in the class depend on the state of the content builder\n    // (i.e. currentBlockType, currentDepth, currentEntity etc.). Though it may\n    // be confusing at first, it made the code simpler than the alternative which\n    // is to pass those values around in every call.\n    // The following attributes are used to accumulate text and styles\n    // as we are walking the HTML node tree.\n    // Describes the future ContentState as a tree of content blocks\n    // The content blocks generated from the blockConfigs\n    // Entity map use to store links and images found in the HTML nodes\n    // Map HTML tags to draftjs block types and disambiguation function\n    function ContentBlocksBuilder(blockTypeMap, disambiguate) {\n        _defineProperty(this, \"characterList\", List());\n        _defineProperty(this, \"currentBlockType\", \"unstyled\");\n        _defineProperty(this, \"currentDepth\", 0);\n        _defineProperty(this, \"currentEntity\", null);\n        _defineProperty(this, \"currentText\", \"\");\n        _defineProperty(this, \"wrapper\", null);\n        _defineProperty(this, \"blockConfigs\", []);\n        _defineProperty(this, \"contentBlocks\", []);\n        _defineProperty(this, \"entityMap\", DraftEntity);\n        _defineProperty(this, \"blockTypeMap\", void 0);\n        _defineProperty(this, \"disambiguate\", void 0);\n        this.clear();\n        this.blockTypeMap = blockTypeMap;\n        this.disambiguate = disambiguate;\n    }\n    /**\n   * Clear the internal state of the ContentBlocksBuilder\n   */ var _proto = ContentBlocksBuilder.prototype;\n    _proto.clear = function clear() {\n        this.characterList = List();\n        this.blockConfigs = [];\n        this.currentBlockType = \"unstyled\";\n        this.currentDepth = 0;\n        this.currentEntity = null;\n        this.currentText = \"\";\n        this.entityMap = DraftEntity;\n        this.wrapper = null;\n        this.contentBlocks = [];\n    } /**\n   * Add an HTMLElement to the ContentBlocksBuilder\n   */ ;\n    _proto.addDOMNode = function addDOMNode(node) {\n        var _this$blockConfigs;\n        this.contentBlocks = [];\n        this.currentDepth = 0; // Converts the HTML node to block config\n        (_this$blockConfigs = this.blockConfigs).push.apply(_this$blockConfigs, this._toBlockConfigs([\n            node\n        ], OrderedSet())); // There might be some left over text in the builder's\n        // internal state, if so make a ContentBlock out of it.\n        this._trimCurrentText();\n        if (this.currentText !== \"\") {\n            this.blockConfigs.push(this._makeBlockConfig());\n        } // for chaining\n        return this;\n    } /**\n   * Return the ContentBlocks and the EntityMap that corresponds\n   * to the previously added HTML nodes.\n   */ ;\n    _proto.getContentBlocks = function getContentBlocks() {\n        if (this.contentBlocks.length === 0) {\n            if (experimentalTreeDataSupport) {\n                this._toContentBlocks(this.blockConfigs);\n            } else {\n                this._toFlatContentBlocks(this.blockConfigs);\n            }\n        }\n        return {\n            contentBlocks: this.contentBlocks,\n            entityMap: this.entityMap\n        };\n    } // ***********************************WARNING******************************\n     /**\n   * Generate a new ContentBlockConfig out of the current internal state\n   * of the builder, then clears the internal state.\n   */ ;\n    _proto._makeBlockConfig = function _makeBlockConfig() {\n        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var key = config.key || generateRandomKey();\n        var block = _objectSpread({\n            key: key,\n            type: this.currentBlockType,\n            text: this.currentText,\n            characterList: this.characterList,\n            depth: this.currentDepth,\n            parent: null,\n            children: List(),\n            prevSibling: null,\n            nextSibling: null,\n            childConfigs: []\n        }, config);\n        this.characterList = List();\n        this.currentBlockType = \"unstyled\";\n        this.currentText = \"\";\n        return block;\n    } /**\n   * Converts an array of HTML elements to a multi-root tree of content\n   * block configs. Some text content may be left in the builders internal\n   * state to enable chaining sucessive calls.\n   */ ;\n    _proto._toBlockConfigs = function _toBlockConfigs(nodes, style) {\n        var blockConfigs = [];\n        for(var i = 0; i < nodes.length; i++){\n            var node = nodes[i];\n            var nodeName = node.nodeName.toLowerCase();\n            if (nodeName === \"body\" || isListNode(nodeName)) {\n                // body, ol and ul are 'block' type nodes so create a block config\n                // with the text accumulated so far (if any)\n                this._trimCurrentText();\n                if (this.currentText !== \"\") {\n                    blockConfigs.push(this._makeBlockConfig());\n                } // body, ol and ul nodes are ignored, but their children are inlined in\n                // the parent block config.\n                var wasCurrentDepth = this.currentDepth;\n                var wasWrapper = this.wrapper;\n                if (isListNode(nodeName)) {\n                    this.wrapper = nodeName;\n                    if (isListNode(wasWrapper)) {\n                        this.currentDepth++;\n                    }\n                }\n                blockConfigs.push.apply(blockConfigs, this._toBlockConfigs(Array.from(node.childNodes), style));\n                this.currentDepth = wasCurrentDepth;\n                this.wrapper = wasWrapper;\n                continue;\n            }\n            var blockType = this.blockTypeMap.get(nodeName);\n            if (blockType !== undefined) {\n                // 'block' type node means we need to create a block config\n                // with the text accumulated so far (if any)\n                this._trimCurrentText();\n                if (this.currentText !== \"\") {\n                    blockConfigs.push(this._makeBlockConfig());\n                }\n                var _wasCurrentDepth = this.currentDepth;\n                var _wasWrapper = this.wrapper;\n                this.wrapper = nodeName === \"pre\" ? \"pre\" : this.wrapper;\n                if (typeof blockType !== \"string\") {\n                    blockType = this.disambiguate(nodeName, this.wrapper) || blockType[0] || \"unstyled\";\n                }\n                if (!experimentalTreeDataSupport && isHTMLElement(node) && (blockType === \"unordered-list-item\" || blockType === \"ordered-list-item\")) {\n                    var htmlElement = node;\n                    this.currentDepth = getListItemDepth(htmlElement, this.currentDepth);\n                }\n                var key = generateRandomKey();\n                var childConfigs = this._toBlockConfigs(Array.from(node.childNodes), style);\n                this._trimCurrentText();\n                blockConfigs.push(this._makeBlockConfig({\n                    key: key,\n                    childConfigs: childConfigs,\n                    type: blockType\n                }));\n                this.currentDepth = _wasCurrentDepth;\n                this.wrapper = _wasWrapper;\n                continue;\n            }\n            if (nodeName === \"#text\") {\n                this._addTextNode(node, style);\n                continue;\n            }\n            if (nodeName === \"br\") {\n                this._addBreakNode(node, style);\n                continue;\n            }\n            if (isValidImage(node)) {\n                this._addImgNode(node, style);\n                continue;\n            }\n            if (isValidAnchor(node)) {\n                this._addAnchorNode(node, blockConfigs, style);\n                continue;\n            }\n            var newStyle = style;\n            if (HTMLTagToRawInlineStyleMap.has(nodeName)) {\n                newStyle = newStyle.add(HTMLTagToRawInlineStyleMap.get(nodeName));\n            }\n            newStyle = styleFromNodeAttributes(node, newStyle);\n            var inlineStyle = detectInlineStyle(node);\n            if (inlineStyle != null) {\n                newStyle = newStyle.add(inlineStyle);\n            }\n            blockConfigs.push.apply(blockConfigs, this._toBlockConfigs(Array.from(node.childNodes), newStyle));\n        }\n        return blockConfigs;\n    } /**\n   * Append a string of text to the internal buffer.\n   */ ;\n    _proto._appendText = function _appendText(text, style) {\n        var _this$characterList;\n        this.currentText += text;\n        var characterMetadata = CharacterMetadata.create({\n            style: style,\n            entity: this.currentEntity\n        });\n        this.characterList = (_this$characterList = this.characterList).push.apply(_this$characterList, Array(text.length).fill(characterMetadata));\n    } /**\n   * Trim the text in the internal buffer.\n   */ ;\n    _proto._trimCurrentText = function _trimCurrentText() {\n        var l = this.currentText.length;\n        var begin = l - this.currentText.trimLeft().length;\n        var end = this.currentText.trimRight().length; // We should not trim whitespaces for which an entity is defined.\n        var entity = this.characterList.findEntry(function(characterMetadata) {\n            return characterMetadata.getEntity() !== null;\n        });\n        begin = entity !== undefined ? Math.min(begin, entity[0]) : begin;\n        entity = this.characterList.reverse().findEntry(function(characterMetadata) {\n            return characterMetadata.getEntity() !== null;\n        });\n        end = entity !== undefined ? Math.max(end, l - entity[0]) : end;\n        if (begin > end) {\n            this.currentText = \"\";\n            this.characterList = List();\n        } else {\n            this.currentText = this.currentText.slice(begin, end);\n            this.characterList = this.characterList.slice(begin, end);\n        }\n    } /**\n   * Add the content of an HTML text node to the internal state\n   */ ;\n    _proto._addTextNode = function _addTextNode(node, style) {\n        var text = node.textContent;\n        var trimmedText = text.trim(); // If we are not in a pre block and the trimmed content is empty,\n        // normalize to a single space.\n        if (trimmedText === \"\" && this.wrapper !== \"pre\") {\n            text = \" \";\n        }\n        if (this.wrapper !== \"pre\") {\n            // Trim leading line feed, which is invisible in HTML\n            text = text.replace(REGEX_LEADING_LF, \"\"); // Can't use empty string because MSWord\n            text = text.replace(REGEX_LF, SPACE);\n        }\n        this._appendText(text, style);\n    };\n    _proto._addBreakNode = function _addBreakNode(node, style) {\n        if (!isHTMLBRElement(node)) {\n            return;\n        }\n        this._appendText(\"\\n\", style);\n    } /**\n   * Add the content of an HTML img node to the internal state\n   */ ;\n    _proto._addImgNode = function _addImgNode(node, style) {\n        if (!isHTMLImageElement(node)) {\n            return;\n        }\n        var image = node;\n        var entityConfig = {};\n        imgAttr.forEach(function(attr) {\n            var imageAttribute = image.getAttribute(attr);\n            if (imageAttribute) {\n                entityConfig[attr] = imageAttribute;\n            }\n        }); // TODO: T15530363 update this when we remove DraftEntity entirely\n        this.currentEntity = this.entityMap.__create(\"IMAGE\", \"IMMUTABLE\", entityConfig); // The child text node cannot just have a space or return as content (since\n        // we strip those out), unless the image is for presentation only.\n        // See https://github.com/facebook/draft-js/issues/231 for some context.\n        if (gkx(\"draftjs_fix_paste_for_img\")) {\n            if (image.getAttribute(\"role\") !== \"presentation\") {\n                this._appendText(\"\\uD83D\\uDCF7\", style);\n            }\n        } else {\n            this._appendText(\"\\uD83D\\uDCF7\", style);\n        }\n        this.currentEntity = null;\n    } /**\n   * Add the content of an HTML 'a' node to the internal state. Child nodes\n   * (if any) are converted to Block Configs and appended to the provided\n   * blockConfig array.\n   */ ;\n    _proto._addAnchorNode = function _addAnchorNode(node, blockConfigs, style) {\n        // The check has already been made by isValidAnchor but\n        // we have to do it again to keep flow happy.\n        if (!isHTMLAnchorElement(node)) {\n            return;\n        }\n        var anchor = node;\n        var entityConfig = {};\n        anchorAttr.forEach(function(attr) {\n            var anchorAttribute = anchor.getAttribute(attr);\n            if (anchorAttribute) {\n                entityConfig[attr] = anchorAttribute;\n            }\n        });\n        entityConfig.url = new URI(anchor.href).toString(); // TODO: T15530363 update this when we remove DraftEntity completely\n        this.currentEntity = this.entityMap.__create(\"LINK\", \"MUTABLE\", entityConfig || {});\n        blockConfigs.push.apply(blockConfigs, this._toBlockConfigs(Array.from(node.childNodes), style));\n        this.currentEntity = null;\n    } /**\n   * Walk the BlockConfig tree, compute parent/children/siblings,\n   * and generate the corresponding ContentBlockNode\n   */ ;\n    _proto._toContentBlocks = function _toContentBlocks(blockConfigs) {\n        var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var l = blockConfigs.length - 1;\n        for(var i = 0; i <= l; i++){\n            var config = blockConfigs[i];\n            config.parent = parent;\n            config.prevSibling = i > 0 ? blockConfigs[i - 1].key : null;\n            config.nextSibling = i < l ? blockConfigs[i + 1].key : null;\n            config.children = List(config.childConfigs.map(function(child) {\n                return child.key;\n            }));\n            this.contentBlocks.push(new ContentBlockNode(_objectSpread({}, config)));\n            this._toContentBlocks(config.childConfigs, config.key);\n        }\n    } /**\n   * Remove 'useless' container nodes from the block config hierarchy, by\n   * replacing them with their children.\n   */ ;\n    _proto._hoistContainersInBlockConfigs = function _hoistContainersInBlockConfigs(blockConfigs) {\n        var _this = this;\n        var hoisted = List(blockConfigs).flatMap(function(blockConfig) {\n            // Don't mess with useful blocks\n            if (blockConfig.type !== \"unstyled\" || blockConfig.text !== \"\") {\n                return [\n                    blockConfig\n                ];\n            }\n            return _this._hoistContainersInBlockConfigs(blockConfig.childConfigs);\n        });\n        return hoisted;\n    } // ***********************************************************************\n     /**\n   * Same as _toContentBlocks but replaces nested blocks by their\n   * text content.\n   */ ;\n    _proto._toFlatContentBlocks = function _toFlatContentBlocks(blockConfigs) {\n        var _this2 = this;\n        var cleanConfigs = this._hoistContainersInBlockConfigs(blockConfigs);\n        cleanConfigs.forEach(function(config) {\n            var _this2$_extractTextFr = _this2._extractTextFromBlockConfigs(config.childConfigs), text = _this2$_extractTextFr.text, characterList = _this2$_extractTextFr.characterList;\n            _this2.contentBlocks.push(new ContentBlock(_objectSpread({}, config, {\n                text: config.text + text,\n                characterList: config.characterList.concat(characterList)\n            })));\n        });\n    } /**\n   * Extract the text and the associated inline styles form an\n   * array of content block configs.\n   */ ;\n    _proto._extractTextFromBlockConfigs = function _extractTextFromBlockConfigs(blockConfigs) {\n        var l = blockConfigs.length - 1;\n        var text = \"\";\n        var characterList = List();\n        for(var i = 0; i <= l; i++){\n            var config = blockConfigs[i];\n            text += config.text;\n            characterList = characterList.concat(config.characterList);\n            if (text !== \"\" && config.type !== \"unstyled\") {\n                text += \"\\n\";\n                characterList = characterList.push(characterList.last());\n            }\n            var children = this._extractTextFromBlockConfigs(config.childConfigs);\n            text += children.text;\n            characterList = characterList.concat(children.characterList);\n        }\n        return {\n            text: text,\n            characterList: characterList\n        };\n    };\n    return ContentBlocksBuilder;\n}();\n/**\n * Converts an HTML string to an array of ContentBlocks and an EntityMap\n * suitable to initialize the internal state of a Draftjs component.\n */ var convertFromHTMLToContentBlocks = function convertFromHTMLToContentBlocks(html) {\n    var DOMBuilder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getSafeBodyFromHTML;\n    var blockRenderMap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DefaultDraftBlockRenderMap;\n    // Be ABSOLUTELY SURE that the dom builder you pass here won't execute\n    // arbitrary code in whatever environment you're running this in. For an\n    // example of how we try to do this in-browser, see getSafeBodyFromHTML.\n    // Remove funky characters from the HTML string\n    html = html.trim().replace(REGEX_CR, \"\").replace(REGEX_NBSP, SPACE).replace(REGEX_CARRIAGE, \"\").replace(REGEX_ZWS, \"\"); // Build a DOM tree out of the HTML string\n    var safeBody = DOMBuilder(html);\n    if (!safeBody) {\n        return null;\n    } // Build a BlockTypeMap out of the BlockRenderMap\n    var blockTypeMap = buildBlockTypeMap(blockRenderMap); // Select the proper block type for the cases where the blockRenderMap\n    // uses multiple block types for the same html tag.\n    var disambiguate = function disambiguate(tag, wrapper) {\n        if (tag === \"li\") {\n            return wrapper === \"ol\" ? \"ordered-list-item\" : \"unordered-list-item\";\n        }\n        return null;\n    };\n    return new ContentBlocksBuilder(blockTypeMap, disambiguate).addDOMNode(safeBody).getContentBlocks();\n};\nmodule.exports = convertFromHTMLToContentBlocks;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/convertFromHTMLToContentBlocks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/convertFromRawToDraftState.js":
/*!*****************************************************************!*\
  !*** ./node_modules/draft-js/lib/convertFromRawToDraftState.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar ContentBlock = __webpack_require__(/*! ./ContentBlock */ \"(ssr)/./node_modules/draft-js/lib/ContentBlock.js\");\nvar ContentBlockNode = __webpack_require__(/*! ./ContentBlockNode */ \"(ssr)/./node_modules/draft-js/lib/ContentBlockNode.js\");\nvar ContentState = __webpack_require__(/*! ./ContentState */ \"(ssr)/./node_modules/draft-js/lib/ContentState.js\");\nvar DraftEntity = __webpack_require__(/*! ./DraftEntity */ \"(ssr)/./node_modules/draft-js/lib/DraftEntity.js\");\nvar DraftTreeAdapter = __webpack_require__(/*! ./DraftTreeAdapter */ \"(ssr)/./node_modules/draft-js/lib/DraftTreeAdapter.js\");\nvar DraftTreeInvariants = __webpack_require__(/*! ./DraftTreeInvariants */ \"(ssr)/./node_modules/draft-js/lib/DraftTreeInvariants.js\");\nvar SelectionState = __webpack_require__(/*! ./SelectionState */ \"(ssr)/./node_modules/draft-js/lib/SelectionState.js\");\nvar createCharacterList = __webpack_require__(/*! ./createCharacterList */ \"(ssr)/./node_modules/draft-js/lib/createCharacterList.js\");\nvar decodeEntityRanges = __webpack_require__(/*! ./decodeEntityRanges */ \"(ssr)/./node_modules/draft-js/lib/decodeEntityRanges.js\");\nvar decodeInlineStyleRanges = __webpack_require__(/*! ./decodeInlineStyleRanges */ \"(ssr)/./node_modules/draft-js/lib/decodeInlineStyleRanges.js\");\nvar generateRandomKey = __webpack_require__(/*! ./generateRandomKey */ \"(ssr)/./node_modules/draft-js/lib/generateRandomKey.js\");\nvar gkx = __webpack_require__(/*! ./gkx */ \"(ssr)/./node_modules/draft-js/lib/gkx.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar experimentalTreeDataSupport = gkx(\"draft_tree_data_support\");\nvar List = Immutable.List, Map = Immutable.Map, OrderedMap = Immutable.OrderedMap;\nvar decodeBlockNodeConfig = function decodeBlockNodeConfig(block, entityMap) {\n    var key = block.key, type = block.type, data = block.data, text = block.text, depth = block.depth;\n    var blockNodeConfig = {\n        text: text,\n        depth: depth || 0,\n        type: type || \"unstyled\",\n        key: key || generateRandomKey(),\n        data: Map(data),\n        characterList: decodeCharacterList(block, entityMap)\n    };\n    return blockNodeConfig;\n};\nvar decodeCharacterList = function decodeCharacterList(block, entityMap) {\n    var text = block.text, rawEntityRanges = block.entityRanges, rawInlineStyleRanges = block.inlineStyleRanges;\n    var entityRanges = rawEntityRanges || [];\n    var inlineStyleRanges = rawInlineStyleRanges || []; // Translate entity range keys to the DraftEntity map.\n    return createCharacterList(decodeInlineStyleRanges(text, inlineStyleRanges), decodeEntityRanges(text, entityRanges.filter(function(range) {\n        return entityMap.hasOwnProperty(range.key);\n    }).map(function(range) {\n        return _objectSpread({}, range, {\n            key: entityMap[range.key]\n        });\n    })));\n};\nvar addKeyIfMissing = function addKeyIfMissing(block) {\n    return _objectSpread({}, block, {\n        key: block.key || generateRandomKey()\n    });\n};\n/**\n * Node stack is responsible to ensure we traverse the tree only once\n * in depth order, while also providing parent refs to inner nodes to\n * construct their links.\n */ var updateNodeStack = function updateNodeStack(stack, nodes, parentRef) {\n    var nodesWithParentRef = nodes.map(function(block) {\n        return _objectSpread({}, block, {\n            parentRef: parentRef\n        });\n    }); // since we pop nodes from the stack we need to insert them in reverse\n    return stack.concat(nodesWithParentRef.reverse());\n};\n/**\n * This will build a tree draft content state by creating the node\n * reference links into a single tree walk. Each node has a link\n * reference to \"parent\", \"children\", \"nextSibling\" and \"prevSibling\"\n * blockMap will be created using depth ordering.\n */ var decodeContentBlockNodes = function decodeContentBlockNodes(blocks, entityMap) {\n    return blocks // ensure children have valid keys to enable sibling links\n    .map(addKeyIfMissing).reduce(function(blockMap, block, index) {\n        !Array.isArray(block.children) ?  true ? invariant(false, \"invalid RawDraftContentBlock can not be converted to ContentBlockNode\") : 0 : void 0; // ensure children have valid keys to enable sibling links\n        var children = block.children.map(addKeyIfMissing); // root level nodes\n        var contentBlockNode = new ContentBlockNode(_objectSpread({}, decodeBlockNodeConfig(block, entityMap), {\n            prevSibling: index === 0 ? null : blocks[index - 1].key,\n            nextSibling: index === blocks.length - 1 ? null : blocks[index + 1].key,\n            children: List(children.map(function(child) {\n                return child.key;\n            }))\n        })); // push root node to blockMap\n        blockMap = blockMap.set(contentBlockNode.getKey(), contentBlockNode); // this stack is used to ensure we visit all nodes respecting depth ordering\n        var stack = updateNodeStack([], children, contentBlockNode); // start computing children nodes\n        while(stack.length > 0){\n            // we pop from the stack and start processing this node\n            var node = stack.pop(); // parentRef already points to a converted ContentBlockNode\n            var parentRef = node.parentRef;\n            var siblings = parentRef.getChildKeys();\n            var _index = siblings.indexOf(node.key);\n            var isValidBlock = Array.isArray(node.children);\n            if (!isValidBlock) {\n                !isValidBlock ?  true ? invariant(false, \"invalid RawDraftContentBlock can not be converted to ContentBlockNode\") : 0 : void 0;\n                break;\n            } // ensure children have valid keys to enable sibling links\n            var _children = node.children.map(addKeyIfMissing);\n            var _contentBlockNode = new ContentBlockNode(_objectSpread({}, decodeBlockNodeConfig(node, entityMap), {\n                parent: parentRef.getKey(),\n                children: List(_children.map(function(child) {\n                    return child.key;\n                })),\n                prevSibling: _index === 0 ? null : siblings.get(_index - 1),\n                nextSibling: _index === siblings.size - 1 ? null : siblings.get(_index + 1)\n            })); // push node to blockMap\n            blockMap = blockMap.set(_contentBlockNode.getKey(), _contentBlockNode); // this stack is used to ensure we visit all nodes respecting depth ordering\n            stack = updateNodeStack(stack, _children, _contentBlockNode);\n        }\n        return blockMap;\n    }, OrderedMap());\n};\nvar decodeContentBlocks = function decodeContentBlocks(blocks, entityMap) {\n    return OrderedMap(blocks.map(function(block) {\n        var contentBlock = new ContentBlock(decodeBlockNodeConfig(block, entityMap));\n        return [\n            contentBlock.getKey(),\n            contentBlock\n        ];\n    }));\n};\nvar decodeRawBlocks = function decodeRawBlocks(rawState, entityMap) {\n    var isTreeRawBlock = rawState.blocks.find(function(block) {\n        return Array.isArray(block.children) && block.children.length > 0;\n    });\n    var rawBlocks = experimentalTreeDataSupport && !isTreeRawBlock ? DraftTreeAdapter.fromRawStateToRawTreeState(rawState).blocks : rawState.blocks;\n    if (!experimentalTreeDataSupport) {\n        return decodeContentBlocks(isTreeRawBlock ? DraftTreeAdapter.fromRawTreeStateToRawState(rawState).blocks : rawBlocks, entityMap);\n    }\n    var blockMap = decodeContentBlockNodes(rawBlocks, entityMap); // in dev mode, check that the tree invariants are met\n    if (true) {\n        !DraftTreeInvariants.isValidTree(blockMap) ?  true ? invariant(false, \"Should be a valid tree\") : 0 : void 0;\n    }\n    return blockMap;\n};\nvar decodeRawEntityMap = function decodeRawEntityMap(rawState) {\n    var rawEntityMap = rawState.entityMap;\n    var entityMap = {}; // TODO: Update this once we completely remove DraftEntity\n    Object.keys(rawEntityMap).forEach(function(rawEntityKey) {\n        var _rawEntityMap$rawEnti = rawEntityMap[rawEntityKey], type = _rawEntityMap$rawEnti.type, mutability = _rawEntityMap$rawEnti.mutability, data = _rawEntityMap$rawEnti.data; // get the key reference to created entity\n        entityMap[rawEntityKey] = DraftEntity.__create(type, mutability, data || {});\n    });\n    return entityMap;\n};\nvar convertFromRawToDraftState = function convertFromRawToDraftState(rawState) {\n    !Array.isArray(rawState.blocks) ?  true ? invariant(false, \"invalid RawDraftContentState\") : 0 : void 0; // decode entities\n    var entityMap = decodeRawEntityMap(rawState); // decode blockMap\n    var blockMap = decodeRawBlocks(rawState, entityMap); // create initial selection\n    var selectionState = blockMap.isEmpty() ? new SelectionState() : SelectionState.createEmpty(blockMap.first().getKey());\n    return new ContentState({\n        blockMap: blockMap,\n        entityMap: entityMap,\n        selectionBefore: selectionState,\n        selectionAfter: selectionState\n    });\n};\nmodule.exports = convertFromRawToDraftState;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2NvbnZlcnRGcm9tUmF3VG9EcmFmdFN0YXRlLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsU0FBU0EsY0FBY0MsTUFBTTtJQUFJLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJQyxVQUFVQyxNQUFNLEVBQUVGLElBQUs7UUFBRSxJQUFJRyxTQUFTRixTQUFTLENBQUNELEVBQUUsSUFBSSxPQUFPQyxTQUFTLENBQUNELEVBQUUsR0FBRyxDQUFDO1FBQUcsSUFBSUksVUFBVUMsT0FBT0MsSUFBSSxDQUFDSDtRQUFTLElBQUksT0FBT0UsT0FBT0UscUJBQXFCLEtBQUssWUFBWTtZQUFFSCxVQUFVQSxRQUFRSSxNQUFNLENBQUNILE9BQU9FLHFCQUFxQixDQUFDSixRQUFRTSxNQUFNLENBQUMsU0FBVUMsR0FBRztnQkFBSSxPQUFPTCxPQUFPTSx3QkFBd0IsQ0FBQ1IsUUFBUU8sS0FBS0UsVUFBVTtZQUFFO1FBQUs7UUFBRVIsUUFBUVMsT0FBTyxDQUFDLFNBQVVDLEdBQUc7WUFBSUMsZ0JBQWdCaEIsUUFBUWUsS0FBS1gsTUFBTSxDQUFDVyxJQUFJO1FBQUc7SUFBSTtJQUFFLE9BQU9mO0FBQVE7QUFFaGUsU0FBU2dCLGdCQUFnQkMsR0FBRyxFQUFFRixHQUFHLEVBQUVHLEtBQUs7SUFBSSxJQUFJSCxPQUFPRSxLQUFLO1FBQUVYLE9BQU9hLGNBQWMsQ0FBQ0YsS0FBS0YsS0FBSztZQUFFRyxPQUFPQTtZQUFPTCxZQUFZO1lBQU1PLGNBQWM7WUFBTUMsVUFBVTtRQUFLO0lBQUksT0FBTztRQUFFSixHQUFHLENBQUNGLElBQUksR0FBR0c7SUFBTztJQUFFLE9BQU9EO0FBQUs7QUFFaE4sSUFBSUssZUFBZUMsbUJBQU9BLENBQUMseUVBQWdCO0FBRTNDLElBQUlDLG1CQUFtQkQsbUJBQU9BLENBQUMsaUZBQW9CO0FBRW5ELElBQUlFLGVBQWVGLG1CQUFPQSxDQUFDLHlFQUFnQjtBQUUzQyxJQUFJRyxjQUFjSCxtQkFBT0EsQ0FBQyx1RUFBZTtBQUV6QyxJQUFJSSxtQkFBbUJKLG1CQUFPQSxDQUFDLGlGQUFvQjtBQUVuRCxJQUFJSyxzQkFBc0JMLG1CQUFPQSxDQUFDLHVGQUF1QjtBQUV6RCxJQUFJTSxpQkFBaUJOLG1CQUFPQSxDQUFDLDZFQUFrQjtBQUUvQyxJQUFJTyxzQkFBc0JQLG1CQUFPQSxDQUFDLHVGQUF1QjtBQUV6RCxJQUFJUSxxQkFBcUJSLG1CQUFPQSxDQUFDLHFGQUFzQjtBQUV2RCxJQUFJUywwQkFBMEJULG1CQUFPQSxDQUFDLCtGQUEyQjtBQUVqRSxJQUFJVSxvQkFBb0JWLG1CQUFPQSxDQUFDLG1GQUFxQjtBQUVyRCxJQUFJVyxNQUFNWCxtQkFBT0EsQ0FBQyx1REFBTztBQUV6QixJQUFJWSxZQUFZWixtQkFBT0EsQ0FBQyx5RkFBVztBQUVuQyxJQUFJYSxZQUFZYixtQkFBT0EsQ0FBQyxzRUFBb0I7QUFFNUMsSUFBSWMsOEJBQThCSCxJQUFJO0FBQ3RDLElBQUlJLE9BQU9ILFVBQVVHLElBQUksRUFDckJDLE1BQU1KLFVBQVVJLEdBQUcsRUFDbkJDLGFBQWFMLFVBQVVLLFVBQVU7QUFFckMsSUFBSUMsd0JBQXdCLFNBQVNBLHNCQUFzQkMsS0FBSyxFQUFFQyxTQUFTO0lBQ3pFLElBQUk1QixNQUFNMkIsTUFBTTNCLEdBQUcsRUFDZjZCLE9BQU9GLE1BQU1FLElBQUksRUFDakJDLE9BQU9ILE1BQU1HLElBQUksRUFDakJDLE9BQU9KLE1BQU1JLElBQUksRUFDakJDLFFBQVFMLE1BQU1LLEtBQUs7SUFDdkIsSUFBSUMsa0JBQWtCO1FBQ3BCRixNQUFNQTtRQUNOQyxPQUFPQSxTQUFTO1FBQ2hCSCxNQUFNQSxRQUFRO1FBQ2Q3QixLQUFLQSxPQUFPa0I7UUFDWlksTUFBTU4sSUFBSU07UUFDVkksZUFBZUMsb0JBQW9CUixPQUFPQztJQUM1QztJQUNBLE9BQU9LO0FBQ1Q7QUFFQSxJQUFJRSxzQkFBc0IsU0FBU0Esb0JBQW9CUixLQUFLLEVBQUVDLFNBQVM7SUFDckUsSUFBSUcsT0FBT0osTUFBTUksSUFBSSxFQUNqQkssa0JBQWtCVCxNQUFNVSxZQUFZLEVBQ3BDQyx1QkFBdUJYLE1BQU1ZLGlCQUFpQjtJQUNsRCxJQUFJRixlQUFlRCxtQkFBbUIsRUFBRTtJQUN4QyxJQUFJRyxvQkFBb0JELHdCQUF3QixFQUFFLEVBQUUsc0RBQXNEO0lBRTFHLE9BQU92QixvQkFBb0JFLHdCQUF3QmMsTUFBTVEsb0JBQW9CdkIsbUJBQW1CZSxNQUFNTSxhQUFhMUMsTUFBTSxDQUFDLFNBQVU2QyxLQUFLO1FBQ3ZJLE9BQU9aLFVBQVVhLGNBQWMsQ0FBQ0QsTUFBTXhDLEdBQUc7SUFDM0MsR0FBRzBDLEdBQUcsQ0FBQyxTQUFVRixLQUFLO1FBQ3BCLE9BQU94RCxjQUFjLENBQUMsR0FBR3dELE9BQU87WUFDOUJ4QyxLQUFLNEIsU0FBUyxDQUFDWSxNQUFNeEMsR0FBRyxDQUFDO1FBQzNCO0lBQ0Y7QUFDRjtBQUVBLElBQUkyQyxrQkFBa0IsU0FBU0EsZ0JBQWdCaEIsS0FBSztJQUNsRCxPQUFPM0MsY0FBYyxDQUFDLEdBQUcyQyxPQUFPO1FBQzlCM0IsS0FBSzJCLE1BQU0zQixHQUFHLElBQUlrQjtJQUNwQjtBQUNGO0FBQ0E7Ozs7Q0FJQyxHQUdELElBQUkwQixrQkFBa0IsU0FBU0EsZ0JBQWdCQyxLQUFLLEVBQUVDLEtBQUssRUFBRUMsU0FBUztJQUNwRSxJQUFJQyxxQkFBcUJGLE1BQU1KLEdBQUcsQ0FBQyxTQUFVZixLQUFLO1FBQ2hELE9BQU8zQyxjQUFjLENBQUMsR0FBRzJDLE9BQU87WUFDOUJvQixXQUFXQTtRQUNiO0lBQ0YsSUFBSSxzRUFBc0U7SUFFMUUsT0FBT0YsTUFBTW5ELE1BQU0sQ0FBQ3NELG1CQUFtQkMsT0FBTztBQUNoRDtBQUNBOzs7OztDQUtDLEdBR0QsSUFBSUMsMEJBQTBCLFNBQVNBLHdCQUF3QkMsTUFBTSxFQUFFdkIsU0FBUztJQUM5RSxPQUFPdUIsT0FBTywwREFBMEQ7S0FDdkVULEdBQUcsQ0FBQ0MsaUJBQWlCUyxNQUFNLENBQUMsU0FBVUMsUUFBUSxFQUFFMUIsS0FBSyxFQUFFMkIsS0FBSztRQUMzRCxDQUFDQyxNQUFNQyxPQUFPLENBQUM3QixNQUFNOEIsUUFBUSxJQUFJQyxLQUFxQyxHQUFHckMsVUFBVSxPQUFPLDJFQUEyRUEsQ0FBZ0IsR0FBRyxLQUFLLEdBQUcsMERBQTBEO1FBRTFQLElBQUlvQyxXQUFXOUIsTUFBTThCLFFBQVEsQ0FBQ2YsR0FBRyxDQUFDQyxrQkFBa0IsbUJBQW1CO1FBRXZFLElBQUlnQixtQkFBbUIsSUFBSWxELGlCQUFpQnpCLGNBQWMsQ0FBQyxHQUFHMEMsc0JBQXNCQyxPQUFPQyxZQUFZO1lBQ3JHZ0MsYUFBYU4sVUFBVSxJQUFJLE9BQU9ILE1BQU0sQ0FBQ0csUUFBUSxFQUFFLENBQUN0RCxHQUFHO1lBQ3ZENkQsYUFBYVAsVUFBVUgsT0FBTy9ELE1BQU0sR0FBRyxJQUFJLE9BQU8rRCxNQUFNLENBQUNHLFFBQVEsRUFBRSxDQUFDdEQsR0FBRztZQUN2RXlELFVBQVVsQyxLQUFLa0MsU0FBU2YsR0FBRyxDQUFDLFNBQVVvQixLQUFLO2dCQUN6QyxPQUFPQSxNQUFNOUQsR0FBRztZQUNsQjtRQUNGLEtBQUssNkJBQTZCO1FBRWxDcUQsV0FBV0EsU0FBU1UsR0FBRyxDQUFDSixpQkFBaUJLLE1BQU0sSUFBSUwsbUJBQW1CLDRFQUE0RTtRQUVsSixJQUFJZCxRQUFRRCxnQkFBZ0IsRUFBRSxFQUFFYSxVQUFVRSxtQkFBbUIsaUNBQWlDO1FBRTlGLE1BQU9kLE1BQU16RCxNQUFNLEdBQUcsRUFBRztZQUN2Qix1REFBdUQ7WUFDdkQsSUFBSTZFLE9BQU9wQixNQUFNcUIsR0FBRyxJQUFJLDJEQUEyRDtZQUVuRixJQUFJbkIsWUFBWWtCLEtBQUtsQixTQUFTO1lBQzlCLElBQUlvQixXQUFXcEIsVUFBVXFCLFlBQVk7WUFFckMsSUFBSUMsU0FBU0YsU0FBU0csT0FBTyxDQUFDTCxLQUFLakUsR0FBRztZQUV0QyxJQUFJdUUsZUFBZWhCLE1BQU1DLE9BQU8sQ0FBQ1MsS0FBS1IsUUFBUTtZQUU5QyxJQUFJLENBQUNjLGNBQWM7Z0JBQ2pCLENBQUNBLGVBQWViLEtBQXFDLEdBQUdyQyxVQUFVLE9BQU8sMkVBQTJFQSxDQUFnQixHQUFHLEtBQUs7Z0JBQzVLO1lBQ0YsRUFBRSwwREFBMEQ7WUFHNUQsSUFBSW1ELFlBQVlQLEtBQUtSLFFBQVEsQ0FBQ2YsR0FBRyxDQUFDQztZQUVsQyxJQUFJOEIsb0JBQW9CLElBQUloRSxpQkFBaUJ6QixjQUFjLENBQUMsR0FBRzBDLHNCQUFzQnVDLE1BQU1yQyxZQUFZO2dCQUNyRzhDLFFBQVEzQixVQUFVaUIsTUFBTTtnQkFDeEJQLFVBQVVsQyxLQUFLaUQsVUFBVTlCLEdBQUcsQ0FBQyxTQUFVb0IsS0FBSztvQkFDMUMsT0FBT0EsTUFBTTlELEdBQUc7Z0JBQ2xCO2dCQUNBNEQsYUFBYVMsV0FBVyxJQUFJLE9BQU9GLFNBQVNRLEdBQUcsQ0FBQ04sU0FBUztnQkFDekRSLGFBQWFRLFdBQVdGLFNBQVNTLElBQUksR0FBRyxJQUFJLE9BQU9ULFNBQVNRLEdBQUcsQ0FBQ04sU0FBUztZQUMzRSxLQUFLLHdCQUF3QjtZQUc3QmhCLFdBQVdBLFNBQVNVLEdBQUcsQ0FBQ1Usa0JBQWtCVCxNQUFNLElBQUlTLG9CQUFvQiw0RUFBNEU7WUFFcEo1QixRQUFRRCxnQkFBZ0JDLE9BQU8yQixXQUFXQztRQUM1QztRQUVBLE9BQU9wQjtJQUNULEdBQUc1QjtBQUNMO0FBRUEsSUFBSW9ELHNCQUFzQixTQUFTQSxvQkFBb0IxQixNQUFNLEVBQUV2QixTQUFTO0lBQ3RFLE9BQU9ILFdBQVcwQixPQUFPVCxHQUFHLENBQUMsU0FBVWYsS0FBSztRQUMxQyxJQUFJbUQsZUFBZSxJQUFJdkUsYUFBYW1CLHNCQUFzQkMsT0FBT0M7UUFDakUsT0FBTztZQUFDa0QsYUFBYWQsTUFBTTtZQUFJYztTQUFhO0lBQzlDO0FBQ0Y7QUFFQSxJQUFJQyxrQkFBa0IsU0FBU0EsZ0JBQWdCQyxRQUFRLEVBQUVwRCxTQUFTO0lBQ2hFLElBQUlxRCxpQkFBaUJELFNBQVM3QixNQUFNLENBQUMrQixJQUFJLENBQUMsU0FBVXZELEtBQUs7UUFDdkQsT0FBTzRCLE1BQU1DLE9BQU8sQ0FBQzdCLE1BQU04QixRQUFRLEtBQUs5QixNQUFNOEIsUUFBUSxDQUFDckUsTUFBTSxHQUFHO0lBQ2xFO0lBQ0EsSUFBSStGLFlBQVk3RCwrQkFBK0IsQ0FBQzJELGlCQUFpQnJFLGlCQUFpQndFLDBCQUEwQixDQUFDSixVQUFVN0IsTUFBTSxHQUFHNkIsU0FBUzdCLE1BQU07SUFFL0ksSUFBSSxDQUFDN0IsNkJBQTZCO1FBQ2hDLE9BQU91RCxvQkFBb0JJLGlCQUFpQnJFLGlCQUFpQnlFLDBCQUEwQixDQUFDTCxVQUFVN0IsTUFBTSxHQUFHZ0MsV0FBV3ZEO0lBQ3hIO0lBRUEsSUFBSXlCLFdBQVdILHdCQUF3QmlDLFdBQVd2RCxZQUFZLHNEQUFzRDtJQUVwSCxJQUFJOEIsSUFBcUMsRUFBRTtRQUN6QyxDQUFDN0Msb0JBQW9CeUUsV0FBVyxDQUFDakMsWUFBWUssS0FBcUMsR0FBR3JDLFVBQVUsT0FBTyw0QkFBNEJBLENBQWdCLEdBQUcsS0FBSztJQUM1SjtJQUVBLE9BQU9nQztBQUNUO0FBRUEsSUFBSWtDLHFCQUFxQixTQUFTQSxtQkFBbUJQLFFBQVE7SUFDM0QsSUFBSVEsZUFBZVIsU0FBU3BELFNBQVM7SUFDckMsSUFBSUEsWUFBWSxDQUFDLEdBQUcsMERBQTBEO0lBRTlFckMsT0FBT0MsSUFBSSxDQUFDZ0csY0FBY3pGLE9BQU8sQ0FBQyxTQUFVMEYsWUFBWTtRQUN0RCxJQUFJQyx3QkFBd0JGLFlBQVksQ0FBQ0MsYUFBYSxFQUNsRDVELE9BQU82RCxzQkFBc0I3RCxJQUFJLEVBQ2pDOEQsYUFBYUQsc0JBQXNCQyxVQUFVLEVBQzdDN0QsT0FBTzRELHNCQUFzQjVELElBQUksRUFBRSwwQ0FBMEM7UUFFakZGLFNBQVMsQ0FBQzZELGFBQWEsR0FBRzlFLFlBQVlpRixRQUFRLENBQUMvRCxNQUFNOEQsWUFBWTdELFFBQVEsQ0FBQztJQUM1RTtJQUNBLE9BQU9GO0FBQ1Q7QUFFQSxJQUFJaUUsNkJBQTZCLFNBQVNBLDJCQUEyQmIsUUFBUTtJQUMzRSxDQUFDekIsTUFBTUMsT0FBTyxDQUFDd0IsU0FBUzdCLE1BQU0sSUFBSU8sS0FBcUMsR0FBR3JDLFVBQVUsT0FBTyxrQ0FBa0NBLENBQWdCLEdBQUcsS0FBSyxHQUFHLGtCQUFrQjtJQUUxSyxJQUFJTyxZQUFZMkQsbUJBQW1CUCxXQUFXLGtCQUFrQjtJQUVoRSxJQUFJM0IsV0FBVzBCLGdCQUFnQkMsVUFBVXBELFlBQVksMkJBQTJCO0lBRWhGLElBQUlrRSxpQkFBaUJ6QyxTQUFTMEMsT0FBTyxLQUFLLElBQUlqRixtQkFBbUJBLGVBQWVrRixXQUFXLENBQUMzQyxTQUFTNEMsS0FBSyxHQUFHakMsTUFBTTtJQUNuSCxPQUFPLElBQUl0RCxhQUFhO1FBQ3RCMkMsVUFBVUE7UUFDVnpCLFdBQVdBO1FBQ1hzRSxpQkFBaUJKO1FBQ2pCSyxnQkFBZ0JMO0lBQ2xCO0FBQ0Y7QUFFQU0sT0FBT0MsT0FBTyxHQUFHUiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9jb252ZXJ0RnJvbVJhd1RvRHJhZnRTdGF0ZS5qcz80NTY3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyB2YXIgb3duS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykgeyBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlOyB9KSk7IH0gb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIENvbnRlbnRCbG9jayA9IHJlcXVpcmUoXCIuL0NvbnRlbnRCbG9ja1wiKTtcblxudmFyIENvbnRlbnRCbG9ja05vZGUgPSByZXF1aXJlKFwiLi9Db250ZW50QmxvY2tOb2RlXCIpO1xuXG52YXIgQ29udGVudFN0YXRlID0gcmVxdWlyZShcIi4vQ29udGVudFN0YXRlXCIpO1xuXG52YXIgRHJhZnRFbnRpdHkgPSByZXF1aXJlKFwiLi9EcmFmdEVudGl0eVwiKTtcblxudmFyIERyYWZ0VHJlZUFkYXB0ZXIgPSByZXF1aXJlKFwiLi9EcmFmdFRyZWVBZGFwdGVyXCIpO1xuXG52YXIgRHJhZnRUcmVlSW52YXJpYW50cyA9IHJlcXVpcmUoXCIuL0RyYWZ0VHJlZUludmFyaWFudHNcIik7XG5cbnZhciBTZWxlY3Rpb25TdGF0ZSA9IHJlcXVpcmUoXCIuL1NlbGVjdGlvblN0YXRlXCIpO1xuXG52YXIgY3JlYXRlQ2hhcmFjdGVyTGlzdCA9IHJlcXVpcmUoXCIuL2NyZWF0ZUNoYXJhY3Rlckxpc3RcIik7XG5cbnZhciBkZWNvZGVFbnRpdHlSYW5nZXMgPSByZXF1aXJlKFwiLi9kZWNvZGVFbnRpdHlSYW5nZXNcIik7XG5cbnZhciBkZWNvZGVJbmxpbmVTdHlsZVJhbmdlcyA9IHJlcXVpcmUoXCIuL2RlY29kZUlubGluZVN0eWxlUmFuZ2VzXCIpO1xuXG52YXIgZ2VuZXJhdGVSYW5kb21LZXkgPSByZXF1aXJlKFwiLi9nZW5lcmF0ZVJhbmRvbUtleVwiKTtcblxudmFyIGdreCA9IHJlcXVpcmUoXCIuL2dreFwiKTtcblxudmFyIEltbXV0YWJsZSA9IHJlcXVpcmUoXCJpbW11dGFibGVcIik7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpO1xuXG52YXIgZXhwZXJpbWVudGFsVHJlZURhdGFTdXBwb3J0ID0gZ2t4KCdkcmFmdF90cmVlX2RhdGFfc3VwcG9ydCcpO1xudmFyIExpc3QgPSBJbW11dGFibGUuTGlzdCxcbiAgICBNYXAgPSBJbW11dGFibGUuTWFwLFxuICAgIE9yZGVyZWRNYXAgPSBJbW11dGFibGUuT3JkZXJlZE1hcDtcblxudmFyIGRlY29kZUJsb2NrTm9kZUNvbmZpZyA9IGZ1bmN0aW9uIGRlY29kZUJsb2NrTm9kZUNvbmZpZyhibG9jaywgZW50aXR5TWFwKSB7XG4gIHZhciBrZXkgPSBibG9jay5rZXksXG4gICAgICB0eXBlID0gYmxvY2sudHlwZSxcbiAgICAgIGRhdGEgPSBibG9jay5kYXRhLFxuICAgICAgdGV4dCA9IGJsb2NrLnRleHQsXG4gICAgICBkZXB0aCA9IGJsb2NrLmRlcHRoO1xuICB2YXIgYmxvY2tOb2RlQ29uZmlnID0ge1xuICAgIHRleHQ6IHRleHQsXG4gICAgZGVwdGg6IGRlcHRoIHx8IDAsXG4gICAgdHlwZTogdHlwZSB8fCAndW5zdHlsZWQnLFxuICAgIGtleToga2V5IHx8IGdlbmVyYXRlUmFuZG9tS2V5KCksXG4gICAgZGF0YTogTWFwKGRhdGEpLFxuICAgIGNoYXJhY3Rlckxpc3Q6IGRlY29kZUNoYXJhY3Rlckxpc3QoYmxvY2ssIGVudGl0eU1hcClcbiAgfTtcbiAgcmV0dXJuIGJsb2NrTm9kZUNvbmZpZztcbn07XG5cbnZhciBkZWNvZGVDaGFyYWN0ZXJMaXN0ID0gZnVuY3Rpb24gZGVjb2RlQ2hhcmFjdGVyTGlzdChibG9jaywgZW50aXR5TWFwKSB7XG4gIHZhciB0ZXh0ID0gYmxvY2sudGV4dCxcbiAgICAgIHJhd0VudGl0eVJhbmdlcyA9IGJsb2NrLmVudGl0eVJhbmdlcyxcbiAgICAgIHJhd0lubGluZVN0eWxlUmFuZ2VzID0gYmxvY2suaW5saW5lU3R5bGVSYW5nZXM7XG4gIHZhciBlbnRpdHlSYW5nZXMgPSByYXdFbnRpdHlSYW5nZXMgfHwgW107XG4gIHZhciBpbmxpbmVTdHlsZVJhbmdlcyA9IHJhd0lubGluZVN0eWxlUmFuZ2VzIHx8IFtdOyAvLyBUcmFuc2xhdGUgZW50aXR5IHJhbmdlIGtleXMgdG8gdGhlIERyYWZ0RW50aXR5IG1hcC5cblxuICByZXR1cm4gY3JlYXRlQ2hhcmFjdGVyTGlzdChkZWNvZGVJbmxpbmVTdHlsZVJhbmdlcyh0ZXh0LCBpbmxpbmVTdHlsZVJhbmdlcyksIGRlY29kZUVudGl0eVJhbmdlcyh0ZXh0LCBlbnRpdHlSYW5nZXMuZmlsdGVyKGZ1bmN0aW9uIChyYW5nZSkge1xuICAgIHJldHVybiBlbnRpdHlNYXAuaGFzT3duUHJvcGVydHkocmFuZ2Uua2V5KTtcbiAgfSkubWFwKGZ1bmN0aW9uIChyYW5nZSkge1xuICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCByYW5nZSwge1xuICAgICAga2V5OiBlbnRpdHlNYXBbcmFuZ2Uua2V5XVxuICAgIH0pO1xuICB9KSkpO1xufTtcblxudmFyIGFkZEtleUlmTWlzc2luZyA9IGZ1bmN0aW9uIGFkZEtleUlmTWlzc2luZyhibG9jaykge1xuICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgYmxvY2ssIHtcbiAgICBrZXk6IGJsb2NrLmtleSB8fCBnZW5lcmF0ZVJhbmRvbUtleSgpXG4gIH0pO1xufTtcbi8qKlxuICogTm9kZSBzdGFjayBpcyByZXNwb25zaWJsZSB0byBlbnN1cmUgd2UgdHJhdmVyc2UgdGhlIHRyZWUgb25seSBvbmNlXG4gKiBpbiBkZXB0aCBvcmRlciwgd2hpbGUgYWxzbyBwcm92aWRpbmcgcGFyZW50IHJlZnMgdG8gaW5uZXIgbm9kZXMgdG9cbiAqIGNvbnN0cnVjdCB0aGVpciBsaW5rcy5cbiAqL1xuXG5cbnZhciB1cGRhdGVOb2RlU3RhY2sgPSBmdW5jdGlvbiB1cGRhdGVOb2RlU3RhY2soc3RhY2ssIG5vZGVzLCBwYXJlbnRSZWYpIHtcbiAgdmFyIG5vZGVzV2l0aFBhcmVudFJlZiA9IG5vZGVzLm1hcChmdW5jdGlvbiAoYmxvY2spIHtcbiAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgYmxvY2ssIHtcbiAgICAgIHBhcmVudFJlZjogcGFyZW50UmVmXG4gICAgfSk7XG4gIH0pOyAvLyBzaW5jZSB3ZSBwb3Agbm9kZXMgZnJvbSB0aGUgc3RhY2sgd2UgbmVlZCB0byBpbnNlcnQgdGhlbSBpbiByZXZlcnNlXG5cbiAgcmV0dXJuIHN0YWNrLmNvbmNhdChub2Rlc1dpdGhQYXJlbnRSZWYucmV2ZXJzZSgpKTtcbn07XG4vKipcbiAqIFRoaXMgd2lsbCBidWlsZCBhIHRyZWUgZHJhZnQgY29udGVudCBzdGF0ZSBieSBjcmVhdGluZyB0aGUgbm9kZVxuICogcmVmZXJlbmNlIGxpbmtzIGludG8gYSBzaW5nbGUgdHJlZSB3YWxrLiBFYWNoIG5vZGUgaGFzIGEgbGlua1xuICogcmVmZXJlbmNlIHRvIFwicGFyZW50XCIsIFwiY2hpbGRyZW5cIiwgXCJuZXh0U2libGluZ1wiIGFuZCBcInByZXZTaWJsaW5nXCJcbiAqIGJsb2NrTWFwIHdpbGwgYmUgY3JlYXRlZCB1c2luZyBkZXB0aCBvcmRlcmluZy5cbiAqL1xuXG5cbnZhciBkZWNvZGVDb250ZW50QmxvY2tOb2RlcyA9IGZ1bmN0aW9uIGRlY29kZUNvbnRlbnRCbG9ja05vZGVzKGJsb2NrcywgZW50aXR5TWFwKSB7XG4gIHJldHVybiBibG9ja3MgLy8gZW5zdXJlIGNoaWxkcmVuIGhhdmUgdmFsaWQga2V5cyB0byBlbmFibGUgc2libGluZyBsaW5rc1xuICAubWFwKGFkZEtleUlmTWlzc2luZykucmVkdWNlKGZ1bmN0aW9uIChibG9ja01hcCwgYmxvY2ssIGluZGV4KSB7XG4gICAgIUFycmF5LmlzQXJyYXkoYmxvY2suY2hpbGRyZW4pID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnaW52YWxpZCBSYXdEcmFmdENvbnRlbnRCbG9jayBjYW4gbm90IGJlIGNvbnZlcnRlZCB0byBDb250ZW50QmxvY2tOb2RlJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwOyAvLyBlbnN1cmUgY2hpbGRyZW4gaGF2ZSB2YWxpZCBrZXlzIHRvIGVuYWJsZSBzaWJsaW5nIGxpbmtzXG5cbiAgICB2YXIgY2hpbGRyZW4gPSBibG9jay5jaGlsZHJlbi5tYXAoYWRkS2V5SWZNaXNzaW5nKTsgLy8gcm9vdCBsZXZlbCBub2Rlc1xuXG4gICAgdmFyIGNvbnRlbnRCbG9ja05vZGUgPSBuZXcgQ29udGVudEJsb2NrTm9kZShfb2JqZWN0U3ByZWFkKHt9LCBkZWNvZGVCbG9ja05vZGVDb25maWcoYmxvY2ssIGVudGl0eU1hcCksIHtcbiAgICAgIHByZXZTaWJsaW5nOiBpbmRleCA9PT0gMCA/IG51bGwgOiBibG9ja3NbaW5kZXggLSAxXS5rZXksXG4gICAgICBuZXh0U2libGluZzogaW5kZXggPT09IGJsb2Nrcy5sZW5ndGggLSAxID8gbnVsbCA6IGJsb2Nrc1tpbmRleCArIDFdLmtleSxcbiAgICAgIGNoaWxkcmVuOiBMaXN0KGNoaWxkcmVuLm1hcChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkLmtleTtcbiAgICAgIH0pKVxuICAgIH0pKTsgLy8gcHVzaCByb290IG5vZGUgdG8gYmxvY2tNYXBcblxuICAgIGJsb2NrTWFwID0gYmxvY2tNYXAuc2V0KGNvbnRlbnRCbG9ja05vZGUuZ2V0S2V5KCksIGNvbnRlbnRCbG9ja05vZGUpOyAvLyB0aGlzIHN0YWNrIGlzIHVzZWQgdG8gZW5zdXJlIHdlIHZpc2l0IGFsbCBub2RlcyByZXNwZWN0aW5nIGRlcHRoIG9yZGVyaW5nXG5cbiAgICB2YXIgc3RhY2sgPSB1cGRhdGVOb2RlU3RhY2soW10sIGNoaWxkcmVuLCBjb250ZW50QmxvY2tOb2RlKTsgLy8gc3RhcnQgY29tcHV0aW5nIGNoaWxkcmVuIG5vZGVzXG5cbiAgICB3aGlsZSAoc3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgLy8gd2UgcG9wIGZyb20gdGhlIHN0YWNrIGFuZCBzdGFydCBwcm9jZXNzaW5nIHRoaXMgbm9kZVxuICAgICAgdmFyIG5vZGUgPSBzdGFjay5wb3AoKTsgLy8gcGFyZW50UmVmIGFscmVhZHkgcG9pbnRzIHRvIGEgY29udmVydGVkIENvbnRlbnRCbG9ja05vZGVcblxuICAgICAgdmFyIHBhcmVudFJlZiA9IG5vZGUucGFyZW50UmVmO1xuICAgICAgdmFyIHNpYmxpbmdzID0gcGFyZW50UmVmLmdldENoaWxkS2V5cygpO1xuXG4gICAgICB2YXIgX2luZGV4ID0gc2libGluZ3MuaW5kZXhPZihub2RlLmtleSk7XG5cbiAgICAgIHZhciBpc1ZhbGlkQmxvY2sgPSBBcnJheS5pc0FycmF5KG5vZGUuY2hpbGRyZW4pO1xuXG4gICAgICBpZiAoIWlzVmFsaWRCbG9jaykge1xuICAgICAgICAhaXNWYWxpZEJsb2NrID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnaW52YWxpZCBSYXdEcmFmdENvbnRlbnRCbG9jayBjYW4gbm90IGJlIGNvbnZlcnRlZCB0byBDb250ZW50QmxvY2tOb2RlJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICBicmVhaztcbiAgICAgIH0gLy8gZW5zdXJlIGNoaWxkcmVuIGhhdmUgdmFsaWQga2V5cyB0byBlbmFibGUgc2libGluZyBsaW5rc1xuXG5cbiAgICAgIHZhciBfY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuLm1hcChhZGRLZXlJZk1pc3NpbmcpO1xuXG4gICAgICB2YXIgX2NvbnRlbnRCbG9ja05vZGUgPSBuZXcgQ29udGVudEJsb2NrTm9kZShfb2JqZWN0U3ByZWFkKHt9LCBkZWNvZGVCbG9ja05vZGVDb25maWcobm9kZSwgZW50aXR5TWFwKSwge1xuICAgICAgICBwYXJlbnQ6IHBhcmVudFJlZi5nZXRLZXkoKSxcbiAgICAgICAgY2hpbGRyZW46IExpc3QoX2NoaWxkcmVuLm1hcChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICByZXR1cm4gY2hpbGQua2V5O1xuICAgICAgICB9KSksXG4gICAgICAgIHByZXZTaWJsaW5nOiBfaW5kZXggPT09IDAgPyBudWxsIDogc2libGluZ3MuZ2V0KF9pbmRleCAtIDEpLFxuICAgICAgICBuZXh0U2libGluZzogX2luZGV4ID09PSBzaWJsaW5ncy5zaXplIC0gMSA/IG51bGwgOiBzaWJsaW5ncy5nZXQoX2luZGV4ICsgMSlcbiAgICAgIH0pKTsgLy8gcHVzaCBub2RlIHRvIGJsb2NrTWFwXG5cblxuICAgICAgYmxvY2tNYXAgPSBibG9ja01hcC5zZXQoX2NvbnRlbnRCbG9ja05vZGUuZ2V0S2V5KCksIF9jb250ZW50QmxvY2tOb2RlKTsgLy8gdGhpcyBzdGFjayBpcyB1c2VkIHRvIGVuc3VyZSB3ZSB2aXNpdCBhbGwgbm9kZXMgcmVzcGVjdGluZyBkZXB0aCBvcmRlcmluZ1xuXG4gICAgICBzdGFjayA9IHVwZGF0ZU5vZGVTdGFjayhzdGFjaywgX2NoaWxkcmVuLCBfY29udGVudEJsb2NrTm9kZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJsb2NrTWFwO1xuICB9LCBPcmRlcmVkTWFwKCkpO1xufTtcblxudmFyIGRlY29kZUNvbnRlbnRCbG9ja3MgPSBmdW5jdGlvbiBkZWNvZGVDb250ZW50QmxvY2tzKGJsb2NrcywgZW50aXR5TWFwKSB7XG4gIHJldHVybiBPcmRlcmVkTWFwKGJsb2Nrcy5tYXAoZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgdmFyIGNvbnRlbnRCbG9jayA9IG5ldyBDb250ZW50QmxvY2soZGVjb2RlQmxvY2tOb2RlQ29uZmlnKGJsb2NrLCBlbnRpdHlNYXApKTtcbiAgICByZXR1cm4gW2NvbnRlbnRCbG9jay5nZXRLZXkoKSwgY29udGVudEJsb2NrXTtcbiAgfSkpO1xufTtcblxudmFyIGRlY29kZVJhd0Jsb2NrcyA9IGZ1bmN0aW9uIGRlY29kZVJhd0Jsb2NrcyhyYXdTdGF0ZSwgZW50aXR5TWFwKSB7XG4gIHZhciBpc1RyZWVSYXdCbG9jayA9IHJhd1N0YXRlLmJsb2Nrcy5maW5kKGZ1bmN0aW9uIChibG9jaykge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGJsb2NrLmNoaWxkcmVuKSAmJiBibG9jay5jaGlsZHJlbi5sZW5ndGggPiAwO1xuICB9KTtcbiAgdmFyIHJhd0Jsb2NrcyA9IGV4cGVyaW1lbnRhbFRyZWVEYXRhU3VwcG9ydCAmJiAhaXNUcmVlUmF3QmxvY2sgPyBEcmFmdFRyZWVBZGFwdGVyLmZyb21SYXdTdGF0ZVRvUmF3VHJlZVN0YXRlKHJhd1N0YXRlKS5ibG9ja3MgOiByYXdTdGF0ZS5ibG9ja3M7XG5cbiAgaWYgKCFleHBlcmltZW50YWxUcmVlRGF0YVN1cHBvcnQpIHtcbiAgICByZXR1cm4gZGVjb2RlQ29udGVudEJsb2Nrcyhpc1RyZWVSYXdCbG9jayA/IERyYWZ0VHJlZUFkYXB0ZXIuZnJvbVJhd1RyZWVTdGF0ZVRvUmF3U3RhdGUocmF3U3RhdGUpLmJsb2NrcyA6IHJhd0Jsb2NrcywgZW50aXR5TWFwKTtcbiAgfVxuXG4gIHZhciBibG9ja01hcCA9IGRlY29kZUNvbnRlbnRCbG9ja05vZGVzKHJhd0Jsb2NrcywgZW50aXR5TWFwKTsgLy8gaW4gZGV2IG1vZGUsIGNoZWNrIHRoYXQgdGhlIHRyZWUgaW52YXJpYW50cyBhcmUgbWV0XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICFEcmFmdFRyZWVJbnZhcmlhbnRzLmlzVmFsaWRUcmVlKGJsb2NrTWFwKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1Nob3VsZCBiZSBhIHZhbGlkIHRyZWUnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gYmxvY2tNYXA7XG59O1xuXG52YXIgZGVjb2RlUmF3RW50aXR5TWFwID0gZnVuY3Rpb24gZGVjb2RlUmF3RW50aXR5TWFwKHJhd1N0YXRlKSB7XG4gIHZhciByYXdFbnRpdHlNYXAgPSByYXdTdGF0ZS5lbnRpdHlNYXA7XG4gIHZhciBlbnRpdHlNYXAgPSB7fTsgLy8gVE9ETzogVXBkYXRlIHRoaXMgb25jZSB3ZSBjb21wbGV0ZWx5IHJlbW92ZSBEcmFmdEVudGl0eVxuXG4gIE9iamVjdC5rZXlzKHJhd0VudGl0eU1hcCkuZm9yRWFjaChmdW5jdGlvbiAocmF3RW50aXR5S2V5KSB7XG4gICAgdmFyIF9yYXdFbnRpdHlNYXAkcmF3RW50aSA9IHJhd0VudGl0eU1hcFtyYXdFbnRpdHlLZXldLFxuICAgICAgICB0eXBlID0gX3Jhd0VudGl0eU1hcCRyYXdFbnRpLnR5cGUsXG4gICAgICAgIG11dGFiaWxpdHkgPSBfcmF3RW50aXR5TWFwJHJhd0VudGkubXV0YWJpbGl0eSxcbiAgICAgICAgZGF0YSA9IF9yYXdFbnRpdHlNYXAkcmF3RW50aS5kYXRhOyAvLyBnZXQgdGhlIGtleSByZWZlcmVuY2UgdG8gY3JlYXRlZCBlbnRpdHlcblxuICAgIGVudGl0eU1hcFtyYXdFbnRpdHlLZXldID0gRHJhZnRFbnRpdHkuX19jcmVhdGUodHlwZSwgbXV0YWJpbGl0eSwgZGF0YSB8fCB7fSk7XG4gIH0pO1xuICByZXR1cm4gZW50aXR5TWFwO1xufTtcblxudmFyIGNvbnZlcnRGcm9tUmF3VG9EcmFmdFN0YXRlID0gZnVuY3Rpb24gY29udmVydEZyb21SYXdUb0RyYWZ0U3RhdGUocmF3U3RhdGUpIHtcbiAgIUFycmF5LmlzQXJyYXkocmF3U3RhdGUuYmxvY2tzKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ2ludmFsaWQgUmF3RHJhZnRDb250ZW50U3RhdGUnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7IC8vIGRlY29kZSBlbnRpdGllc1xuXG4gIHZhciBlbnRpdHlNYXAgPSBkZWNvZGVSYXdFbnRpdHlNYXAocmF3U3RhdGUpOyAvLyBkZWNvZGUgYmxvY2tNYXBcblxuICB2YXIgYmxvY2tNYXAgPSBkZWNvZGVSYXdCbG9ja3MocmF3U3RhdGUsIGVudGl0eU1hcCk7IC8vIGNyZWF0ZSBpbml0aWFsIHNlbGVjdGlvblxuXG4gIHZhciBzZWxlY3Rpb25TdGF0ZSA9IGJsb2NrTWFwLmlzRW1wdHkoKSA/IG5ldyBTZWxlY3Rpb25TdGF0ZSgpIDogU2VsZWN0aW9uU3RhdGUuY3JlYXRlRW1wdHkoYmxvY2tNYXAuZmlyc3QoKS5nZXRLZXkoKSk7XG4gIHJldHVybiBuZXcgQ29udGVudFN0YXRlKHtcbiAgICBibG9ja01hcDogYmxvY2tNYXAsXG4gICAgZW50aXR5TWFwOiBlbnRpdHlNYXAsXG4gICAgc2VsZWN0aW9uQmVmb3JlOiBzZWxlY3Rpb25TdGF0ZSxcbiAgICBzZWxlY3Rpb25BZnRlcjogc2VsZWN0aW9uU3RhdGVcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnZlcnRGcm9tUmF3VG9EcmFmdFN0YXRlOyJdLCJuYW1lcyI6WyJfb2JqZWN0U3ByZWFkIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsIm93bktleXMiLCJPYmplY3QiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiY29uY2F0IiwiZmlsdGVyIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImZvckVhY2giLCJrZXkiLCJfZGVmaW5lUHJvcGVydHkiLCJvYmoiLCJ2YWx1ZSIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJDb250ZW50QmxvY2siLCJyZXF1aXJlIiwiQ29udGVudEJsb2NrTm9kZSIsIkNvbnRlbnRTdGF0ZSIsIkRyYWZ0RW50aXR5IiwiRHJhZnRUcmVlQWRhcHRlciIsIkRyYWZ0VHJlZUludmFyaWFudHMiLCJTZWxlY3Rpb25TdGF0ZSIsImNyZWF0ZUNoYXJhY3Rlckxpc3QiLCJkZWNvZGVFbnRpdHlSYW5nZXMiLCJkZWNvZGVJbmxpbmVTdHlsZVJhbmdlcyIsImdlbmVyYXRlUmFuZG9tS2V5IiwiZ2t4IiwiSW1tdXRhYmxlIiwiaW52YXJpYW50IiwiZXhwZXJpbWVudGFsVHJlZURhdGFTdXBwb3J0IiwiTGlzdCIsIk1hcCIsIk9yZGVyZWRNYXAiLCJkZWNvZGVCbG9ja05vZGVDb25maWciLCJibG9jayIsImVudGl0eU1hcCIsInR5cGUiLCJkYXRhIiwidGV4dCIsImRlcHRoIiwiYmxvY2tOb2RlQ29uZmlnIiwiY2hhcmFjdGVyTGlzdCIsImRlY29kZUNoYXJhY3Rlckxpc3QiLCJyYXdFbnRpdHlSYW5nZXMiLCJlbnRpdHlSYW5nZXMiLCJyYXdJbmxpbmVTdHlsZVJhbmdlcyIsImlubGluZVN0eWxlUmFuZ2VzIiwicmFuZ2UiLCJoYXNPd25Qcm9wZXJ0eSIsIm1hcCIsImFkZEtleUlmTWlzc2luZyIsInVwZGF0ZU5vZGVTdGFjayIsInN0YWNrIiwibm9kZXMiLCJwYXJlbnRSZWYiLCJub2Rlc1dpdGhQYXJlbnRSZWYiLCJyZXZlcnNlIiwiZGVjb2RlQ29udGVudEJsb2NrTm9kZXMiLCJibG9ja3MiLCJyZWR1Y2UiLCJibG9ja01hcCIsImluZGV4IiwiQXJyYXkiLCJpc0FycmF5IiwiY2hpbGRyZW4iLCJwcm9jZXNzIiwiY29udGVudEJsb2NrTm9kZSIsInByZXZTaWJsaW5nIiwibmV4dFNpYmxpbmciLCJjaGlsZCIsInNldCIsImdldEtleSIsIm5vZGUiLCJwb3AiLCJzaWJsaW5ncyIsImdldENoaWxkS2V5cyIsIl9pbmRleCIsImluZGV4T2YiLCJpc1ZhbGlkQmxvY2siLCJfY2hpbGRyZW4iLCJfY29udGVudEJsb2NrTm9kZSIsInBhcmVudCIsImdldCIsInNpemUiLCJkZWNvZGVDb250ZW50QmxvY2tzIiwiY29udGVudEJsb2NrIiwiZGVjb2RlUmF3QmxvY2tzIiwicmF3U3RhdGUiLCJpc1RyZWVSYXdCbG9jayIsImZpbmQiLCJyYXdCbG9ja3MiLCJmcm9tUmF3U3RhdGVUb1Jhd1RyZWVTdGF0ZSIsImZyb21SYXdUcmVlU3RhdGVUb1Jhd1N0YXRlIiwiaXNWYWxpZFRyZWUiLCJkZWNvZGVSYXdFbnRpdHlNYXAiLCJyYXdFbnRpdHlNYXAiLCJyYXdFbnRpdHlLZXkiLCJfcmF3RW50aXR5TWFwJHJhd0VudGkiLCJtdXRhYmlsaXR5IiwiX19jcmVhdGUiLCJjb252ZXJ0RnJvbVJhd1RvRHJhZnRTdGF0ZSIsInNlbGVjdGlvblN0YXRlIiwiaXNFbXB0eSIsImNyZWF0ZUVtcHR5IiwiZmlyc3QiLCJzZWxlY3Rpb25CZWZvcmUiLCJzZWxlY3Rpb25BZnRlciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/convertFromRawToDraftState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/createCharacterList.js":
/*!**********************************************************!*\
  !*** ./node_modules/draft-js/lib/createCharacterList.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar CharacterMetadata = __webpack_require__(/*! ./CharacterMetadata */ \"(ssr)/./node_modules/draft-js/lib/CharacterMetadata.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar List = Immutable.List;\nfunction createCharacterList(inlineStyles, entities) {\n    var characterArray = inlineStyles.map(function(style, ii) {\n        var entity = entities[ii];\n        return CharacterMetadata.create({\n            style: style,\n            entity: entity\n        });\n    });\n    return List(characterArray);\n}\nmodule.exports = createCharacterList;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2NyZWF0ZUNoYXJhY3Rlckxpc3QuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFFQSxJQUFJQSxvQkFBb0JDLG1CQUFPQSxDQUFDLG1GQUFxQjtBQUVyRCxJQUFJQyxZQUFZRCxtQkFBT0EsQ0FBQyx5RkFBVztBQUVuQyxJQUFJRSxPQUFPRCxVQUFVQyxJQUFJO0FBRXpCLFNBQVNDLG9CQUFvQkMsWUFBWSxFQUFFQyxRQUFRO0lBQ2pELElBQUlDLGlCQUFpQkYsYUFBYUcsR0FBRyxDQUFDLFNBQVVDLEtBQUssRUFBRUMsRUFBRTtRQUN2RCxJQUFJQyxTQUFTTCxRQUFRLENBQUNJLEdBQUc7UUFDekIsT0FBT1Ysa0JBQWtCWSxNQUFNLENBQUM7WUFDOUJILE9BQU9BO1lBQ1BFLFFBQVFBO1FBQ1Y7SUFDRjtJQUNBLE9BQU9SLEtBQUtJO0FBQ2Q7QUFFQU0sT0FBT0MsT0FBTyxHQUFHViIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9jcmVhdGVDaGFyYWN0ZXJMaXN0LmpzP2Q3M2QiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIENoYXJhY3Rlck1ldGFkYXRhID0gcmVxdWlyZShcIi4vQ2hhcmFjdGVyTWV0YWRhdGFcIik7XG5cbnZhciBJbW11dGFibGUgPSByZXF1aXJlKFwiaW1tdXRhYmxlXCIpO1xuXG52YXIgTGlzdCA9IEltbXV0YWJsZS5MaXN0O1xuXG5mdW5jdGlvbiBjcmVhdGVDaGFyYWN0ZXJMaXN0KGlubGluZVN0eWxlcywgZW50aXRpZXMpIHtcbiAgdmFyIGNoYXJhY3RlckFycmF5ID0gaW5saW5lU3R5bGVzLm1hcChmdW5jdGlvbiAoc3R5bGUsIGlpKSB7XG4gICAgdmFyIGVudGl0eSA9IGVudGl0aWVzW2lpXTtcbiAgICByZXR1cm4gQ2hhcmFjdGVyTWV0YWRhdGEuY3JlYXRlKHtcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIGVudGl0eTogZW50aXR5XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gTGlzdChjaGFyYWN0ZXJBcnJheSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQ2hhcmFjdGVyTGlzdDsiXSwibmFtZXMiOlsiQ2hhcmFjdGVyTWV0YWRhdGEiLCJyZXF1aXJlIiwiSW1tdXRhYmxlIiwiTGlzdCIsImNyZWF0ZUNoYXJhY3Rlckxpc3QiLCJpbmxpbmVTdHlsZXMiLCJlbnRpdGllcyIsImNoYXJhY3RlckFycmF5IiwibWFwIiwic3R5bGUiLCJpaSIsImVudGl0eSIsImNyZWF0ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/createCharacterList.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/decodeEntityRanges.js":
/*!*********************************************************!*\
  !*** ./node_modules/draft-js/lib/decodeEntityRanges.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar UnicodeUtils = __webpack_require__(/*! fbjs/lib/UnicodeUtils */ \"(ssr)/./node_modules/fbjs/lib/UnicodeUtils.js\");\nvar substr = UnicodeUtils.substr;\n/**\n * Convert to native JavaScript string lengths to determine ranges.\n */ function decodeEntityRanges(text, ranges) {\n    var entities = Array(text.length).fill(null);\n    if (ranges) {\n        ranges.forEach(function(range) {\n            // Using Unicode-enabled substrings converted to JavaScript lengths,\n            // fill the output array with entity keys.\n            var start = substr(text, 0, range.offset).length;\n            var end = start + substr(text, range.offset, range.length).length;\n            for(var ii = start; ii < end; ii++){\n                entities[ii] = range.key;\n            }\n        });\n    }\n    return entities;\n}\nmodule.exports = decodeEntityRanges;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2RlY29kZUVudGl0eVJhbmdlcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLElBQUlBLGVBQWVDLG1CQUFPQSxDQUFDLDRFQUF1QjtBQUVsRCxJQUFJQyxTQUFTRixhQUFhRSxNQUFNO0FBQ2hDOztDQUVDLEdBRUQsU0FBU0MsbUJBQW1CQyxJQUFJLEVBQUVDLE1BQU07SUFDdEMsSUFBSUMsV0FBV0MsTUFBTUgsS0FBS0ksTUFBTSxFQUFFQyxJQUFJLENBQUM7SUFFdkMsSUFBSUosUUFBUTtRQUNWQSxPQUFPSyxPQUFPLENBQUMsU0FBVUMsS0FBSztZQUM1QixvRUFBb0U7WUFDcEUsMENBQTBDO1lBQzFDLElBQUlDLFFBQVFWLE9BQU9FLE1BQU0sR0FBR08sTUFBTUUsTUFBTSxFQUFFTCxNQUFNO1lBQ2hELElBQUlNLE1BQU1GLFFBQVFWLE9BQU9FLE1BQU1PLE1BQU1FLE1BQU0sRUFBRUYsTUFBTUgsTUFBTSxFQUFFQSxNQUFNO1lBRWpFLElBQUssSUFBSU8sS0FBS0gsT0FBT0csS0FBS0QsS0FBS0MsS0FBTTtnQkFDbkNULFFBQVEsQ0FBQ1MsR0FBRyxHQUFHSixNQUFNSyxHQUFHO1lBQzFCO1FBQ0Y7SUFDRjtJQUVBLE9BQU9WO0FBQ1Q7QUFFQVcsT0FBT0MsT0FBTyxHQUFHZiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9kZWNvZGVFbnRpdHlSYW5nZXMuanM/ZWRiOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgVW5pY29kZVV0aWxzID0gcmVxdWlyZShcImZianMvbGliL1VuaWNvZGVVdGlsc1wiKTtcblxudmFyIHN1YnN0ciA9IFVuaWNvZGVVdGlscy5zdWJzdHI7XG4vKipcbiAqIENvbnZlcnQgdG8gbmF0aXZlIEphdmFTY3JpcHQgc3RyaW5nIGxlbmd0aHMgdG8gZGV0ZXJtaW5lIHJhbmdlcy5cbiAqL1xuXG5mdW5jdGlvbiBkZWNvZGVFbnRpdHlSYW5nZXModGV4dCwgcmFuZ2VzKSB7XG4gIHZhciBlbnRpdGllcyA9IEFycmF5KHRleHQubGVuZ3RoKS5maWxsKG51bGwpO1xuXG4gIGlmIChyYW5nZXMpIHtcbiAgICByYW5nZXMuZm9yRWFjaChmdW5jdGlvbiAocmFuZ2UpIHtcbiAgICAgIC8vIFVzaW5nIFVuaWNvZGUtZW5hYmxlZCBzdWJzdHJpbmdzIGNvbnZlcnRlZCB0byBKYXZhU2NyaXB0IGxlbmd0aHMsXG4gICAgICAvLyBmaWxsIHRoZSBvdXRwdXQgYXJyYXkgd2l0aCBlbnRpdHkga2V5cy5cbiAgICAgIHZhciBzdGFydCA9IHN1YnN0cih0ZXh0LCAwLCByYW5nZS5vZmZzZXQpLmxlbmd0aDtcbiAgICAgIHZhciBlbmQgPSBzdGFydCArIHN1YnN0cih0ZXh0LCByYW5nZS5vZmZzZXQsIHJhbmdlLmxlbmd0aCkubGVuZ3RoO1xuXG4gICAgICBmb3IgKHZhciBpaSA9IHN0YXJ0OyBpaSA8IGVuZDsgaWkrKykge1xuICAgICAgICBlbnRpdGllc1tpaV0gPSByYW5nZS5rZXk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZW50aXRpZXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVjb2RlRW50aXR5UmFuZ2VzOyJdLCJuYW1lcyI6WyJVbmljb2RlVXRpbHMiLCJyZXF1aXJlIiwic3Vic3RyIiwiZGVjb2RlRW50aXR5UmFuZ2VzIiwidGV4dCIsInJhbmdlcyIsImVudGl0aWVzIiwiQXJyYXkiLCJsZW5ndGgiLCJmaWxsIiwiZm9yRWFjaCIsInJhbmdlIiwic3RhcnQiLCJvZmZzZXQiLCJlbmQiLCJpaSIsImtleSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/decodeEntityRanges.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/decodeInlineStyleRanges.js":
/*!**************************************************************!*\
  !*** ./node_modules/draft-js/lib/decodeInlineStyleRanges.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar UnicodeUtils = __webpack_require__(/*! fbjs/lib/UnicodeUtils */ \"(ssr)/./node_modules/fbjs/lib/UnicodeUtils.js\");\nvar _require = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\"), OrderedSet = _require.OrderedSet;\nvar substr = UnicodeUtils.substr;\nvar EMPTY_SET = OrderedSet();\n/**\n * Convert to native JavaScript string lengths to determine ranges.\n */ function decodeInlineStyleRanges(text, ranges) {\n    var styles = Array(text.length).fill(EMPTY_SET);\n    if (ranges) {\n        ranges.forEach(function(range) {\n            var cursor = substr(text, 0, range.offset).length;\n            var end = cursor + substr(text, range.offset, range.length).length;\n            while(cursor < end){\n                styles[cursor] = styles[cursor].add(range.style);\n                cursor++;\n            }\n        });\n    }\n    return styles;\n}\nmodule.exports = decodeInlineStyleRanges;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2RlY29kZUlubGluZVN0eWxlUmFuZ2VzLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsZUFBZUMsbUJBQU9BLENBQUMsNEVBQXVCO0FBRWxELElBQUlDLFdBQVdELG1CQUFPQSxDQUFDLHlGQUFXLEdBQzlCRSxhQUFhRCxTQUFTQyxVQUFVO0FBRXBDLElBQUlDLFNBQVNKLGFBQWFJLE1BQU07QUFDaEMsSUFBSUMsWUFBWUY7QUFDaEI7O0NBRUMsR0FFRCxTQUFTRyx3QkFBd0JDLElBQUksRUFBRUMsTUFBTTtJQUMzQyxJQUFJQyxTQUFTQyxNQUFNSCxLQUFLSSxNQUFNLEVBQUVDLElBQUksQ0FBQ1A7SUFFckMsSUFBSUcsUUFBUTtRQUNWQSxPQUFPSyxPQUFPLENBQUMsU0FBVUMsS0FBSztZQUM1QixJQUFJQyxTQUFTWCxPQUFPRyxNQUFNLEdBQUdPLE1BQU1FLE1BQU0sRUFBRUwsTUFBTTtZQUNqRCxJQUFJTSxNQUFNRixTQUFTWCxPQUFPRyxNQUFNTyxNQUFNRSxNQUFNLEVBQUVGLE1BQU1ILE1BQU0sRUFBRUEsTUFBTTtZQUVsRSxNQUFPSSxTQUFTRSxJQUFLO2dCQUNuQlIsTUFBTSxDQUFDTSxPQUFPLEdBQUdOLE1BQU0sQ0FBQ00sT0FBTyxDQUFDRyxHQUFHLENBQUNKLE1BQU1LLEtBQUs7Z0JBQy9DSjtZQUNGO1FBQ0Y7SUFDRjtJQUVBLE9BQU9OO0FBQ1Q7QUFFQVcsT0FBT0MsT0FBTyxHQUFHZiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9kZWNvZGVJbmxpbmVTdHlsZVJhbmdlcy5qcz9lYjFjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBVbmljb2RlVXRpbHMgPSByZXF1aXJlKFwiZmJqcy9saWIvVW5pY29kZVV0aWxzXCIpO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKFwiaW1tdXRhYmxlXCIpLFxuICAgIE9yZGVyZWRTZXQgPSBfcmVxdWlyZS5PcmRlcmVkU2V0O1xuXG52YXIgc3Vic3RyID0gVW5pY29kZVV0aWxzLnN1YnN0cjtcbnZhciBFTVBUWV9TRVQgPSBPcmRlcmVkU2V0KCk7XG4vKipcbiAqIENvbnZlcnQgdG8gbmF0aXZlIEphdmFTY3JpcHQgc3RyaW5nIGxlbmd0aHMgdG8gZGV0ZXJtaW5lIHJhbmdlcy5cbiAqL1xuXG5mdW5jdGlvbiBkZWNvZGVJbmxpbmVTdHlsZVJhbmdlcyh0ZXh0LCByYW5nZXMpIHtcbiAgdmFyIHN0eWxlcyA9IEFycmF5KHRleHQubGVuZ3RoKS5maWxsKEVNUFRZX1NFVCk7XG5cbiAgaWYgKHJhbmdlcykge1xuICAgIHJhbmdlcy5mb3JFYWNoKGZ1bmN0aW9uIChyYW5nZSkge1xuICAgICAgdmFyIGN1cnNvciA9IHN1YnN0cih0ZXh0LCAwLCByYW5nZS5vZmZzZXQpLmxlbmd0aDtcbiAgICAgIHZhciBlbmQgPSBjdXJzb3IgKyBzdWJzdHIodGV4dCwgcmFuZ2Uub2Zmc2V0LCByYW5nZS5sZW5ndGgpLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGN1cnNvciA8IGVuZCkge1xuICAgICAgICBzdHlsZXNbY3Vyc29yXSA9IHN0eWxlc1tjdXJzb3JdLmFkZChyYW5nZS5zdHlsZSk7XG4gICAgICAgIGN1cnNvcisrO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkZWNvZGVJbmxpbmVTdHlsZVJhbmdlczsiXSwibmFtZXMiOlsiVW5pY29kZVV0aWxzIiwicmVxdWlyZSIsIl9yZXF1aXJlIiwiT3JkZXJlZFNldCIsInN1YnN0ciIsIkVNUFRZX1NFVCIsImRlY29kZUlubGluZVN0eWxlUmFuZ2VzIiwidGV4dCIsInJhbmdlcyIsInN0eWxlcyIsIkFycmF5IiwibGVuZ3RoIiwiZmlsbCIsImZvckVhY2giLCJyYW5nZSIsImN1cnNvciIsIm9mZnNldCIsImVuZCIsImFkZCIsInN0eWxlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/decodeInlineStyleRanges.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/draftKeyUtils.js":
/*!****************************************************!*\
  !*** ./node_modules/draft-js/lib/draftKeyUtils.js ***!
  \****************************************************/
/***/ ((module) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Provides utilities for handling draftjs keys.\n *\n * @emails oncall+draft_js\n * \n * @format\n */ \nfunction notEmptyKey(key) {\n    return key != null && key != \"\";\n}\nmodule.exports = {\n    notEmptyKey: notEmptyKey\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2RyYWZ0S2V5VXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0NBV0MsR0FDRDtBQUVBLFNBQVNBLFlBQVlDLEdBQUc7SUFDdEIsT0FBT0EsT0FBTyxRQUFRQSxPQUFPO0FBQy9CO0FBRUFDLE9BQU9DLE9BQU8sR0FBRztJQUNmSCxhQUFhQTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVlbC1oYXJ2ZXN0ZXIvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2RyYWZ0S2V5VXRpbHMuanM/ZDkxMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFByb3ZpZGVzIHV0aWxpdGllcyBmb3IgaGFuZGxpbmcgZHJhZnRqcyBrZXlzLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBub3RFbXB0eUtleShrZXkpIHtcbiAgcmV0dXJuIGtleSAhPSBudWxsICYmIGtleSAhPSAnJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG5vdEVtcHR5S2V5OiBub3RFbXB0eUtleVxufTsiXSwibmFtZXMiOlsibm90RW1wdHlLZXkiLCJrZXkiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/draftKeyUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/editOnBeforeInput.js":
/*!********************************************************!*\
  !*** ./node_modules/draft-js/lib/editOnBeforeInput.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DraftModifier = __webpack_require__(/*! ./DraftModifier */ \"(ssr)/./node_modules/draft-js/lib/DraftModifier.js\");\nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar UserAgent = __webpack_require__(/*! fbjs/lib/UserAgent */ \"(ssr)/./node_modules/fbjs/lib/UserAgent.js\");\nvar getEntityKeyForSelection = __webpack_require__(/*! ./getEntityKeyForSelection */ \"(ssr)/./node_modules/draft-js/lib/getEntityKeyForSelection.js\");\nvar isEventHandled = __webpack_require__(/*! ./isEventHandled */ \"(ssr)/./node_modules/draft-js/lib/isEventHandled.js\");\nvar isSelectionAtLeafStart = __webpack_require__(/*! ./isSelectionAtLeafStart */ \"(ssr)/./node_modules/draft-js/lib/isSelectionAtLeafStart.js\");\nvar nullthrows = __webpack_require__(/*! fbjs/lib/nullthrows */ \"(ssr)/./node_modules/fbjs/lib/nullthrows.js\");\nvar setImmediate = __webpack_require__(/*! fbjs/lib/setImmediate */ \"(ssr)/./node_modules/fbjs/lib/setImmediate.js\"); // When nothing is focused, Firefox regards two characters, `'` and `/`, as\n// commands that should open and focus the \"quickfind\" search bar. This should\n// *never* happen while a contenteditable is focused, but as of v28, it\n// sometimes does, even when the keypress event target is the contenteditable.\n// This breaks the input. Special case these characters to ensure that when\n// they are typed, we prevent default on the event to make sure not to\n// trigger quickfind.\nvar FF_QUICKFIND_CHAR = \"'\";\nvar FF_QUICKFIND_LINK_CHAR = \"/\";\nvar isFirefox = UserAgent.isBrowser(\"Firefox\");\nfunction mustPreventDefaultForCharacter(character) {\n    return isFirefox && (character == FF_QUICKFIND_CHAR || character == FF_QUICKFIND_LINK_CHAR);\n}\n/**\n * Replace the current selection with the specified text string, with the\n * inline style and entity key applied to the newly inserted text.\n */ function replaceText(editorState, text, inlineStyle, entityKey, forceSelection) {\n    var contentState = DraftModifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), text, inlineStyle, entityKey);\n    return EditorState.push(editorState, contentState, \"insert-characters\", forceSelection);\n}\n/**\n * When `onBeforeInput` executes, the browser is attempting to insert a\n * character into the editor. Apply this character data to the document,\n * allowing native insertion if possible.\n *\n * Native insertion is encouraged in order to limit re-rendering and to\n * preserve spellcheck highlighting, which disappears or flashes if re-render\n * occurs on the relevant text nodes.\n */ function editOnBeforeInput(editor, e) {\n    if (editor._pendingStateFromBeforeInput !== undefined) {\n        editor.update(editor._pendingStateFromBeforeInput);\n        editor._pendingStateFromBeforeInput = undefined;\n    }\n    var editorState = editor._latestEditorState;\n    var chars = e.data; // In some cases (ex: IE ideographic space insertion) no character data\n    // is provided. There's nothing to do when this happens.\n    if (!chars) {\n        return;\n    } // Allow the top-level component to handle the insertion manually. This is\n    // useful when triggering interesting behaviors for a character insertion,\n    // Simple examples: replacing a raw text ':)' with a smile emoji or image\n    // decorator, or setting a block to be a list item after typing '- ' at the\n    // start of the block.\n    if (editor.props.handleBeforeInput && isEventHandled(editor.props.handleBeforeInput(chars, editorState, e.timeStamp))) {\n        e.preventDefault();\n        return;\n    } // If selection is collapsed, conditionally allow native behavior. This\n    // reduces re-renders and preserves spellcheck highlighting. If the selection\n    // is not collapsed, we will re-render.\n    var selection = editorState.getSelection();\n    var selectionStart = selection.getStartOffset();\n    var anchorKey = selection.getAnchorKey();\n    if (!selection.isCollapsed()) {\n        e.preventDefault();\n        editor.update(replaceText(editorState, chars, editorState.getCurrentInlineStyle(), getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection()), true));\n        return;\n    }\n    var newEditorState = replaceText(editorState, chars, editorState.getCurrentInlineStyle(), getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection()), false); // Bunch of different cases follow where we need to prevent native insertion.\n    var mustPreventNative = false;\n    if (!mustPreventNative) {\n        // Browsers tend to insert text in weird places in the DOM when typing at\n        // the start of a leaf, so we'll handle it ourselves.\n        mustPreventNative = isSelectionAtLeafStart(editor._latestCommittedEditorState);\n    }\n    if (!mustPreventNative) {\n        // Let's say we have a decorator that highlights hashtags. In many cases\n        // we need to prevent native behavior and rerender ourselves --\n        // particularly, any case *except* where the inserted characters end up\n        // anywhere except exactly where you put them.\n        //\n        // Using [] to denote a decorated leaf, some examples:\n        //\n        // 1. 'hi #' and append 'f'\n        // desired rendering: 'hi [#f]'\n        // native rendering would be: 'hi #f' (incorrect)\n        //\n        // 2. 'x [#foo]' and insert '#' before 'f'\n        // desired rendering: 'x #[#foo]'\n        // native rendering would be: 'x [##foo]' (incorrect)\n        //\n        // 3. '[#foobar]' and insert ' ' between 'foo' and 'bar'\n        // desired rendering: '[#foo] bar'\n        // native rendering would be: '[#foo bar]' (incorrect)\n        //\n        // 4. '[#foo]' and delete '#' [won't use this beforeinput codepath though]\n        // desired rendering: 'foo'\n        // native rendering would be: '[foo]' (incorrect)\n        //\n        // 5. '[#foo]' and append 'b'\n        // desired rendering: '[#foob]'\n        // native rendering would be: '[#foob]'\n        // (native insertion here would be ok for decorators like simple spans,\n        // but not more complex decorators. To be safe, we need to prevent it.)\n        //\n        // It is safe to allow native insertion if and only if the full list of\n        // decorator ranges matches what we expect native insertion to give, and\n        // the range lengths have not changed. We don't need to compare the content\n        // because the only possible mutation to consider here is inserting plain\n        // text and decorators can't affect text content.\n        var oldBlockTree = editorState.getBlockTree(anchorKey);\n        var newBlockTree = newEditorState.getBlockTree(anchorKey);\n        mustPreventNative = oldBlockTree.size !== newBlockTree.size || oldBlockTree.zip(newBlockTree).some(function(_ref) {\n            var oldLeafSet = _ref[0], newLeafSet = _ref[1];\n            // selectionStart is guaranteed to be selectionEnd here\n            var oldStart = oldLeafSet.get(\"start\");\n            var adjustedStart = oldStart + (oldStart >= selectionStart ? chars.length : 0);\n            var oldEnd = oldLeafSet.get(\"end\");\n            var adjustedEnd = oldEnd + (oldEnd >= selectionStart ? chars.length : 0);\n            var newStart = newLeafSet.get(\"start\");\n            var newEnd = newLeafSet.get(\"end\");\n            var newDecoratorKey = newLeafSet.get(\"decoratorKey\");\n            return oldLeafSet.get(\"decoratorKey\") !== newDecoratorKey || // Different number of inline styles\n            oldLeafSet.get(\"leaves\").size !== newLeafSet.get(\"leaves\").size || // Different effective decorator position\n            adjustedStart !== newStart || adjustedEnd !== newEnd || // Decorator already existed and its length changed\n            newDecoratorKey != null && newEnd - newStart !== oldEnd - oldStart;\n        });\n    }\n    if (!mustPreventNative) {\n        mustPreventNative = mustPreventDefaultForCharacter(chars);\n    }\n    if (!mustPreventNative) {\n        mustPreventNative = nullthrows(newEditorState.getDirectionMap()).get(anchorKey) !== nullthrows(editorState.getDirectionMap()).get(anchorKey);\n    }\n    if (mustPreventNative) {\n        e.preventDefault();\n        newEditorState = EditorState.set(newEditorState, {\n            forceSelection: true\n        });\n        editor.update(newEditorState);\n        return;\n    } // We made it all the way! Let the browser do its thing and insert the char.\n    newEditorState = EditorState.set(newEditorState, {\n        nativelyRenderedContent: newEditorState.getCurrentContent()\n    }); // The native event is allowed to occur. To allow user onChange handlers to\n    // change the inserted text, we wait until the text is actually inserted\n    // before we actually update our state. That way when we rerender, the text\n    // we see in the DOM will already have been inserted properly.\n    editor._pendingStateFromBeforeInput = newEditorState;\n    setImmediate(function() {\n        if (editor._pendingStateFromBeforeInput !== undefined) {\n            editor.update(editor._pendingStateFromBeforeInput);\n            editor._pendingStateFromBeforeInput = undefined;\n        }\n    });\n}\nmodule.exports = editOnBeforeInput;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/editOnBeforeInput.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/editOnBlur.js":
/*!*************************************************!*\
  !*** ./node_modules/draft-js/lib/editOnBlur.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar containsNode = __webpack_require__(/*! fbjs/lib/containsNode */ \"(ssr)/./node_modules/fbjs/lib/containsNode.js\");\nvar getActiveElement = __webpack_require__(/*! fbjs/lib/getActiveElement */ \"(ssr)/./node_modules/fbjs/lib/getActiveElement.js\");\nfunction editOnBlur(editor, e) {\n    // In a contentEditable element, when you select a range and then click\n    // another active element, this does trigger a `blur` event but will not\n    // remove the DOM selection from the contenteditable.\n    // This is consistent across all browsers, but we prefer that the editor\n    // behave like a textarea, where a `blur` event clears the DOM selection.\n    // We therefore force the issue to be certain, checking whether the active\n    // element is `body` to force it when blurring occurs within the window (as\n    // opposed to clicking to another tab or window).\n    var ownerDocument = e.currentTarget.ownerDocument;\n    if (// eslint-disable-next-line no-extra-boolean-cast\n    !Boolean(editor.props.preserveSelectionOnBlur) && getActiveElement(ownerDocument) === ownerDocument.body) {\n        var _selection = ownerDocument.defaultView.getSelection();\n        var editorNode = editor.editor;\n        if (_selection.rangeCount === 1 && containsNode(editorNode, _selection.anchorNode) && containsNode(editorNode, _selection.focusNode)) {\n            _selection.removeAllRanges();\n        }\n    }\n    var editorState = editor._latestEditorState;\n    var currentSelection = editorState.getSelection();\n    if (!currentSelection.getHasFocus()) {\n        return;\n    }\n    var selection = currentSelection.set(\"hasFocus\", false);\n    editor.props.onBlur && editor.props.onBlur(e);\n    editor.update(EditorState.acceptSelection(editorState, selection));\n}\nmodule.exports = editOnBlur;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2VkaXRPbkJsdXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFFQSxJQUFJQSxjQUFjQyxtQkFBT0EsQ0FBQyx1RUFBZTtBQUV6QyxJQUFJQyxlQUFlRCxtQkFBT0EsQ0FBQyw0RUFBdUI7QUFFbEQsSUFBSUUsbUJBQW1CRixtQkFBT0EsQ0FBQyxvRkFBMkI7QUFFMUQsU0FBU0csV0FBV0MsTUFBTSxFQUFFQyxDQUFDO0lBQzNCLHVFQUF1RTtJQUN2RSx3RUFBd0U7SUFDeEUscURBQXFEO0lBQ3JELHdFQUF3RTtJQUN4RSx5RUFBeUU7SUFDekUsMEVBQTBFO0lBQzFFLDJFQUEyRTtJQUMzRSxpREFBaUQ7SUFDakQsSUFBSUMsZ0JBQWdCRCxFQUFFRSxhQUFhLENBQUNELGFBQWE7SUFFakQsSUFDQSxpREFBaUQ7SUFDakQsQ0FBQ0UsUUFBUUosT0FBT0ssS0FBSyxDQUFDQyx1QkFBdUIsS0FBS1IsaUJBQWlCSSxtQkFBbUJBLGNBQWNLLElBQUksRUFBRTtRQUN4RyxJQUFJQyxhQUFhTixjQUFjTyxXQUFXLENBQUNDLFlBQVk7UUFFdkQsSUFBSUMsYUFBYVgsT0FBT0EsTUFBTTtRQUU5QixJQUFJUSxXQUFXSSxVQUFVLEtBQUssS0FBS2YsYUFBYWMsWUFBWUgsV0FBV0ssVUFBVSxLQUFLaEIsYUFBYWMsWUFBWUgsV0FBV00sU0FBUyxHQUFHO1lBQ3BJTixXQUFXTyxlQUFlO1FBQzVCO0lBQ0Y7SUFFQSxJQUFJQyxjQUFjaEIsT0FBT2lCLGtCQUFrQjtJQUMzQyxJQUFJQyxtQkFBbUJGLFlBQVlOLFlBQVk7SUFFL0MsSUFBSSxDQUFDUSxpQkFBaUJDLFdBQVcsSUFBSTtRQUNuQztJQUNGO0lBRUEsSUFBSUMsWUFBWUYsaUJBQWlCRyxHQUFHLENBQUMsWUFBWTtJQUNqRHJCLE9BQU9LLEtBQUssQ0FBQ2lCLE1BQU0sSUFBSXRCLE9BQU9LLEtBQUssQ0FBQ2lCLE1BQU0sQ0FBQ3JCO0lBQzNDRCxPQUFPdUIsTUFBTSxDQUFDNUIsWUFBWTZCLGVBQWUsQ0FBQ1IsYUFBYUk7QUFDekQ7QUFFQUssT0FBT0MsT0FBTyxHQUFHM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWVsLWhhcnZlc3Rlci8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZWRpdE9uQmx1ci5qcz80NWQ0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFZGl0b3JTdGF0ZSA9IHJlcXVpcmUoXCIuL0VkaXRvclN0YXRlXCIpO1xuXG52YXIgY29udGFpbnNOb2RlID0gcmVxdWlyZShcImZianMvbGliL2NvbnRhaW5zTm9kZVwiKTtcblxudmFyIGdldEFjdGl2ZUVsZW1lbnQgPSByZXF1aXJlKFwiZmJqcy9saWIvZ2V0QWN0aXZlRWxlbWVudFwiKTtcblxuZnVuY3Rpb24gZWRpdE9uQmx1cihlZGl0b3IsIGUpIHtcbiAgLy8gSW4gYSBjb250ZW50RWRpdGFibGUgZWxlbWVudCwgd2hlbiB5b3Ugc2VsZWN0IGEgcmFuZ2UgYW5kIHRoZW4gY2xpY2tcbiAgLy8gYW5vdGhlciBhY3RpdmUgZWxlbWVudCwgdGhpcyBkb2VzIHRyaWdnZXIgYSBgYmx1cmAgZXZlbnQgYnV0IHdpbGwgbm90XG4gIC8vIHJlbW92ZSB0aGUgRE9NIHNlbGVjdGlvbiBmcm9tIHRoZSBjb250ZW50ZWRpdGFibGUuXG4gIC8vIFRoaXMgaXMgY29uc2lzdGVudCBhY3Jvc3MgYWxsIGJyb3dzZXJzLCBidXQgd2UgcHJlZmVyIHRoYXQgdGhlIGVkaXRvclxuICAvLyBiZWhhdmUgbGlrZSBhIHRleHRhcmVhLCB3aGVyZSBhIGBibHVyYCBldmVudCBjbGVhcnMgdGhlIERPTSBzZWxlY3Rpb24uXG4gIC8vIFdlIHRoZXJlZm9yZSBmb3JjZSB0aGUgaXNzdWUgdG8gYmUgY2VydGFpbiwgY2hlY2tpbmcgd2hldGhlciB0aGUgYWN0aXZlXG4gIC8vIGVsZW1lbnQgaXMgYGJvZHlgIHRvIGZvcmNlIGl0IHdoZW4gYmx1cnJpbmcgb2NjdXJzIHdpdGhpbiB0aGUgd2luZG93IChhc1xuICAvLyBvcHBvc2VkIHRvIGNsaWNraW5nIHRvIGFub3RoZXIgdGFiIG9yIHdpbmRvdykuXG4gIHZhciBvd25lckRvY3VtZW50ID0gZS5jdXJyZW50VGFyZ2V0Lm93bmVyRG9jdW1lbnQ7XG5cbiAgaWYgKCAvLyBUaGlzIEVTTGludCBydWxlIGNvbmZsaWN0cyB3aXRoIGBza2V0Y2h5LW51bGwtYm9vbGAgZmxvdyBjaGVja1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXh0cmEtYm9vbGVhbi1jYXN0XG4gICFCb29sZWFuKGVkaXRvci5wcm9wcy5wcmVzZXJ2ZVNlbGVjdGlvbk9uQmx1cikgJiYgZ2V0QWN0aXZlRWxlbWVudChvd25lckRvY3VtZW50KSA9PT0gb3duZXJEb2N1bWVudC5ib2R5KSB7XG4gICAgdmFyIF9zZWxlY3Rpb24gPSBvd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmdldFNlbGVjdGlvbigpO1xuXG4gICAgdmFyIGVkaXRvck5vZGUgPSBlZGl0b3IuZWRpdG9yO1xuXG4gICAgaWYgKF9zZWxlY3Rpb24ucmFuZ2VDb3VudCA9PT0gMSAmJiBjb250YWluc05vZGUoZWRpdG9yTm9kZSwgX3NlbGVjdGlvbi5hbmNob3JOb2RlKSAmJiBjb250YWluc05vZGUoZWRpdG9yTm9kZSwgX3NlbGVjdGlvbi5mb2N1c05vZGUpKSB7XG4gICAgICBfc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBlZGl0b3JTdGF0ZSA9IGVkaXRvci5fbGF0ZXN0RWRpdG9yU3RhdGU7XG4gIHZhciBjdXJyZW50U2VsZWN0aW9uID0gZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCk7XG5cbiAgaWYgKCFjdXJyZW50U2VsZWN0aW9uLmdldEhhc0ZvY3VzKCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc2VsZWN0aW9uID0gY3VycmVudFNlbGVjdGlvbi5zZXQoJ2hhc0ZvY3VzJywgZmFsc2UpO1xuICBlZGl0b3IucHJvcHMub25CbHVyICYmIGVkaXRvci5wcm9wcy5vbkJsdXIoZSk7XG4gIGVkaXRvci51cGRhdGUoRWRpdG9yU3RhdGUuYWNjZXB0U2VsZWN0aW9uKGVkaXRvclN0YXRlLCBzZWxlY3Rpb24pKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlZGl0T25CbHVyOyJdLCJuYW1lcyI6WyJFZGl0b3JTdGF0ZSIsInJlcXVpcmUiLCJjb250YWluc05vZGUiLCJnZXRBY3RpdmVFbGVtZW50IiwiZWRpdE9uQmx1ciIsImVkaXRvciIsImUiLCJvd25lckRvY3VtZW50IiwiY3VycmVudFRhcmdldCIsIkJvb2xlYW4iLCJwcm9wcyIsInByZXNlcnZlU2VsZWN0aW9uT25CbHVyIiwiYm9keSIsIl9zZWxlY3Rpb24iLCJkZWZhdWx0VmlldyIsImdldFNlbGVjdGlvbiIsImVkaXRvck5vZGUiLCJyYW5nZUNvdW50IiwiYW5jaG9yTm9kZSIsImZvY3VzTm9kZSIsInJlbW92ZUFsbFJhbmdlcyIsImVkaXRvclN0YXRlIiwiX2xhdGVzdEVkaXRvclN0YXRlIiwiY3VycmVudFNlbGVjdGlvbiIsImdldEhhc0ZvY3VzIiwic2VsZWN0aW9uIiwic2V0Iiwib25CbHVyIiwidXBkYXRlIiwiYWNjZXB0U2VsZWN0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/editOnBlur.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/editOnCompositionStart.js":
/*!*************************************************************!*\
  !*** ./node_modules/draft-js/lib/editOnCompositionStart.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\n/**\n * The user has begun using an IME input system. Switching to `composite` mode\n * allows handling composition input and disables other edit behavior.\n */ function editOnCompositionStart(editor, e) {\n    editor.setMode(\"composite\");\n    editor.update(EditorState.set(editor._latestEditorState, {\n        inCompositionMode: true\n    })); // Allow composition handler to interpret the compositionstart event\n    editor._onCompositionStart(e);\n}\nmodule.exports = editOnCompositionStart;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2VkaXRPbkNvbXBvc2l0aW9uU3RhcnQuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFFQSxJQUFJQSxjQUFjQyxtQkFBT0EsQ0FBQyx1RUFBZTtBQUN6Qzs7O0NBR0MsR0FHRCxTQUFTQyx1QkFBdUJDLE1BQU0sRUFBRUMsQ0FBQztJQUN2Q0QsT0FBT0UsT0FBTyxDQUFDO0lBQ2ZGLE9BQU9HLE1BQU0sQ0FBQ04sWUFBWU8sR0FBRyxDQUFDSixPQUFPSyxrQkFBa0IsRUFBRTtRQUN2REMsbUJBQW1CO0lBQ3JCLEtBQUssb0VBQW9FO0lBRXpFTixPQUFPTyxtQkFBbUIsQ0FBQ047QUFDN0I7QUFFQU8sT0FBT0MsT0FBTyxHQUFHViIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9lZGl0T25Db21wb3NpdGlvblN0YXJ0LmpzPzg5MjciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIEVkaXRvclN0YXRlID0gcmVxdWlyZShcIi4vRWRpdG9yU3RhdGVcIik7XG4vKipcbiAqIFRoZSB1c2VyIGhhcyBiZWd1biB1c2luZyBhbiBJTUUgaW5wdXQgc3lzdGVtLiBTd2l0Y2hpbmcgdG8gYGNvbXBvc2l0ZWAgbW9kZVxuICogYWxsb3dzIGhhbmRsaW5nIGNvbXBvc2l0aW9uIGlucHV0IGFuZCBkaXNhYmxlcyBvdGhlciBlZGl0IGJlaGF2aW9yLlxuICovXG5cblxuZnVuY3Rpb24gZWRpdE9uQ29tcG9zaXRpb25TdGFydChlZGl0b3IsIGUpIHtcbiAgZWRpdG9yLnNldE1vZGUoJ2NvbXBvc2l0ZScpO1xuICBlZGl0b3IudXBkYXRlKEVkaXRvclN0YXRlLnNldChlZGl0b3IuX2xhdGVzdEVkaXRvclN0YXRlLCB7XG4gICAgaW5Db21wb3NpdGlvbk1vZGU6IHRydWVcbiAgfSkpOyAvLyBBbGxvdyBjb21wb3NpdGlvbiBoYW5kbGVyIHRvIGludGVycHJldCB0aGUgY29tcG9zaXRpb25zdGFydCBldmVudFxuXG4gIGVkaXRvci5fb25Db21wb3NpdGlvblN0YXJ0KGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVkaXRPbkNvbXBvc2l0aW9uU3RhcnQ7Il0sIm5hbWVzIjpbIkVkaXRvclN0YXRlIiwicmVxdWlyZSIsImVkaXRPbkNvbXBvc2l0aW9uU3RhcnQiLCJlZGl0b3IiLCJlIiwic2V0TW9kZSIsInVwZGF0ZSIsInNldCIsIl9sYXRlc3RFZGl0b3JTdGF0ZSIsImluQ29tcG9zaXRpb25Nb2RlIiwiX29uQ29tcG9zaXRpb25TdGFydCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/editOnCompositionStart.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/editOnCopy.js":
/*!*************************************************!*\
  !*** ./node_modules/draft-js/lib/editOnCopy.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar getFragmentFromSelection = __webpack_require__(/*! ./getFragmentFromSelection */ \"(ssr)/./node_modules/draft-js/lib/getFragmentFromSelection.js\");\n/**\n * If we have a selection, create a ContentState fragment and store\n * it in our internal clipboard. Subsequent paste events will use this\n * fragment if no external clipboard data is supplied.\n */ function editOnCopy(editor, e) {\n    var editorState = editor._latestEditorState;\n    var selection = editorState.getSelection(); // No selection, so there's nothing to copy.\n    if (selection.isCollapsed()) {\n        e.preventDefault();\n        return;\n    }\n    editor.setClipboard(getFragmentFromSelection(editor._latestEditorState));\n}\nmodule.exports = editOnCopy;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2VkaXRPbkNvcHkuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFFQSxJQUFJQSwyQkFBMkJDLG1CQUFPQSxDQUFDLGlHQUE0QjtBQUNuRTs7OztDQUlDLEdBR0QsU0FBU0MsV0FBV0MsTUFBTSxFQUFFQyxDQUFDO0lBQzNCLElBQUlDLGNBQWNGLE9BQU9HLGtCQUFrQjtJQUMzQyxJQUFJQyxZQUFZRixZQUFZRyxZQUFZLElBQUksNENBQTRDO0lBRXhGLElBQUlELFVBQVVFLFdBQVcsSUFBSTtRQUMzQkwsRUFBRU0sY0FBYztRQUNoQjtJQUNGO0lBRUFQLE9BQU9RLFlBQVksQ0FBQ1gseUJBQXlCRyxPQUFPRyxrQkFBa0I7QUFDeEU7QUFFQU0sT0FBT0MsT0FBTyxHQUFHWCIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9lZGl0T25Db3B5LmpzP2U3NWYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIGdldEZyYWdtZW50RnJvbVNlbGVjdGlvbiA9IHJlcXVpcmUoXCIuL2dldEZyYWdtZW50RnJvbVNlbGVjdGlvblwiKTtcbi8qKlxuICogSWYgd2UgaGF2ZSBhIHNlbGVjdGlvbiwgY3JlYXRlIGEgQ29udGVudFN0YXRlIGZyYWdtZW50IGFuZCBzdG9yZVxuICogaXQgaW4gb3VyIGludGVybmFsIGNsaXBib2FyZC4gU3Vic2VxdWVudCBwYXN0ZSBldmVudHMgd2lsbCB1c2UgdGhpc1xuICogZnJhZ21lbnQgaWYgbm8gZXh0ZXJuYWwgY2xpcGJvYXJkIGRhdGEgaXMgc3VwcGxpZWQuXG4gKi9cblxuXG5mdW5jdGlvbiBlZGl0T25Db3B5KGVkaXRvciwgZSkge1xuICB2YXIgZWRpdG9yU3RhdGUgPSBlZGl0b3IuX2xhdGVzdEVkaXRvclN0YXRlO1xuICB2YXIgc2VsZWN0aW9uID0gZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCk7IC8vIE5vIHNlbGVjdGlvbiwgc28gdGhlcmUncyBub3RoaW5nIHRvIGNvcHkuXG5cbiAgaWYgKHNlbGVjdGlvbi5pc0NvbGxhcHNlZCgpKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGVkaXRvci5zZXRDbGlwYm9hcmQoZ2V0RnJhZ21lbnRGcm9tU2VsZWN0aW9uKGVkaXRvci5fbGF0ZXN0RWRpdG9yU3RhdGUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlZGl0T25Db3B5OyJdLCJuYW1lcyI6WyJnZXRGcmFnbWVudEZyb21TZWxlY3Rpb24iLCJyZXF1aXJlIiwiZWRpdE9uQ29weSIsImVkaXRvciIsImUiLCJlZGl0b3JTdGF0ZSIsIl9sYXRlc3RFZGl0b3JTdGF0ZSIsInNlbGVjdGlvbiIsImdldFNlbGVjdGlvbiIsImlzQ29sbGFwc2VkIiwicHJldmVudERlZmF1bHQiLCJzZXRDbGlwYm9hcmQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/editOnCopy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/editOnCut.js":
/*!************************************************!*\
  !*** ./node_modules/draft-js/lib/editOnCut.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DraftModifier = __webpack_require__(/*! ./DraftModifier */ \"(ssr)/./node_modules/draft-js/lib/DraftModifier.js\");\nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar Style = __webpack_require__(/*! fbjs/lib/Style */ \"(ssr)/./node_modules/fbjs/lib/Style.js\");\nvar getFragmentFromSelection = __webpack_require__(/*! ./getFragmentFromSelection */ \"(ssr)/./node_modules/draft-js/lib/getFragmentFromSelection.js\");\nvar getScrollPosition = __webpack_require__(/*! fbjs/lib/getScrollPosition */ \"(ssr)/./node_modules/fbjs/lib/getScrollPosition.js\");\nvar isNode = __webpack_require__(/*! ./isInstanceOfNode */ \"(ssr)/./node_modules/draft-js/lib/isInstanceOfNode.js\");\n/**\n * On `cut` events, native behavior is allowed to occur so that the system\n * clipboard is set properly. This means that we need to take steps to recover\n * the editor DOM state after the `cut` has occurred in order to maintain\n * control of the component.\n *\n * In addition, we can keep a copy of the removed fragment, including all\n * styles and entities, for use as an internal paste.\n */ function editOnCut(editor, e) {\n    var editorState = editor._latestEditorState;\n    var selection = editorState.getSelection();\n    var element = e.target;\n    var scrollPosition; // No selection, so there's nothing to cut.\n    if (selection.isCollapsed()) {\n        e.preventDefault();\n        return;\n    } // Track the current scroll position so that it can be forced back in place\n    // after the editor regains control of the DOM.\n    if (isNode(element)) {\n        var node = element;\n        scrollPosition = getScrollPosition(Style.getScrollParent(node));\n    }\n    var fragment = getFragmentFromSelection(editorState);\n    editor.setClipboard(fragment); // Set `cut` mode to disable all event handling temporarily.\n    editor.setMode(\"cut\"); // Let native `cut` behavior occur, then recover control.\n    setTimeout(function() {\n        editor.restoreEditorDOM(scrollPosition);\n        editor.exitCurrentMode();\n        editor.update(removeFragment(editorState));\n    }, 0);\n}\nfunction removeFragment(editorState) {\n    var newContent = DraftModifier.removeRange(editorState.getCurrentContent(), editorState.getSelection(), \"forward\");\n    return EditorState.push(editorState, newContent, \"remove-range\");\n}\nmodule.exports = editOnCut;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2VkaXRPbkN1dC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLElBQUlBLGdCQUFnQkMsbUJBQU9BLENBQUMsMkVBQWlCO0FBRTdDLElBQUlDLGNBQWNELG1CQUFPQSxDQUFDLHVFQUFlO0FBRXpDLElBQUlFLFFBQVFGLG1CQUFPQSxDQUFDLDhEQUFnQjtBQUVwQyxJQUFJRywyQkFBMkJILG1CQUFPQSxDQUFDLGlHQUE0QjtBQUVuRSxJQUFJSSxvQkFBb0JKLG1CQUFPQSxDQUFDLHNGQUE0QjtBQUU1RCxJQUFJSyxTQUFTTCxtQkFBT0EsQ0FBQyxpRkFBb0I7QUFDekM7Ozs7Ozs7O0NBUUMsR0FHRCxTQUFTTSxVQUFVQyxNQUFNLEVBQUVDLENBQUM7SUFDMUIsSUFBSUMsY0FBY0YsT0FBT0csa0JBQWtCO0lBQzNDLElBQUlDLFlBQVlGLFlBQVlHLFlBQVk7SUFDeEMsSUFBSUMsVUFBVUwsRUFBRU0sTUFBTTtJQUN0QixJQUFJQyxnQkFBZ0IsMkNBQTJDO0lBRS9ELElBQUlKLFVBQVVLLFdBQVcsSUFBSTtRQUMzQlIsRUFBRVMsY0FBYztRQUNoQjtJQUNGLEVBQUUsMkVBQTJFO0lBQzdFLCtDQUErQztJQUcvQyxJQUFJWixPQUFPUSxVQUFVO1FBQ25CLElBQUlLLE9BQU9MO1FBQ1hFLGlCQUFpQlgsa0JBQWtCRixNQUFNaUIsZUFBZSxDQUFDRDtJQUMzRDtJQUVBLElBQUlFLFdBQVdqQix5QkFBeUJNO0lBQ3hDRixPQUFPYyxZQUFZLENBQUNELFdBQVcsNERBQTREO0lBRTNGYixPQUFPZSxPQUFPLENBQUMsUUFBUSx5REFBeUQ7SUFFaEZDLFdBQVc7UUFDVGhCLE9BQU9pQixnQkFBZ0IsQ0FBQ1Q7UUFDeEJSLE9BQU9rQixlQUFlO1FBQ3RCbEIsT0FBT21CLE1BQU0sQ0FBQ0MsZUFBZWxCO0lBQy9CLEdBQUc7QUFDTDtBQUVBLFNBQVNrQixlQUFlbEIsV0FBVztJQUNqQyxJQUFJbUIsYUFBYTdCLGNBQWM4QixXQUFXLENBQUNwQixZQUFZcUIsaUJBQWlCLElBQUlyQixZQUFZRyxZQUFZLElBQUk7SUFDeEcsT0FBT1gsWUFBWThCLElBQUksQ0FBQ3RCLGFBQWFtQixZQUFZO0FBQ25EO0FBRUFJLE9BQU9DLE9BQU8sR0FBRzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVlbC1oYXJ2ZXN0ZXIvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2VkaXRPbkN1dC5qcz84NjIwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBEcmFmdE1vZGlmaWVyID0gcmVxdWlyZShcIi4vRHJhZnRNb2RpZmllclwiKTtcblxudmFyIEVkaXRvclN0YXRlID0gcmVxdWlyZShcIi4vRWRpdG9yU3RhdGVcIik7XG5cbnZhciBTdHlsZSA9IHJlcXVpcmUoXCJmYmpzL2xpYi9TdHlsZVwiKTtcblxudmFyIGdldEZyYWdtZW50RnJvbVNlbGVjdGlvbiA9IHJlcXVpcmUoXCIuL2dldEZyYWdtZW50RnJvbVNlbGVjdGlvblwiKTtcblxudmFyIGdldFNjcm9sbFBvc2l0aW9uID0gcmVxdWlyZShcImZianMvbGliL2dldFNjcm9sbFBvc2l0aW9uXCIpO1xuXG52YXIgaXNOb2RlID0gcmVxdWlyZShcIi4vaXNJbnN0YW5jZU9mTm9kZVwiKTtcbi8qKlxuICogT24gYGN1dGAgZXZlbnRzLCBuYXRpdmUgYmVoYXZpb3IgaXMgYWxsb3dlZCB0byBvY2N1ciBzbyB0aGF0IHRoZSBzeXN0ZW1cbiAqIGNsaXBib2FyZCBpcyBzZXQgcHJvcGVybHkuIFRoaXMgbWVhbnMgdGhhdCB3ZSBuZWVkIHRvIHRha2Ugc3RlcHMgdG8gcmVjb3ZlclxuICogdGhlIGVkaXRvciBET00gc3RhdGUgYWZ0ZXIgdGhlIGBjdXRgIGhhcyBvY2N1cnJlZCBpbiBvcmRlciB0byBtYWludGFpblxuICogY29udHJvbCBvZiB0aGUgY29tcG9uZW50LlxuICpcbiAqIEluIGFkZGl0aW9uLCB3ZSBjYW4ga2VlcCBhIGNvcHkgb2YgdGhlIHJlbW92ZWQgZnJhZ21lbnQsIGluY2x1ZGluZyBhbGxcbiAqIHN0eWxlcyBhbmQgZW50aXRpZXMsIGZvciB1c2UgYXMgYW4gaW50ZXJuYWwgcGFzdGUuXG4gKi9cblxuXG5mdW5jdGlvbiBlZGl0T25DdXQoZWRpdG9yLCBlKSB7XG4gIHZhciBlZGl0b3JTdGF0ZSA9IGVkaXRvci5fbGF0ZXN0RWRpdG9yU3RhdGU7XG4gIHZhciBzZWxlY3Rpb24gPSBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcbiAgdmFyIGVsZW1lbnQgPSBlLnRhcmdldDtcbiAgdmFyIHNjcm9sbFBvc2l0aW9uOyAvLyBObyBzZWxlY3Rpb24sIHNvIHRoZXJlJ3Mgbm90aGluZyB0byBjdXQuXG5cbiAgaWYgKHNlbGVjdGlvbi5pc0NvbGxhcHNlZCgpKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHJldHVybjtcbiAgfSAvLyBUcmFjayB0aGUgY3VycmVudCBzY3JvbGwgcG9zaXRpb24gc28gdGhhdCBpdCBjYW4gYmUgZm9yY2VkIGJhY2sgaW4gcGxhY2VcbiAgLy8gYWZ0ZXIgdGhlIGVkaXRvciByZWdhaW5zIGNvbnRyb2wgb2YgdGhlIERPTS5cblxuXG4gIGlmIChpc05vZGUoZWxlbWVudCkpIHtcbiAgICB2YXIgbm9kZSA9IGVsZW1lbnQ7XG4gICAgc2Nyb2xsUG9zaXRpb24gPSBnZXRTY3JvbGxQb3NpdGlvbihTdHlsZS5nZXRTY3JvbGxQYXJlbnQobm9kZSkpO1xuICB9XG5cbiAgdmFyIGZyYWdtZW50ID0gZ2V0RnJhZ21lbnRGcm9tU2VsZWN0aW9uKGVkaXRvclN0YXRlKTtcbiAgZWRpdG9yLnNldENsaXBib2FyZChmcmFnbWVudCk7IC8vIFNldCBgY3V0YCBtb2RlIHRvIGRpc2FibGUgYWxsIGV2ZW50IGhhbmRsaW5nIHRlbXBvcmFyaWx5LlxuXG4gIGVkaXRvci5zZXRNb2RlKCdjdXQnKTsgLy8gTGV0IG5hdGl2ZSBgY3V0YCBiZWhhdmlvciBvY2N1ciwgdGhlbiByZWNvdmVyIGNvbnRyb2wuXG5cbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgZWRpdG9yLnJlc3RvcmVFZGl0b3JET00oc2Nyb2xsUG9zaXRpb24pO1xuICAgIGVkaXRvci5leGl0Q3VycmVudE1vZGUoKTtcbiAgICBlZGl0b3IudXBkYXRlKHJlbW92ZUZyYWdtZW50KGVkaXRvclN0YXRlKSk7XG4gIH0sIDApO1xufVxuXG5mdW5jdGlvbiByZW1vdmVGcmFnbWVudChlZGl0b3JTdGF0ZSkge1xuICB2YXIgbmV3Q29udGVudCA9IERyYWZ0TW9kaWZpZXIucmVtb3ZlUmFuZ2UoZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKSwgZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCksICdmb3J3YXJkJyk7XG4gIHJldHVybiBFZGl0b3JTdGF0ZS5wdXNoKGVkaXRvclN0YXRlLCBuZXdDb250ZW50LCAncmVtb3ZlLXJhbmdlJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZWRpdE9uQ3V0OyJdLCJuYW1lcyI6WyJEcmFmdE1vZGlmaWVyIiwicmVxdWlyZSIsIkVkaXRvclN0YXRlIiwiU3R5bGUiLCJnZXRGcmFnbWVudEZyb21TZWxlY3Rpb24iLCJnZXRTY3JvbGxQb3NpdGlvbiIsImlzTm9kZSIsImVkaXRPbkN1dCIsImVkaXRvciIsImUiLCJlZGl0b3JTdGF0ZSIsIl9sYXRlc3RFZGl0b3JTdGF0ZSIsInNlbGVjdGlvbiIsImdldFNlbGVjdGlvbiIsImVsZW1lbnQiLCJ0YXJnZXQiLCJzY3JvbGxQb3NpdGlvbiIsImlzQ29sbGFwc2VkIiwicHJldmVudERlZmF1bHQiLCJub2RlIiwiZ2V0U2Nyb2xsUGFyZW50IiwiZnJhZ21lbnQiLCJzZXRDbGlwYm9hcmQiLCJzZXRNb2RlIiwic2V0VGltZW91dCIsInJlc3RvcmVFZGl0b3JET00iLCJleGl0Q3VycmVudE1vZGUiLCJ1cGRhdGUiLCJyZW1vdmVGcmFnbWVudCIsIm5ld0NvbnRlbnQiLCJyZW1vdmVSYW5nZSIsImdldEN1cnJlbnRDb250ZW50IiwicHVzaCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/editOnCut.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/editOnDragOver.js":
/*!*****************************************************!*\
  !*** ./node_modules/draft-js/lib/editOnDragOver.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \n/**\n * Drag behavior has begun from outside the editor element.\n */ function editOnDragOver(editor, e) {\n    editor.setMode(\"drag\");\n    e.preventDefault();\n}\nmodule.exports = editOnDragOver;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2VkaXRPbkRyYWdPdmVyLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUE7O0NBRUMsR0FDRCxTQUFTQSxlQUFlQyxNQUFNLEVBQUVDLENBQUM7SUFDL0JELE9BQU9FLE9BQU8sQ0FBQztJQUNmRCxFQUFFRSxjQUFjO0FBQ2xCO0FBRUFDLE9BQU9DLE9BQU8sR0FBR04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWVsLWhhcnZlc3Rlci8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZWRpdE9uRHJhZ092ZXIuanM/ZWY2ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERyYWcgYmVoYXZpb3IgaGFzIGJlZ3VuIGZyb20gb3V0c2lkZSB0aGUgZWRpdG9yIGVsZW1lbnQuXG4gKi9cbmZ1bmN0aW9uIGVkaXRPbkRyYWdPdmVyKGVkaXRvciwgZSkge1xuICBlZGl0b3Iuc2V0TW9kZSgnZHJhZycpO1xuICBlLnByZXZlbnREZWZhdWx0KCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZWRpdE9uRHJhZ092ZXI7Il0sIm5hbWVzIjpbImVkaXRPbkRyYWdPdmVyIiwiZWRpdG9yIiwiZSIsInNldE1vZGUiLCJwcmV2ZW50RGVmYXVsdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/editOnDragOver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/editOnDragStart.js":
/*!******************************************************!*\
  !*** ./node_modules/draft-js/lib/editOnDragStart.js ***!
  \******************************************************/
/***/ ((module) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \n/**\n * A `dragstart` event has begun within the text editor component.\n */ function editOnDragStart(editor) {\n    editor._internalDrag = true;\n    editor.setMode(\"drag\");\n}\nmodule.exports = editOnDragStart;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2VkaXRPbkRyYWdTdGFydC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBOztDQUVDLEdBQ0QsU0FBU0EsZ0JBQWdCQyxNQUFNO0lBQzdCQSxPQUFPQyxhQUFhLEdBQUc7SUFDdkJELE9BQU9FLE9BQU8sQ0FBQztBQUNqQjtBQUVBQyxPQUFPQyxPQUFPLEdBQUdMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVlbC1oYXJ2ZXN0ZXIvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2VkaXRPbkRyYWdTdGFydC5qcz9iZmZjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgZHJhZ3N0YXJ0YCBldmVudCBoYXMgYmVndW4gd2l0aGluIHRoZSB0ZXh0IGVkaXRvciBjb21wb25lbnQuXG4gKi9cbmZ1bmN0aW9uIGVkaXRPbkRyYWdTdGFydChlZGl0b3IpIHtcbiAgZWRpdG9yLl9pbnRlcm5hbERyYWcgPSB0cnVlO1xuICBlZGl0b3Iuc2V0TW9kZSgnZHJhZycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVkaXRPbkRyYWdTdGFydDsiXSwibmFtZXMiOlsiZWRpdE9uRHJhZ1N0YXJ0IiwiZWRpdG9yIiwiX2ludGVybmFsRHJhZyIsInNldE1vZGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/editOnDragStart.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/editOnFocus.js":
/*!**************************************************!*\
  !*** ./node_modules/draft-js/lib/editOnFocus.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar UserAgent = __webpack_require__(/*! fbjs/lib/UserAgent */ \"(ssr)/./node_modules/fbjs/lib/UserAgent.js\");\nfunction editOnFocus(editor, e) {\n    var editorState = editor._latestEditorState;\n    var currentSelection = editorState.getSelection();\n    if (currentSelection.getHasFocus()) {\n        return;\n    }\n    var selection = currentSelection.set(\"hasFocus\", true);\n    editor.props.onFocus && editor.props.onFocus(e); // When the tab containing this text editor is hidden and the user does a\n    // find-in-page in a _different_ tab, Chrome on Mac likes to forget what the\n    // selection was right after sending this focus event and (if you let it)\n    // moves the cursor back to the beginning of the editor, so we force the\n    // selection here instead of simply accepting it in order to preserve the\n    // old cursor position. See https://crbug.com/540004.\n    // But it looks like this is fixed in Chrome 60.0.3081.0.\n    // Other browsers also don't have this bug, so we prefer to acceptSelection\n    // when possible, to ensure that unfocusing and refocusing a Draft editor\n    // doesn't preserve the selection, matching how textareas work.\n    if (UserAgent.isBrowser(\"Chrome < 60.0.3081.0\")) {\n        editor.update(EditorState.forceSelection(editorState, selection));\n    } else {\n        editor.update(EditorState.acceptSelection(editorState, selection));\n    }\n}\nmodule.exports = editOnFocus;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2VkaXRPbkZvY3VzLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsY0FBY0MsbUJBQU9BLENBQUMsdUVBQWU7QUFFekMsSUFBSUMsWUFBWUQsbUJBQU9BLENBQUMsc0VBQW9CO0FBRTVDLFNBQVNFLFlBQVlDLE1BQU0sRUFBRUMsQ0FBQztJQUM1QixJQUFJQyxjQUFjRixPQUFPRyxrQkFBa0I7SUFDM0MsSUFBSUMsbUJBQW1CRixZQUFZRyxZQUFZO0lBRS9DLElBQUlELGlCQUFpQkUsV0FBVyxJQUFJO1FBQ2xDO0lBQ0Y7SUFFQSxJQUFJQyxZQUFZSCxpQkFBaUJJLEdBQUcsQ0FBQyxZQUFZO0lBQ2pEUixPQUFPUyxLQUFLLENBQUNDLE9BQU8sSUFBSVYsT0FBT1MsS0FBSyxDQUFDQyxPQUFPLENBQUNULElBQUkseUVBQXlFO0lBQzFILDRFQUE0RTtJQUM1RSx5RUFBeUU7SUFDekUsd0VBQXdFO0lBQ3hFLHlFQUF5RTtJQUN6RSxxREFBcUQ7SUFDckQseURBQXlEO0lBQ3pELDJFQUEyRTtJQUMzRSx5RUFBeUU7SUFDekUsK0RBQStEO0lBRS9ELElBQUlILFVBQVVhLFNBQVMsQ0FBQyx5QkFBeUI7UUFDL0NYLE9BQU9ZLE1BQU0sQ0FBQ2hCLFlBQVlpQixjQUFjLENBQUNYLGFBQWFLO0lBQ3hELE9BQU87UUFDTFAsT0FBT1ksTUFBTSxDQUFDaEIsWUFBWWtCLGVBQWUsQ0FBQ1osYUFBYUs7SUFDekQ7QUFDRjtBQUVBUSxPQUFPQyxPQUFPLEdBQUdqQiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9lZGl0T25Gb2N1cy5qcz9iYzU4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFZGl0b3JTdGF0ZSA9IHJlcXVpcmUoXCIuL0VkaXRvclN0YXRlXCIpO1xuXG52YXIgVXNlckFnZW50ID0gcmVxdWlyZShcImZianMvbGliL1VzZXJBZ2VudFwiKTtcblxuZnVuY3Rpb24gZWRpdE9uRm9jdXMoZWRpdG9yLCBlKSB7XG4gIHZhciBlZGl0b3JTdGF0ZSA9IGVkaXRvci5fbGF0ZXN0RWRpdG9yU3RhdGU7XG4gIHZhciBjdXJyZW50U2VsZWN0aW9uID0gZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCk7XG5cbiAgaWYgKGN1cnJlbnRTZWxlY3Rpb24uZ2V0SGFzRm9jdXMoKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzZWxlY3Rpb24gPSBjdXJyZW50U2VsZWN0aW9uLnNldCgnaGFzRm9jdXMnLCB0cnVlKTtcbiAgZWRpdG9yLnByb3BzLm9uRm9jdXMgJiYgZWRpdG9yLnByb3BzLm9uRm9jdXMoZSk7IC8vIFdoZW4gdGhlIHRhYiBjb250YWluaW5nIHRoaXMgdGV4dCBlZGl0b3IgaXMgaGlkZGVuIGFuZCB0aGUgdXNlciBkb2VzIGFcbiAgLy8gZmluZC1pbi1wYWdlIGluIGEgX2RpZmZlcmVudF8gdGFiLCBDaHJvbWUgb24gTWFjIGxpa2VzIHRvIGZvcmdldCB3aGF0IHRoZVxuICAvLyBzZWxlY3Rpb24gd2FzIHJpZ2h0IGFmdGVyIHNlbmRpbmcgdGhpcyBmb2N1cyBldmVudCBhbmQgKGlmIHlvdSBsZXQgaXQpXG4gIC8vIG1vdmVzIHRoZSBjdXJzb3IgYmFjayB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBlZGl0b3IsIHNvIHdlIGZvcmNlIHRoZVxuICAvLyBzZWxlY3Rpb24gaGVyZSBpbnN0ZWFkIG9mIHNpbXBseSBhY2NlcHRpbmcgaXQgaW4gb3JkZXIgdG8gcHJlc2VydmUgdGhlXG4gIC8vIG9sZCBjdXJzb3IgcG9zaXRpb24uIFNlZSBodHRwczovL2NyYnVnLmNvbS81NDAwMDQuXG4gIC8vIEJ1dCBpdCBsb29rcyBsaWtlIHRoaXMgaXMgZml4ZWQgaW4gQ2hyb21lIDYwLjAuMzA4MS4wLlxuICAvLyBPdGhlciBicm93c2VycyBhbHNvIGRvbid0IGhhdmUgdGhpcyBidWcsIHNvIHdlIHByZWZlciB0byBhY2NlcHRTZWxlY3Rpb25cbiAgLy8gd2hlbiBwb3NzaWJsZSwgdG8gZW5zdXJlIHRoYXQgdW5mb2N1c2luZyBhbmQgcmVmb2N1c2luZyBhIERyYWZ0IGVkaXRvclxuICAvLyBkb2Vzbid0IHByZXNlcnZlIHRoZSBzZWxlY3Rpb24sIG1hdGNoaW5nIGhvdyB0ZXh0YXJlYXMgd29yay5cblxuICBpZiAoVXNlckFnZW50LmlzQnJvd3NlcignQ2hyb21lIDwgNjAuMC4zMDgxLjAnKSkge1xuICAgIGVkaXRvci51cGRhdGUoRWRpdG9yU3RhdGUuZm9yY2VTZWxlY3Rpb24oZWRpdG9yU3RhdGUsIHNlbGVjdGlvbikpO1xuICB9IGVsc2Uge1xuICAgIGVkaXRvci51cGRhdGUoRWRpdG9yU3RhdGUuYWNjZXB0U2VsZWN0aW9uKGVkaXRvclN0YXRlLCBzZWxlY3Rpb24pKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVkaXRPbkZvY3VzOyJdLCJuYW1lcyI6WyJFZGl0b3JTdGF0ZSIsInJlcXVpcmUiLCJVc2VyQWdlbnQiLCJlZGl0T25Gb2N1cyIsImVkaXRvciIsImUiLCJlZGl0b3JTdGF0ZSIsIl9sYXRlc3RFZGl0b3JTdGF0ZSIsImN1cnJlbnRTZWxlY3Rpb24iLCJnZXRTZWxlY3Rpb24iLCJnZXRIYXNGb2N1cyIsInNlbGVjdGlvbiIsInNldCIsInByb3BzIiwib25Gb2N1cyIsImlzQnJvd3NlciIsInVwZGF0ZSIsImZvcmNlU2VsZWN0aW9uIiwiYWNjZXB0U2VsZWN0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/editOnFocus.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/editOnInput.js":
/*!**************************************************!*\
  !*** ./node_modules/draft-js/lib/editOnInput.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DraftModifier = __webpack_require__(/*! ./DraftModifier */ \"(ssr)/./node_modules/draft-js/lib/DraftModifier.js\");\nvar DraftOffsetKey = __webpack_require__(/*! ./DraftOffsetKey */ \"(ssr)/./node_modules/draft-js/lib/DraftOffsetKey.js\");\nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar UserAgent = __webpack_require__(/*! fbjs/lib/UserAgent */ \"(ssr)/./node_modules/fbjs/lib/UserAgent.js\");\nvar _require = __webpack_require__(/*! ./draftKeyUtils */ \"(ssr)/./node_modules/draft-js/lib/draftKeyUtils.js\"), notEmptyKey = _require.notEmptyKey;\nvar findAncestorOffsetKey = __webpack_require__(/*! ./findAncestorOffsetKey */ \"(ssr)/./node_modules/draft-js/lib/findAncestorOffsetKey.js\");\nvar keyCommandPlainBackspace = __webpack_require__(/*! ./keyCommandPlainBackspace */ \"(ssr)/./node_modules/draft-js/lib/keyCommandPlainBackspace.js\");\nvar nullthrows = __webpack_require__(/*! fbjs/lib/nullthrows */ \"(ssr)/./node_modules/fbjs/lib/nullthrows.js\");\nvar isGecko = UserAgent.isEngine(\"Gecko\");\nvar DOUBLE_NEWLINE = \"\\n\\n\";\nfunction onInputType(inputType, editorState) {\n    switch(inputType){\n        case \"deleteContentBackward\":\n            return keyCommandPlainBackspace(editorState);\n    }\n    return editorState;\n}\n/**\n * This function serves two purposes\n *\n * 1. To update the editorState and call onChange method with the new\n * editorState. This editorState is calculated in editOnBeforeInput but the\n * onChange method is not called with the new state until this method does it.\n * It is done to handle a specific case where certain character inputs might\n * be replaced with something else. E.g. snippets ('rc' might be replaced\n * with boilerplate code for react component). More information on the\n * exact problem can be found here -\n * https://github.com/facebook/draft-js/commit/07892ba479bd4dfc6afd1e0ed179aaf51cd138b1\n *\n * 2. intended to handle spellcheck and autocorrect changes,\n * which occur in the DOM natively without any opportunity to observe or\n * interpret the changes before they occur.\n *\n * The `input` event fires in contentEditable elements reliably for non-IE\n * browsers, immediately after changes occur to the editor DOM. Since our other\n * handlers override or otherwise handle cover other varieties of text input,\n * the DOM state should match the model in all controlled input cases. Thus,\n * when an `input` change leads to a DOM/model mismatch, the change should be\n * due to a spellcheck change, and we can incorporate it into our model.\n */ function editOnInput(editor, e) {\n    if (editor._pendingStateFromBeforeInput !== undefined) {\n        editor.update(editor._pendingStateFromBeforeInput);\n        editor._pendingStateFromBeforeInput = undefined;\n    } // at this point editor is not null for sure (after input)\n    var castedEditorElement = editor.editor;\n    var domSelection = castedEditorElement.ownerDocument.defaultView.getSelection();\n    var anchorNode = domSelection.anchorNode, isCollapsed = domSelection.isCollapsed;\n    var isNotTextOrElementNode = (anchorNode === null || anchorNode === void 0 ? void 0 : anchorNode.nodeType) !== Node.TEXT_NODE && (anchorNode === null || anchorNode === void 0 ? void 0 : anchorNode.nodeType) !== Node.ELEMENT_NODE;\n    if (anchorNode == null || isNotTextOrElementNode) {\n        // TODO: (t16149272) figure out context for this change\n        return;\n    }\n    if (anchorNode.nodeType === Node.TEXT_NODE && (anchorNode.previousSibling !== null || anchorNode.nextSibling !== null)) {\n        // When typing at the beginning of a visual line, Chrome splits the text\n        // nodes into two. Why? No one knows. This commit is suspicious:\n        // https://chromium.googlesource.com/chromium/src/+/a3b600981286b135632371477f902214c55a1724\n        // To work around, we'll merge the sibling text nodes back into this one.\n        var span = anchorNode.parentNode;\n        if (span == null) {\n            // Handle null-parent case.\n            return;\n        }\n        anchorNode.nodeValue = span.textContent;\n        for(var child = span.firstChild; child != null; child = child.nextSibling){\n            if (child !== anchorNode) {\n                span.removeChild(child);\n            }\n        }\n    }\n    var domText = anchorNode.textContent;\n    var editorState = editor._latestEditorState;\n    var offsetKey = nullthrows(findAncestorOffsetKey(anchorNode));\n    var _DraftOffsetKey$decod = DraftOffsetKey.decode(offsetKey), blockKey = _DraftOffsetKey$decod.blockKey, decoratorKey = _DraftOffsetKey$decod.decoratorKey, leafKey = _DraftOffsetKey$decod.leafKey;\n    var _editorState$getBlock = editorState.getBlockTree(blockKey).getIn([\n        decoratorKey,\n        \"leaves\",\n        leafKey\n    ]), start = _editorState$getBlock.start, end = _editorState$getBlock.end;\n    var content = editorState.getCurrentContent();\n    var block = content.getBlockForKey(blockKey);\n    var modelText = block.getText().slice(start, end); // Special-case soft newlines here. If the DOM text ends in a soft newline,\n    // we will have manually inserted an extra soft newline in DraftEditorLeaf.\n    // We want to remove this extra newline for the purpose of our comparison\n    // of DOM and model text.\n    if (domText.endsWith(DOUBLE_NEWLINE)) {\n        domText = domText.slice(0, -1);\n    } // No change -- the DOM is up to date. Nothing to do here.\n    if (domText === modelText) {\n        // This can be buggy for some Android keyboards because they don't fire\n        // standard onkeydown/pressed events and only fired editOnInput\n        // so domText is already changed by the browser and ends up being equal\n        // to modelText unexpectedly.\n        // Newest versions of Android support the dom-inputevent-inputtype\n        // and we can use the `inputType` to properly apply the state changes.\n        /* $FlowFixMe[prop-missing] inputType is only defined on a draft of a\n     * standard. https://w3c.github.io/input-events/#dom-inputevent-inputtype\n     */ var inputType = e.nativeEvent.inputType;\n        if (inputType) {\n            var newEditorState = onInputType(inputType, editorState);\n            if (newEditorState !== editorState) {\n                editor.restoreEditorDOM();\n                editor.update(newEditorState);\n                return;\n            }\n        }\n        return;\n    }\n    var selection = editorState.getSelection(); // We'll replace the entire leaf with the text content of the target.\n    var targetRange = selection.merge({\n        anchorOffset: start,\n        focusOffset: end,\n        isBackward: false\n    });\n    var entityKey = block.getEntityAt(start);\n    var entity = notEmptyKey(entityKey) ? content.getEntity(entityKey) : null;\n    var entityType = entity != null ? entity.getMutability() : null;\n    var preserveEntity = entityType === \"MUTABLE\"; // Immutable or segmented entities cannot properly be handled by the\n    // default browser undo, so we have to use a different change type to\n    // force using our internal undo method instead of falling through to the\n    // native browser undo.\n    var changeType = preserveEntity ? \"spellcheck-change\" : \"apply-entity\";\n    var newContent = DraftModifier.replaceText(content, targetRange, domText, block.getInlineStyleAt(start), preserveEntity ? block.getEntityAt(start) : null);\n    var anchorOffset, focusOffset, startOffset, endOffset;\n    if (isGecko) {\n        // Firefox selection does not change while the context menu is open, so\n        // we preserve the anchor and focus values of the DOM selection.\n        anchorOffset = domSelection.anchorOffset;\n        focusOffset = domSelection.focusOffset;\n        startOffset = start + Math.min(anchorOffset, focusOffset);\n        endOffset = startOffset + Math.abs(anchorOffset - focusOffset);\n        anchorOffset = startOffset;\n        focusOffset = endOffset;\n    } else {\n        // Browsers other than Firefox may adjust DOM selection while the context\n        // menu is open, and Safari autocorrect is prone to providing an inaccurate\n        // DOM selection. Don't trust it. Instead, use our existing SelectionState\n        // and adjust it based on the number of characters changed during the\n        // mutation.\n        var charDelta = domText.length - modelText.length;\n        startOffset = selection.getStartOffset();\n        endOffset = selection.getEndOffset();\n        anchorOffset = isCollapsed ? endOffset + charDelta : startOffset;\n        focusOffset = endOffset + charDelta;\n    } // Segmented entities are completely or partially removed when their\n    // text content changes. For this case we do not want any text to be selected\n    // after the change, so we are not merging the selection.\n    var contentWithAdjustedDOMSelection = newContent.merge({\n        selectionBefore: content.getSelectionAfter(),\n        selectionAfter: selection.merge({\n            anchorOffset: anchorOffset,\n            focusOffset: focusOffset\n        })\n    });\n    editor.update(EditorState.push(editorState, contentWithAdjustedDOMSelection, changeType));\n}\nmodule.exports = editOnInput;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/editOnInput.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/editOnKeyDown.js":
/*!****************************************************!*\
  !*** ./node_modules/draft-js/lib/editOnKeyDown.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DraftModifier = __webpack_require__(/*! ./DraftModifier */ \"(ssr)/./node_modules/draft-js/lib/DraftModifier.js\");\nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar KeyBindingUtil = __webpack_require__(/*! ./KeyBindingUtil */ \"(ssr)/./node_modules/draft-js/lib/KeyBindingUtil.js\");\nvar Keys = __webpack_require__(/*! fbjs/lib/Keys */ \"(ssr)/./node_modules/fbjs/lib/Keys.js\");\nvar SecondaryClipboard = __webpack_require__(/*! ./SecondaryClipboard */ \"(ssr)/./node_modules/draft-js/lib/SecondaryClipboard.js\");\nvar UserAgent = __webpack_require__(/*! fbjs/lib/UserAgent */ \"(ssr)/./node_modules/fbjs/lib/UserAgent.js\");\nvar isEventHandled = __webpack_require__(/*! ./isEventHandled */ \"(ssr)/./node_modules/draft-js/lib/isEventHandled.js\");\nvar keyCommandBackspaceToStartOfLine = __webpack_require__(/*! ./keyCommandBackspaceToStartOfLine */ \"(ssr)/./node_modules/draft-js/lib/keyCommandBackspaceToStartOfLine.js\");\nvar keyCommandBackspaceWord = __webpack_require__(/*! ./keyCommandBackspaceWord */ \"(ssr)/./node_modules/draft-js/lib/keyCommandBackspaceWord.js\");\nvar keyCommandDeleteWord = __webpack_require__(/*! ./keyCommandDeleteWord */ \"(ssr)/./node_modules/draft-js/lib/keyCommandDeleteWord.js\");\nvar keyCommandInsertNewline = __webpack_require__(/*! ./keyCommandInsertNewline */ \"(ssr)/./node_modules/draft-js/lib/keyCommandInsertNewline.js\");\nvar keyCommandMoveSelectionToEndOfBlock = __webpack_require__(/*! ./keyCommandMoveSelectionToEndOfBlock */ \"(ssr)/./node_modules/draft-js/lib/keyCommandMoveSelectionToEndOfBlock.js\");\nvar keyCommandMoveSelectionToStartOfBlock = __webpack_require__(/*! ./keyCommandMoveSelectionToStartOfBlock */ \"(ssr)/./node_modules/draft-js/lib/keyCommandMoveSelectionToStartOfBlock.js\");\nvar keyCommandPlainBackspace = __webpack_require__(/*! ./keyCommandPlainBackspace */ \"(ssr)/./node_modules/draft-js/lib/keyCommandPlainBackspace.js\");\nvar keyCommandPlainDelete = __webpack_require__(/*! ./keyCommandPlainDelete */ \"(ssr)/./node_modules/draft-js/lib/keyCommandPlainDelete.js\");\nvar keyCommandTransposeCharacters = __webpack_require__(/*! ./keyCommandTransposeCharacters */ \"(ssr)/./node_modules/draft-js/lib/keyCommandTransposeCharacters.js\");\nvar keyCommandUndo = __webpack_require__(/*! ./keyCommandUndo */ \"(ssr)/./node_modules/draft-js/lib/keyCommandUndo.js\");\nvar isOptionKeyCommand = KeyBindingUtil.isOptionKeyCommand;\nvar isChrome = UserAgent.isBrowser(\"Chrome\");\n/**\n * Map a `DraftEditorCommand` command value to a corresponding function.\n */ function onKeyCommand(command, editorState, e) {\n    switch(command){\n        case \"redo\":\n            return EditorState.redo(editorState);\n        case \"delete\":\n            return keyCommandPlainDelete(editorState);\n        case \"delete-word\":\n            return keyCommandDeleteWord(editorState);\n        case \"backspace\":\n            return keyCommandPlainBackspace(editorState);\n        case \"backspace-word\":\n            return keyCommandBackspaceWord(editorState);\n        case \"backspace-to-start-of-line\":\n            return keyCommandBackspaceToStartOfLine(editorState, e);\n        case \"split-block\":\n            return keyCommandInsertNewline(editorState);\n        case \"transpose-characters\":\n            return keyCommandTransposeCharacters(editorState);\n        case \"move-selection-to-start-of-block\":\n            return keyCommandMoveSelectionToStartOfBlock(editorState);\n        case \"move-selection-to-end-of-block\":\n            return keyCommandMoveSelectionToEndOfBlock(editorState);\n        case \"secondary-cut\":\n            return SecondaryClipboard.cut(editorState);\n        case \"secondary-paste\":\n            return SecondaryClipboard.paste(editorState);\n        default:\n            return editorState;\n    }\n}\n/**\n * Intercept keydown behavior to handle keys and commands manually, if desired.\n *\n * Keydown combinations may be mapped to `DraftCommand` values, which may\n * correspond to command functions that modify the editor or its contents.\n *\n * See `getDefaultKeyBinding` for defaults. Alternatively, the top-level\n * component may provide a custom mapping via the `keyBindingFn` prop.\n */ function editOnKeyDown(editor, e) {\n    var keyCode = e.which;\n    var editorState = editor._latestEditorState;\n    function callDeprecatedHandler(handlerName) {\n        var deprecatedHandler = editor.props[handlerName];\n        if (deprecatedHandler) {\n            deprecatedHandler(e);\n            return true;\n        } else {\n            return false;\n        }\n    }\n    switch(keyCode){\n        case Keys.RETURN:\n            e.preventDefault(); // The top-level component may manually handle newline insertion. If\n            // no special handling is performed, fall through to command handling.\n            if (editor.props.handleReturn && isEventHandled(editor.props.handleReturn(e, editorState))) {\n                return;\n            }\n            break;\n        case Keys.ESC:\n            e.preventDefault();\n            if (callDeprecatedHandler(\"onEscape\")) {\n                return;\n            }\n            break;\n        case Keys.TAB:\n            if (callDeprecatedHandler(\"onTab\")) {\n                return;\n            }\n            break;\n        case Keys.UP:\n            if (callDeprecatedHandler(\"onUpArrow\")) {\n                return;\n            }\n            break;\n        case Keys.RIGHT:\n            if (callDeprecatedHandler(\"onRightArrow\")) {\n                return;\n            }\n            break;\n        case Keys.DOWN:\n            if (callDeprecatedHandler(\"onDownArrow\")) {\n                return;\n            }\n            break;\n        case Keys.LEFT:\n            if (callDeprecatedHandler(\"onLeftArrow\")) {\n                return;\n            }\n            break;\n        case Keys.SPACE:\n            // Prevent Chrome on OSX behavior where option + space scrolls.\n            if (isChrome && isOptionKeyCommand(e)) {\n                e.preventDefault();\n            }\n    }\n    var command = editor.props.keyBindingFn(e); // If no command is specified, allow keydown event to continue.\n    if (command == null || command === \"\") {\n        if (keyCode === Keys.SPACE && isChrome && isOptionKeyCommand(e)) {\n            // The default keydown event has already been prevented in order to stop\n            // Chrome from scrolling. Insert a nbsp into the editor as OSX would for\n            // other browsers.\n            var contentState = DraftModifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), \"\\xa0\");\n            editor.update(EditorState.push(editorState, contentState, \"insert-characters\"));\n        }\n        return;\n    }\n    if (command === \"undo\") {\n        // Since undo requires some special updating behavior to keep the editor\n        // in sync, handle it separately.\n        keyCommandUndo(e, editorState, editor.update);\n        return;\n    } // At this point, we know that we're handling a command of some kind, so\n    // we don't want to insert a character following the keydown.\n    e.preventDefault(); // Allow components higher up the tree to handle the command first.\n    if (editor.props.handleKeyCommand && isEventHandled(editor.props.handleKeyCommand(command, editorState, e.timeStamp))) {\n        return;\n    }\n    var newState = onKeyCommand(command, editorState, e);\n    if (newState !== editorState) {\n        editor.update(newState);\n    }\n}\nmodule.exports = editOnKeyDown;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/editOnKeyDown.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/editOnPaste.js":
/*!**************************************************!*\
  !*** ./node_modules/draft-js/lib/editOnPaste.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar BlockMapBuilder = __webpack_require__(/*! ./BlockMapBuilder */ \"(ssr)/./node_modules/draft-js/lib/BlockMapBuilder.js\");\nvar CharacterMetadata = __webpack_require__(/*! ./CharacterMetadata */ \"(ssr)/./node_modules/draft-js/lib/CharacterMetadata.js\");\nvar DataTransfer = __webpack_require__(/*! fbjs/lib/DataTransfer */ \"(ssr)/./node_modules/fbjs/lib/DataTransfer.js\");\nvar DraftModifier = __webpack_require__(/*! ./DraftModifier */ \"(ssr)/./node_modules/draft-js/lib/DraftModifier.js\");\nvar DraftPasteProcessor = __webpack_require__(/*! ./DraftPasteProcessor */ \"(ssr)/./node_modules/draft-js/lib/DraftPasteProcessor.js\");\nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar RichTextEditorUtil = __webpack_require__(/*! ./RichTextEditorUtil */ \"(ssr)/./node_modules/draft-js/lib/RichTextEditorUtil.js\");\nvar getEntityKeyForSelection = __webpack_require__(/*! ./getEntityKeyForSelection */ \"(ssr)/./node_modules/draft-js/lib/getEntityKeyForSelection.js\");\nvar getTextContentFromFiles = __webpack_require__(/*! ./getTextContentFromFiles */ \"(ssr)/./node_modules/draft-js/lib/getTextContentFromFiles.js\");\nvar isEventHandled = __webpack_require__(/*! ./isEventHandled */ \"(ssr)/./node_modules/draft-js/lib/isEventHandled.js\");\nvar splitTextIntoTextBlocks = __webpack_require__(/*! ./splitTextIntoTextBlocks */ \"(ssr)/./node_modules/draft-js/lib/splitTextIntoTextBlocks.js\");\n/**\n * Paste content.\n */ function editOnPaste(editor, e) {\n    e.preventDefault();\n    var data = new DataTransfer(e.clipboardData); // Get files, unless this is likely to be a string the user wants inline.\n    if (!data.isRichText()) {\n        var files = data.getFiles();\n        var defaultFileText = data.getText();\n        if (files.length > 0) {\n            // Allow customized paste handling for images, etc. Otherwise, fall\n            // through to insert text contents into the editor.\n            if (editor.props.handlePastedFiles && isEventHandled(editor.props.handlePastedFiles(files))) {\n                return;\n            }\n            /* $FlowFixMe[incompatible-call] This comment suppresses an error found\n       * DataTransfer was typed. getFiles() returns an array of <Files extends\n       * Blob>, not Blob */ getTextContentFromFiles(files, function(/*string*/ fileText) {\n                fileText = fileText || defaultFileText;\n                if (!fileText) {\n                    return;\n                }\n                var editorState = editor._latestEditorState;\n                var blocks = splitTextIntoTextBlocks(fileText);\n                var character = CharacterMetadata.create({\n                    style: editorState.getCurrentInlineStyle(),\n                    entity: getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection())\n                });\n                var currentBlockType = RichTextEditorUtil.getCurrentBlockType(editorState);\n                var text = DraftPasteProcessor.processText(blocks, character, currentBlockType);\n                var fragment = BlockMapBuilder.createFromArray(text);\n                var withInsertedText = DraftModifier.replaceWithFragment(editorState.getCurrentContent(), editorState.getSelection(), fragment);\n                editor.update(EditorState.push(editorState, withInsertedText, \"insert-fragment\"));\n            });\n            return;\n        }\n    }\n    var textBlocks = [];\n    var text = data.getText();\n    var html = data.getHTML();\n    var editorState = editor._latestEditorState;\n    if (editor.props.formatPastedText) {\n        var _editor$props$formatP = editor.props.formatPastedText(text, html), formattedText = _editor$props$formatP.text, formattedHtml = _editor$props$formatP.html;\n        text = formattedText;\n        html = formattedHtml;\n    }\n    if (editor.props.handlePastedText && isEventHandled(editor.props.handlePastedText(text, html, editorState))) {\n        return;\n    }\n    if (text) {\n        textBlocks = splitTextIntoTextBlocks(text);\n    }\n    if (!editor.props.stripPastedStyles) {\n        // If the text from the paste event is rich content that matches what we\n        // already have on the internal clipboard, assume that we should just use\n        // the clipboard fragment for the paste. This will allow us to preserve\n        // styling and entities, if any are present. Note that newlines are\n        // stripped during comparison -- this is because copy/paste within the\n        // editor in Firefox and IE will not include empty lines. The resulting\n        // paste will preserve the newlines correctly.\n        var internalClipboard = editor.getClipboard();\n        if (!editor.props.formatPastedText && data.isRichText() && internalClipboard) {\n            var _html;\n            if (// assume this is an internal paste.\n            ((_html = html) === null || _html === void 0 ? void 0 : _html.indexOf(editor.getEditorKey())) !== -1 || // The copy may have been made within a single block, in which case the\n            // editor key won't be part of the paste. In this case, just check\n            // whether the pasted text matches the internal clipboard.\n            textBlocks.length === 1 && internalClipboard.size === 1 && internalClipboard.first().getText() === text) {\n                editor.update(insertFragment(editor._latestEditorState, internalClipboard));\n                return;\n            }\n        } else if (internalClipboard && data.types.includes(\"com.apple.webarchive\") && !data.types.includes(\"text/html\") && areTextBlocksAndClipboardEqual(textBlocks, internalClipboard)) {\n            // Safari does not properly store text/html in some cases.\n            // Use the internalClipboard if present and equal to what is on\n            // the clipboard. See https://bugs.webkit.org/show_bug.cgi?id=19893.\n            editor.update(insertFragment(editor._latestEditorState, internalClipboard));\n            return;\n        } // If there is html paste data, try to parse that.\n        if (html) {\n            var htmlFragment = DraftPasteProcessor.processHTML(html, editor.props.blockRenderMap);\n            if (htmlFragment) {\n                var contentBlocks = htmlFragment.contentBlocks, entityMap = htmlFragment.entityMap;\n                if (contentBlocks) {\n                    var htmlMap = BlockMapBuilder.createFromArray(contentBlocks);\n                    editor.update(insertFragment(editor._latestEditorState, htmlMap, entityMap));\n                    return;\n                }\n            }\n        } // Otherwise, create a new fragment from our pasted text. Also\n        // empty the internal clipboard, since it's no longer valid.\n        editor.setClipboard(null);\n    }\n    if (textBlocks.length) {\n        var character = CharacterMetadata.create({\n            style: editorState.getCurrentInlineStyle(),\n            entity: getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection())\n        });\n        var currentBlockType = RichTextEditorUtil.getCurrentBlockType(editorState);\n        var textFragment = DraftPasteProcessor.processText(textBlocks, character, currentBlockType);\n        var textMap = BlockMapBuilder.createFromArray(textFragment);\n        editor.update(insertFragment(editor._latestEditorState, textMap));\n    }\n}\nfunction insertFragment(editorState, fragment, entityMap) {\n    var newContent = DraftModifier.replaceWithFragment(editorState.getCurrentContent(), editorState.getSelection(), fragment); // TODO: merge the entity map once we stop using DraftEntity\n    // like this:\n    // const mergedEntityMap = newContent.getEntityMap().merge(entityMap);\n    return EditorState.push(editorState, newContent.set(\"entityMap\", entityMap), \"insert-fragment\");\n}\nfunction areTextBlocksAndClipboardEqual(textBlocks, blockMap) {\n    return textBlocks.length === blockMap.size && blockMap.valueSeq().every(function(block, ii) {\n        return block.getText() === textBlocks[ii];\n    });\n}\nmodule.exports = editOnPaste;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/editOnPaste.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/editOnSelect.js":
/*!***************************************************!*\
  !*** ./node_modules/draft-js/lib/editOnSelect.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DraftJsDebugLogging = __webpack_require__(/*! ./DraftJsDebugLogging */ \"(ssr)/./node_modules/draft-js/lib/DraftJsDebugLogging.js\");\nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar getContentEditableContainer = __webpack_require__(/*! ./getContentEditableContainer */ \"(ssr)/./node_modules/draft-js/lib/getContentEditableContainer.js\");\nvar getDraftEditorSelection = __webpack_require__(/*! ./getDraftEditorSelection */ \"(ssr)/./node_modules/draft-js/lib/getDraftEditorSelection.js\");\nfunction editOnSelect(editor) {\n    if (editor._blockSelectEvents || editor._latestEditorState !== editor.props.editorState) {\n        if (editor._blockSelectEvents) {\n            var _editorState = editor.props.editorState;\n            var selectionState = _editorState.getSelection();\n            DraftJsDebugLogging.logBlockedSelectionEvent({\n                // For now I don't think we need any other info\n                anonymizedDom: \"N/A\",\n                extraParams: JSON.stringify({\n                    stacktrace: new Error().stack\n                }),\n                selectionState: JSON.stringify(selectionState.toJS())\n            });\n        }\n        return;\n    }\n    var editorState = editor.props.editorState;\n    var documentSelection = getDraftEditorSelection(editorState, getContentEditableContainer(editor));\n    var updatedSelectionState = documentSelection.selectionState;\n    if (updatedSelectionState !== editorState.getSelection()) {\n        if (documentSelection.needsRecovery) {\n            editorState = EditorState.forceSelection(editorState, updatedSelectionState);\n        } else {\n            editorState = EditorState.acceptSelection(editorState, updatedSelectionState);\n        }\n        editor.update(editorState);\n    }\n}\nmodule.exports = editOnSelect;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2VkaXRPblNlbGVjdC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLElBQUlBLHNCQUFzQkMsbUJBQU9BLENBQUMsdUZBQXVCO0FBRXpELElBQUlDLGNBQWNELG1CQUFPQSxDQUFDLHVFQUFlO0FBRXpDLElBQUlFLDhCQUE4QkYsbUJBQU9BLENBQUMsdUdBQStCO0FBRXpFLElBQUlHLDBCQUEwQkgsbUJBQU9BLENBQUMsK0ZBQTJCO0FBRWpFLFNBQVNJLGFBQWFDLE1BQU07SUFDMUIsSUFBSUEsT0FBT0Msa0JBQWtCLElBQUlELE9BQU9FLGtCQUFrQixLQUFLRixPQUFPRyxLQUFLLENBQUNDLFdBQVcsRUFBRTtRQUN2RixJQUFJSixPQUFPQyxrQkFBa0IsRUFBRTtZQUM3QixJQUFJSSxlQUFlTCxPQUFPRyxLQUFLLENBQUNDLFdBQVc7WUFFM0MsSUFBSUUsaUJBQWlCRCxhQUFhRSxZQUFZO1lBRTlDYixvQkFBb0JjLHdCQUF3QixDQUFDO2dCQUMzQywrQ0FBK0M7Z0JBQy9DQyxlQUFlO2dCQUNmQyxhQUFhQyxLQUFLQyxTQUFTLENBQUM7b0JBQzFCQyxZQUFZLElBQUlDLFFBQVFDLEtBQUs7Z0JBQy9CO2dCQUNBVCxnQkFBZ0JLLEtBQUtDLFNBQVMsQ0FBQ04sZUFBZVUsSUFBSTtZQUNwRDtRQUNGO1FBRUE7SUFDRjtJQUVBLElBQUlaLGNBQWNKLE9BQU9HLEtBQUssQ0FBQ0MsV0FBVztJQUMxQyxJQUFJYSxvQkFBb0JuQix3QkFBd0JNLGFBQWFQLDRCQUE0Qkc7SUFDekYsSUFBSWtCLHdCQUF3QkQsa0JBQWtCWCxjQUFjO0lBRTVELElBQUlZLDBCQUEwQmQsWUFBWUcsWUFBWSxJQUFJO1FBQ3hELElBQUlVLGtCQUFrQkUsYUFBYSxFQUFFO1lBQ25DZixjQUFjUixZQUFZd0IsY0FBYyxDQUFDaEIsYUFBYWM7UUFDeEQsT0FBTztZQUNMZCxjQUFjUixZQUFZeUIsZUFBZSxDQUFDakIsYUFBYWM7UUFDekQ7UUFFQWxCLE9BQU9zQixNQUFNLENBQUNsQjtJQUNoQjtBQUNGO0FBRUFtQixPQUFPQyxPQUFPLEdBQUd6QiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9lZGl0T25TZWxlY3QuanM/ZGViYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRHJhZnRKc0RlYnVnTG9nZ2luZyA9IHJlcXVpcmUoXCIuL0RyYWZ0SnNEZWJ1Z0xvZ2dpbmdcIik7XG5cbnZhciBFZGl0b3JTdGF0ZSA9IHJlcXVpcmUoXCIuL0VkaXRvclN0YXRlXCIpO1xuXG52YXIgZ2V0Q29udGVudEVkaXRhYmxlQ29udGFpbmVyID0gcmVxdWlyZShcIi4vZ2V0Q29udGVudEVkaXRhYmxlQ29udGFpbmVyXCIpO1xuXG52YXIgZ2V0RHJhZnRFZGl0b3JTZWxlY3Rpb24gPSByZXF1aXJlKFwiLi9nZXREcmFmdEVkaXRvclNlbGVjdGlvblwiKTtcblxuZnVuY3Rpb24gZWRpdE9uU2VsZWN0KGVkaXRvcikge1xuICBpZiAoZWRpdG9yLl9ibG9ja1NlbGVjdEV2ZW50cyB8fCBlZGl0b3IuX2xhdGVzdEVkaXRvclN0YXRlICE9PSBlZGl0b3IucHJvcHMuZWRpdG9yU3RhdGUpIHtcbiAgICBpZiAoZWRpdG9yLl9ibG9ja1NlbGVjdEV2ZW50cykge1xuICAgICAgdmFyIF9lZGl0b3JTdGF0ZSA9IGVkaXRvci5wcm9wcy5lZGl0b3JTdGF0ZTtcblxuICAgICAgdmFyIHNlbGVjdGlvblN0YXRlID0gX2VkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpO1xuXG4gICAgICBEcmFmdEpzRGVidWdMb2dnaW5nLmxvZ0Jsb2NrZWRTZWxlY3Rpb25FdmVudCh7XG4gICAgICAgIC8vIEZvciBub3cgSSBkb24ndCB0aGluayB3ZSBuZWVkIGFueSBvdGhlciBpbmZvXG4gICAgICAgIGFub255bWl6ZWREb206ICdOL0EnLFxuICAgICAgICBleHRyYVBhcmFtczogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIHN0YWNrdHJhY2U6IG5ldyBFcnJvcigpLnN0YWNrXG4gICAgICAgIH0pLFxuICAgICAgICBzZWxlY3Rpb25TdGF0ZTogSlNPTi5zdHJpbmdpZnkoc2VsZWN0aW9uU3RhdGUudG9KUygpKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGVkaXRvclN0YXRlID0gZWRpdG9yLnByb3BzLmVkaXRvclN0YXRlO1xuICB2YXIgZG9jdW1lbnRTZWxlY3Rpb24gPSBnZXREcmFmdEVkaXRvclNlbGVjdGlvbihlZGl0b3JTdGF0ZSwgZ2V0Q29udGVudEVkaXRhYmxlQ29udGFpbmVyKGVkaXRvcikpO1xuICB2YXIgdXBkYXRlZFNlbGVjdGlvblN0YXRlID0gZG9jdW1lbnRTZWxlY3Rpb24uc2VsZWN0aW9uU3RhdGU7XG5cbiAgaWYgKHVwZGF0ZWRTZWxlY3Rpb25TdGF0ZSAhPT0gZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCkpIHtcbiAgICBpZiAoZG9jdW1lbnRTZWxlY3Rpb24ubmVlZHNSZWNvdmVyeSkge1xuICAgICAgZWRpdG9yU3RhdGUgPSBFZGl0b3JTdGF0ZS5mb3JjZVNlbGVjdGlvbihlZGl0b3JTdGF0ZSwgdXBkYXRlZFNlbGVjdGlvblN0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWRpdG9yU3RhdGUgPSBFZGl0b3JTdGF0ZS5hY2NlcHRTZWxlY3Rpb24oZWRpdG9yU3RhdGUsIHVwZGF0ZWRTZWxlY3Rpb25TdGF0ZSk7XG4gICAgfVxuXG4gICAgZWRpdG9yLnVwZGF0ZShlZGl0b3JTdGF0ZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlZGl0T25TZWxlY3Q7Il0sIm5hbWVzIjpbIkRyYWZ0SnNEZWJ1Z0xvZ2dpbmciLCJyZXF1aXJlIiwiRWRpdG9yU3RhdGUiLCJnZXRDb250ZW50RWRpdGFibGVDb250YWluZXIiLCJnZXREcmFmdEVkaXRvclNlbGVjdGlvbiIsImVkaXRPblNlbGVjdCIsImVkaXRvciIsIl9ibG9ja1NlbGVjdEV2ZW50cyIsIl9sYXRlc3RFZGl0b3JTdGF0ZSIsInByb3BzIiwiZWRpdG9yU3RhdGUiLCJfZWRpdG9yU3RhdGUiLCJzZWxlY3Rpb25TdGF0ZSIsImdldFNlbGVjdGlvbiIsImxvZ0Jsb2NrZWRTZWxlY3Rpb25FdmVudCIsImFub255bWl6ZWREb20iLCJleHRyYVBhcmFtcyIsIkpTT04iLCJzdHJpbmdpZnkiLCJzdGFja3RyYWNlIiwiRXJyb3IiLCJzdGFjayIsInRvSlMiLCJkb2N1bWVudFNlbGVjdGlvbiIsInVwZGF0ZWRTZWxlY3Rpb25TdGF0ZSIsIm5lZWRzUmVjb3ZlcnkiLCJmb3JjZVNlbGVjdGlvbiIsImFjY2VwdFNlbGVjdGlvbiIsInVwZGF0ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/editOnSelect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/encodeEntityRanges.js":
/*!*********************************************************!*\
  !*** ./node_modules/draft-js/lib/encodeEntityRanges.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DraftStringKey = __webpack_require__(/*! ./DraftStringKey */ \"(ssr)/./node_modules/draft-js/lib/DraftStringKey.js\");\nvar UnicodeUtils = __webpack_require__(/*! fbjs/lib/UnicodeUtils */ \"(ssr)/./node_modules/fbjs/lib/UnicodeUtils.js\");\nvar strlen = UnicodeUtils.strlen;\n/**\n * Convert to UTF-8 character counts for storage.\n */ function encodeEntityRanges(block, storageMap) {\n    var encoded = [];\n    block.findEntityRanges(function(character) {\n        return !!character.getEntity();\n    }, function(/*number*/ start, /*number*/ end) {\n        var text = block.getText();\n        var key = block.getEntityAt(start);\n        encoded.push({\n            offset: strlen(text.slice(0, start)),\n            length: strlen(text.slice(start, end)),\n            // Encode the key as a number for range storage.\n            key: Number(storageMap[DraftStringKey.stringify(key)])\n        });\n    });\n    return encoded;\n}\nmodule.exports = encodeEntityRanges;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2VuY29kZUVudGl0eVJhbmdlcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLElBQUlBLGlCQUFpQkMsbUJBQU9BLENBQUMsNkVBQWtCO0FBRS9DLElBQUlDLGVBQWVELG1CQUFPQSxDQUFDLDRFQUF1QjtBQUVsRCxJQUFJRSxTQUFTRCxhQUFhQyxNQUFNO0FBQ2hDOztDQUVDLEdBRUQsU0FBU0MsbUJBQW1CQyxLQUFLLEVBQUVDLFVBQVU7SUFDM0MsSUFBSUMsVUFBVSxFQUFFO0lBQ2hCRixNQUFNRyxnQkFBZ0IsQ0FBQyxTQUFVQyxTQUFTO1FBQ3hDLE9BQU8sQ0FBQyxDQUFDQSxVQUFVQyxTQUFTO0lBQzlCLEdBQUcsU0FDSCxRQUFRLEdBQ1JDLEtBQUssRUFDTCxRQUFRLEdBQ1JDLEdBQUc7UUFDRCxJQUFJQyxPQUFPUixNQUFNUyxPQUFPO1FBQ3hCLElBQUlDLE1BQU1WLE1BQU1XLFdBQVcsQ0FBQ0w7UUFDNUJKLFFBQVFVLElBQUksQ0FBQztZQUNYQyxRQUFRZixPQUFPVSxLQUFLTSxLQUFLLENBQUMsR0FBR1I7WUFDN0JTLFFBQVFqQixPQUFPVSxLQUFLTSxLQUFLLENBQUNSLE9BQU9DO1lBQ2pDLGdEQUFnRDtZQUNoREcsS0FBS00sT0FBT2YsVUFBVSxDQUFDTixlQUFlc0IsU0FBUyxDQUFDUCxLQUFLO1FBQ3ZEO0lBQ0Y7SUFDQSxPQUFPUjtBQUNUO0FBRUFnQixPQUFPQyxPQUFPLEdBQUdwQiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9lbmNvZGVFbnRpdHlSYW5nZXMuanM/ZWY5NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRHJhZnRTdHJpbmdLZXkgPSByZXF1aXJlKFwiLi9EcmFmdFN0cmluZ0tleVwiKTtcblxudmFyIFVuaWNvZGVVdGlscyA9IHJlcXVpcmUoXCJmYmpzL2xpYi9Vbmljb2RlVXRpbHNcIik7XG5cbnZhciBzdHJsZW4gPSBVbmljb2RlVXRpbHMuc3RybGVuO1xuLyoqXG4gKiBDb252ZXJ0IHRvIFVURi04IGNoYXJhY3RlciBjb3VudHMgZm9yIHN0b3JhZ2UuXG4gKi9cblxuZnVuY3Rpb24gZW5jb2RlRW50aXR5UmFuZ2VzKGJsb2NrLCBzdG9yYWdlTWFwKSB7XG4gIHZhciBlbmNvZGVkID0gW107XG4gIGJsb2NrLmZpbmRFbnRpdHlSYW5nZXMoZnVuY3Rpb24gKGNoYXJhY3Rlcikge1xuICAgIHJldHVybiAhIWNoYXJhY3Rlci5nZXRFbnRpdHkoKTtcbiAgfSwgZnVuY3Rpb24gKFxuICAvKm51bWJlciovXG4gIHN0YXJ0LFxuICAvKm51bWJlciovXG4gIGVuZCkge1xuICAgIHZhciB0ZXh0ID0gYmxvY2suZ2V0VGV4dCgpO1xuICAgIHZhciBrZXkgPSBibG9jay5nZXRFbnRpdHlBdChzdGFydCk7XG4gICAgZW5jb2RlZC5wdXNoKHtcbiAgICAgIG9mZnNldDogc3RybGVuKHRleHQuc2xpY2UoMCwgc3RhcnQpKSxcbiAgICAgIGxlbmd0aDogc3RybGVuKHRleHQuc2xpY2Uoc3RhcnQsIGVuZCkpLFxuICAgICAgLy8gRW5jb2RlIHRoZSBrZXkgYXMgYSBudW1iZXIgZm9yIHJhbmdlIHN0b3JhZ2UuXG4gICAgICBrZXk6IE51bWJlcihzdG9yYWdlTWFwW0RyYWZ0U3RyaW5nS2V5LnN0cmluZ2lmeShrZXkpXSlcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBlbmNvZGVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVuY29kZUVudGl0eVJhbmdlczsiXSwibmFtZXMiOlsiRHJhZnRTdHJpbmdLZXkiLCJyZXF1aXJlIiwiVW5pY29kZVV0aWxzIiwic3RybGVuIiwiZW5jb2RlRW50aXR5UmFuZ2VzIiwiYmxvY2siLCJzdG9yYWdlTWFwIiwiZW5jb2RlZCIsImZpbmRFbnRpdHlSYW5nZXMiLCJjaGFyYWN0ZXIiLCJnZXRFbnRpdHkiLCJzdGFydCIsImVuZCIsInRleHQiLCJnZXRUZXh0Iiwia2V5IiwiZ2V0RW50aXR5QXQiLCJwdXNoIiwib2Zmc2V0Iiwic2xpY2UiLCJsZW5ndGgiLCJOdW1iZXIiLCJzdHJpbmdpZnkiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/encodeEntityRanges.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/encodeInlineStyleRanges.js":
/*!**************************************************************!*\
  !*** ./node_modules/draft-js/lib/encodeInlineStyleRanges.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar UnicodeUtils = __webpack_require__(/*! fbjs/lib/UnicodeUtils */ \"(ssr)/./node_modules/fbjs/lib/UnicodeUtils.js\");\nvar findRangesImmutable = __webpack_require__(/*! ./findRangesImmutable */ \"(ssr)/./node_modules/draft-js/lib/findRangesImmutable.js\");\nvar areEqual = function areEqual(a, b) {\n    return a === b;\n};\nvar isTruthy = function isTruthy(a) {\n    return !!a;\n};\nvar EMPTY_ARRAY = [];\n/**\n * Helper function for getting encoded styles for each inline style. Convert\n * to UTF-8 character counts for storage.\n */ function getEncodedInlinesForType(block, styleList, styleToEncode) {\n    var ranges = []; // Obtain an array with ranges for only the specified style.\n    var filteredInlines = styleList.map(function(style) {\n        return style.has(styleToEncode);\n    }).toList();\n    findRangesImmutable(filteredInlines, areEqual, isTruthy, function(start, end) {\n        var text = block.getText();\n        ranges.push({\n            offset: UnicodeUtils.strlen(text.slice(0, start)),\n            length: UnicodeUtils.strlen(text.slice(start, end)),\n            style: styleToEncode\n        });\n    });\n    return ranges;\n}\n/*\n * Retrieve the encoded arrays of inline styles, with each individual style\n * treated separately.\n */ function encodeInlineStyleRanges(block) {\n    var styleList = block.getCharacterList().map(function(c) {\n        return c.getStyle();\n    }).toList();\n    var ranges = styleList.flatten().toSet().map(function(style) {\n        return getEncodedInlinesForType(block, styleList, style);\n    });\n    return Array.prototype.concat.apply(EMPTY_ARRAY, ranges.toJS());\n}\nmodule.exports = encodeInlineStyleRanges;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2VuY29kZUlubGluZVN0eWxlUmFuZ2VzLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsZUFBZUMsbUJBQU9BLENBQUMsNEVBQXVCO0FBRWxELElBQUlDLHNCQUFzQkQsbUJBQU9BLENBQUMsdUZBQXVCO0FBRXpELElBQUlFLFdBQVcsU0FBU0EsU0FBU0MsQ0FBQyxFQUFFQyxDQUFDO0lBQ25DLE9BQU9ELE1BQU1DO0FBQ2Y7QUFFQSxJQUFJQyxXQUFXLFNBQVNBLFNBQVNGLENBQUM7SUFDaEMsT0FBTyxDQUFDLENBQUNBO0FBQ1g7QUFFQSxJQUFJRyxjQUFjLEVBQUU7QUFDcEI7OztDQUdDLEdBRUQsU0FBU0MseUJBQXlCQyxLQUFLLEVBQUVDLFNBQVMsRUFBRUMsYUFBYTtJQUMvRCxJQUFJQyxTQUFTLEVBQUUsRUFBRSw0REFBNEQ7SUFFN0UsSUFBSUMsa0JBQWtCSCxVQUFVSSxHQUFHLENBQUMsU0FBVUMsS0FBSztRQUNqRCxPQUFPQSxNQUFNQyxHQUFHLENBQUNMO0lBQ25CLEdBQUdNLE1BQU07SUFDVGYsb0JBQW9CVyxpQkFBaUJWLFVBQ3JDRyxVQUFVLFNBQVVZLEtBQUssRUFBRUMsR0FBRztRQUM1QixJQUFJQyxPQUFPWCxNQUFNWSxPQUFPO1FBQ3hCVCxPQUFPVSxJQUFJLENBQUM7WUFDVkMsUUFBUXZCLGFBQWF3QixNQUFNLENBQUNKLEtBQUtLLEtBQUssQ0FBQyxHQUFHUDtZQUMxQ1EsUUFBUTFCLGFBQWF3QixNQUFNLENBQUNKLEtBQUtLLEtBQUssQ0FBQ1AsT0FBT0M7WUFDOUNKLE9BQU9KO1FBQ1Q7SUFDRjtJQUNBLE9BQU9DO0FBQ1Q7QUFDQTs7O0NBR0MsR0FHRCxTQUFTZSx3QkFBd0JsQixLQUFLO0lBQ3BDLElBQUlDLFlBQVlELE1BQU1tQixnQkFBZ0IsR0FBR2QsR0FBRyxDQUFDLFNBQVVlLENBQUM7UUFDdEQsT0FBT0EsRUFBRUMsUUFBUTtJQUNuQixHQUFHYixNQUFNO0lBQ1QsSUFBSUwsU0FBU0YsVUFBVXFCLE9BQU8sR0FBR0MsS0FBSyxHQUFHbEIsR0FBRyxDQUFDLFNBQVVDLEtBQUs7UUFDMUQsT0FBT1AseUJBQXlCQyxPQUFPQyxXQUFXSztJQUNwRDtJQUNBLE9BQU9rQixNQUFNQyxTQUFTLENBQUNDLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDN0IsYUFBYUssT0FBT3lCLElBQUk7QUFDOUQ7QUFFQUMsT0FBT0MsT0FBTyxHQUFHWiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9lbmNvZGVJbmxpbmVTdHlsZVJhbmdlcy5qcz85MWRkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBVbmljb2RlVXRpbHMgPSByZXF1aXJlKFwiZmJqcy9saWIvVW5pY29kZVV0aWxzXCIpO1xuXG52YXIgZmluZFJhbmdlc0ltbXV0YWJsZSA9IHJlcXVpcmUoXCIuL2ZpbmRSYW5nZXNJbW11dGFibGVcIik7XG5cbnZhciBhcmVFcXVhbCA9IGZ1bmN0aW9uIGFyZUVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59O1xuXG52YXIgaXNUcnV0aHkgPSBmdW5jdGlvbiBpc1RydXRoeShhKSB7XG4gIHJldHVybiAhIWE7XG59O1xuXG52YXIgRU1QVFlfQVJSQVkgPSBbXTtcbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIGZvciBnZXR0aW5nIGVuY29kZWQgc3R5bGVzIGZvciBlYWNoIGlubGluZSBzdHlsZS4gQ29udmVydFxuICogdG8gVVRGLTggY2hhcmFjdGVyIGNvdW50cyBmb3Igc3RvcmFnZS5cbiAqL1xuXG5mdW5jdGlvbiBnZXRFbmNvZGVkSW5saW5lc0ZvclR5cGUoYmxvY2ssIHN0eWxlTGlzdCwgc3R5bGVUb0VuY29kZSkge1xuICB2YXIgcmFuZ2VzID0gW107IC8vIE9idGFpbiBhbiBhcnJheSB3aXRoIHJhbmdlcyBmb3Igb25seSB0aGUgc3BlY2lmaWVkIHN0eWxlLlxuXG4gIHZhciBmaWx0ZXJlZElubGluZXMgPSBzdHlsZUxpc3QubWFwKGZ1bmN0aW9uIChzdHlsZSkge1xuICAgIHJldHVybiBzdHlsZS5oYXMoc3R5bGVUb0VuY29kZSk7XG4gIH0pLnRvTGlzdCgpO1xuICBmaW5kUmFuZ2VzSW1tdXRhYmxlKGZpbHRlcmVkSW5saW5lcywgYXJlRXF1YWwsIC8vIFdlIG9ubHkgd2FudCB0byBrZWVwIHJhbmdlcyB3aXRoIG5vbnplcm8gc3R5bGUgdmFsdWVzLlxuICBpc1RydXRoeSwgZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgdGV4dCA9IGJsb2NrLmdldFRleHQoKTtcbiAgICByYW5nZXMucHVzaCh7XG4gICAgICBvZmZzZXQ6IFVuaWNvZGVVdGlscy5zdHJsZW4odGV4dC5zbGljZSgwLCBzdGFydCkpLFxuICAgICAgbGVuZ3RoOiBVbmljb2RlVXRpbHMuc3RybGVuKHRleHQuc2xpY2Uoc3RhcnQsIGVuZCkpLFxuICAgICAgc3R5bGU6IHN0eWxlVG9FbmNvZGVcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiByYW5nZXM7XG59XG4vKlxuICogUmV0cmlldmUgdGhlIGVuY29kZWQgYXJyYXlzIG9mIGlubGluZSBzdHlsZXMsIHdpdGggZWFjaCBpbmRpdmlkdWFsIHN0eWxlXG4gKiB0cmVhdGVkIHNlcGFyYXRlbHkuXG4gKi9cblxuXG5mdW5jdGlvbiBlbmNvZGVJbmxpbmVTdHlsZVJhbmdlcyhibG9jaykge1xuICB2YXIgc3R5bGVMaXN0ID0gYmxvY2suZ2V0Q2hhcmFjdGVyTGlzdCgpLm1hcChmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiBjLmdldFN0eWxlKCk7XG4gIH0pLnRvTGlzdCgpO1xuICB2YXIgcmFuZ2VzID0gc3R5bGVMaXN0LmZsYXR0ZW4oKS50b1NldCgpLm1hcChmdW5jdGlvbiAoc3R5bGUpIHtcbiAgICByZXR1cm4gZ2V0RW5jb2RlZElubGluZXNGb3JUeXBlKGJsb2NrLCBzdHlsZUxpc3QsIHN0eWxlKTtcbiAgfSk7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KEVNUFRZX0FSUkFZLCByYW5nZXMudG9KUygpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlbmNvZGVJbmxpbmVTdHlsZVJhbmdlczsiXSwibmFtZXMiOlsiVW5pY29kZVV0aWxzIiwicmVxdWlyZSIsImZpbmRSYW5nZXNJbW11dGFibGUiLCJhcmVFcXVhbCIsImEiLCJiIiwiaXNUcnV0aHkiLCJFTVBUWV9BUlJBWSIsImdldEVuY29kZWRJbmxpbmVzRm9yVHlwZSIsImJsb2NrIiwic3R5bGVMaXN0Iiwic3R5bGVUb0VuY29kZSIsInJhbmdlcyIsImZpbHRlcmVkSW5saW5lcyIsIm1hcCIsInN0eWxlIiwiaGFzIiwidG9MaXN0Iiwic3RhcnQiLCJlbmQiLCJ0ZXh0IiwiZ2V0VGV4dCIsInB1c2giLCJvZmZzZXQiLCJzdHJsZW4iLCJzbGljZSIsImxlbmd0aCIsImVuY29kZUlubGluZVN0eWxlUmFuZ2VzIiwiZ2V0Q2hhcmFjdGVyTGlzdCIsImMiLCJnZXRTdHlsZSIsImZsYXR0ZW4iLCJ0b1NldCIsIkFycmF5IiwicHJvdG90eXBlIiwiY29uY2F0IiwiYXBwbHkiLCJ0b0pTIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/encodeInlineStyleRanges.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/expandRangeToStartOfLine.js":
/*!***************************************************************!*\
  !*** ./node_modules/draft-js/lib/expandRangeToStartOfLine.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ var UnicodeUtils = __webpack_require__(/*! fbjs/lib/UnicodeUtils */ \"(ssr)/./node_modules/fbjs/lib/UnicodeUtils.js\");\nvar getCorrectDocumentFromNode = __webpack_require__(/*! ./getCorrectDocumentFromNode */ \"(ssr)/./node_modules/draft-js/lib/getCorrectDocumentFromNode.js\");\nvar getRangeClientRects = __webpack_require__(/*! ./getRangeClientRects */ \"(ssr)/./node_modules/draft-js/lib/getRangeClientRects.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\n/**\n * Return the computed line height, in pixels, for the provided element.\n */ function getLineHeightPx(element) {\n    var computed = getComputedStyle(element);\n    var correctDocument = getCorrectDocumentFromNode(element);\n    var div = correctDocument.createElement(\"div\");\n    div.style.fontFamily = computed.fontFamily;\n    div.style.fontSize = computed.fontSize;\n    div.style.fontStyle = computed.fontStyle;\n    div.style.fontWeight = computed.fontWeight;\n    div.style.lineHeight = computed.lineHeight;\n    div.style.position = \"absolute\";\n    div.textContent = \"M\";\n    var documentBody = correctDocument.body;\n    !documentBody ?  true ? invariant(false, \"Missing document.body\") : 0 : void 0; // forced layout here\n    documentBody.appendChild(div);\n    var rect = div.getBoundingClientRect();\n    documentBody.removeChild(div);\n    return rect.height;\n}\n/**\n * Return whether every ClientRect in the provided list lies on the same line.\n *\n * We assume that the rects on the same line all contain the baseline, so the\n * lowest top line needs to be above the highest bottom line (i.e., if you were\n * to project the rects onto the y-axis, their intersection would be nonempty).\n *\n * In addition, we require that no two boxes are lineHeight (or more) apart at\n * either top or bottom, which helps protect against false positives for fonts\n * with extremely large glyph heights (e.g., with a font size of 17px, Zapfino\n * produces rects of height 58px!).\n */ function areRectsOnOneLine(rects, lineHeight) {\n    var minTop = Infinity;\n    var minBottom = Infinity;\n    var maxTop = -Infinity;\n    var maxBottom = -Infinity;\n    for(var ii = 0; ii < rects.length; ii++){\n        var rect = rects[ii];\n        if (rect.width === 0 || rect.width === 1) {\n            continue;\n        }\n        minTop = Math.min(minTop, rect.top);\n        minBottom = Math.min(minBottom, rect.bottom);\n        maxTop = Math.max(maxTop, rect.top);\n        maxBottom = Math.max(maxBottom, rect.bottom);\n    }\n    return maxTop <= minBottom && maxTop - minTop < lineHeight && maxBottom - minBottom < lineHeight;\n}\n/**\n * Return the length of a node, as used by Range offsets.\n */ function getNodeLength(node) {\n    // http://www.w3.org/TR/dom/#concept-node-length\n    switch(node.nodeType){\n        case Node.DOCUMENT_TYPE_NODE:\n            return 0;\n        case Node.TEXT_NODE:\n        case Node.PROCESSING_INSTRUCTION_NODE:\n        case Node.COMMENT_NODE:\n            return node.length;\n        default:\n            return node.childNodes.length;\n    }\n}\n/**\n * Given a collapsed range, move the start position backwards as far as\n * possible while the range still spans only a single line.\n */ function expandRangeToStartOfLine(range) {\n    !range.collapsed ?  true ? invariant(false, \"expandRangeToStartOfLine: Provided range is not collapsed.\") : 0 : void 0;\n    range = range.cloneRange();\n    var containingElement = range.startContainer;\n    if (containingElement.nodeType !== 1) {\n        containingElement = containingElement.parentNode;\n    }\n    var lineHeight = getLineHeightPx(containingElement); // Imagine our text looks like:\n    //   <div><span>once upon a time, there was a <em>boy\n    //   who lived</em> </span><q><strong>under^ the\n    //   stairs</strong> in a small closet.</q></div>\n    // where the caret represents the cursor. First, we crawl up the tree until\n    // the range spans multiple lines (setting the start point to before\n    // \"<strong>\", then before \"<div>\"), then at each level we do a search to\n    // find the latest point which is still on a previous line. We'll find that\n    // the break point is inside the span, then inside the <em>, then in its text\n    // node child, the actual break point before \"who\".\n    var bestContainer = range.endContainer;\n    var bestOffset = range.endOffset;\n    range.setStart(range.startContainer, 0);\n    while(areRectsOnOneLine(getRangeClientRects(range), lineHeight)){\n        bestContainer = range.startContainer;\n        bestOffset = range.startOffset;\n        !bestContainer.parentNode ?  true ? invariant(false, \"Found unexpected detached subtree when traversing.\") : 0 : void 0;\n        range.setStartBefore(bestContainer);\n        if (bestContainer.nodeType === 1 && getComputedStyle(bestContainer).display !== \"inline\") {\n            break;\n        }\n    } // In the above example, range now spans from \"<div>\" to \"under\",\n    // bestContainer is <div>, and bestOffset is 1 (index of <q> inside <div>)].\n    // Picking out which child to recurse into here is a special case since we\n    // don't want to check past <q> -- once we find that the final range starts\n    // in <span>, we can look at all of its children (and all of their children)\n    // to find the break point.\n    // At all times, (bestContainer, bestOffset) is the latest single-line start\n    // point that we know of.\n    var currentContainer = bestContainer;\n    var maxIndexToConsider = bestOffset - 1;\n    do {\n        var nodeValue = currentContainer.nodeValue;\n        var ii = maxIndexToConsider;\n        for(; ii >= 0; ii--){\n            if (nodeValue != null && ii > 0 && UnicodeUtils.isSurrogatePair(nodeValue, ii - 1)) {\n                continue;\n            }\n            range.setStart(currentContainer, ii);\n            if (areRectsOnOneLine(getRangeClientRects(range), lineHeight)) {\n                bestContainer = currentContainer;\n                bestOffset = ii;\n            } else {\n                break;\n            }\n        }\n        if (ii === -1 || currentContainer.childNodes.length === 0) {\n            break;\n        }\n        currentContainer = currentContainer.childNodes[ii];\n        maxIndexToConsider = getNodeLength(currentContainer);\n    }while (true);\n    range.setStart(bestContainer, bestOffset);\n    return range;\n}\nmodule.exports = expandRangeToStartOfLine;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/expandRangeToStartOfLine.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/findAncestorOffsetKey.js":
/*!************************************************************!*\
  !*** ./node_modules/draft-js/lib/findAncestorOffsetKey.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar getCorrectDocumentFromNode = __webpack_require__(/*! ./getCorrectDocumentFromNode */ \"(ssr)/./node_modules/draft-js/lib/getCorrectDocumentFromNode.js\");\nvar getSelectionOffsetKeyForNode = __webpack_require__(/*! ./getSelectionOffsetKeyForNode */ \"(ssr)/./node_modules/draft-js/lib/getSelectionOffsetKeyForNode.js\");\n/**\n * Get the key from the node's nearest offset-aware ancestor.\n */ function findAncestorOffsetKey(node) {\n    var searchNode = node;\n    while(searchNode && searchNode !== getCorrectDocumentFromNode(node).documentElement){\n        var key = getSelectionOffsetKeyForNode(searchNode);\n        if (key != null) {\n            return key;\n        }\n        searchNode = searchNode.parentNode;\n    }\n    return null;\n}\nmodule.exports = findAncestorOffsetKey;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2ZpbmRBbmNlc3Rvck9mZnNldEtleS5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLElBQUlBLDZCQUE2QkMsbUJBQU9BLENBQUMscUdBQThCO0FBRXZFLElBQUlDLCtCQUErQkQsbUJBQU9BLENBQUMseUdBQWdDO0FBQzNFOztDQUVDLEdBR0QsU0FBU0Usc0JBQXNCQyxJQUFJO0lBQ2pDLElBQUlDLGFBQWFEO0lBRWpCLE1BQU9DLGNBQWNBLGVBQWVMLDJCQUEyQkksTUFBTUUsZUFBZSxDQUFFO1FBQ3BGLElBQUlDLE1BQU1MLDZCQUE2Qkc7UUFFdkMsSUFBSUUsT0FBTyxNQUFNO1lBQ2YsT0FBT0E7UUFDVDtRQUVBRixhQUFhQSxXQUFXRyxVQUFVO0lBQ3BDO0lBRUEsT0FBTztBQUNUO0FBRUFDLE9BQU9DLE9BQU8sR0FBR1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWVsLWhhcnZlc3Rlci8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZmluZEFuY2VzdG9yT2Zmc2V0S2V5LmpzP2NhYTIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIGdldENvcnJlY3REb2N1bWVudEZyb21Ob2RlID0gcmVxdWlyZShcIi4vZ2V0Q29ycmVjdERvY3VtZW50RnJvbU5vZGVcIik7XG5cbnZhciBnZXRTZWxlY3Rpb25PZmZzZXRLZXlGb3JOb2RlID0gcmVxdWlyZShcIi4vZ2V0U2VsZWN0aW9uT2Zmc2V0S2V5Rm9yTm9kZVwiKTtcbi8qKlxuICogR2V0IHRoZSBrZXkgZnJvbSB0aGUgbm9kZSdzIG5lYXJlc3Qgb2Zmc2V0LWF3YXJlIGFuY2VzdG9yLlxuICovXG5cblxuZnVuY3Rpb24gZmluZEFuY2VzdG9yT2Zmc2V0S2V5KG5vZGUpIHtcbiAgdmFyIHNlYXJjaE5vZGUgPSBub2RlO1xuXG4gIHdoaWxlIChzZWFyY2hOb2RlICYmIHNlYXJjaE5vZGUgIT09IGdldENvcnJlY3REb2N1bWVudEZyb21Ob2RlKG5vZGUpLmRvY3VtZW50RWxlbWVudCkge1xuICAgIHZhciBrZXkgPSBnZXRTZWxlY3Rpb25PZmZzZXRLZXlGb3JOb2RlKHNlYXJjaE5vZGUpO1xuXG4gICAgaWYgKGtleSAhPSBudWxsKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cblxuICAgIHNlYXJjaE5vZGUgPSBzZWFyY2hOb2RlLnBhcmVudE5vZGU7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmaW5kQW5jZXN0b3JPZmZzZXRLZXk7Il0sIm5hbWVzIjpbImdldENvcnJlY3REb2N1bWVudEZyb21Ob2RlIiwicmVxdWlyZSIsImdldFNlbGVjdGlvbk9mZnNldEtleUZvck5vZGUiLCJmaW5kQW5jZXN0b3JPZmZzZXRLZXkiLCJub2RlIiwic2VhcmNoTm9kZSIsImRvY3VtZW50RWxlbWVudCIsImtleSIsInBhcmVudE5vZGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/findAncestorOffsetKey.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/findRangesImmutable.js":
/*!**********************************************************!*\
  !*** ./node_modules/draft-js/lib/findRangesImmutable.js ***!
  \**********************************************************/
/***/ ((module) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \n/**\n * Search through an array to find contiguous stretches of elements that\n * match a specified filter function.\n *\n * When ranges are found, execute a specified `found` function to supply\n * the values to the caller.\n */ function findRangesImmutable(haystack, areEqualFn, filterFn, foundFn) {\n    if (!haystack.size) {\n        return;\n    }\n    var cursor = 0;\n    haystack.reduce(function(value, nextValue, nextIndex) {\n        if (!areEqualFn(value, nextValue)) {\n            if (filterFn(value)) {\n                foundFn(cursor, nextIndex);\n            }\n            cursor = nextIndex;\n        }\n        return nextValue;\n    });\n    filterFn(haystack.last()) && foundFn(cursor, haystack.count());\n}\nmodule.exports = findRangesImmutable;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2ZpbmRSYW5nZXNJbW11dGFibGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFFQTs7Ozs7O0NBTUMsR0FDRCxTQUFTQSxvQkFBb0JDLFFBQVEsRUFBRUMsVUFBVSxFQUFFQyxRQUFRLEVBQUVDLE9BQU87SUFDbEUsSUFBSSxDQUFDSCxTQUFTSSxJQUFJLEVBQUU7UUFDbEI7SUFDRjtJQUVBLElBQUlDLFNBQVM7SUFDYkwsU0FBU00sTUFBTSxDQUFDLFNBQVVDLEtBQUssRUFBRUMsU0FBUyxFQUFFQyxTQUFTO1FBQ25ELElBQUksQ0FBQ1IsV0FBV00sT0FBT0MsWUFBWTtZQUNqQyxJQUFJTixTQUFTSyxRQUFRO2dCQUNuQkosUUFBUUUsUUFBUUk7WUFDbEI7WUFFQUosU0FBU0k7UUFDWDtRQUVBLE9BQU9EO0lBQ1Q7SUFDQU4sU0FBU0YsU0FBU1UsSUFBSSxPQUFPUCxRQUFRRSxRQUFRTCxTQUFTVyxLQUFLO0FBQzdEO0FBRUFDLE9BQU9DLE9BQU8sR0FBR2QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWVsLWhhcnZlc3Rlci8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZmluZFJhbmdlc0ltbXV0YWJsZS5qcz8xOTI5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2VhcmNoIHRocm91Z2ggYW4gYXJyYXkgdG8gZmluZCBjb250aWd1b3VzIHN0cmV0Y2hlcyBvZiBlbGVtZW50cyB0aGF0XG4gKiBtYXRjaCBhIHNwZWNpZmllZCBmaWx0ZXIgZnVuY3Rpb24uXG4gKlxuICogV2hlbiByYW5nZXMgYXJlIGZvdW5kLCBleGVjdXRlIGEgc3BlY2lmaWVkIGBmb3VuZGAgZnVuY3Rpb24gdG8gc3VwcGx5XG4gKiB0aGUgdmFsdWVzIHRvIHRoZSBjYWxsZXIuXG4gKi9cbmZ1bmN0aW9uIGZpbmRSYW5nZXNJbW11dGFibGUoaGF5c3RhY2ssIGFyZUVxdWFsRm4sIGZpbHRlckZuLCBmb3VuZEZuKSB7XG4gIGlmICghaGF5c3RhY2suc2l6ZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBjdXJzb3IgPSAwO1xuICBoYXlzdGFjay5yZWR1Y2UoZnVuY3Rpb24gKHZhbHVlLCBuZXh0VmFsdWUsIG5leHRJbmRleCkge1xuICAgIGlmICghYXJlRXF1YWxGbih2YWx1ZSwgbmV4dFZhbHVlKSkge1xuICAgICAgaWYgKGZpbHRlckZuKHZhbHVlKSkge1xuICAgICAgICBmb3VuZEZuKGN1cnNvciwgbmV4dEluZGV4KTtcbiAgICAgIH1cblxuICAgICAgY3Vyc29yID0gbmV4dEluZGV4O1xuICAgIH1cblxuICAgIHJldHVybiBuZXh0VmFsdWU7XG4gIH0pO1xuICBmaWx0ZXJGbihoYXlzdGFjay5sYXN0KCkpICYmIGZvdW5kRm4oY3Vyc29yLCBoYXlzdGFjay5jb3VudCgpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmaW5kUmFuZ2VzSW1tdXRhYmxlOyJdLCJuYW1lcyI6WyJmaW5kUmFuZ2VzSW1tdXRhYmxlIiwiaGF5c3RhY2siLCJhcmVFcXVhbEZuIiwiZmlsdGVyRm4iLCJmb3VuZEZuIiwic2l6ZSIsImN1cnNvciIsInJlZHVjZSIsInZhbHVlIiwibmV4dFZhbHVlIiwibmV4dEluZGV4IiwibGFzdCIsImNvdW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/findRangesImmutable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/generateRandomKey.js":
/*!********************************************************!*\
  !*** ./node_modules/draft-js/lib/generateRandomKey.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar seenKeys = {};\nvar MULTIPLIER = Math.pow(2, 24);\nfunction generateRandomKey() {\n    var key;\n    while(key === undefined || seenKeys.hasOwnProperty(key) || !isNaN(+key)){\n        key = Math.floor(Math.random() * MULTIPLIER).toString(32);\n    }\n    seenKeys[key] = true;\n    return key;\n}\nmodule.exports = generateRandomKey;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dlbmVyYXRlUmFuZG9tS2V5LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsV0FBVyxDQUFDO0FBQ2hCLElBQUlDLGFBQWFDLEtBQUtDLEdBQUcsQ0FBQyxHQUFHO0FBRTdCLFNBQVNDO0lBQ1AsSUFBSUM7SUFFSixNQUFPQSxRQUFRQyxhQUFhTixTQUFTTyxjQUFjLENBQUNGLFFBQVEsQ0FBQ0csTUFBTSxDQUFDSCxLQUFNO1FBQ3hFQSxNQUFNSCxLQUFLTyxLQUFLLENBQUNQLEtBQUtRLE1BQU0sS0FBS1QsWUFBWVUsUUFBUSxDQUFDO0lBQ3hEO0lBRUFYLFFBQVEsQ0FBQ0ssSUFBSSxHQUFHO0lBQ2hCLE9BQU9BO0FBQ1Q7QUFFQU8sT0FBT0MsT0FBTyxHQUFHVCIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9nZW5lcmF0ZVJhbmRvbUtleS5qcz84NTFmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBzZWVuS2V5cyA9IHt9O1xudmFyIE1VTFRJUExJRVIgPSBNYXRoLnBvdygyLCAyNCk7XG5cbmZ1bmN0aW9uIGdlbmVyYXRlUmFuZG9tS2V5KCkge1xuICB2YXIga2V5O1xuXG4gIHdoaWxlIChrZXkgPT09IHVuZGVmaW5lZCB8fCBzZWVuS2V5cy5oYXNPd25Qcm9wZXJ0eShrZXkpIHx8ICFpc05hTigra2V5KSkge1xuICAgIGtleSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIE1VTFRJUExJRVIpLnRvU3RyaW5nKDMyKTtcbiAgfVxuXG4gIHNlZW5LZXlzW2tleV0gPSB0cnVlO1xuICByZXR1cm4ga2V5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdlbmVyYXRlUmFuZG9tS2V5OyJdLCJuYW1lcyI6WyJzZWVuS2V5cyIsIk1VTFRJUExJRVIiLCJNYXRoIiwicG93IiwiZ2VuZXJhdGVSYW5kb21LZXkiLCJrZXkiLCJ1bmRlZmluZWQiLCJoYXNPd25Qcm9wZXJ0eSIsImlzTmFOIiwiZmxvb3IiLCJyYW5kb20iLCJ0b1N0cmluZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/generateRandomKey.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getCharacterRemovalRange.js":
/*!***************************************************************!*\
  !*** ./node_modules/draft-js/lib/getCharacterRemovalRange.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DraftEntitySegments = __webpack_require__(/*! ./DraftEntitySegments */ \"(ssr)/./node_modules/draft-js/lib/DraftEntitySegments.js\");\nvar getRangesForDraftEntity = __webpack_require__(/*! ./getRangesForDraftEntity */ \"(ssr)/./node_modules/draft-js/lib/getRangesForDraftEntity.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\n/**\n * Given a SelectionState and a removal direction, determine the entire range\n * that should be removed from a ContentState. This is based on any entities\n * within the target, with their `mutability` values taken into account.\n *\n * For instance, if we are attempting to remove part of an \"immutable\" entity\n * range, the entire entity must be removed. The returned `SelectionState`\n * will be adjusted accordingly.\n */ function getCharacterRemovalRange(entityMap, startBlock, endBlock, selectionState, direction) {\n    var start = selectionState.getStartOffset();\n    var end = selectionState.getEndOffset();\n    var startEntityKey = startBlock.getEntityAt(start);\n    var endEntityKey = endBlock.getEntityAt(end - 1);\n    if (!startEntityKey && !endEntityKey) {\n        return selectionState;\n    }\n    var newSelectionState = selectionState;\n    if (startEntityKey && startEntityKey === endEntityKey) {\n        newSelectionState = getEntityRemovalRange(entityMap, startBlock, newSelectionState, direction, startEntityKey, true, true);\n    } else if (startEntityKey && endEntityKey) {\n        var startSelectionState = getEntityRemovalRange(entityMap, startBlock, newSelectionState, direction, startEntityKey, false, true);\n        var endSelectionState = getEntityRemovalRange(entityMap, endBlock, newSelectionState, direction, endEntityKey, false, false);\n        newSelectionState = newSelectionState.merge({\n            anchorOffset: startSelectionState.getAnchorOffset(),\n            focusOffset: endSelectionState.getFocusOffset(),\n            isBackward: false\n        });\n    } else if (startEntityKey) {\n        var _startSelectionState = getEntityRemovalRange(entityMap, startBlock, newSelectionState, direction, startEntityKey, false, true);\n        newSelectionState = newSelectionState.merge({\n            anchorOffset: _startSelectionState.getStartOffset(),\n            isBackward: false\n        });\n    } else if (endEntityKey) {\n        var _endSelectionState = getEntityRemovalRange(entityMap, endBlock, newSelectionState, direction, endEntityKey, false, false);\n        newSelectionState = newSelectionState.merge({\n            focusOffset: _endSelectionState.getEndOffset(),\n            isBackward: false\n        });\n    }\n    return newSelectionState;\n}\nfunction getEntityRemovalRange(entityMap, block, selectionState, direction, entityKey, isEntireSelectionWithinEntity, isEntityAtStart) {\n    var start = selectionState.getStartOffset();\n    var end = selectionState.getEndOffset();\n    var entity = entityMap.__get(entityKey);\n    var mutability = entity.getMutability();\n    var sideToConsider = isEntityAtStart ? start : end; // `MUTABLE` entities can just have the specified range of text removed\n    // directly. No adjustments are needed.\n    if (mutability === \"MUTABLE\") {\n        return selectionState;\n    } // Find the entity range that overlaps with our removal range.\n    var entityRanges = getRangesForDraftEntity(block, entityKey).filter(function(range) {\n        return sideToConsider <= range.end && sideToConsider >= range.start;\n    });\n    !(entityRanges.length == 1) ?  true ? invariant(false, \"There should only be one entity range within this removal range.\") : 0 : void 0;\n    var entityRange = entityRanges[0]; // For `IMMUTABLE` entity types, we will remove the entire entity range.\n    if (mutability === \"IMMUTABLE\") {\n        return selectionState.merge({\n            anchorOffset: entityRange.start,\n            focusOffset: entityRange.end,\n            isBackward: false\n        });\n    } // For `SEGMENTED` entity types, determine the appropriate segment to\n    // remove.\n    if (!isEntireSelectionWithinEntity) {\n        if (isEntityAtStart) {\n            end = entityRange.end;\n        } else {\n            start = entityRange.start;\n        }\n    }\n    var removalRange = DraftEntitySegments.getRemovalRange(start, end, block.getText().slice(entityRange.start, entityRange.end), entityRange.start, direction);\n    return selectionState.merge({\n        anchorOffset: removalRange.start,\n        focusOffset: removalRange.end,\n        isBackward: false\n    });\n}\nmodule.exports = getCharacterRemovalRange;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldENoYXJhY3RlclJlbW92YWxSYW5nZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLElBQUlBLHNCQUFzQkMsbUJBQU9BLENBQUMsdUZBQXVCO0FBRXpELElBQUlDLDBCQUEwQkQsbUJBQU9BLENBQUMsK0ZBQTJCO0FBRWpFLElBQUlFLFlBQVlGLG1CQUFPQSxDQUFDLHNFQUFvQjtBQUM1Qzs7Ozs7Ozs7Q0FRQyxHQUdELFNBQVNHLHlCQUF5QkMsU0FBUyxFQUFFQyxVQUFVLEVBQUVDLFFBQVEsRUFBRUMsY0FBYyxFQUFFQyxTQUFTO0lBQzFGLElBQUlDLFFBQVFGLGVBQWVHLGNBQWM7SUFDekMsSUFBSUMsTUFBTUosZUFBZUssWUFBWTtJQUNyQyxJQUFJQyxpQkFBaUJSLFdBQVdTLFdBQVcsQ0FBQ0w7SUFDNUMsSUFBSU0sZUFBZVQsU0FBU1EsV0FBVyxDQUFDSCxNQUFNO0lBRTlDLElBQUksQ0FBQ0Usa0JBQWtCLENBQUNFLGNBQWM7UUFDcEMsT0FBT1I7SUFDVDtJQUVBLElBQUlTLG9CQUFvQlQ7SUFFeEIsSUFBSU0sa0JBQWtCQSxtQkFBbUJFLGNBQWM7UUFDckRDLG9CQUFvQkMsc0JBQXNCYixXQUFXQyxZQUFZVyxtQkFBbUJSLFdBQVdLLGdCQUFnQixNQUFNO0lBQ3ZILE9BQU8sSUFBSUEsa0JBQWtCRSxjQUFjO1FBQ3pDLElBQUlHLHNCQUFzQkQsc0JBQXNCYixXQUFXQyxZQUFZVyxtQkFBbUJSLFdBQVdLLGdCQUFnQixPQUFPO1FBQzVILElBQUlNLG9CQUFvQkYsc0JBQXNCYixXQUFXRSxVQUFVVSxtQkFBbUJSLFdBQVdPLGNBQWMsT0FBTztRQUN0SEMsb0JBQW9CQSxrQkFBa0JJLEtBQUssQ0FBQztZQUMxQ0MsY0FBY0gsb0JBQW9CSSxlQUFlO1lBQ2pEQyxhQUFhSixrQkFBa0JLLGNBQWM7WUFDN0NDLFlBQVk7UUFDZDtJQUNGLE9BQU8sSUFBSVosZ0JBQWdCO1FBQ3pCLElBQUlhLHVCQUF1QlQsc0JBQXNCYixXQUFXQyxZQUFZVyxtQkFBbUJSLFdBQVdLLGdCQUFnQixPQUFPO1FBRTdIRyxvQkFBb0JBLGtCQUFrQkksS0FBSyxDQUFDO1lBQzFDQyxjQUFjSyxxQkFBcUJoQixjQUFjO1lBQ2pEZSxZQUFZO1FBQ2Q7SUFDRixPQUFPLElBQUlWLGNBQWM7UUFDdkIsSUFBSVkscUJBQXFCVixzQkFBc0JiLFdBQVdFLFVBQVVVLG1CQUFtQlIsV0FBV08sY0FBYyxPQUFPO1FBRXZIQyxvQkFBb0JBLGtCQUFrQkksS0FBSyxDQUFDO1lBQzFDRyxhQUFhSSxtQkFBbUJmLFlBQVk7WUFDNUNhLFlBQVk7UUFDZDtJQUNGO0lBRUEsT0FBT1Q7QUFDVDtBQUVBLFNBQVNDLHNCQUFzQmIsU0FBUyxFQUFFd0IsS0FBSyxFQUFFckIsY0FBYyxFQUFFQyxTQUFTLEVBQUVxQixTQUFTLEVBQUVDLDZCQUE2QixFQUFFQyxlQUFlO0lBQ25JLElBQUl0QixRQUFRRixlQUFlRyxjQUFjO0lBQ3pDLElBQUlDLE1BQU1KLGVBQWVLLFlBQVk7SUFFckMsSUFBSW9CLFNBQVM1QixVQUFVNkIsS0FBSyxDQUFDSjtJQUU3QixJQUFJSyxhQUFhRixPQUFPRyxhQUFhO0lBQ3JDLElBQUlDLGlCQUFpQkwsa0JBQWtCdEIsUUFBUUUsS0FBSyx1RUFBdUU7SUFDM0gsdUNBQXVDO0lBRXZDLElBQUl1QixlQUFlLFdBQVc7UUFDNUIsT0FBTzNCO0lBQ1QsRUFBRSw4REFBOEQ7SUFHaEUsSUFBSThCLGVBQWVwQyx3QkFBd0IyQixPQUFPQyxXQUFXUyxNQUFNLENBQUMsU0FBVUMsS0FBSztRQUNqRixPQUFPSCxrQkFBa0JHLE1BQU01QixHQUFHLElBQUl5QixrQkFBa0JHLE1BQU05QixLQUFLO0lBQ3JFO0lBQ0EsQ0FBRTRCLENBQUFBLGFBQWFHLE1BQU0sSUFBSSxLQUFLQyxLQUFxQyxHQUFHdkMsVUFBVSxPQUFPLHNFQUFzRUEsQ0FBZ0IsR0FBRyxLQUFLO0lBQ3JMLElBQUl3QyxjQUFjTCxZQUFZLENBQUMsRUFBRSxFQUFFLHdFQUF3RTtJQUUzRyxJQUFJSCxlQUFlLGFBQWE7UUFDOUIsT0FBTzNCLGVBQWVhLEtBQUssQ0FBQztZQUMxQkMsY0FBY3FCLFlBQVlqQyxLQUFLO1lBQy9CYyxhQUFhbUIsWUFBWS9CLEdBQUc7WUFDNUJjLFlBQVk7UUFDZDtJQUNGLEVBQUUscUVBQXFFO0lBQ3ZFLFVBQVU7SUFHVixJQUFJLENBQUNLLCtCQUErQjtRQUNsQyxJQUFJQyxpQkFBaUI7WUFDbkJwQixNQUFNK0IsWUFBWS9CLEdBQUc7UUFDdkIsT0FBTztZQUNMRixRQUFRaUMsWUFBWWpDLEtBQUs7UUFDM0I7SUFDRjtJQUVBLElBQUlrQyxlQUFlNUMsb0JBQW9CNkMsZUFBZSxDQUFDbkMsT0FBT0UsS0FBS2lCLE1BQU1pQixPQUFPLEdBQUdDLEtBQUssQ0FBQ0osWUFBWWpDLEtBQUssRUFBRWlDLFlBQVkvQixHQUFHLEdBQUcrQixZQUFZakMsS0FBSyxFQUFFRDtJQUNqSixPQUFPRCxlQUFlYSxLQUFLLENBQUM7UUFDMUJDLGNBQWNzQixhQUFhbEMsS0FBSztRQUNoQ2MsYUFBYW9CLGFBQWFoQyxHQUFHO1FBQzdCYyxZQUFZO0lBQ2Q7QUFDRjtBQUVBc0IsT0FBT0MsT0FBTyxHQUFHN0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWVsLWhhcnZlc3Rlci8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZ2V0Q2hhcmFjdGVyUmVtb3ZhbFJhbmdlLmpzP2Y5NDkiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIERyYWZ0RW50aXR5U2VnbWVudHMgPSByZXF1aXJlKFwiLi9EcmFmdEVudGl0eVNlZ21lbnRzXCIpO1xuXG52YXIgZ2V0UmFuZ2VzRm9yRHJhZnRFbnRpdHkgPSByZXF1aXJlKFwiLi9nZXRSYW5nZXNGb3JEcmFmdEVudGl0eVwiKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCJmYmpzL2xpYi9pbnZhcmlhbnRcIik7XG4vKipcbiAqIEdpdmVuIGEgU2VsZWN0aW9uU3RhdGUgYW5kIGEgcmVtb3ZhbCBkaXJlY3Rpb24sIGRldGVybWluZSB0aGUgZW50aXJlIHJhbmdlXG4gKiB0aGF0IHNob3VsZCBiZSByZW1vdmVkIGZyb20gYSBDb250ZW50U3RhdGUuIFRoaXMgaXMgYmFzZWQgb24gYW55IGVudGl0aWVzXG4gKiB3aXRoaW4gdGhlIHRhcmdldCwgd2l0aCB0aGVpciBgbXV0YWJpbGl0eWAgdmFsdWVzIHRha2VuIGludG8gYWNjb3VudC5cbiAqXG4gKiBGb3IgaW5zdGFuY2UsIGlmIHdlIGFyZSBhdHRlbXB0aW5nIHRvIHJlbW92ZSBwYXJ0IG9mIGFuIFwiaW1tdXRhYmxlXCIgZW50aXR5XG4gKiByYW5nZSwgdGhlIGVudGlyZSBlbnRpdHkgbXVzdCBiZSByZW1vdmVkLiBUaGUgcmV0dXJuZWQgYFNlbGVjdGlvblN0YXRlYFxuICogd2lsbCBiZSBhZGp1c3RlZCBhY2NvcmRpbmdseS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldENoYXJhY3RlclJlbW92YWxSYW5nZShlbnRpdHlNYXAsIHN0YXJ0QmxvY2ssIGVuZEJsb2NrLCBzZWxlY3Rpb25TdGF0ZSwgZGlyZWN0aW9uKSB7XG4gIHZhciBzdGFydCA9IHNlbGVjdGlvblN0YXRlLmdldFN0YXJ0T2Zmc2V0KCk7XG4gIHZhciBlbmQgPSBzZWxlY3Rpb25TdGF0ZS5nZXRFbmRPZmZzZXQoKTtcbiAgdmFyIHN0YXJ0RW50aXR5S2V5ID0gc3RhcnRCbG9jay5nZXRFbnRpdHlBdChzdGFydCk7XG4gIHZhciBlbmRFbnRpdHlLZXkgPSBlbmRCbG9jay5nZXRFbnRpdHlBdChlbmQgLSAxKTtcblxuICBpZiAoIXN0YXJ0RW50aXR5S2V5ICYmICFlbmRFbnRpdHlLZXkpIHtcbiAgICByZXR1cm4gc2VsZWN0aW9uU3RhdGU7XG4gIH1cblxuICB2YXIgbmV3U2VsZWN0aW9uU3RhdGUgPSBzZWxlY3Rpb25TdGF0ZTtcblxuICBpZiAoc3RhcnRFbnRpdHlLZXkgJiYgc3RhcnRFbnRpdHlLZXkgPT09IGVuZEVudGl0eUtleSkge1xuICAgIG5ld1NlbGVjdGlvblN0YXRlID0gZ2V0RW50aXR5UmVtb3ZhbFJhbmdlKGVudGl0eU1hcCwgc3RhcnRCbG9jaywgbmV3U2VsZWN0aW9uU3RhdGUsIGRpcmVjdGlvbiwgc3RhcnRFbnRpdHlLZXksIHRydWUsIHRydWUpO1xuICB9IGVsc2UgaWYgKHN0YXJ0RW50aXR5S2V5ICYmIGVuZEVudGl0eUtleSkge1xuICAgIHZhciBzdGFydFNlbGVjdGlvblN0YXRlID0gZ2V0RW50aXR5UmVtb3ZhbFJhbmdlKGVudGl0eU1hcCwgc3RhcnRCbG9jaywgbmV3U2VsZWN0aW9uU3RhdGUsIGRpcmVjdGlvbiwgc3RhcnRFbnRpdHlLZXksIGZhbHNlLCB0cnVlKTtcbiAgICB2YXIgZW5kU2VsZWN0aW9uU3RhdGUgPSBnZXRFbnRpdHlSZW1vdmFsUmFuZ2UoZW50aXR5TWFwLCBlbmRCbG9jaywgbmV3U2VsZWN0aW9uU3RhdGUsIGRpcmVjdGlvbiwgZW5kRW50aXR5S2V5LCBmYWxzZSwgZmFsc2UpO1xuICAgIG5ld1NlbGVjdGlvblN0YXRlID0gbmV3U2VsZWN0aW9uU3RhdGUubWVyZ2Uoe1xuICAgICAgYW5jaG9yT2Zmc2V0OiBzdGFydFNlbGVjdGlvblN0YXRlLmdldEFuY2hvck9mZnNldCgpLFxuICAgICAgZm9jdXNPZmZzZXQ6IGVuZFNlbGVjdGlvblN0YXRlLmdldEZvY3VzT2Zmc2V0KCksXG4gICAgICBpc0JhY2t3YXJkOiBmYWxzZVxuICAgIH0pO1xuICB9IGVsc2UgaWYgKHN0YXJ0RW50aXR5S2V5KSB7XG4gICAgdmFyIF9zdGFydFNlbGVjdGlvblN0YXRlID0gZ2V0RW50aXR5UmVtb3ZhbFJhbmdlKGVudGl0eU1hcCwgc3RhcnRCbG9jaywgbmV3U2VsZWN0aW9uU3RhdGUsIGRpcmVjdGlvbiwgc3RhcnRFbnRpdHlLZXksIGZhbHNlLCB0cnVlKTtcblxuICAgIG5ld1NlbGVjdGlvblN0YXRlID0gbmV3U2VsZWN0aW9uU3RhdGUubWVyZ2Uoe1xuICAgICAgYW5jaG9yT2Zmc2V0OiBfc3RhcnRTZWxlY3Rpb25TdGF0ZS5nZXRTdGFydE9mZnNldCgpLFxuICAgICAgaXNCYWNrd2FyZDogZmFsc2VcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChlbmRFbnRpdHlLZXkpIHtcbiAgICB2YXIgX2VuZFNlbGVjdGlvblN0YXRlID0gZ2V0RW50aXR5UmVtb3ZhbFJhbmdlKGVudGl0eU1hcCwgZW5kQmxvY2ssIG5ld1NlbGVjdGlvblN0YXRlLCBkaXJlY3Rpb24sIGVuZEVudGl0eUtleSwgZmFsc2UsIGZhbHNlKTtcblxuICAgIG5ld1NlbGVjdGlvblN0YXRlID0gbmV3U2VsZWN0aW9uU3RhdGUubWVyZ2Uoe1xuICAgICAgZm9jdXNPZmZzZXQ6IF9lbmRTZWxlY3Rpb25TdGF0ZS5nZXRFbmRPZmZzZXQoKSxcbiAgICAgIGlzQmFja3dhcmQ6IGZhbHNlXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gbmV3U2VsZWN0aW9uU3RhdGU7XG59XG5cbmZ1bmN0aW9uIGdldEVudGl0eVJlbW92YWxSYW5nZShlbnRpdHlNYXAsIGJsb2NrLCBzZWxlY3Rpb25TdGF0ZSwgZGlyZWN0aW9uLCBlbnRpdHlLZXksIGlzRW50aXJlU2VsZWN0aW9uV2l0aGluRW50aXR5LCBpc0VudGl0eUF0U3RhcnQpIHtcbiAgdmFyIHN0YXJ0ID0gc2VsZWN0aW9uU3RhdGUuZ2V0U3RhcnRPZmZzZXQoKTtcbiAgdmFyIGVuZCA9IHNlbGVjdGlvblN0YXRlLmdldEVuZE9mZnNldCgpO1xuXG4gIHZhciBlbnRpdHkgPSBlbnRpdHlNYXAuX19nZXQoZW50aXR5S2V5KTtcblxuICB2YXIgbXV0YWJpbGl0eSA9IGVudGl0eS5nZXRNdXRhYmlsaXR5KCk7XG4gIHZhciBzaWRlVG9Db25zaWRlciA9IGlzRW50aXR5QXRTdGFydCA/IHN0YXJ0IDogZW5kOyAvLyBgTVVUQUJMRWAgZW50aXRpZXMgY2FuIGp1c3QgaGF2ZSB0aGUgc3BlY2lmaWVkIHJhbmdlIG9mIHRleHQgcmVtb3ZlZFxuICAvLyBkaXJlY3RseS4gTm8gYWRqdXN0bWVudHMgYXJlIG5lZWRlZC5cblxuICBpZiAobXV0YWJpbGl0eSA9PT0gJ01VVEFCTEUnKSB7XG4gICAgcmV0dXJuIHNlbGVjdGlvblN0YXRlO1xuICB9IC8vIEZpbmQgdGhlIGVudGl0eSByYW5nZSB0aGF0IG92ZXJsYXBzIHdpdGggb3VyIHJlbW92YWwgcmFuZ2UuXG5cblxuICB2YXIgZW50aXR5UmFuZ2VzID0gZ2V0UmFuZ2VzRm9yRHJhZnRFbnRpdHkoYmxvY2ssIGVudGl0eUtleSkuZmlsdGVyKGZ1bmN0aW9uIChyYW5nZSkge1xuICAgIHJldHVybiBzaWRlVG9Db25zaWRlciA8PSByYW5nZS5lbmQgJiYgc2lkZVRvQ29uc2lkZXIgPj0gcmFuZ2Uuc3RhcnQ7XG4gIH0pO1xuICAhKGVudGl0eVJhbmdlcy5sZW5ndGggPT0gMSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdUaGVyZSBzaG91bGQgb25seSBiZSBvbmUgZW50aXR5IHJhbmdlIHdpdGhpbiB0aGlzIHJlbW92YWwgcmFuZ2UuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZW50aXR5UmFuZ2UgPSBlbnRpdHlSYW5nZXNbMF07IC8vIEZvciBgSU1NVVRBQkxFYCBlbnRpdHkgdHlwZXMsIHdlIHdpbGwgcmVtb3ZlIHRoZSBlbnRpcmUgZW50aXR5IHJhbmdlLlxuXG4gIGlmIChtdXRhYmlsaXR5ID09PSAnSU1NVVRBQkxFJykge1xuICAgIHJldHVybiBzZWxlY3Rpb25TdGF0ZS5tZXJnZSh7XG4gICAgICBhbmNob3JPZmZzZXQ6IGVudGl0eVJhbmdlLnN0YXJ0LFxuICAgICAgZm9jdXNPZmZzZXQ6IGVudGl0eVJhbmdlLmVuZCxcbiAgICAgIGlzQmFja3dhcmQ6IGZhbHNlXG4gICAgfSk7XG4gIH0gLy8gRm9yIGBTRUdNRU5URURgIGVudGl0eSB0eXBlcywgZGV0ZXJtaW5lIHRoZSBhcHByb3ByaWF0ZSBzZWdtZW50IHRvXG4gIC8vIHJlbW92ZS5cblxuXG4gIGlmICghaXNFbnRpcmVTZWxlY3Rpb25XaXRoaW5FbnRpdHkpIHtcbiAgICBpZiAoaXNFbnRpdHlBdFN0YXJ0KSB7XG4gICAgICBlbmQgPSBlbnRpdHlSYW5nZS5lbmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXJ0ID0gZW50aXR5UmFuZ2Uuc3RhcnQ7XG4gICAgfVxuICB9XG5cbiAgdmFyIHJlbW92YWxSYW5nZSA9IERyYWZ0RW50aXR5U2VnbWVudHMuZ2V0UmVtb3ZhbFJhbmdlKHN0YXJ0LCBlbmQsIGJsb2NrLmdldFRleHQoKS5zbGljZShlbnRpdHlSYW5nZS5zdGFydCwgZW50aXR5UmFuZ2UuZW5kKSwgZW50aXR5UmFuZ2Uuc3RhcnQsIGRpcmVjdGlvbik7XG4gIHJldHVybiBzZWxlY3Rpb25TdGF0ZS5tZXJnZSh7XG4gICAgYW5jaG9yT2Zmc2V0OiByZW1vdmFsUmFuZ2Uuc3RhcnQsXG4gICAgZm9jdXNPZmZzZXQ6IHJlbW92YWxSYW5nZS5lbmQsXG4gICAgaXNCYWNrd2FyZDogZmFsc2VcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0Q2hhcmFjdGVyUmVtb3ZhbFJhbmdlOyJdLCJuYW1lcyI6WyJEcmFmdEVudGl0eVNlZ21lbnRzIiwicmVxdWlyZSIsImdldFJhbmdlc0ZvckRyYWZ0RW50aXR5IiwiaW52YXJpYW50IiwiZ2V0Q2hhcmFjdGVyUmVtb3ZhbFJhbmdlIiwiZW50aXR5TWFwIiwic3RhcnRCbG9jayIsImVuZEJsb2NrIiwic2VsZWN0aW9uU3RhdGUiLCJkaXJlY3Rpb24iLCJzdGFydCIsImdldFN0YXJ0T2Zmc2V0IiwiZW5kIiwiZ2V0RW5kT2Zmc2V0Iiwic3RhcnRFbnRpdHlLZXkiLCJnZXRFbnRpdHlBdCIsImVuZEVudGl0eUtleSIsIm5ld1NlbGVjdGlvblN0YXRlIiwiZ2V0RW50aXR5UmVtb3ZhbFJhbmdlIiwic3RhcnRTZWxlY3Rpb25TdGF0ZSIsImVuZFNlbGVjdGlvblN0YXRlIiwibWVyZ2UiLCJhbmNob3JPZmZzZXQiLCJnZXRBbmNob3JPZmZzZXQiLCJmb2N1c09mZnNldCIsImdldEZvY3VzT2Zmc2V0IiwiaXNCYWNrd2FyZCIsIl9zdGFydFNlbGVjdGlvblN0YXRlIiwiX2VuZFNlbGVjdGlvblN0YXRlIiwiYmxvY2siLCJlbnRpdHlLZXkiLCJpc0VudGlyZVNlbGVjdGlvbldpdGhpbkVudGl0eSIsImlzRW50aXR5QXRTdGFydCIsImVudGl0eSIsIl9fZ2V0IiwibXV0YWJpbGl0eSIsImdldE11dGFiaWxpdHkiLCJzaWRlVG9Db25zaWRlciIsImVudGl0eVJhbmdlcyIsImZpbHRlciIsInJhbmdlIiwibGVuZ3RoIiwicHJvY2VzcyIsImVudGl0eVJhbmdlIiwicmVtb3ZhbFJhbmdlIiwiZ2V0UmVtb3ZhbFJhbmdlIiwiZ2V0VGV4dCIsInNsaWNlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getCharacterRemovalRange.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getContentEditableContainer.js":
/*!******************************************************************!*\
  !*** ./node_modules/draft-js/lib/getContentEditableContainer.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar isHTMLElement = __webpack_require__(/*! ./isHTMLElement */ \"(ssr)/./node_modules/draft-js/lib/isHTMLElement.js\");\nfunction getContentEditableContainer(editor) {\n    var editorNode = editor.editorContainer;\n    !editorNode ?  true ? invariant(false, \"Missing editorNode\") : 0 : void 0;\n    !isHTMLElement(editorNode.firstChild) ?  true ? invariant(false, \"editorNode.firstChild is not an HTMLElement\") : 0 : void 0;\n    var htmlElement = editorNode.firstChild;\n    return htmlElement;\n}\nmodule.exports = getContentEditableContainer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldENvbnRlbnRFZGl0YWJsZUNvbnRhaW5lci5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLElBQUlBLFlBQVlDLG1CQUFPQSxDQUFDLHNFQUFvQjtBQUU1QyxJQUFJQyxnQkFBZ0JELG1CQUFPQSxDQUFDLDJFQUFpQjtBQUU3QyxTQUFTRSw0QkFBNEJDLE1BQU07SUFDekMsSUFBSUMsYUFBYUQsT0FBT0UsZUFBZTtJQUN2QyxDQUFDRCxhQUFhRSxLQUFxQyxHQUFHUCxVQUFVLE9BQU8sd0JBQXdCQSxDQUFnQixHQUFHLEtBQUs7SUFDdkgsQ0FBQ0UsY0FBY0csV0FBV0csVUFBVSxJQUFJRCxLQUFxQyxHQUFHUCxVQUFVLE9BQU8saURBQWlEQSxDQUFnQixHQUFHLEtBQUs7SUFDMUssSUFBSVMsY0FBY0osV0FBV0csVUFBVTtJQUN2QyxPQUFPQztBQUNUO0FBRUFDLE9BQU9DLE9BQU8sR0FBR1IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWVsLWhhcnZlc3Rlci8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZ2V0Q29udGVudEVkaXRhYmxlQ29udGFpbmVyLmpzPzUzMWEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoXCJmYmpzL2xpYi9pbnZhcmlhbnRcIik7XG5cbnZhciBpc0hUTUxFbGVtZW50ID0gcmVxdWlyZShcIi4vaXNIVE1MRWxlbWVudFwiKTtcblxuZnVuY3Rpb24gZ2V0Q29udGVudEVkaXRhYmxlQ29udGFpbmVyKGVkaXRvcikge1xuICB2YXIgZWRpdG9yTm9kZSA9IGVkaXRvci5lZGl0b3JDb250YWluZXI7XG4gICFlZGl0b3JOb2RlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnTWlzc2luZyBlZGl0b3JOb2RlJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAhaXNIVE1MRWxlbWVudChlZGl0b3JOb2RlLmZpcnN0Q2hpbGQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnZWRpdG9yTm9kZS5maXJzdENoaWxkIGlzIG5vdCBhbiBIVE1MRWxlbWVudCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGh0bWxFbGVtZW50ID0gZWRpdG9yTm9kZS5maXJzdENoaWxkO1xuICByZXR1cm4gaHRtbEVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0Q29udGVudEVkaXRhYmxlQ29udGFpbmVyOyJdLCJuYW1lcyI6WyJpbnZhcmlhbnQiLCJyZXF1aXJlIiwiaXNIVE1MRWxlbWVudCIsImdldENvbnRlbnRFZGl0YWJsZUNvbnRhaW5lciIsImVkaXRvciIsImVkaXRvck5vZGUiLCJlZGl0b3JDb250YWluZXIiLCJwcm9jZXNzIiwiZmlyc3RDaGlsZCIsImh0bWxFbGVtZW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getContentEditableContainer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getContentStateFragment.js":
/*!**************************************************************!*\
  !*** ./node_modules/draft-js/lib/getContentStateFragment.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar randomizeBlockMapKeys = __webpack_require__(/*! ./randomizeBlockMapKeys */ \"(ssr)/./node_modules/draft-js/lib/randomizeBlockMapKeys.js\");\nvar removeEntitiesAtEdges = __webpack_require__(/*! ./removeEntitiesAtEdges */ \"(ssr)/./node_modules/draft-js/lib/removeEntitiesAtEdges.js\");\nvar getContentStateFragment = function getContentStateFragment(contentState, selectionState) {\n    var startKey = selectionState.getStartKey();\n    var startOffset = selectionState.getStartOffset();\n    var endKey = selectionState.getEndKey();\n    var endOffset = selectionState.getEndOffset(); // Edge entities should be stripped to ensure that we don't preserve\n    // invalid partial entities when the fragment is reused. We do, however,\n    // preserve entities that are entirely within the selection range.\n    var contentWithoutEdgeEntities = removeEntitiesAtEdges(contentState, selectionState);\n    var blockMap = contentWithoutEdgeEntities.getBlockMap();\n    var blockKeys = blockMap.keySeq();\n    var startIndex = blockKeys.indexOf(startKey);\n    var endIndex = blockKeys.indexOf(endKey) + 1;\n    return randomizeBlockMapKeys(blockMap.slice(startIndex, endIndex).map(function(block, blockKey) {\n        var text = block.getText();\n        var chars = block.getCharacterList();\n        if (startKey === endKey) {\n            return block.merge({\n                text: text.slice(startOffset, endOffset),\n                characterList: chars.slice(startOffset, endOffset)\n            });\n        }\n        if (blockKey === startKey) {\n            return block.merge({\n                text: text.slice(startOffset),\n                characterList: chars.slice(startOffset)\n            });\n        }\n        if (blockKey === endKey) {\n            return block.merge({\n                text: text.slice(0, endOffset),\n                characterList: chars.slice(0, endOffset)\n            });\n        }\n        return block;\n    }));\n};\nmodule.exports = getContentStateFragment;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldENvbnRlbnRTdGF0ZUZyYWdtZW50LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsd0JBQXdCQyxtQkFBT0EsQ0FBQywyRkFBeUI7QUFFN0QsSUFBSUMsd0JBQXdCRCxtQkFBT0EsQ0FBQywyRkFBeUI7QUFFN0QsSUFBSUUsMEJBQTBCLFNBQVNBLHdCQUF3QkMsWUFBWSxFQUFFQyxjQUFjO0lBQ3pGLElBQUlDLFdBQVdELGVBQWVFLFdBQVc7SUFDekMsSUFBSUMsY0FBY0gsZUFBZUksY0FBYztJQUMvQyxJQUFJQyxTQUFTTCxlQUFlTSxTQUFTO0lBQ3JDLElBQUlDLFlBQVlQLGVBQWVRLFlBQVksSUFBSSxvRUFBb0U7SUFDbkgsd0VBQXdFO0lBQ3hFLGtFQUFrRTtJQUVsRSxJQUFJQyw2QkFBNkJaLHNCQUFzQkUsY0FBY0M7SUFDckUsSUFBSVUsV0FBV0QsMkJBQTJCRSxXQUFXO0lBQ3JELElBQUlDLFlBQVlGLFNBQVNHLE1BQU07SUFDL0IsSUFBSUMsYUFBYUYsVUFBVUcsT0FBTyxDQUFDZDtJQUNuQyxJQUFJZSxXQUFXSixVQUFVRyxPQUFPLENBQUNWLFVBQVU7SUFDM0MsT0FBT1Ysc0JBQXNCZSxTQUFTTyxLQUFLLENBQUNILFlBQVlFLFVBQVVFLEdBQUcsQ0FBQyxTQUFVQyxLQUFLLEVBQUVDLFFBQVE7UUFDN0YsSUFBSUMsT0FBT0YsTUFBTUcsT0FBTztRQUN4QixJQUFJQyxRQUFRSixNQUFNSyxnQkFBZ0I7UUFFbEMsSUFBSXZCLGFBQWFJLFFBQVE7WUFDdkIsT0FBT2MsTUFBTU0sS0FBSyxDQUFDO2dCQUNqQkosTUFBTUEsS0FBS0osS0FBSyxDQUFDZCxhQUFhSTtnQkFDOUJtQixlQUFlSCxNQUFNTixLQUFLLENBQUNkLGFBQWFJO1lBQzFDO1FBQ0Y7UUFFQSxJQUFJYSxhQUFhbkIsVUFBVTtZQUN6QixPQUFPa0IsTUFBTU0sS0FBSyxDQUFDO2dCQUNqQkosTUFBTUEsS0FBS0osS0FBSyxDQUFDZDtnQkFDakJ1QixlQUFlSCxNQUFNTixLQUFLLENBQUNkO1lBQzdCO1FBQ0Y7UUFFQSxJQUFJaUIsYUFBYWYsUUFBUTtZQUN2QixPQUFPYyxNQUFNTSxLQUFLLENBQUM7Z0JBQ2pCSixNQUFNQSxLQUFLSixLQUFLLENBQUMsR0FBR1Y7Z0JBQ3BCbUIsZUFBZUgsTUFBTU4sS0FBSyxDQUFDLEdBQUdWO1lBQ2hDO1FBQ0Y7UUFFQSxPQUFPWTtJQUNUO0FBQ0Y7QUFFQVEsT0FBT0MsT0FBTyxHQUFHOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWVsLWhhcnZlc3Rlci8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZ2V0Q29udGVudFN0YXRlRnJhZ21lbnQuanM/NWQ3YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmFuZG9taXplQmxvY2tNYXBLZXlzID0gcmVxdWlyZShcIi4vcmFuZG9taXplQmxvY2tNYXBLZXlzXCIpO1xuXG52YXIgcmVtb3ZlRW50aXRpZXNBdEVkZ2VzID0gcmVxdWlyZShcIi4vcmVtb3ZlRW50aXRpZXNBdEVkZ2VzXCIpO1xuXG52YXIgZ2V0Q29udGVudFN0YXRlRnJhZ21lbnQgPSBmdW5jdGlvbiBnZXRDb250ZW50U3RhdGVGcmFnbWVudChjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlKSB7XG4gIHZhciBzdGFydEtleSA9IHNlbGVjdGlvblN0YXRlLmdldFN0YXJ0S2V5KCk7XG4gIHZhciBzdGFydE9mZnNldCA9IHNlbGVjdGlvblN0YXRlLmdldFN0YXJ0T2Zmc2V0KCk7XG4gIHZhciBlbmRLZXkgPSBzZWxlY3Rpb25TdGF0ZS5nZXRFbmRLZXkoKTtcbiAgdmFyIGVuZE9mZnNldCA9IHNlbGVjdGlvblN0YXRlLmdldEVuZE9mZnNldCgpOyAvLyBFZGdlIGVudGl0aWVzIHNob3VsZCBiZSBzdHJpcHBlZCB0byBlbnN1cmUgdGhhdCB3ZSBkb24ndCBwcmVzZXJ2ZVxuICAvLyBpbnZhbGlkIHBhcnRpYWwgZW50aXRpZXMgd2hlbiB0aGUgZnJhZ21lbnQgaXMgcmV1c2VkLiBXZSBkbywgaG93ZXZlcixcbiAgLy8gcHJlc2VydmUgZW50aXRpZXMgdGhhdCBhcmUgZW50aXJlbHkgd2l0aGluIHRoZSBzZWxlY3Rpb24gcmFuZ2UuXG5cbiAgdmFyIGNvbnRlbnRXaXRob3V0RWRnZUVudGl0aWVzID0gcmVtb3ZlRW50aXRpZXNBdEVkZ2VzKGNvbnRlbnRTdGF0ZSwgc2VsZWN0aW9uU3RhdGUpO1xuICB2YXIgYmxvY2tNYXAgPSBjb250ZW50V2l0aG91dEVkZ2VFbnRpdGllcy5nZXRCbG9ja01hcCgpO1xuICB2YXIgYmxvY2tLZXlzID0gYmxvY2tNYXAua2V5U2VxKCk7XG4gIHZhciBzdGFydEluZGV4ID0gYmxvY2tLZXlzLmluZGV4T2Yoc3RhcnRLZXkpO1xuICB2YXIgZW5kSW5kZXggPSBibG9ja0tleXMuaW5kZXhPZihlbmRLZXkpICsgMTtcbiAgcmV0dXJuIHJhbmRvbWl6ZUJsb2NrTWFwS2V5cyhibG9ja01hcC5zbGljZShzdGFydEluZGV4LCBlbmRJbmRleCkubWFwKGZ1bmN0aW9uIChibG9jaywgYmxvY2tLZXkpIHtcbiAgICB2YXIgdGV4dCA9IGJsb2NrLmdldFRleHQoKTtcbiAgICB2YXIgY2hhcnMgPSBibG9jay5nZXRDaGFyYWN0ZXJMaXN0KCk7XG5cbiAgICBpZiAoc3RhcnRLZXkgPT09IGVuZEtleSkge1xuICAgICAgcmV0dXJuIGJsb2NrLm1lcmdlKHtcbiAgICAgICAgdGV4dDogdGV4dC5zbGljZShzdGFydE9mZnNldCwgZW5kT2Zmc2V0KSxcbiAgICAgICAgY2hhcmFjdGVyTGlzdDogY2hhcnMuc2xpY2Uoc3RhcnRPZmZzZXQsIGVuZE9mZnNldClcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChibG9ja0tleSA9PT0gc3RhcnRLZXkpIHtcbiAgICAgIHJldHVybiBibG9jay5tZXJnZSh7XG4gICAgICAgIHRleHQ6IHRleHQuc2xpY2Uoc3RhcnRPZmZzZXQpLFxuICAgICAgICBjaGFyYWN0ZXJMaXN0OiBjaGFycy5zbGljZShzdGFydE9mZnNldClcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChibG9ja0tleSA9PT0gZW5kS2V5KSB7XG4gICAgICByZXR1cm4gYmxvY2subWVyZ2Uoe1xuICAgICAgICB0ZXh0OiB0ZXh0LnNsaWNlKDAsIGVuZE9mZnNldCksXG4gICAgICAgIGNoYXJhY3Rlckxpc3Q6IGNoYXJzLnNsaWNlKDAsIGVuZE9mZnNldClcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBibG9jaztcbiAgfSkpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRDb250ZW50U3RhdGVGcmFnbWVudDsiXSwibmFtZXMiOlsicmFuZG9taXplQmxvY2tNYXBLZXlzIiwicmVxdWlyZSIsInJlbW92ZUVudGl0aWVzQXRFZGdlcyIsImdldENvbnRlbnRTdGF0ZUZyYWdtZW50IiwiY29udGVudFN0YXRlIiwic2VsZWN0aW9uU3RhdGUiLCJzdGFydEtleSIsImdldFN0YXJ0S2V5Iiwic3RhcnRPZmZzZXQiLCJnZXRTdGFydE9mZnNldCIsImVuZEtleSIsImdldEVuZEtleSIsImVuZE9mZnNldCIsImdldEVuZE9mZnNldCIsImNvbnRlbnRXaXRob3V0RWRnZUVudGl0aWVzIiwiYmxvY2tNYXAiLCJnZXRCbG9ja01hcCIsImJsb2NrS2V5cyIsImtleVNlcSIsInN0YXJ0SW5kZXgiLCJpbmRleE9mIiwiZW5kSW5kZXgiLCJzbGljZSIsIm1hcCIsImJsb2NrIiwiYmxvY2tLZXkiLCJ0ZXh0IiwiZ2V0VGV4dCIsImNoYXJzIiwiZ2V0Q2hhcmFjdGVyTGlzdCIsIm1lcmdlIiwiY2hhcmFjdGVyTGlzdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getContentStateFragment.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getCorrectDocumentFromNode.js":
/*!*****************************************************************!*\
  !*** ./node_modules/draft-js/lib/getCorrectDocumentFromNode.js ***!
  \*****************************************************************/
/***/ ((module) => {

"use strict";
eval("\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ function getCorrectDocumentFromNode(node) {\n    if (!node || !node.ownerDocument) {\n        return document;\n    }\n    return node.ownerDocument;\n}\nmodule.exports = getCorrectDocumentFromNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldENvcnJlY3REb2N1bWVudEZyb21Ob2RlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWI7Ozs7Ozs7OztDQVNDLEdBQ0QsU0FBU0EsMkJBQTJCQyxJQUFJO0lBQ3RDLElBQUksQ0FBQ0EsUUFBUSxDQUFDQSxLQUFLQyxhQUFhLEVBQUU7UUFDaEMsT0FBT0M7SUFDVDtJQUVBLE9BQU9GLEtBQUtDLGFBQWE7QUFDM0I7QUFFQUUsT0FBT0MsT0FBTyxHQUFHTCIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9nZXRDb3JyZWN0RG9jdW1lbnRGcm9tTm9kZS5qcz80NTI1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuZnVuY3Rpb24gZ2V0Q29ycmVjdERvY3VtZW50RnJvbU5vZGUobm9kZSkge1xuICBpZiAoIW5vZGUgfHwgIW5vZGUub3duZXJEb2N1bWVudCkge1xuICAgIHJldHVybiBkb2N1bWVudDtcbiAgfVxuXG4gIHJldHVybiBub2RlLm93bmVyRG9jdW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0Q29ycmVjdERvY3VtZW50RnJvbU5vZGU7Il0sIm5hbWVzIjpbImdldENvcnJlY3REb2N1bWVudEZyb21Ob2RlIiwibm9kZSIsIm93bmVyRG9jdW1lbnQiLCJkb2N1bWVudCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getCorrectDocumentFromNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getDefaultKeyBinding.js":
/*!***********************************************************!*\
  !*** ./node_modules/draft-js/lib/getDefaultKeyBinding.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar KeyBindingUtil = __webpack_require__(/*! ./KeyBindingUtil */ \"(ssr)/./node_modules/draft-js/lib/KeyBindingUtil.js\");\nvar Keys = __webpack_require__(/*! fbjs/lib/Keys */ \"(ssr)/./node_modules/fbjs/lib/Keys.js\");\nvar UserAgent = __webpack_require__(/*! fbjs/lib/UserAgent */ \"(ssr)/./node_modules/fbjs/lib/UserAgent.js\");\nvar isOSX = UserAgent.isPlatform(\"Mac OS X\"); // Firefox on OSX had a bug resulting in navigation instead of cursor movement.\n// This bug was fixed in Firefox 29. Feature detection is virtually impossible\n// so we just check the version number. See #342765.\nvar shouldFixFirefoxMovement = isOSX && UserAgent.isBrowser(\"Firefox < 29\");\nvar hasCommandModifier = KeyBindingUtil.hasCommandModifier, isCtrlKeyCommand = KeyBindingUtil.isCtrlKeyCommand;\nfunction shouldRemoveWord(e) {\n    return isOSX && e.altKey || isCtrlKeyCommand(e);\n}\n/**\n * Get the appropriate undo/redo command for a Z key command.\n */ function getZCommand(e) {\n    if (!hasCommandModifier(e)) {\n        return null;\n    }\n    return e.shiftKey ? \"redo\" : \"undo\";\n}\nfunction getDeleteCommand(e) {\n    // Allow default \"cut\" behavior for PCs on Shift + Delete.\n    if (!isOSX && e.shiftKey) {\n        return null;\n    }\n    return shouldRemoveWord(e) ? \"delete-word\" : \"delete\";\n}\nfunction getBackspaceCommand(e) {\n    if (hasCommandModifier(e) && isOSX) {\n        return \"backspace-to-start-of-line\";\n    }\n    return shouldRemoveWord(e) ? \"backspace-word\" : \"backspace\";\n}\n/**\n * Retrieve a bound key command for the given event.\n */ function getDefaultKeyBinding(e) {\n    switch(e.keyCode){\n        case 66:\n            // B\n            return hasCommandModifier(e) ? \"bold\" : null;\n        case 68:\n            // D\n            return isCtrlKeyCommand(e) ? \"delete\" : null;\n        case 72:\n            // H\n            return isCtrlKeyCommand(e) ? \"backspace\" : null;\n        case 73:\n            // I\n            return hasCommandModifier(e) ? \"italic\" : null;\n        case 74:\n            // J\n            return hasCommandModifier(e) ? \"code\" : null;\n        case 75:\n            // K\n            return isOSX && isCtrlKeyCommand(e) ? \"secondary-cut\" : null;\n        case 77:\n            // M\n            return isCtrlKeyCommand(e) ? \"split-block\" : null;\n        case 79:\n            // O\n            return isCtrlKeyCommand(e) ? \"split-block\" : null;\n        case 84:\n            // T\n            return isOSX && isCtrlKeyCommand(e) ? \"transpose-characters\" : null;\n        case 85:\n            // U\n            return hasCommandModifier(e) ? \"underline\" : null;\n        case 87:\n            // W\n            return isOSX && isCtrlKeyCommand(e) ? \"backspace-word\" : null;\n        case 89:\n            // Y\n            if (isCtrlKeyCommand(e)) {\n                return isOSX ? \"secondary-paste\" : \"redo\";\n            }\n            return null;\n        case 90:\n            // Z\n            return getZCommand(e) || null;\n        case Keys.RETURN:\n            return \"split-block\";\n        case Keys.DELETE:\n            return getDeleteCommand(e);\n        case Keys.BACKSPACE:\n            return getBackspaceCommand(e);\n        // LEFT/RIGHT handlers serve as a workaround for a Firefox bug.\n        case Keys.LEFT:\n            return shouldFixFirefoxMovement && hasCommandModifier(e) ? \"move-selection-to-start-of-block\" : null;\n        case Keys.RIGHT:\n            return shouldFixFirefoxMovement && hasCommandModifier(e) ? \"move-selection-to-end-of-block\" : null;\n        default:\n            return null;\n    }\n}\nmodule.exports = getDefaultKeyBinding;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldERlZmF1bHRLZXlCaW5kaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsaUJBQWlCQyxtQkFBT0EsQ0FBQyw2RUFBa0I7QUFFL0MsSUFBSUMsT0FBT0QsbUJBQU9BLENBQUMsNERBQWU7QUFFbEMsSUFBSUUsWUFBWUYsbUJBQU9BLENBQUMsc0VBQW9CO0FBRTVDLElBQUlHLFFBQVFELFVBQVVFLFVBQVUsQ0FBQyxhQUFhLCtFQUErRTtBQUM3SCw4RUFBOEU7QUFDOUUsb0RBQW9EO0FBRXBELElBQUlDLDJCQUEyQkYsU0FBU0QsVUFBVUksU0FBUyxDQUFDO0FBQzVELElBQUlDLHFCQUFxQlIsZUFBZVEsa0JBQWtCLEVBQ3REQyxtQkFBbUJULGVBQWVTLGdCQUFnQjtBQUV0RCxTQUFTQyxpQkFBaUJDLENBQUM7SUFDekIsT0FBT1AsU0FBU08sRUFBRUMsTUFBTSxJQUFJSCxpQkFBaUJFO0FBQy9DO0FBQ0E7O0NBRUMsR0FHRCxTQUFTRSxZQUFZRixDQUFDO0lBQ3BCLElBQUksQ0FBQ0gsbUJBQW1CRyxJQUFJO1FBQzFCLE9BQU87SUFDVDtJQUVBLE9BQU9BLEVBQUVHLFFBQVEsR0FBRyxTQUFTO0FBQy9CO0FBRUEsU0FBU0MsaUJBQWlCSixDQUFDO0lBQ3pCLDBEQUEwRDtJQUMxRCxJQUFJLENBQUNQLFNBQVNPLEVBQUVHLFFBQVEsRUFBRTtRQUN4QixPQUFPO0lBQ1Q7SUFFQSxPQUFPSixpQkFBaUJDLEtBQUssZ0JBQWdCO0FBQy9DO0FBRUEsU0FBU0ssb0JBQW9CTCxDQUFDO0lBQzVCLElBQUlILG1CQUFtQkcsTUFBTVAsT0FBTztRQUNsQyxPQUFPO0lBQ1Q7SUFFQSxPQUFPTSxpQkFBaUJDLEtBQUssbUJBQW1CO0FBQ2xEO0FBQ0E7O0NBRUMsR0FHRCxTQUFTTSxxQkFBcUJOLENBQUM7SUFDN0IsT0FBUUEsRUFBRU8sT0FBTztRQUNmLEtBQUs7WUFDSCxJQUFJO1lBQ0osT0FBT1YsbUJBQW1CRyxLQUFLLFNBQVM7UUFFMUMsS0FBSztZQUNILElBQUk7WUFDSixPQUFPRixpQkFBaUJFLEtBQUssV0FBVztRQUUxQyxLQUFLO1lBQ0gsSUFBSTtZQUNKLE9BQU9GLGlCQUFpQkUsS0FBSyxjQUFjO1FBRTdDLEtBQUs7WUFDSCxJQUFJO1lBQ0osT0FBT0gsbUJBQW1CRyxLQUFLLFdBQVc7UUFFNUMsS0FBSztZQUNILElBQUk7WUFDSixPQUFPSCxtQkFBbUJHLEtBQUssU0FBUztRQUUxQyxLQUFLO1lBQ0gsSUFBSTtZQUNKLE9BQU9QLFNBQVNLLGlCQUFpQkUsS0FBSyxrQkFBa0I7UUFFMUQsS0FBSztZQUNILElBQUk7WUFDSixPQUFPRixpQkFBaUJFLEtBQUssZ0JBQWdCO1FBRS9DLEtBQUs7WUFDSCxJQUFJO1lBQ0osT0FBT0YsaUJBQWlCRSxLQUFLLGdCQUFnQjtRQUUvQyxLQUFLO1lBQ0gsSUFBSTtZQUNKLE9BQU9QLFNBQVNLLGlCQUFpQkUsS0FBSyx5QkFBeUI7UUFFakUsS0FBSztZQUNILElBQUk7WUFDSixPQUFPSCxtQkFBbUJHLEtBQUssY0FBYztRQUUvQyxLQUFLO1lBQ0gsSUFBSTtZQUNKLE9BQU9QLFNBQVNLLGlCQUFpQkUsS0FBSyxtQkFBbUI7UUFFM0QsS0FBSztZQUNILElBQUk7WUFDSixJQUFJRixpQkFBaUJFLElBQUk7Z0JBQ3ZCLE9BQU9QLFFBQVEsb0JBQW9CO1lBQ3JDO1lBRUEsT0FBTztRQUVULEtBQUs7WUFDSCxJQUFJO1lBQ0osT0FBT1MsWUFBWUYsTUFBTTtRQUUzQixLQUFLVCxLQUFLaUIsTUFBTTtZQUNkLE9BQU87UUFFVCxLQUFLakIsS0FBS2tCLE1BQU07WUFDZCxPQUFPTCxpQkFBaUJKO1FBRTFCLEtBQUtULEtBQUttQixTQUFTO1lBQ2pCLE9BQU9MLG9CQUFvQkw7UUFDN0IsK0RBQStEO1FBRS9ELEtBQUtULEtBQUtvQixJQUFJO1lBQ1osT0FBT2hCLDRCQUE0QkUsbUJBQW1CRyxLQUFLLHFDQUFxQztRQUVsRyxLQUFLVCxLQUFLcUIsS0FBSztZQUNiLE9BQU9qQiw0QkFBNEJFLG1CQUFtQkcsS0FBSyxtQ0FBbUM7UUFFaEc7WUFDRSxPQUFPO0lBQ1g7QUFDRjtBQUVBYSxPQUFPQyxPQUFPLEdBQUdSIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVlbC1oYXJ2ZXN0ZXIvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldERlZmF1bHRLZXlCaW5kaW5nLmpzPzM3ZDAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIEtleUJpbmRpbmdVdGlsID0gcmVxdWlyZShcIi4vS2V5QmluZGluZ1V0aWxcIik7XG5cbnZhciBLZXlzID0gcmVxdWlyZShcImZianMvbGliL0tleXNcIik7XG5cbnZhciBVc2VyQWdlbnQgPSByZXF1aXJlKFwiZmJqcy9saWIvVXNlckFnZW50XCIpO1xuXG52YXIgaXNPU1ggPSBVc2VyQWdlbnQuaXNQbGF0Zm9ybSgnTWFjIE9TIFgnKTsgLy8gRmlyZWZveCBvbiBPU1ggaGFkIGEgYnVnIHJlc3VsdGluZyBpbiBuYXZpZ2F0aW9uIGluc3RlYWQgb2YgY3Vyc29yIG1vdmVtZW50LlxuLy8gVGhpcyBidWcgd2FzIGZpeGVkIGluIEZpcmVmb3ggMjkuIEZlYXR1cmUgZGV0ZWN0aW9uIGlzIHZpcnR1YWxseSBpbXBvc3NpYmxlXG4vLyBzbyB3ZSBqdXN0IGNoZWNrIHRoZSB2ZXJzaW9uIG51bWJlci4gU2VlICMzNDI3NjUuXG5cbnZhciBzaG91bGRGaXhGaXJlZm94TW92ZW1lbnQgPSBpc09TWCAmJiBVc2VyQWdlbnQuaXNCcm93c2VyKCdGaXJlZm94IDwgMjknKTtcbnZhciBoYXNDb21tYW5kTW9kaWZpZXIgPSBLZXlCaW5kaW5nVXRpbC5oYXNDb21tYW5kTW9kaWZpZXIsXG4gICAgaXNDdHJsS2V5Q29tbWFuZCA9IEtleUJpbmRpbmdVdGlsLmlzQ3RybEtleUNvbW1hbmQ7XG5cbmZ1bmN0aW9uIHNob3VsZFJlbW92ZVdvcmQoZSkge1xuICByZXR1cm4gaXNPU1ggJiYgZS5hbHRLZXkgfHwgaXNDdHJsS2V5Q29tbWFuZChlKTtcbn1cbi8qKlxuICogR2V0IHRoZSBhcHByb3ByaWF0ZSB1bmRvL3JlZG8gY29tbWFuZCBmb3IgYSBaIGtleSBjb21tYW5kLlxuICovXG5cblxuZnVuY3Rpb24gZ2V0WkNvbW1hbmQoZSkge1xuICBpZiAoIWhhc0NvbW1hbmRNb2RpZmllcihlKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGUuc2hpZnRLZXkgPyAncmVkbycgOiAndW5kbyc7XG59XG5cbmZ1bmN0aW9uIGdldERlbGV0ZUNvbW1hbmQoZSkge1xuICAvLyBBbGxvdyBkZWZhdWx0IFwiY3V0XCIgYmVoYXZpb3IgZm9yIFBDcyBvbiBTaGlmdCArIERlbGV0ZS5cbiAgaWYgKCFpc09TWCAmJiBlLnNoaWZ0S2V5KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gc2hvdWxkUmVtb3ZlV29yZChlKSA/ICdkZWxldGUtd29yZCcgOiAnZGVsZXRlJztcbn1cblxuZnVuY3Rpb24gZ2V0QmFja3NwYWNlQ29tbWFuZChlKSB7XG4gIGlmIChoYXNDb21tYW5kTW9kaWZpZXIoZSkgJiYgaXNPU1gpIHtcbiAgICByZXR1cm4gJ2JhY2tzcGFjZS10by1zdGFydC1vZi1saW5lJztcbiAgfVxuXG4gIHJldHVybiBzaG91bGRSZW1vdmVXb3JkKGUpID8gJ2JhY2tzcGFjZS13b3JkJyA6ICdiYWNrc3BhY2UnO1xufVxuLyoqXG4gKiBSZXRyaWV2ZSBhIGJvdW5kIGtleSBjb21tYW5kIGZvciB0aGUgZ2l2ZW4gZXZlbnQuXG4gKi9cblxuXG5mdW5jdGlvbiBnZXREZWZhdWx0S2V5QmluZGluZyhlKSB7XG4gIHN3aXRjaCAoZS5rZXlDb2RlKSB7XG4gICAgY2FzZSA2NjpcbiAgICAgIC8vIEJcbiAgICAgIHJldHVybiBoYXNDb21tYW5kTW9kaWZpZXIoZSkgPyAnYm9sZCcgOiBudWxsO1xuXG4gICAgY2FzZSA2ODpcbiAgICAgIC8vIERcbiAgICAgIHJldHVybiBpc0N0cmxLZXlDb21tYW5kKGUpID8gJ2RlbGV0ZScgOiBudWxsO1xuXG4gICAgY2FzZSA3MjpcbiAgICAgIC8vIEhcbiAgICAgIHJldHVybiBpc0N0cmxLZXlDb21tYW5kKGUpID8gJ2JhY2tzcGFjZScgOiBudWxsO1xuXG4gICAgY2FzZSA3MzpcbiAgICAgIC8vIElcbiAgICAgIHJldHVybiBoYXNDb21tYW5kTW9kaWZpZXIoZSkgPyAnaXRhbGljJyA6IG51bGw7XG5cbiAgICBjYXNlIDc0OlxuICAgICAgLy8gSlxuICAgICAgcmV0dXJuIGhhc0NvbW1hbmRNb2RpZmllcihlKSA/ICdjb2RlJyA6IG51bGw7XG5cbiAgICBjYXNlIDc1OlxuICAgICAgLy8gS1xuICAgICAgcmV0dXJuIGlzT1NYICYmIGlzQ3RybEtleUNvbW1hbmQoZSkgPyAnc2Vjb25kYXJ5LWN1dCcgOiBudWxsO1xuXG4gICAgY2FzZSA3NzpcbiAgICAgIC8vIE1cbiAgICAgIHJldHVybiBpc0N0cmxLZXlDb21tYW5kKGUpID8gJ3NwbGl0LWJsb2NrJyA6IG51bGw7XG5cbiAgICBjYXNlIDc5OlxuICAgICAgLy8gT1xuICAgICAgcmV0dXJuIGlzQ3RybEtleUNvbW1hbmQoZSkgPyAnc3BsaXQtYmxvY2snIDogbnVsbDtcblxuICAgIGNhc2UgODQ6XG4gICAgICAvLyBUXG4gICAgICByZXR1cm4gaXNPU1ggJiYgaXNDdHJsS2V5Q29tbWFuZChlKSA/ICd0cmFuc3Bvc2UtY2hhcmFjdGVycycgOiBudWxsO1xuXG4gICAgY2FzZSA4NTpcbiAgICAgIC8vIFVcbiAgICAgIHJldHVybiBoYXNDb21tYW5kTW9kaWZpZXIoZSkgPyAndW5kZXJsaW5lJyA6IG51bGw7XG5cbiAgICBjYXNlIDg3OlxuICAgICAgLy8gV1xuICAgICAgcmV0dXJuIGlzT1NYICYmIGlzQ3RybEtleUNvbW1hbmQoZSkgPyAnYmFja3NwYWNlLXdvcmQnIDogbnVsbDtcblxuICAgIGNhc2UgODk6XG4gICAgICAvLyBZXG4gICAgICBpZiAoaXNDdHJsS2V5Q29tbWFuZChlKSkge1xuICAgICAgICByZXR1cm4gaXNPU1ggPyAnc2Vjb25kYXJ5LXBhc3RlJyA6ICdyZWRvJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICBjYXNlIDkwOlxuICAgICAgLy8gWlxuICAgICAgcmV0dXJuIGdldFpDb21tYW5kKGUpIHx8IG51bGw7XG5cbiAgICBjYXNlIEtleXMuUkVUVVJOOlxuICAgICAgcmV0dXJuICdzcGxpdC1ibG9jayc7XG5cbiAgICBjYXNlIEtleXMuREVMRVRFOlxuICAgICAgcmV0dXJuIGdldERlbGV0ZUNvbW1hbmQoZSk7XG5cbiAgICBjYXNlIEtleXMuQkFDS1NQQUNFOlxuICAgICAgcmV0dXJuIGdldEJhY2tzcGFjZUNvbW1hbmQoZSk7XG4gICAgLy8gTEVGVC9SSUdIVCBoYW5kbGVycyBzZXJ2ZSBhcyBhIHdvcmthcm91bmQgZm9yIGEgRmlyZWZveCBidWcuXG5cbiAgICBjYXNlIEtleXMuTEVGVDpcbiAgICAgIHJldHVybiBzaG91bGRGaXhGaXJlZm94TW92ZW1lbnQgJiYgaGFzQ29tbWFuZE1vZGlmaWVyKGUpID8gJ21vdmUtc2VsZWN0aW9uLXRvLXN0YXJ0LW9mLWJsb2NrJyA6IG51bGw7XG5cbiAgICBjYXNlIEtleXMuUklHSFQ6XG4gICAgICByZXR1cm4gc2hvdWxkRml4RmlyZWZveE1vdmVtZW50ICYmIGhhc0NvbW1hbmRNb2RpZmllcihlKSA/ICdtb3ZlLXNlbGVjdGlvbi10by1lbmQtb2YtYmxvY2snIDogbnVsbDtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldERlZmF1bHRLZXlCaW5kaW5nOyJdLCJuYW1lcyI6WyJLZXlCaW5kaW5nVXRpbCIsInJlcXVpcmUiLCJLZXlzIiwiVXNlckFnZW50IiwiaXNPU1giLCJpc1BsYXRmb3JtIiwic2hvdWxkRml4RmlyZWZveE1vdmVtZW50IiwiaXNCcm93c2VyIiwiaGFzQ29tbWFuZE1vZGlmaWVyIiwiaXNDdHJsS2V5Q29tbWFuZCIsInNob3VsZFJlbW92ZVdvcmQiLCJlIiwiYWx0S2V5IiwiZ2V0WkNvbW1hbmQiLCJzaGlmdEtleSIsImdldERlbGV0ZUNvbW1hbmQiLCJnZXRCYWNrc3BhY2VDb21tYW5kIiwiZ2V0RGVmYXVsdEtleUJpbmRpbmciLCJrZXlDb2RlIiwiUkVUVVJOIiwiREVMRVRFIiwiQkFDS1NQQUNFIiwiTEVGVCIsIlJJR0hUIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getDefaultKeyBinding.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getDraftEditorSelection.js":
/*!**************************************************************!*\
  !*** ./node_modules/draft-js/lib/getDraftEditorSelection.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar getDraftEditorSelectionWithNodes = __webpack_require__(/*! ./getDraftEditorSelectionWithNodes */ \"(ssr)/./node_modules/draft-js/lib/getDraftEditorSelectionWithNodes.js\");\n/**\n * Convert the current selection range to an anchor/focus pair of offset keys\n * and values that can be interpreted by components.\n */ function getDraftEditorSelection(editorState, root) {\n    var selection = root.ownerDocument.defaultView.getSelection();\n    var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset, rangeCount = selection.rangeCount;\n    if (rangeCount === 0 || // No selection, ever. As in, the user hasn't selected anything since\n    // opening the document.\n    anchorNode == null || focusNode == null) {\n        return {\n            selectionState: editorState.getSelection().set(\"hasFocus\", false),\n            needsRecovery: false\n        };\n    }\n    return getDraftEditorSelectionWithNodes(editorState, root, anchorNode, anchorOffset, focusNode, focusOffset);\n}\nmodule.exports = getDraftEditorSelection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldERyYWZ0RWRpdG9yU2VsZWN0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsbUNBQW1DQyxtQkFBT0EsQ0FBQyxpSEFBb0M7QUFDbkY7OztDQUdDLEdBR0QsU0FBU0Msd0JBQXdCQyxXQUFXLEVBQUVDLElBQUk7SUFDaEQsSUFBSUMsWUFBWUQsS0FBS0UsYUFBYSxDQUFDQyxXQUFXLENBQUNDLFlBQVk7SUFDM0QsSUFBSUMsYUFBYUosVUFBVUksVUFBVSxFQUNqQ0MsZUFBZUwsVUFBVUssWUFBWSxFQUNyQ0MsWUFBWU4sVUFBVU0sU0FBUyxFQUMvQkMsY0FBY1AsVUFBVU8sV0FBVyxFQUNuQ0MsYUFBYVIsVUFBVVEsVUFBVTtJQUVyQyxJQUNBQSxlQUFlLEtBQUsscUVBQXFFO0lBQ3pGLHdCQUF3QjtJQUN4QkosY0FBYyxRQUFRRSxhQUFhLE1BQU07UUFDdkMsT0FBTztZQUNMRyxnQkFBZ0JYLFlBQVlLLFlBQVksR0FBR08sR0FBRyxDQUFDLFlBQVk7WUFDM0RDLGVBQWU7UUFDakI7SUFDRjtJQUVBLE9BQU9oQixpQ0FBaUNHLGFBQWFDLE1BQU1LLFlBQVlDLGNBQWNDLFdBQVdDO0FBQ2xHO0FBRUFLLE9BQU9DLE9BQU8sR0FBR2hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVlbC1oYXJ2ZXN0ZXIvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldERyYWZ0RWRpdG9yU2VsZWN0aW9uLmpzPzNhNWYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIGdldERyYWZ0RWRpdG9yU2VsZWN0aW9uV2l0aE5vZGVzID0gcmVxdWlyZShcIi4vZ2V0RHJhZnRFZGl0b3JTZWxlY3Rpb25XaXRoTm9kZXNcIik7XG4vKipcbiAqIENvbnZlcnQgdGhlIGN1cnJlbnQgc2VsZWN0aW9uIHJhbmdlIHRvIGFuIGFuY2hvci9mb2N1cyBwYWlyIG9mIG9mZnNldCBrZXlzXG4gKiBhbmQgdmFsdWVzIHRoYXQgY2FuIGJlIGludGVycHJldGVkIGJ5IGNvbXBvbmVudHMuXG4gKi9cblxuXG5mdW5jdGlvbiBnZXREcmFmdEVkaXRvclNlbGVjdGlvbihlZGl0b3JTdGF0ZSwgcm9vdCkge1xuICB2YXIgc2VsZWN0aW9uID0gcm9vdC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmdldFNlbGVjdGlvbigpO1xuICB2YXIgYW5jaG9yTm9kZSA9IHNlbGVjdGlvbi5hbmNob3JOb2RlLFxuICAgICAgYW5jaG9yT2Zmc2V0ID0gc2VsZWN0aW9uLmFuY2hvck9mZnNldCxcbiAgICAgIGZvY3VzTm9kZSA9IHNlbGVjdGlvbi5mb2N1c05vZGUsXG4gICAgICBmb2N1c09mZnNldCA9IHNlbGVjdGlvbi5mb2N1c09mZnNldCxcbiAgICAgIHJhbmdlQ291bnQgPSBzZWxlY3Rpb24ucmFuZ2VDb3VudDtcblxuICBpZiAoIC8vIE5vIGFjdGl2ZSBzZWxlY3Rpb24uXG4gIHJhbmdlQ291bnQgPT09IDAgfHwgLy8gTm8gc2VsZWN0aW9uLCBldmVyLiBBcyBpbiwgdGhlIHVzZXIgaGFzbid0IHNlbGVjdGVkIGFueXRoaW5nIHNpbmNlXG4gIC8vIG9wZW5pbmcgdGhlIGRvY3VtZW50LlxuICBhbmNob3JOb2RlID09IG51bGwgfHwgZm9jdXNOb2RlID09IG51bGwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2VsZWN0aW9uU3RhdGU6IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpLnNldCgnaGFzRm9jdXMnLCBmYWxzZSksXG4gICAgICBuZWVkc1JlY292ZXJ5OiBmYWxzZVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gZ2V0RHJhZnRFZGl0b3JTZWxlY3Rpb25XaXRoTm9kZXMoZWRpdG9yU3RhdGUsIHJvb3QsIGFuY2hvck5vZGUsIGFuY2hvck9mZnNldCwgZm9jdXNOb2RlLCBmb2N1c09mZnNldCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0RHJhZnRFZGl0b3JTZWxlY3Rpb247Il0sIm5hbWVzIjpbImdldERyYWZ0RWRpdG9yU2VsZWN0aW9uV2l0aE5vZGVzIiwicmVxdWlyZSIsImdldERyYWZ0RWRpdG9yU2VsZWN0aW9uIiwiZWRpdG9yU3RhdGUiLCJyb290Iiwic2VsZWN0aW9uIiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwiZ2V0U2VsZWN0aW9uIiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwicmFuZ2VDb3VudCIsInNlbGVjdGlvblN0YXRlIiwic2V0IiwibmVlZHNSZWNvdmVyeSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getDraftEditorSelection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getDraftEditorSelectionWithNodes.js":
/*!***********************************************************************!*\
  !*** ./node_modules/draft-js/lib/getDraftEditorSelectionWithNodes.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar findAncestorOffsetKey = __webpack_require__(/*! ./findAncestorOffsetKey */ \"(ssr)/./node_modules/draft-js/lib/findAncestorOffsetKey.js\");\nvar getSelectionOffsetKeyForNode = __webpack_require__(/*! ./getSelectionOffsetKeyForNode */ \"(ssr)/./node_modules/draft-js/lib/getSelectionOffsetKeyForNode.js\");\nvar getUpdatedSelectionState = __webpack_require__(/*! ./getUpdatedSelectionState */ \"(ssr)/./node_modules/draft-js/lib/getUpdatedSelectionState.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar isElement = __webpack_require__(/*! ./isElement */ \"(ssr)/./node_modules/draft-js/lib/isElement.js\");\nvar nullthrows = __webpack_require__(/*! fbjs/lib/nullthrows */ \"(ssr)/./node_modules/fbjs/lib/nullthrows.js\");\n/**\n * Convert the current selection range to an anchor/focus pair of offset keys\n * and values that can be interpreted by components.\n */ function getDraftEditorSelectionWithNodes(editorState, root, anchorNode, anchorOffset, focusNode, focusOffset) {\n    var anchorIsTextNode = anchorNode.nodeType === Node.TEXT_NODE;\n    var focusIsTextNode = focusNode.nodeType === Node.TEXT_NODE; // If the selection range lies only on text nodes, the task is simple.\n    // Find the nearest offset-aware elements and use the\n    // offset values supplied by the selection range.\n    if (anchorIsTextNode && focusIsTextNode) {\n        return {\n            selectionState: getUpdatedSelectionState(editorState, nullthrows(findAncestorOffsetKey(anchorNode)), anchorOffset, nullthrows(findAncestorOffsetKey(focusNode)), focusOffset),\n            needsRecovery: false\n        };\n    }\n    var anchorPoint = null;\n    var focusPoint = null;\n    var needsRecovery = true; // An element is selected. Convert this selection range into leaf offset\n    // keys and offset values for consumption at the component level. This\n    // is common in Firefox, where select-all and triple click behavior leads\n    // to entire elements being selected.\n    //\n    // Note that we use the `needsRecovery` parameter in the callback here. This\n    // is because when certain elements are selected, the behavior for subsequent\n    // cursor movement (e.g. via arrow keys) is uncertain and may not match\n    // expectations at the component level. For example, if an entire <div> is\n    // selected and the user presses the right arrow, Firefox keeps the selection\n    // on the <div>. If we allow subsequent keypresses to insert characters\n    // natively, they will be inserted into a browser-created text node to the\n    // right of that <div>. This is obviously undesirable.\n    //\n    // With the `needsRecovery` flag, we inform the caller that it is responsible\n    // for manually setting the selection state on the rendered document to\n    // ensure proper selection state maintenance.\n    if (anchorIsTextNode) {\n        anchorPoint = {\n            key: nullthrows(findAncestorOffsetKey(anchorNode)),\n            offset: anchorOffset\n        };\n        focusPoint = getPointForNonTextNode(root, focusNode, focusOffset);\n    } else if (focusIsTextNode) {\n        focusPoint = {\n            key: nullthrows(findAncestorOffsetKey(focusNode)),\n            offset: focusOffset\n        };\n        anchorPoint = getPointForNonTextNode(root, anchorNode, anchorOffset);\n    } else {\n        anchorPoint = getPointForNonTextNode(root, anchorNode, anchorOffset);\n        focusPoint = getPointForNonTextNode(root, focusNode, focusOffset); // If the selection is collapsed on an empty block, don't force recovery.\n        // This way, on arrow key selection changes, the browser can move the\n        // cursor from a non-zero offset on one block, through empty blocks,\n        // to a matching non-zero offset on other text blocks.\n        if (anchorNode === focusNode && anchorOffset === focusOffset) {\n            needsRecovery = !!anchorNode.firstChild && anchorNode.firstChild.nodeName !== \"BR\";\n        }\n    }\n    return {\n        selectionState: getUpdatedSelectionState(editorState, anchorPoint.key, anchorPoint.offset, focusPoint.key, focusPoint.offset),\n        needsRecovery: needsRecovery\n    };\n}\n/**\n * Identify the first leaf descendant for the given node.\n */ function getFirstLeaf(node) {\n    while(node.firstChild && (isElement(node.firstChild) && node.firstChild.getAttribute(\"data-blocks\") === \"true\" || getSelectionOffsetKeyForNode(node.firstChild))){\n        node = node.firstChild;\n    }\n    return node;\n}\n/**\n * Identify the last leaf descendant for the given node.\n */ function getLastLeaf(node) {\n    while(node.lastChild && (isElement(node.lastChild) && node.lastChild.getAttribute(\"data-blocks\") === \"true\" || getSelectionOffsetKeyForNode(node.lastChild))){\n        node = node.lastChild;\n    }\n    return node;\n}\nfunction getPointForNonTextNode(editorRoot, startNode, childOffset) {\n    var node = startNode;\n    var offsetKey = findAncestorOffsetKey(node);\n    !(offsetKey != null || editorRoot && (editorRoot === node || editorRoot.firstChild === node)) ?  true ? invariant(false, \"Unknown node in selection range.\") : 0 : void 0; // If the editorRoot is the selection, step downward into the content\n    // wrapper.\n    if (editorRoot === node) {\n        node = node.firstChild;\n        !isElement(node) ?  true ? invariant(false, \"Invalid DraftEditorContents node.\") : 0 : void 0;\n        var castedNode = node; // assignment only added for flow :/\n        // otherwise it throws in line 200 saying that node can be null or undefined\n        node = castedNode;\n        !(node.getAttribute(\"data-contents\") === \"true\") ?  true ? invariant(false, \"Invalid DraftEditorContents structure.\") : 0 : void 0;\n        if (childOffset > 0) {\n            childOffset = node.childNodes.length;\n        }\n    } // If the child offset is zero and we have an offset key, we're done.\n    // If there's no offset key because the entire editor is selected,\n    // find the leftmost (\"first\") leaf in the tree and use that as the offset\n    // key.\n    if (childOffset === 0) {\n        var key = null;\n        if (offsetKey != null) {\n            key = offsetKey;\n        } else {\n            var firstLeaf = getFirstLeaf(node);\n            key = nullthrows(getSelectionOffsetKeyForNode(firstLeaf));\n        }\n        return {\n            key: key,\n            offset: 0\n        };\n    }\n    var nodeBeforeCursor = node.childNodes[childOffset - 1];\n    var leafKey = null;\n    var textLength = null;\n    if (!getSelectionOffsetKeyForNode(nodeBeforeCursor)) {\n        // Our target node may be a leaf or a text node, in which case we're\n        // already where we want to be and can just use the child's length as\n        // our offset.\n        leafKey = nullthrows(offsetKey);\n        textLength = getTextContentLength(nodeBeforeCursor);\n    } else {\n        // Otherwise, we'll look at the child to the left of the cursor and find\n        // the last leaf node in its subtree.\n        var lastLeaf = getLastLeaf(nodeBeforeCursor);\n        leafKey = nullthrows(getSelectionOffsetKeyForNode(lastLeaf));\n        textLength = getTextContentLength(lastLeaf);\n    }\n    return {\n        key: leafKey,\n        offset: textLength\n    };\n}\n/**\n * Return the length of a node's textContent, regarding single newline\n * characters as zero-length. This allows us to avoid problems with identifying\n * the correct selection offset for empty blocks in IE, in which we\n * render newlines instead of break tags.\n */ function getTextContentLength(node) {\n    var textContent = node.textContent;\n    return textContent === \"\\n\" ? 0 : textContent.length;\n}\nmodule.exports = getDraftEditorSelectionWithNodes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getDraftEditorSelectionWithNodes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getEntityKeyForSelection.js":
/*!***************************************************************!*\
  !*** ./node_modules/draft-js/lib/getEntityKeyForSelection.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar _require = __webpack_require__(/*! ./draftKeyUtils */ \"(ssr)/./node_modules/draft-js/lib/draftKeyUtils.js\"), notEmptyKey = _require.notEmptyKey;\n/**\n * Return the entity key that should be used when inserting text for the\n * specified target selection, only if the entity is `MUTABLE`. `IMMUTABLE`\n * and `SEGMENTED` entities should not be used for insertion behavior.\n */ function getEntityKeyForSelection(contentState, targetSelection) {\n    var entityKey;\n    if (targetSelection.isCollapsed()) {\n        var key = targetSelection.getAnchorKey();\n        var offset = targetSelection.getAnchorOffset();\n        if (offset > 0) {\n            entityKey = contentState.getBlockForKey(key).getEntityAt(offset - 1);\n            if (entityKey !== contentState.getBlockForKey(key).getEntityAt(offset)) {\n                return null;\n            }\n            return filterKey(contentState.getEntityMap(), entityKey);\n        }\n        return null;\n    }\n    var startKey = targetSelection.getStartKey();\n    var startOffset = targetSelection.getStartOffset();\n    var startBlock = contentState.getBlockForKey(startKey);\n    entityKey = startOffset === startBlock.getLength() ? null : startBlock.getEntityAt(startOffset);\n    return filterKey(contentState.getEntityMap(), entityKey);\n}\n/**\n * Determine whether an entity key corresponds to a `MUTABLE` entity. If so,\n * return it. If not, return null.\n */ function filterKey(entityMap, entityKey) {\n    if (notEmptyKey(entityKey)) {\n        var entity = entityMap.__get(entityKey);\n        return entity.getMutability() === \"MUTABLE\" ? entityKey : null;\n    }\n    return null;\n}\nmodule.exports = getEntityKeyForSelection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldEVudGl0eUtleUZvclNlbGVjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLElBQUlBLFdBQVdDLG1CQUFPQSxDQUFDLDJFQUFpQixHQUNwQ0MsY0FBY0YsU0FBU0UsV0FBVztBQUN0Qzs7OztDQUlDLEdBR0QsU0FBU0MseUJBQXlCQyxZQUFZLEVBQUVDLGVBQWU7SUFDN0QsSUFBSUM7SUFFSixJQUFJRCxnQkFBZ0JFLFdBQVcsSUFBSTtRQUNqQyxJQUFJQyxNQUFNSCxnQkFBZ0JJLFlBQVk7UUFDdEMsSUFBSUMsU0FBU0wsZ0JBQWdCTSxlQUFlO1FBRTVDLElBQUlELFNBQVMsR0FBRztZQUNkSixZQUFZRixhQUFhUSxjQUFjLENBQUNKLEtBQUtLLFdBQVcsQ0FBQ0gsU0FBUztZQUVsRSxJQUFJSixjQUFjRixhQUFhUSxjQUFjLENBQUNKLEtBQUtLLFdBQVcsQ0FBQ0gsU0FBUztnQkFDdEUsT0FBTztZQUNUO1lBRUEsT0FBT0ksVUFBVVYsYUFBYVcsWUFBWSxJQUFJVDtRQUNoRDtRQUVBLE9BQU87SUFDVDtJQUVBLElBQUlVLFdBQVdYLGdCQUFnQlksV0FBVztJQUMxQyxJQUFJQyxjQUFjYixnQkFBZ0JjLGNBQWM7SUFDaEQsSUFBSUMsYUFBYWhCLGFBQWFRLGNBQWMsQ0FBQ0k7SUFDN0NWLFlBQVlZLGdCQUFnQkUsV0FBV0MsU0FBUyxLQUFLLE9BQU9ELFdBQVdQLFdBQVcsQ0FBQ0s7SUFDbkYsT0FBT0osVUFBVVYsYUFBYVcsWUFBWSxJQUFJVDtBQUNoRDtBQUNBOzs7Q0FHQyxHQUdELFNBQVNRLFVBQVVRLFNBQVMsRUFBRWhCLFNBQVM7SUFDckMsSUFBSUosWUFBWUksWUFBWTtRQUMxQixJQUFJaUIsU0FBU0QsVUFBVUUsS0FBSyxDQUFDbEI7UUFFN0IsT0FBT2lCLE9BQU9FLGFBQWEsT0FBTyxZQUFZbkIsWUFBWTtJQUM1RDtJQUVBLE9BQU87QUFDVDtBQUVBb0IsT0FBT0MsT0FBTyxHQUFHeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWVsLWhhcnZlc3Rlci8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZ2V0RW50aXR5S2V5Rm9yU2VsZWN0aW9uLmpzP2Y5ODIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIF9yZXF1aXJlID0gcmVxdWlyZShcIi4vZHJhZnRLZXlVdGlsc1wiKSxcbiAgICBub3RFbXB0eUtleSA9IF9yZXF1aXJlLm5vdEVtcHR5S2V5O1xuLyoqXG4gKiBSZXR1cm4gdGhlIGVudGl0eSBrZXkgdGhhdCBzaG91bGQgYmUgdXNlZCB3aGVuIGluc2VydGluZyB0ZXh0IGZvciB0aGVcbiAqIHNwZWNpZmllZCB0YXJnZXQgc2VsZWN0aW9uLCBvbmx5IGlmIHRoZSBlbnRpdHkgaXMgYE1VVEFCTEVgLiBgSU1NVVRBQkxFYFxuICogYW5kIGBTRUdNRU5URURgIGVudGl0aWVzIHNob3VsZCBub3QgYmUgdXNlZCBmb3IgaW5zZXJ0aW9uIGJlaGF2aW9yLlxuICovXG5cblxuZnVuY3Rpb24gZ2V0RW50aXR5S2V5Rm9yU2VsZWN0aW9uKGNvbnRlbnRTdGF0ZSwgdGFyZ2V0U2VsZWN0aW9uKSB7XG4gIHZhciBlbnRpdHlLZXk7XG5cbiAgaWYgKHRhcmdldFNlbGVjdGlvbi5pc0NvbGxhcHNlZCgpKSB7XG4gICAgdmFyIGtleSA9IHRhcmdldFNlbGVjdGlvbi5nZXRBbmNob3JLZXkoKTtcbiAgICB2YXIgb2Zmc2V0ID0gdGFyZ2V0U2VsZWN0aW9uLmdldEFuY2hvck9mZnNldCgpO1xuXG4gICAgaWYgKG9mZnNldCA+IDApIHtcbiAgICAgIGVudGl0eUtleSA9IGNvbnRlbnRTdGF0ZS5nZXRCbG9ja0ZvcktleShrZXkpLmdldEVudGl0eUF0KG9mZnNldCAtIDEpO1xuXG4gICAgICBpZiAoZW50aXR5S2V5ICE9PSBjb250ZW50U3RhdGUuZ2V0QmxvY2tGb3JLZXkoa2V5KS5nZXRFbnRpdHlBdChvZmZzZXQpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmlsdGVyS2V5KGNvbnRlbnRTdGF0ZS5nZXRFbnRpdHlNYXAoKSwgZW50aXR5S2V5KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBzdGFydEtleSA9IHRhcmdldFNlbGVjdGlvbi5nZXRTdGFydEtleSgpO1xuICB2YXIgc3RhcnRPZmZzZXQgPSB0YXJnZXRTZWxlY3Rpb24uZ2V0U3RhcnRPZmZzZXQoKTtcbiAgdmFyIHN0YXJ0QmxvY2sgPSBjb250ZW50U3RhdGUuZ2V0QmxvY2tGb3JLZXkoc3RhcnRLZXkpO1xuICBlbnRpdHlLZXkgPSBzdGFydE9mZnNldCA9PT0gc3RhcnRCbG9jay5nZXRMZW5ndGgoKSA/IG51bGwgOiBzdGFydEJsb2NrLmdldEVudGl0eUF0KHN0YXJ0T2Zmc2V0KTtcbiAgcmV0dXJuIGZpbHRlcktleShjb250ZW50U3RhdGUuZ2V0RW50aXR5TWFwKCksIGVudGl0eUtleSk7XG59XG4vKipcbiAqIERldGVybWluZSB3aGV0aGVyIGFuIGVudGl0eSBrZXkgY29ycmVzcG9uZHMgdG8gYSBgTVVUQUJMRWAgZW50aXR5LiBJZiBzbyxcbiAqIHJldHVybiBpdC4gSWYgbm90LCByZXR1cm4gbnVsbC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGZpbHRlcktleShlbnRpdHlNYXAsIGVudGl0eUtleSkge1xuICBpZiAobm90RW1wdHlLZXkoZW50aXR5S2V5KSkge1xuICAgIHZhciBlbnRpdHkgPSBlbnRpdHlNYXAuX19nZXQoZW50aXR5S2V5KTtcblxuICAgIHJldHVybiBlbnRpdHkuZ2V0TXV0YWJpbGl0eSgpID09PSAnTVVUQUJMRScgPyBlbnRpdHlLZXkgOiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0RW50aXR5S2V5Rm9yU2VsZWN0aW9uOyJdLCJuYW1lcyI6WyJfcmVxdWlyZSIsInJlcXVpcmUiLCJub3RFbXB0eUtleSIsImdldEVudGl0eUtleUZvclNlbGVjdGlvbiIsImNvbnRlbnRTdGF0ZSIsInRhcmdldFNlbGVjdGlvbiIsImVudGl0eUtleSIsImlzQ29sbGFwc2VkIiwia2V5IiwiZ2V0QW5jaG9yS2V5Iiwib2Zmc2V0IiwiZ2V0QW5jaG9yT2Zmc2V0IiwiZ2V0QmxvY2tGb3JLZXkiLCJnZXRFbnRpdHlBdCIsImZpbHRlcktleSIsImdldEVudGl0eU1hcCIsInN0YXJ0S2V5IiwiZ2V0U3RhcnRLZXkiLCJzdGFydE9mZnNldCIsImdldFN0YXJ0T2Zmc2V0Iiwic3RhcnRCbG9jayIsImdldExlbmd0aCIsImVudGl0eU1hcCIsImVudGl0eSIsIl9fZ2V0IiwiZ2V0TXV0YWJpbGl0eSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getEntityKeyForSelection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getFragmentFromSelection.js":
/*!***************************************************************!*\
  !*** ./node_modules/draft-js/lib/getFragmentFromSelection.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar getContentStateFragment = __webpack_require__(/*! ./getContentStateFragment */ \"(ssr)/./node_modules/draft-js/lib/getContentStateFragment.js\");\nfunction getFragmentFromSelection(editorState) {\n    var selectionState = editorState.getSelection();\n    if (selectionState.isCollapsed()) {\n        return null;\n    }\n    return getContentStateFragment(editorState.getCurrentContent(), selectionState);\n}\nmodule.exports = getFragmentFromSelection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldEZyYWdtZW50RnJvbVNlbGVjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLElBQUlBLDBCQUEwQkMsbUJBQU9BLENBQUMsK0ZBQTJCO0FBRWpFLFNBQVNDLHlCQUF5QkMsV0FBVztJQUMzQyxJQUFJQyxpQkFBaUJELFlBQVlFLFlBQVk7SUFFN0MsSUFBSUQsZUFBZUUsV0FBVyxJQUFJO1FBQ2hDLE9BQU87SUFDVDtJQUVBLE9BQU9OLHdCQUF3QkcsWUFBWUksaUJBQWlCLElBQUlIO0FBQ2xFO0FBRUFJLE9BQU9DLE9BQU8sR0FBR1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWVsLWhhcnZlc3Rlci8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZ2V0RnJhZ21lbnRGcm9tU2VsZWN0aW9uLmpzPzYyZTAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIGdldENvbnRlbnRTdGF0ZUZyYWdtZW50ID0gcmVxdWlyZShcIi4vZ2V0Q29udGVudFN0YXRlRnJhZ21lbnRcIik7XG5cbmZ1bmN0aW9uIGdldEZyYWdtZW50RnJvbVNlbGVjdGlvbihlZGl0b3JTdGF0ZSkge1xuICB2YXIgc2VsZWN0aW9uU3RhdGUgPSBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcblxuICBpZiAoc2VsZWN0aW9uU3RhdGUuaXNDb2xsYXBzZWQoKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGdldENvbnRlbnRTdGF0ZUZyYWdtZW50KGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCksIHNlbGVjdGlvblN0YXRlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRGcmFnbWVudEZyb21TZWxlY3Rpb247Il0sIm5hbWVzIjpbImdldENvbnRlbnRTdGF0ZUZyYWdtZW50IiwicmVxdWlyZSIsImdldEZyYWdtZW50RnJvbVNlbGVjdGlvbiIsImVkaXRvclN0YXRlIiwic2VsZWN0aW9uU3RhdGUiLCJnZXRTZWxlY3Rpb24iLCJpc0NvbGxhcHNlZCIsImdldEN1cnJlbnRDb250ZW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getFragmentFromSelection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getNextDelimiterBlockKey.js":
/*!***************************************************************!*\
  !*** ./node_modules/draft-js/lib/getNextDelimiterBlockKey.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n *\n * This is unstable and not part of the public API and should not be used by\n * production systems. This file may be update/removed without notice.\n */ var ContentBlockNode = __webpack_require__(/*! ./ContentBlockNode */ \"(ssr)/./node_modules/draft-js/lib/ContentBlockNode.js\");\nvar getNextDelimiterBlockKey = function getNextDelimiterBlockKey(block, blockMap) {\n    var isExperimentalTreeBlock = block instanceof ContentBlockNode;\n    if (!isExperimentalTreeBlock) {\n        return null;\n    }\n    var nextSiblingKey = block.getNextSiblingKey();\n    if (nextSiblingKey) {\n        return nextSiblingKey;\n    }\n    var parent = block.getParentKey();\n    if (!parent) {\n        return null;\n    }\n    var nextNonDescendantBlock = blockMap.get(parent);\n    while(nextNonDescendantBlock && !nextNonDescendantBlock.getNextSiblingKey()){\n        var parentKey = nextNonDescendantBlock.getParentKey();\n        nextNonDescendantBlock = parentKey ? blockMap.get(parentKey) : null;\n    }\n    if (!nextNonDescendantBlock) {\n        return null;\n    }\n    return nextNonDescendantBlock.getNextSiblingKey();\n};\nmodule.exports = getNextDelimiterBlockKey;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldE5leHREZWxpbWl0ZXJCbG9ja0tleS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViOzs7Ozs7Ozs7Ozs7Q0FZQyxHQUNELElBQUlBLG1CQUFtQkMsbUJBQU9BLENBQUMsaUZBQW9CO0FBRW5ELElBQUlDLDJCQUEyQixTQUFTQSx5QkFBeUJDLEtBQUssRUFBRUMsUUFBUTtJQUM5RSxJQUFJQywwQkFBMEJGLGlCQUFpQkg7SUFFL0MsSUFBSSxDQUFDSyx5QkFBeUI7UUFDNUIsT0FBTztJQUNUO0lBRUEsSUFBSUMsaUJBQWlCSCxNQUFNSSxpQkFBaUI7SUFFNUMsSUFBSUQsZ0JBQWdCO1FBQ2xCLE9BQU9BO0lBQ1Q7SUFFQSxJQUFJRSxTQUFTTCxNQUFNTSxZQUFZO0lBRS9CLElBQUksQ0FBQ0QsUUFBUTtRQUNYLE9BQU87SUFDVDtJQUVBLElBQUlFLHlCQUF5Qk4sU0FBU08sR0FBRyxDQUFDSDtJQUUxQyxNQUFPRSwwQkFBMEIsQ0FBQ0EsdUJBQXVCSCxpQkFBaUIsR0FBSTtRQUM1RSxJQUFJSyxZQUFZRix1QkFBdUJELFlBQVk7UUFDbkRDLHlCQUF5QkUsWUFBWVIsU0FBU08sR0FBRyxDQUFDQyxhQUFhO0lBQ2pFO0lBRUEsSUFBSSxDQUFDRix3QkFBd0I7UUFDM0IsT0FBTztJQUNUO0lBRUEsT0FBT0EsdUJBQXVCSCxpQkFBaUI7QUFDakQ7QUFFQU0sT0FBT0MsT0FBTyxHQUFHWiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9nZXROZXh0RGVsaW1pdGVyQmxvY2tLZXkuanM/NTQyYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKlxuICogVGhpcyBpcyB1bnN0YWJsZSBhbmQgbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgYW5kIHNob3VsZCBub3QgYmUgdXNlZCBieVxuICogcHJvZHVjdGlvbiBzeXN0ZW1zLiBUaGlzIGZpbGUgbWF5IGJlIHVwZGF0ZS9yZW1vdmVkIHdpdGhvdXQgbm90aWNlLlxuICovXG52YXIgQ29udGVudEJsb2NrTm9kZSA9IHJlcXVpcmUoXCIuL0NvbnRlbnRCbG9ja05vZGVcIik7XG5cbnZhciBnZXROZXh0RGVsaW1pdGVyQmxvY2tLZXkgPSBmdW5jdGlvbiBnZXROZXh0RGVsaW1pdGVyQmxvY2tLZXkoYmxvY2ssIGJsb2NrTWFwKSB7XG4gIHZhciBpc0V4cGVyaW1lbnRhbFRyZWVCbG9jayA9IGJsb2NrIGluc3RhbmNlb2YgQ29udGVudEJsb2NrTm9kZTtcblxuICBpZiAoIWlzRXhwZXJpbWVudGFsVHJlZUJsb2NrKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgbmV4dFNpYmxpbmdLZXkgPSBibG9jay5nZXROZXh0U2libGluZ0tleSgpO1xuXG4gIGlmIChuZXh0U2libGluZ0tleSkge1xuICAgIHJldHVybiBuZXh0U2libGluZ0tleTtcbiAgfVxuXG4gIHZhciBwYXJlbnQgPSBibG9jay5nZXRQYXJlbnRLZXkoKTtcblxuICBpZiAoIXBhcmVudCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIG5leHROb25EZXNjZW5kYW50QmxvY2sgPSBibG9ja01hcC5nZXQocGFyZW50KTtcblxuICB3aGlsZSAobmV4dE5vbkRlc2NlbmRhbnRCbG9jayAmJiAhbmV4dE5vbkRlc2NlbmRhbnRCbG9jay5nZXROZXh0U2libGluZ0tleSgpKSB7XG4gICAgdmFyIHBhcmVudEtleSA9IG5leHROb25EZXNjZW5kYW50QmxvY2suZ2V0UGFyZW50S2V5KCk7XG4gICAgbmV4dE5vbkRlc2NlbmRhbnRCbG9jayA9IHBhcmVudEtleSA/IGJsb2NrTWFwLmdldChwYXJlbnRLZXkpIDogbnVsbDtcbiAgfVxuXG4gIGlmICghbmV4dE5vbkRlc2NlbmRhbnRCbG9jaykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIG5leHROb25EZXNjZW5kYW50QmxvY2suZ2V0TmV4dFNpYmxpbmdLZXkoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TmV4dERlbGltaXRlckJsb2NrS2V5OyJdLCJuYW1lcyI6WyJDb250ZW50QmxvY2tOb2RlIiwicmVxdWlyZSIsImdldE5leHREZWxpbWl0ZXJCbG9ja0tleSIsImJsb2NrIiwiYmxvY2tNYXAiLCJpc0V4cGVyaW1lbnRhbFRyZWVCbG9jayIsIm5leHRTaWJsaW5nS2V5IiwiZ2V0TmV4dFNpYmxpbmdLZXkiLCJwYXJlbnQiLCJnZXRQYXJlbnRLZXkiLCJuZXh0Tm9uRGVzY2VuZGFudEJsb2NrIiwiZ2V0IiwicGFyZW50S2V5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getNextDelimiterBlockKey.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getOwnObjectValues.js":
/*!*********************************************************!*\
  !*** ./node_modules/draft-js/lib/getOwnObjectValues.js ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";
eval("\n/**\n * Copyright 2004-present Facebook. All Rights Reserved.\n *\n * \n * @typechecks\n * @format\n */ /**\n * Retrieve an object's own values as an array. If you want the values in the\n * protoype chain, too, use getObjectValuesIncludingPrototype.\n *\n * If you are looking for a function that creates an Array instance based\n * on an \"Array-like\" object, use createArrayFrom instead.\n *\n * @param {object} obj An object.\n * @return {array}     The object's values.\n */ function getOwnObjectValues(obj) {\n    return Object.keys(obj).map(function(key) {\n        return obj[key];\n    });\n}\nmodule.exports = getOwnObjectValues;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldE93bk9iamVjdFZhbHVlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViOzs7Ozs7Q0FNQyxHQUVEOzs7Ozs7Ozs7Q0FTQyxHQUNELFNBQVNBLG1CQUFtQkMsR0FBRztJQUM3QixPQUFPQyxPQUFPQyxJQUFJLENBQUNGLEtBQUtHLEdBQUcsQ0FBQyxTQUFVQyxHQUFHO1FBQ3ZDLE9BQU9KLEdBQUcsQ0FBQ0ksSUFBSTtJQUNqQjtBQUNGO0FBRUFDLE9BQU9DLE9BQU8sR0FBR1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWVsLWhhcnZlc3Rlci8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZ2V0T3duT2JqZWN0VmFsdWVzLmpzP2ZlNjYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMDQtcHJlc2VudCBGYWNlYm9vay4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBcbiAqIEB0eXBlY2hlY2tzXG4gKiBAZm9ybWF0XG4gKi9cblxuLyoqXG4gKiBSZXRyaWV2ZSBhbiBvYmplY3QncyBvd24gdmFsdWVzIGFzIGFuIGFycmF5LiBJZiB5b3Ugd2FudCB0aGUgdmFsdWVzIGluIHRoZVxuICogcHJvdG95cGUgY2hhaW4sIHRvbywgdXNlIGdldE9iamVjdFZhbHVlc0luY2x1ZGluZ1Byb3RvdHlwZS5cbiAqXG4gKiBJZiB5b3UgYXJlIGxvb2tpbmcgZm9yIGEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIGFuIEFycmF5IGluc3RhbmNlIGJhc2VkXG4gKiBvbiBhbiBcIkFycmF5LWxpa2VcIiBvYmplY3QsIHVzZSBjcmVhdGVBcnJheUZyb20gaW5zdGVhZC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb2JqIEFuIG9iamVjdC5cbiAqIEByZXR1cm4ge2FycmF5fSAgICAgVGhlIG9iamVjdCdzIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gZ2V0T3duT2JqZWN0VmFsdWVzKG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBvYmpba2V5XTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0T3duT2JqZWN0VmFsdWVzOyJdLCJuYW1lcyI6WyJnZXRPd25PYmplY3RWYWx1ZXMiLCJvYmoiLCJPYmplY3QiLCJrZXlzIiwibWFwIiwia2V5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getOwnObjectValues.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getRangeBoundingClientRect.js":
/*!*****************************************************************!*\
  !*** ./node_modules/draft-js/lib/getRangeBoundingClientRect.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar getRangeClientRects = __webpack_require__(/*! ./getRangeClientRects */ \"(ssr)/./node_modules/draft-js/lib/getRangeClientRects.js\");\n/**\n * Like range.getBoundingClientRect() but normalizes for browser bugs.\n */ function getRangeBoundingClientRect(range) {\n    // \"Return a DOMRect object describing the smallest rectangle that includes\n    // the first rectangle in list and all of the remaining rectangles of which\n    // the height or width is not zero.\"\n    // http://www.w3.org/TR/cssom-view/#dom-range-getboundingclientrect\n    var rects = getRangeClientRects(range);\n    var top = 0;\n    var right = 0;\n    var bottom = 0;\n    var left = 0;\n    if (rects.length) {\n        // If the first rectangle has 0 width, we use the second, this is needed\n        // because Chrome renders a 0 width rectangle when the selection contains\n        // a line break.\n        if (rects.length > 1 && rects[0].width === 0) {\n            var _rects$ = rects[1];\n            top = _rects$.top;\n            right = _rects$.right;\n            bottom = _rects$.bottom;\n            left = _rects$.left;\n        } else {\n            var _rects$2 = rects[0];\n            top = _rects$2.top;\n            right = _rects$2.right;\n            bottom = _rects$2.bottom;\n            left = _rects$2.left;\n        }\n        for(var ii = 1; ii < rects.length; ii++){\n            var rect = rects[ii];\n            if (rect.height !== 0 && rect.width !== 0) {\n                top = Math.min(top, rect.top);\n                right = Math.max(right, rect.right);\n                bottom = Math.max(bottom, rect.bottom);\n                left = Math.min(left, rect.left);\n            }\n        }\n    }\n    return {\n        top: top,\n        right: right,\n        bottom: bottom,\n        left: left,\n        width: right - left,\n        height: bottom - top\n    };\n}\nmodule.exports = getRangeBoundingClientRect;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldFJhbmdlQm91bmRpbmdDbGllbnRSZWN0LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsc0JBQXNCQyxtQkFBT0EsQ0FBQyx1RkFBdUI7QUFFekQ7O0NBRUMsR0FDRCxTQUFTQywyQkFBMkJDLEtBQUs7SUFDdkMsMkVBQTJFO0lBQzNFLDJFQUEyRTtJQUMzRSxvQ0FBb0M7SUFDcEMsbUVBQW1FO0lBQ25FLElBQUlDLFFBQVFKLG9CQUFvQkc7SUFDaEMsSUFBSUUsTUFBTTtJQUNWLElBQUlDLFFBQVE7SUFDWixJQUFJQyxTQUFTO0lBQ2IsSUFBSUMsT0FBTztJQUVYLElBQUlKLE1BQU1LLE1BQU0sRUFBRTtRQUNoQix3RUFBd0U7UUFDeEUseUVBQXlFO1FBQ3pFLGdCQUFnQjtRQUNoQixJQUFJTCxNQUFNSyxNQUFNLEdBQUcsS0FBS0wsS0FBSyxDQUFDLEVBQUUsQ0FBQ00sS0FBSyxLQUFLLEdBQUc7WUFDNUMsSUFBSUMsVUFBVVAsS0FBSyxDQUFDLEVBQUU7WUFDdEJDLE1BQU1NLFFBQVFOLEdBQUc7WUFDakJDLFFBQVFLLFFBQVFMLEtBQUs7WUFDckJDLFNBQVNJLFFBQVFKLE1BQU07WUFDdkJDLE9BQU9HLFFBQVFILElBQUk7UUFDckIsT0FBTztZQUNMLElBQUlJLFdBQVdSLEtBQUssQ0FBQyxFQUFFO1lBQ3ZCQyxNQUFNTyxTQUFTUCxHQUFHO1lBQ2xCQyxRQUFRTSxTQUFTTixLQUFLO1lBQ3RCQyxTQUFTSyxTQUFTTCxNQUFNO1lBQ3hCQyxPQUFPSSxTQUFTSixJQUFJO1FBQ3RCO1FBRUEsSUFBSyxJQUFJSyxLQUFLLEdBQUdBLEtBQUtULE1BQU1LLE1BQU0sRUFBRUksS0FBTTtZQUN4QyxJQUFJQyxPQUFPVixLQUFLLENBQUNTLEdBQUc7WUFFcEIsSUFBSUMsS0FBS0MsTUFBTSxLQUFLLEtBQUtELEtBQUtKLEtBQUssS0FBSyxHQUFHO2dCQUN6Q0wsTUFBTVcsS0FBS0MsR0FBRyxDQUFDWixLQUFLUyxLQUFLVCxHQUFHO2dCQUM1QkMsUUFBUVUsS0FBS0UsR0FBRyxDQUFDWixPQUFPUSxLQUFLUixLQUFLO2dCQUNsQ0MsU0FBU1MsS0FBS0UsR0FBRyxDQUFDWCxRQUFRTyxLQUFLUCxNQUFNO2dCQUNyQ0MsT0FBT1EsS0FBS0MsR0FBRyxDQUFDVCxNQUFNTSxLQUFLTixJQUFJO1lBQ2pDO1FBQ0Y7SUFDRjtJQUVBLE9BQU87UUFDTEgsS0FBS0E7UUFDTEMsT0FBT0E7UUFDUEMsUUFBUUE7UUFDUkMsTUFBTUE7UUFDTkUsT0FBT0osUUFBUUU7UUFDZk8sUUFBUVIsU0FBU0Y7SUFDbkI7QUFDRjtBQUVBYyxPQUFPQyxPQUFPLEdBQUdsQiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9nZXRSYW5nZUJvdW5kaW5nQ2xpZW50UmVjdC5qcz82N2M5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBnZXRSYW5nZUNsaWVudFJlY3RzID0gcmVxdWlyZShcIi4vZ2V0UmFuZ2VDbGllbnRSZWN0c1wiKTtcblxuLyoqXG4gKiBMaWtlIHJhbmdlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIGJ1dCBub3JtYWxpemVzIGZvciBicm93c2VyIGJ1Z3MuXG4gKi9cbmZ1bmN0aW9uIGdldFJhbmdlQm91bmRpbmdDbGllbnRSZWN0KHJhbmdlKSB7XG4gIC8vIFwiUmV0dXJuIGEgRE9NUmVjdCBvYmplY3QgZGVzY3JpYmluZyB0aGUgc21hbGxlc3QgcmVjdGFuZ2xlIHRoYXQgaW5jbHVkZXNcbiAgLy8gdGhlIGZpcnN0IHJlY3RhbmdsZSBpbiBsaXN0IGFuZCBhbGwgb2YgdGhlIHJlbWFpbmluZyByZWN0YW5nbGVzIG9mIHdoaWNoXG4gIC8vIHRoZSBoZWlnaHQgb3Igd2lkdGggaXMgbm90IHplcm8uXCJcbiAgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvY3Nzb20tdmlldy8jZG9tLXJhbmdlLWdldGJvdW5kaW5nY2xpZW50cmVjdFxuICB2YXIgcmVjdHMgPSBnZXRSYW5nZUNsaWVudFJlY3RzKHJhbmdlKTtcbiAgdmFyIHRvcCA9IDA7XG4gIHZhciByaWdodCA9IDA7XG4gIHZhciBib3R0b20gPSAwO1xuICB2YXIgbGVmdCA9IDA7XG5cbiAgaWYgKHJlY3RzLmxlbmd0aCkge1xuICAgIC8vIElmIHRoZSBmaXJzdCByZWN0YW5nbGUgaGFzIDAgd2lkdGgsIHdlIHVzZSB0aGUgc2Vjb25kLCB0aGlzIGlzIG5lZWRlZFxuICAgIC8vIGJlY2F1c2UgQ2hyb21lIHJlbmRlcnMgYSAwIHdpZHRoIHJlY3RhbmdsZSB3aGVuIHRoZSBzZWxlY3Rpb24gY29udGFpbnNcbiAgICAvLyBhIGxpbmUgYnJlYWsuXG4gICAgaWYgKHJlY3RzLmxlbmd0aCA+IDEgJiYgcmVjdHNbMF0ud2lkdGggPT09IDApIHtcbiAgICAgIHZhciBfcmVjdHMkID0gcmVjdHNbMV07XG4gICAgICB0b3AgPSBfcmVjdHMkLnRvcDtcbiAgICAgIHJpZ2h0ID0gX3JlY3RzJC5yaWdodDtcbiAgICAgIGJvdHRvbSA9IF9yZWN0cyQuYm90dG9tO1xuICAgICAgbGVmdCA9IF9yZWN0cyQubGVmdDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF9yZWN0cyQyID0gcmVjdHNbMF07XG4gICAgICB0b3AgPSBfcmVjdHMkMi50b3A7XG4gICAgICByaWdodCA9IF9yZWN0cyQyLnJpZ2h0O1xuICAgICAgYm90dG9tID0gX3JlY3RzJDIuYm90dG9tO1xuICAgICAgbGVmdCA9IF9yZWN0cyQyLmxlZnQ7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaWkgPSAxOyBpaSA8IHJlY3RzLmxlbmd0aDsgaWkrKykge1xuICAgICAgdmFyIHJlY3QgPSByZWN0c1tpaV07XG5cbiAgICAgIGlmIChyZWN0LmhlaWdodCAhPT0gMCAmJiByZWN0LndpZHRoICE9PSAwKSB7XG4gICAgICAgIHRvcCA9IE1hdGgubWluKHRvcCwgcmVjdC50b3ApO1xuICAgICAgICByaWdodCA9IE1hdGgubWF4KHJpZ2h0LCByZWN0LnJpZ2h0KTtcbiAgICAgICAgYm90dG9tID0gTWF0aC5tYXgoYm90dG9tLCByZWN0LmJvdHRvbSk7XG4gICAgICAgIGxlZnQgPSBNYXRoLm1pbihsZWZ0LCByZWN0LmxlZnQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdG9wOiB0b3AsXG4gICAgcmlnaHQ6IHJpZ2h0LFxuICAgIGJvdHRvbTogYm90dG9tLFxuICAgIGxlZnQ6IGxlZnQsXG4gICAgd2lkdGg6IHJpZ2h0IC0gbGVmdCxcbiAgICBoZWlnaHQ6IGJvdHRvbSAtIHRvcFxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFJhbmdlQm91bmRpbmdDbGllbnRSZWN0OyJdLCJuYW1lcyI6WyJnZXRSYW5nZUNsaWVudFJlY3RzIiwicmVxdWlyZSIsImdldFJhbmdlQm91bmRpbmdDbGllbnRSZWN0IiwicmFuZ2UiLCJyZWN0cyIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwibGVmdCIsImxlbmd0aCIsIndpZHRoIiwiX3JlY3RzJCIsIl9yZWN0cyQyIiwiaWkiLCJyZWN0IiwiaGVpZ2h0IiwiTWF0aCIsIm1pbiIsIm1heCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getRangeBoundingClientRect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getRangeClientRects.js":
/*!**********************************************************!*\
  !*** ./node_modules/draft-js/lib/getRangeClientRects.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar UserAgent = __webpack_require__(/*! fbjs/lib/UserAgent */ \"(ssr)/./node_modules/fbjs/lib/UserAgent.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar isChrome = UserAgent.isBrowser(\"Chrome\"); // In Chrome, the client rects will include the entire bounds of all nodes that\n// begin (have a start tag) within the selection, even if the selection does\n// not overlap the entire node. To resolve this, we split the range at each\n// start tag and join the client rects together.\n// https://code.google.com/p/chromium/issues/detail?id=324437\n/* eslint-disable consistent-return */ function getRangeClientRectsChrome(range) {\n    var tempRange = range.cloneRange();\n    var clientRects = [];\n    for(var ancestor = range.endContainer; ancestor != null; ancestor = ancestor.parentNode){\n        // If we've climbed up to the common ancestor, we can now use the\n        // original start point and stop climbing the tree.\n        var atCommonAncestor = ancestor === range.commonAncestorContainer;\n        if (atCommonAncestor) {\n            tempRange.setStart(range.startContainer, range.startOffset);\n        } else {\n            tempRange.setStart(tempRange.endContainer, 0);\n        }\n        var rects = Array.from(tempRange.getClientRects());\n        clientRects.push(rects);\n        if (atCommonAncestor) {\n            var _ref;\n            clientRects.reverse();\n            return (_ref = []).concat.apply(_ref, clientRects);\n        }\n        tempRange.setEndBefore(ancestor);\n    }\n     true ?  true ? invariant(false, \"Found an unexpected detached subtree when getting range client rects.\") : 0 : 0;\n}\n/* eslint-enable consistent-return */ /**\n * Like range.getClientRects() but normalizes for browser bugs.\n */ var getRangeClientRects = isChrome ? getRangeClientRectsChrome : function(range) {\n    return Array.from(range.getClientRects());\n};\nmodule.exports = getRangeClientRects;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldFJhbmdlQ2xpZW50UmVjdHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFFQSxJQUFJQSxZQUFZQyxtQkFBT0EsQ0FBQyxzRUFBb0I7QUFFNUMsSUFBSUMsWUFBWUQsbUJBQU9BLENBQUMsc0VBQW9CO0FBRTVDLElBQUlFLFdBQVdILFVBQVVJLFNBQVMsQ0FBQyxXQUFXLCtFQUErRTtBQUM3SCw0RUFBNEU7QUFDNUUsMkVBQTJFO0FBQzNFLGdEQUFnRDtBQUNoRCw2REFBNkQ7QUFFN0Qsb0NBQW9DLEdBRXBDLFNBQVNDLDBCQUEwQkMsS0FBSztJQUN0QyxJQUFJQyxZQUFZRCxNQUFNRSxVQUFVO0lBQ2hDLElBQUlDLGNBQWMsRUFBRTtJQUVwQixJQUFLLElBQUlDLFdBQVdKLE1BQU1LLFlBQVksRUFBRUQsWUFBWSxNQUFNQSxXQUFXQSxTQUFTRSxVQUFVLENBQUU7UUFDeEYsaUVBQWlFO1FBQ2pFLG1EQUFtRDtRQUNuRCxJQUFJQyxtQkFBbUJILGFBQWFKLE1BQU1RLHVCQUF1QjtRQUVqRSxJQUFJRCxrQkFBa0I7WUFDcEJOLFVBQVVRLFFBQVEsQ0FBQ1QsTUFBTVUsY0FBYyxFQUFFVixNQUFNVyxXQUFXO1FBQzVELE9BQU87WUFDTFYsVUFBVVEsUUFBUSxDQUFDUixVQUFVSSxZQUFZLEVBQUU7UUFDN0M7UUFFQSxJQUFJTyxRQUFRQyxNQUFNQyxJQUFJLENBQUNiLFVBQVVjLGNBQWM7UUFDL0NaLFlBQVlhLElBQUksQ0FBQ0o7UUFFakIsSUFBSUwsa0JBQWtCO1lBQ3BCLElBQUlVO1lBRUpkLFlBQVllLE9BQU87WUFDbkIsT0FBTyxDQUFDRCxPQUFPLEVBQUUsRUFBRUUsTUFBTSxDQUFDQyxLQUFLLENBQUNILE1BQU1kO1FBQ3hDO1FBRUFGLFVBQVVvQixZQUFZLENBQUNqQjtJQUN6QjtJQUVBLEtBQU0sR0FBR2tCLEtBQXFDLEdBQUcxQixVQUFVLE9BQU8sMkVBQTJFQSxDQUFnQixHQUFHLENBQU07QUFDeEs7QUFDQSxtQ0FBbUMsR0FFbkM7O0NBRUMsR0FHRCxJQUFJMkIsc0JBQXNCMUIsV0FBV0UsNEJBQTRCLFNBQVVDLEtBQUs7SUFDOUUsT0FBT2EsTUFBTUMsSUFBSSxDQUFDZCxNQUFNZSxjQUFjO0FBQ3hDO0FBQ0FTLE9BQU9DLE9BQU8sR0FBR0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWVsLWhhcnZlc3Rlci8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZ2V0UmFuZ2VDbGllbnRSZWN0cy5qcz9jODI1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBVc2VyQWdlbnQgPSByZXF1aXJlKFwiZmJqcy9saWIvVXNlckFnZW50XCIpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKTtcblxudmFyIGlzQ2hyb21lID0gVXNlckFnZW50LmlzQnJvd3NlcignQ2hyb21lJyk7IC8vIEluIENocm9tZSwgdGhlIGNsaWVudCByZWN0cyB3aWxsIGluY2x1ZGUgdGhlIGVudGlyZSBib3VuZHMgb2YgYWxsIG5vZGVzIHRoYXRcbi8vIGJlZ2luIChoYXZlIGEgc3RhcnQgdGFnKSB3aXRoaW4gdGhlIHNlbGVjdGlvbiwgZXZlbiBpZiB0aGUgc2VsZWN0aW9uIGRvZXNcbi8vIG5vdCBvdmVybGFwIHRoZSBlbnRpcmUgbm9kZS4gVG8gcmVzb2x2ZSB0aGlzLCB3ZSBzcGxpdCB0aGUgcmFuZ2UgYXQgZWFjaFxuLy8gc3RhcnQgdGFnIGFuZCBqb2luIHRoZSBjbGllbnQgcmVjdHMgdG9nZXRoZXIuXG4vLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MzI0NDM3XG5cbi8qIGVzbGludC1kaXNhYmxlIGNvbnNpc3RlbnQtcmV0dXJuICovXG5cbmZ1bmN0aW9uIGdldFJhbmdlQ2xpZW50UmVjdHNDaHJvbWUocmFuZ2UpIHtcbiAgdmFyIHRlbXBSYW5nZSA9IHJhbmdlLmNsb25lUmFuZ2UoKTtcbiAgdmFyIGNsaWVudFJlY3RzID0gW107XG5cbiAgZm9yICh2YXIgYW5jZXN0b3IgPSByYW5nZS5lbmRDb250YWluZXI7IGFuY2VzdG9yICE9IG51bGw7IGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50Tm9kZSkge1xuICAgIC8vIElmIHdlJ3ZlIGNsaW1iZWQgdXAgdG8gdGhlIGNvbW1vbiBhbmNlc3Rvciwgd2UgY2FuIG5vdyB1c2UgdGhlXG4gICAgLy8gb3JpZ2luYWwgc3RhcnQgcG9pbnQgYW5kIHN0b3AgY2xpbWJpbmcgdGhlIHRyZWUuXG4gICAgdmFyIGF0Q29tbW9uQW5jZXN0b3IgPSBhbmNlc3RvciA9PT0gcmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXI7XG5cbiAgICBpZiAoYXRDb21tb25BbmNlc3Rvcikge1xuICAgICAgdGVtcFJhbmdlLnNldFN0YXJ0KHJhbmdlLnN0YXJ0Q29udGFpbmVyLCByYW5nZS5zdGFydE9mZnNldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRlbXBSYW5nZS5zZXRTdGFydCh0ZW1wUmFuZ2UuZW5kQ29udGFpbmVyLCAwKTtcbiAgICB9XG5cbiAgICB2YXIgcmVjdHMgPSBBcnJheS5mcm9tKHRlbXBSYW5nZS5nZXRDbGllbnRSZWN0cygpKTtcbiAgICBjbGllbnRSZWN0cy5wdXNoKHJlY3RzKTtcblxuICAgIGlmIChhdENvbW1vbkFuY2VzdG9yKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgY2xpZW50UmVjdHMucmV2ZXJzZSgpO1xuICAgICAgcmV0dXJuIChfcmVmID0gW10pLmNvbmNhdC5hcHBseShfcmVmLCBjbGllbnRSZWN0cyk7XG4gICAgfVxuXG4gICAgdGVtcFJhbmdlLnNldEVuZEJlZm9yZShhbmNlc3Rvcik7XG4gIH1cblxuICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdGb3VuZCBhbiB1bmV4cGVjdGVkIGRldGFjaGVkIHN1YnRyZWUgd2hlbiBnZXR0aW5nIHJhbmdlIGNsaWVudCByZWN0cy4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG59XG4vKiBlc2xpbnQtZW5hYmxlIGNvbnNpc3RlbnQtcmV0dXJuICovXG5cbi8qKlxuICogTGlrZSByYW5nZS5nZXRDbGllbnRSZWN0cygpIGJ1dCBub3JtYWxpemVzIGZvciBicm93c2VyIGJ1Z3MuXG4gKi9cblxuXG52YXIgZ2V0UmFuZ2VDbGllbnRSZWN0cyA9IGlzQ2hyb21lID8gZ2V0UmFuZ2VDbGllbnRSZWN0c0Nocm9tZSA6IGZ1bmN0aW9uIChyYW5nZSkge1xuICByZXR1cm4gQXJyYXkuZnJvbShyYW5nZS5nZXRDbGllbnRSZWN0cygpKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGdldFJhbmdlQ2xpZW50UmVjdHM7Il0sIm5hbWVzIjpbIlVzZXJBZ2VudCIsInJlcXVpcmUiLCJpbnZhcmlhbnQiLCJpc0Nocm9tZSIsImlzQnJvd3NlciIsImdldFJhbmdlQ2xpZW50UmVjdHNDaHJvbWUiLCJyYW5nZSIsInRlbXBSYW5nZSIsImNsb25lUmFuZ2UiLCJjbGllbnRSZWN0cyIsImFuY2VzdG9yIiwiZW5kQ29udGFpbmVyIiwicGFyZW50Tm9kZSIsImF0Q29tbW9uQW5jZXN0b3IiLCJjb21tb25BbmNlc3RvckNvbnRhaW5lciIsInNldFN0YXJ0Iiwic3RhcnRDb250YWluZXIiLCJzdGFydE9mZnNldCIsInJlY3RzIiwiQXJyYXkiLCJmcm9tIiwiZ2V0Q2xpZW50UmVjdHMiLCJwdXNoIiwiX3JlZiIsInJldmVyc2UiLCJjb25jYXQiLCJhcHBseSIsInNldEVuZEJlZm9yZSIsInByb2Nlc3MiLCJnZXRSYW5nZUNsaWVudFJlY3RzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getRangeClientRects.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getRangesForDraftEntity.js":
/*!**************************************************************!*\
  !*** ./node_modules/draft-js/lib/getRangesForDraftEntity.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\n/**\n * Obtain the start and end positions of the range that has the\n * specified entity applied to it.\n *\n * Entity keys are applied only to contiguous stretches of text, so this\n * method searches for the first instance of the entity key and returns\n * the subsequent range.\n */ function getRangesForDraftEntity(block, key) {\n    var ranges = [];\n    block.findEntityRanges(function(c) {\n        return c.getEntity() === key;\n    }, function(start, end) {\n        ranges.push({\n            start: start,\n            end: end\n        });\n    });\n    !!!ranges.length ?  true ? invariant(false, \"Entity key not found in this range.\") : 0 : void 0;\n    return ranges;\n}\nmodule.exports = getRangesForDraftEntity;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldFJhbmdlc0ZvckRyYWZ0RW50aXR5LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsWUFBWUMsbUJBQU9BLENBQUMsc0VBQW9CO0FBQzVDOzs7Ozs7O0NBT0MsR0FHRCxTQUFTQyx3QkFBd0JDLEtBQUssRUFBRUMsR0FBRztJQUN6QyxJQUFJQyxTQUFTLEVBQUU7SUFDZkYsTUFBTUcsZ0JBQWdCLENBQUMsU0FBVUMsQ0FBQztRQUNoQyxPQUFPQSxFQUFFQyxTQUFTLE9BQU9KO0lBQzNCLEdBQUcsU0FBVUssS0FBSyxFQUFFQyxHQUFHO1FBQ3JCTCxPQUFPTSxJQUFJLENBQUM7WUFDVkYsT0FBT0E7WUFDUEMsS0FBS0E7UUFDUDtJQUNGO0lBQ0EsQ0FBQyxDQUFDLENBQUNMLE9BQU9PLE1BQU0sR0FBR0MsS0FBcUMsR0FBR2IsVUFBVSxPQUFPLHlDQUF5Q0EsQ0FBZ0IsR0FBRyxLQUFLO0lBQzdJLE9BQU9LO0FBQ1Q7QUFFQVMsT0FBT0MsT0FBTyxHQUFHYiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9nZXRSYW5nZXNGb3JEcmFmdEVudGl0eS5qcz9lMDU0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpO1xuLyoqXG4gKiBPYnRhaW4gdGhlIHN0YXJ0IGFuZCBlbmQgcG9zaXRpb25zIG9mIHRoZSByYW5nZSB0aGF0IGhhcyB0aGVcbiAqIHNwZWNpZmllZCBlbnRpdHkgYXBwbGllZCB0byBpdC5cbiAqXG4gKiBFbnRpdHkga2V5cyBhcmUgYXBwbGllZCBvbmx5IHRvIGNvbnRpZ3VvdXMgc3RyZXRjaGVzIG9mIHRleHQsIHNvIHRoaXNcbiAqIG1ldGhvZCBzZWFyY2hlcyBmb3IgdGhlIGZpcnN0IGluc3RhbmNlIG9mIHRoZSBlbnRpdHkga2V5IGFuZCByZXR1cm5zXG4gKiB0aGUgc3Vic2VxdWVudCByYW5nZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFJhbmdlc0ZvckRyYWZ0RW50aXR5KGJsb2NrLCBrZXkpIHtcbiAgdmFyIHJhbmdlcyA9IFtdO1xuICBibG9jay5maW5kRW50aXR5UmFuZ2VzKGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIGMuZ2V0RW50aXR5KCkgPT09IGtleTtcbiAgfSwgZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICByYW5nZXMucHVzaCh7XG4gICAgICBzdGFydDogc3RhcnQsXG4gICAgICBlbmQ6IGVuZFxuICAgIH0pO1xuICB9KTtcbiAgISEhcmFuZ2VzLmxlbmd0aCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0VudGl0eSBrZXkgbm90IGZvdW5kIGluIHRoaXMgcmFuZ2UuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gcmFuZ2VzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFJhbmdlc0ZvckRyYWZ0RW50aXR5OyJdLCJuYW1lcyI6WyJpbnZhcmlhbnQiLCJyZXF1aXJlIiwiZ2V0UmFuZ2VzRm9yRHJhZnRFbnRpdHkiLCJibG9jayIsImtleSIsInJhbmdlcyIsImZpbmRFbnRpdHlSYW5nZXMiLCJjIiwiZ2V0RW50aXR5Iiwic3RhcnQiLCJlbmQiLCJwdXNoIiwibGVuZ3RoIiwicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getRangesForDraftEntity.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getSafeBodyFromHTML.js":
/*!**********************************************************!*\
  !*** ./node_modules/draft-js/lib/getSafeBodyFromHTML.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar UserAgent = __webpack_require__(/*! fbjs/lib/UserAgent */ \"(ssr)/./node_modules/fbjs/lib/UserAgent.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar isOldIE = UserAgent.isBrowser(\"IE <= 9\"); // Provides a dom node that will not execute scripts\n// https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation.createHTMLDocument\n// https://developer.mozilla.org/en-US/Add-ons/Code_snippets/HTML_to_DOM\nfunction getSafeBodyFromHTML(html) {\n    var doc;\n    var root = null; // Provides a safe context\n    if (!isOldIE && document.implementation && document.implementation.createHTMLDocument) {\n        doc = document.implementation.createHTMLDocument(\"foo\");\n        !doc.documentElement ?  true ? invariant(false, \"Missing doc.documentElement\") : 0 : void 0;\n        doc.documentElement.innerHTML = html;\n        root = doc.getElementsByTagName(\"body\")[0];\n    }\n    return root;\n}\nmodule.exports = getSafeBodyFromHTML;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldFNhZmVCb2R5RnJvbUhUTUwuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFFQSxJQUFJQSxZQUFZQyxtQkFBT0EsQ0FBQyxzRUFBb0I7QUFFNUMsSUFBSUMsWUFBWUQsbUJBQU9BLENBQUMsc0VBQW9CO0FBRTVDLElBQUlFLFVBQVVILFVBQVVJLFNBQVMsQ0FBQyxZQUFZLG9EQUFvRDtBQUNsRyx3RkFBd0Y7QUFDeEYsd0VBQXdFO0FBRXhFLFNBQVNDLG9CQUFvQkMsSUFBSTtJQUMvQixJQUFJQztJQUNKLElBQUlDLE9BQU8sTUFBTSwwQkFBMEI7SUFFM0MsSUFBSSxDQUFDTCxXQUFXTSxTQUFTQyxjQUFjLElBQUlELFNBQVNDLGNBQWMsQ0FBQ0Msa0JBQWtCLEVBQUU7UUFDckZKLE1BQU1FLFNBQVNDLGNBQWMsQ0FBQ0Msa0JBQWtCLENBQUM7UUFDakQsQ0FBQ0osSUFBSUssZUFBZSxHQUFHQyxLQUFxQyxHQUFHWCxVQUFVLE9BQU8saUNBQWlDQSxDQUFnQixHQUFHLEtBQUs7UUFDeklLLElBQUlLLGVBQWUsQ0FBQ0UsU0FBUyxHQUFHUjtRQUNoQ0UsT0FBT0QsSUFBSVEsb0JBQW9CLENBQUMsT0FBTyxDQUFDLEVBQUU7SUFDNUM7SUFFQSxPQUFPUDtBQUNUO0FBRUFRLE9BQU9DLE9BQU8sR0FBR1oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWVsLWhhcnZlc3Rlci8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZ2V0U2FmZUJvZHlGcm9tSFRNTC5qcz84ZDdlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBVc2VyQWdlbnQgPSByZXF1aXJlKFwiZmJqcy9saWIvVXNlckFnZW50XCIpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKTtcblxudmFyIGlzT2xkSUUgPSBVc2VyQWdlbnQuaXNCcm93c2VyKCdJRSA8PSA5Jyk7IC8vIFByb3ZpZGVzIGEgZG9tIG5vZGUgdGhhdCB3aWxsIG5vdCBleGVjdXRlIHNjcmlwdHNcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9ET01JbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL0FkZC1vbnMvQ29kZV9zbmlwcGV0cy9IVE1MX3RvX0RPTVxuXG5mdW5jdGlvbiBnZXRTYWZlQm9keUZyb21IVE1MKGh0bWwpIHtcbiAgdmFyIGRvYztcbiAgdmFyIHJvb3QgPSBudWxsOyAvLyBQcm92aWRlcyBhIHNhZmUgY29udGV4dFxuXG4gIGlmICghaXNPbGRJRSAmJiBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbiAmJiBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQpIHtcbiAgICBkb2MgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoJ2ZvbycpO1xuICAgICFkb2MuZG9jdW1lbnRFbGVtZW50ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnTWlzc2luZyBkb2MuZG9jdW1lbnRFbGVtZW50JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGRvYy5kb2N1bWVudEVsZW1lbnQuaW5uZXJIVE1MID0gaHRtbDtcbiAgICByb290ID0gZG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF07XG4gIH1cblxuICByZXR1cm4gcm9vdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRTYWZlQm9keUZyb21IVE1MOyJdLCJuYW1lcyI6WyJVc2VyQWdlbnQiLCJyZXF1aXJlIiwiaW52YXJpYW50IiwiaXNPbGRJRSIsImlzQnJvd3NlciIsImdldFNhZmVCb2R5RnJvbUhUTUwiLCJodG1sIiwiZG9jIiwicm9vdCIsImRvY3VtZW50IiwiaW1wbGVtZW50YXRpb24iLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJwcm9jZXNzIiwiaW5uZXJIVE1MIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getSafeBodyFromHTML.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getSelectionOffsetKeyForNode.js":
/*!*******************************************************************!*\
  !*** ./node_modules/draft-js/lib/getSelectionOffsetKeyForNode.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \n/**\n * Get offset key from a node or it's child nodes. Return the first offset key\n * found on the DOM tree of given node.\n */ var isElement = __webpack_require__(/*! ./isElement */ \"(ssr)/./node_modules/draft-js/lib/isElement.js\");\nfunction getSelectionOffsetKeyForNode(node) {\n    if (isElement(node)) {\n        var castedNode = node;\n        var offsetKey = castedNode.getAttribute(\"data-offset-key\");\n        if (offsetKey) {\n            return offsetKey;\n        }\n        for(var ii = 0; ii < castedNode.childNodes.length; ii++){\n            var childOffsetKey = getSelectionOffsetKeyForNode(castedNode.childNodes[ii]);\n            if (childOffsetKey) {\n                return childOffsetKey;\n            }\n        }\n    }\n    return null;\n}\nmodule.exports = getSelectionOffsetKeyForNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldFNlbGVjdGlvbk9mZnNldEtleUZvck5vZGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFDQTs7O0NBR0MsR0FFRCxJQUFJQSxZQUFZQyxtQkFBT0EsQ0FBQyxtRUFBYTtBQUVyQyxTQUFTQyw2QkFBNkJDLElBQUk7SUFDeEMsSUFBSUgsVUFBVUcsT0FBTztRQUNuQixJQUFJQyxhQUFhRDtRQUNqQixJQUFJRSxZQUFZRCxXQUFXRSxZQUFZLENBQUM7UUFFeEMsSUFBSUQsV0FBVztZQUNiLE9BQU9BO1FBQ1Q7UUFFQSxJQUFLLElBQUlFLEtBQUssR0FBR0EsS0FBS0gsV0FBV0ksVUFBVSxDQUFDQyxNQUFNLEVBQUVGLEtBQU07WUFDeEQsSUFBSUcsaUJBQWlCUiw2QkFBNkJFLFdBQVdJLFVBQVUsQ0FBQ0QsR0FBRztZQUUzRSxJQUFJRyxnQkFBZ0I7Z0JBQ2xCLE9BQU9BO1lBQ1Q7UUFDRjtJQUNGO0lBRUEsT0FBTztBQUNUO0FBRUFDLE9BQU9DLE9BQU8sR0FBR1YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWVsLWhhcnZlc3Rlci8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZ2V0U2VsZWN0aW9uT2Zmc2V0S2V5Rm9yTm9kZS5qcz8zNWJkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG4vKipcbiAqIEdldCBvZmZzZXQga2V5IGZyb20gYSBub2RlIG9yIGl0J3MgY2hpbGQgbm9kZXMuIFJldHVybiB0aGUgZmlyc3Qgb2Zmc2V0IGtleVxuICogZm91bmQgb24gdGhlIERPTSB0cmVlIG9mIGdpdmVuIG5vZGUuXG4gKi9cblxudmFyIGlzRWxlbWVudCA9IHJlcXVpcmUoXCIuL2lzRWxlbWVudFwiKTtcblxuZnVuY3Rpb24gZ2V0U2VsZWN0aW9uT2Zmc2V0S2V5Rm9yTm9kZShub2RlKSB7XG4gIGlmIChpc0VsZW1lbnQobm9kZSkpIHtcbiAgICB2YXIgY2FzdGVkTm9kZSA9IG5vZGU7XG4gICAgdmFyIG9mZnNldEtleSA9IGNhc3RlZE5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLW9mZnNldC1rZXknKTtcblxuICAgIGlmIChvZmZzZXRLZXkpIHtcbiAgICAgIHJldHVybiBvZmZzZXRLZXk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGNhc3RlZE5vZGUuY2hpbGROb2Rlcy5sZW5ndGg7IGlpKyspIHtcbiAgICAgIHZhciBjaGlsZE9mZnNldEtleSA9IGdldFNlbGVjdGlvbk9mZnNldEtleUZvck5vZGUoY2FzdGVkTm9kZS5jaGlsZE5vZGVzW2lpXSk7XG5cbiAgICAgIGlmIChjaGlsZE9mZnNldEtleSkge1xuICAgICAgICByZXR1cm4gY2hpbGRPZmZzZXRLZXk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0U2VsZWN0aW9uT2Zmc2V0S2V5Rm9yTm9kZTsiXSwibmFtZXMiOlsiaXNFbGVtZW50IiwicmVxdWlyZSIsImdldFNlbGVjdGlvbk9mZnNldEtleUZvck5vZGUiLCJub2RlIiwiY2FzdGVkTm9kZSIsIm9mZnNldEtleSIsImdldEF0dHJpYnV0ZSIsImlpIiwiY2hpbGROb2RlcyIsImxlbmd0aCIsImNoaWxkT2Zmc2V0S2V5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getSelectionOffsetKeyForNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getTextContentFromFiles.js":
/*!**************************************************************!*\
  !*** ./node_modules/draft-js/lib/getTextContentFromFiles.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar TEXT_CLIPPING_REGEX = /\\.textClipping$/;\nvar TEXT_TYPES = {\n    \"text/plain\": true,\n    \"text/html\": true,\n    \"text/rtf\": true\n}; // Somewhat arbitrary upper bound on text size. Let's not lock up the browser.\nvar TEXT_SIZE_UPPER_BOUND = 5000;\n/**\n * Extract the text content from a file list.\n */ function getTextContentFromFiles(files, callback) {\n    var readCount = 0;\n    var results = [];\n    files.forEach(function(/*blob*/ file) {\n        readFile(file, function(/*string*/ text) {\n            readCount++;\n            text && results.push(text.slice(0, TEXT_SIZE_UPPER_BOUND));\n            if (readCount == files.length) {\n                callback(results.join(\"\\r\"));\n            }\n        });\n    });\n}\n/**\n * todo isaac: Do work to turn html/rtf into a content fragment.\n */ function readFile(file, callback) {\n    if (!global.FileReader || file.type && !(file.type in TEXT_TYPES)) {\n        callback(\"\");\n        return;\n    }\n    if (file.type === \"\") {\n        var _contents = \"\"; // Special-case text clippings, which have an empty type but include\n        // `.textClipping` in the file name. `readAsText` results in an empty\n        // string for text clippings, so we force the file name to serve\n        // as the text value for the file.\n        if (TEXT_CLIPPING_REGEX.test(file.name)) {\n            _contents = file.name.replace(TEXT_CLIPPING_REGEX, \"\");\n        }\n        callback(_contents);\n        return;\n    }\n    var reader = new FileReader();\n    reader.onload = function() {\n        var result = reader.result;\n        !(typeof result === \"string\") ?  true ? invariant(false, 'We should be calling \"FileReader.readAsText\" which returns a string') : 0 : void 0;\n        callback(result);\n    };\n    reader.onerror = function() {\n        callback(\"\");\n    };\n    reader.readAsText(file);\n}\nmodule.exports = getTextContentFromFiles;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldFRleHRDb250ZW50RnJvbUZpbGVzLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsWUFBWUMsbUJBQU9BLENBQUMsc0VBQW9CO0FBRTVDLElBQUlDLHNCQUFzQjtBQUMxQixJQUFJQyxhQUFhO0lBQ2YsY0FBYztJQUNkLGFBQWE7SUFDYixZQUFZO0FBQ2QsR0FBRyw4RUFBOEU7QUFFakYsSUFBSUMsd0JBQXdCO0FBQzVCOztDQUVDLEdBRUQsU0FBU0Msd0JBQXdCQyxLQUFLLEVBQUVDLFFBQVE7SUFDOUMsSUFBSUMsWUFBWTtJQUNoQixJQUFJQyxVQUFVLEVBQUU7SUFDaEJILE1BQU1JLE9BQU8sQ0FBQyxTQUNkLE1BQU0sR0FDTkMsSUFBSTtRQUNGQyxTQUFTRCxNQUFNLFNBQ2YsUUFBUSxHQUNSRSxJQUFJO1lBQ0ZMO1lBQ0FLLFFBQVFKLFFBQVFLLElBQUksQ0FBQ0QsS0FBS0UsS0FBSyxDQUFDLEdBQUdYO1lBRW5DLElBQUlJLGFBQWFGLE1BQU1VLE1BQU0sRUFBRTtnQkFDN0JULFNBQVNFLFFBQVFRLElBQUksQ0FBQztZQUN4QjtRQUNGO0lBQ0Y7QUFDRjtBQUNBOztDQUVDLEdBR0QsU0FBU0wsU0FBU0QsSUFBSSxFQUFFSixRQUFRO0lBQzlCLElBQUksQ0FBQ1csT0FBT0MsVUFBVSxJQUFJUixLQUFLUyxJQUFJLElBQUksQ0FBRVQsQ0FBQUEsS0FBS1MsSUFBSSxJQUFJakIsVUFBUyxHQUFJO1FBQ2pFSSxTQUFTO1FBQ1Q7SUFDRjtJQUVBLElBQUlJLEtBQUtTLElBQUksS0FBSyxJQUFJO1FBQ3BCLElBQUlDLFlBQVksSUFBSSxvRUFBb0U7UUFDeEYscUVBQXFFO1FBQ3JFLGdFQUFnRTtRQUNoRSxrQ0FBa0M7UUFFbEMsSUFBSW5CLG9CQUFvQm9CLElBQUksQ0FBQ1gsS0FBS1ksSUFBSSxHQUFHO1lBQ3ZDRixZQUFZVixLQUFLWSxJQUFJLENBQUNDLE9BQU8sQ0FBQ3RCLHFCQUFxQjtRQUNyRDtRQUVBSyxTQUFTYztRQUNUO0lBQ0Y7SUFFQSxJQUFJSSxTQUFTLElBQUlOO0lBRWpCTSxPQUFPQyxNQUFNLEdBQUc7UUFDZCxJQUFJQyxTQUFTRixPQUFPRSxNQUFNO1FBQzFCLENBQUUsUUFBT0EsV0FBVyxRQUFPLElBQUtDLEtBQXFDLEdBQUc1QixVQUFVLE9BQU8seUVBQXlFQSxDQUFnQixHQUFHLEtBQUs7UUFDMUxPLFNBQVNvQjtJQUNYO0lBRUFGLE9BQU9JLE9BQU8sR0FBRztRQUNmdEIsU0FBUztJQUNYO0lBRUFrQixPQUFPSyxVQUFVLENBQUNuQjtBQUNwQjtBQUVBb0IsT0FBT0MsT0FBTyxHQUFHM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWVsLWhhcnZlc3Rlci8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZ2V0VGV4dENvbnRlbnRGcm9tRmlsZXMuanM/ZjllNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKTtcblxudmFyIFRFWFRfQ0xJUFBJTkdfUkVHRVggPSAvXFwudGV4dENsaXBwaW5nJC87XG52YXIgVEVYVF9UWVBFUyA9IHtcbiAgJ3RleHQvcGxhaW4nOiB0cnVlLFxuICAndGV4dC9odG1sJzogdHJ1ZSxcbiAgJ3RleHQvcnRmJzogdHJ1ZVxufTsgLy8gU29tZXdoYXQgYXJiaXRyYXJ5IHVwcGVyIGJvdW5kIG9uIHRleHQgc2l6ZS4gTGV0J3Mgbm90IGxvY2sgdXAgdGhlIGJyb3dzZXIuXG5cbnZhciBURVhUX1NJWkVfVVBQRVJfQk9VTkQgPSA1MDAwO1xuLyoqXG4gKiBFeHRyYWN0IHRoZSB0ZXh0IGNvbnRlbnQgZnJvbSBhIGZpbGUgbGlzdC5cbiAqL1xuXG5mdW5jdGlvbiBnZXRUZXh0Q29udGVudEZyb21GaWxlcyhmaWxlcywgY2FsbGJhY2spIHtcbiAgdmFyIHJlYWRDb3VudCA9IDA7XG4gIHZhciByZXN1bHRzID0gW107XG4gIGZpbGVzLmZvckVhY2goZnVuY3Rpb24gKFxuICAvKmJsb2IqL1xuICBmaWxlKSB7XG4gICAgcmVhZEZpbGUoZmlsZSwgZnVuY3Rpb24gKFxuICAgIC8qc3RyaW5nKi9cbiAgICB0ZXh0KSB7XG4gICAgICByZWFkQ291bnQrKztcbiAgICAgIHRleHQgJiYgcmVzdWx0cy5wdXNoKHRleHQuc2xpY2UoMCwgVEVYVF9TSVpFX1VQUEVSX0JPVU5EKSk7XG5cbiAgICAgIGlmIChyZWFkQ291bnQgPT0gZmlsZXMubGVuZ3RoKSB7XG4gICAgICAgIGNhbGxiYWNrKHJlc3VsdHMuam9pbignXFxyJykpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cbi8qKlxuICogdG9kbyBpc2FhYzogRG8gd29yayB0byB0dXJuIGh0bWwvcnRmIGludG8gYSBjb250ZW50IGZyYWdtZW50LlxuICovXG5cblxuZnVuY3Rpb24gcmVhZEZpbGUoZmlsZSwgY2FsbGJhY2spIHtcbiAgaWYgKCFnbG9iYWwuRmlsZVJlYWRlciB8fCBmaWxlLnR5cGUgJiYgIShmaWxlLnR5cGUgaW4gVEVYVF9UWVBFUykpIHtcbiAgICBjYWxsYmFjaygnJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGZpbGUudHlwZSA9PT0gJycpIHtcbiAgICB2YXIgX2NvbnRlbnRzID0gJyc7IC8vIFNwZWNpYWwtY2FzZSB0ZXh0IGNsaXBwaW5ncywgd2hpY2ggaGF2ZSBhbiBlbXB0eSB0eXBlIGJ1dCBpbmNsdWRlXG4gICAgLy8gYC50ZXh0Q2xpcHBpbmdgIGluIHRoZSBmaWxlIG5hbWUuIGByZWFkQXNUZXh0YCByZXN1bHRzIGluIGFuIGVtcHR5XG4gICAgLy8gc3RyaW5nIGZvciB0ZXh0IGNsaXBwaW5ncywgc28gd2UgZm9yY2UgdGhlIGZpbGUgbmFtZSB0byBzZXJ2ZVxuICAgIC8vIGFzIHRoZSB0ZXh0IHZhbHVlIGZvciB0aGUgZmlsZS5cblxuICAgIGlmIChURVhUX0NMSVBQSU5HX1JFR0VYLnRlc3QoZmlsZS5uYW1lKSkge1xuICAgICAgX2NvbnRlbnRzID0gZmlsZS5uYW1lLnJlcGxhY2UoVEVYVF9DTElQUElOR19SRUdFWCwgJycpO1xuICAgIH1cblxuICAgIGNhbGxiYWNrKF9jb250ZW50cyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG5cbiAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzdWx0ID0gcmVhZGVyLnJlc3VsdDtcbiAgICAhKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ1dlIHNob3VsZCBiZSBjYWxsaW5nIFwiRmlsZVJlYWRlci5yZWFkQXNUZXh0XCIgd2hpY2ggcmV0dXJucyBhIHN0cmluZycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBjYWxsYmFjayhyZXN1bHQpO1xuICB9O1xuXG4gIHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgIGNhbGxiYWNrKCcnKTtcbiAgfTtcblxuICByZWFkZXIucmVhZEFzVGV4dChmaWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRUZXh0Q29udGVudEZyb21GaWxlczsiXSwibmFtZXMiOlsiaW52YXJpYW50IiwicmVxdWlyZSIsIlRFWFRfQ0xJUFBJTkdfUkVHRVgiLCJURVhUX1RZUEVTIiwiVEVYVF9TSVpFX1VQUEVSX0JPVU5EIiwiZ2V0VGV4dENvbnRlbnRGcm9tRmlsZXMiLCJmaWxlcyIsImNhbGxiYWNrIiwicmVhZENvdW50IiwicmVzdWx0cyIsImZvckVhY2giLCJmaWxlIiwicmVhZEZpbGUiLCJ0ZXh0IiwicHVzaCIsInNsaWNlIiwibGVuZ3RoIiwiam9pbiIsImdsb2JhbCIsIkZpbGVSZWFkZXIiLCJ0eXBlIiwiX2NvbnRlbnRzIiwidGVzdCIsIm5hbWUiLCJyZXBsYWNlIiwicmVhZGVyIiwib25sb2FkIiwicmVzdWx0IiwicHJvY2VzcyIsIm9uZXJyb3IiLCJyZWFkQXNUZXh0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getTextContentFromFiles.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getUpdatedSelectionState.js":
/*!***************************************************************!*\
  !*** ./node_modules/draft-js/lib/getUpdatedSelectionState.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DraftOffsetKey = __webpack_require__(/*! ./DraftOffsetKey */ \"(ssr)/./node_modules/draft-js/lib/DraftOffsetKey.js\");\nvar nullthrows = __webpack_require__(/*! fbjs/lib/nullthrows */ \"(ssr)/./node_modules/fbjs/lib/nullthrows.js\");\nfunction getUpdatedSelectionState(editorState, anchorKey, anchorOffset, focusKey, focusOffset) {\n    var selection = nullthrows(editorState.getSelection());\n    if (!anchorKey || !focusKey) {\n        // If we cannot make sense of the updated selection state, stick to the current one.\n        if (true) {\n            /* eslint-disable-next-line */ console.warn(\"Invalid selection state.\", arguments, editorState.toJS());\n        }\n        return selection;\n    }\n    var anchorPath = DraftOffsetKey.decode(anchorKey);\n    var anchorBlockKey = anchorPath.blockKey;\n    var anchorLeafBlockTree = editorState.getBlockTree(anchorBlockKey);\n    var anchorLeaf = anchorLeafBlockTree && anchorLeafBlockTree.getIn([\n        anchorPath.decoratorKey,\n        \"leaves\",\n        anchorPath.leafKey\n    ]);\n    var focusPath = DraftOffsetKey.decode(focusKey);\n    var focusBlockKey = focusPath.blockKey;\n    var focusLeafBlockTree = editorState.getBlockTree(focusBlockKey);\n    var focusLeaf = focusLeafBlockTree && focusLeafBlockTree.getIn([\n        focusPath.decoratorKey,\n        \"leaves\",\n        focusPath.leafKey\n    ]);\n    if (!anchorLeaf || !focusLeaf) {\n        // If we cannot make sense of the updated selection state, stick to the current one.\n        if (true) {\n            /* eslint-disable-next-line */ console.warn(\"Invalid selection state.\", arguments, editorState.toJS());\n        }\n        return selection;\n    }\n    var anchorLeafStart = anchorLeaf.get(\"start\");\n    var focusLeafStart = focusLeaf.get(\"start\");\n    var anchorBlockOffset = anchorLeaf ? anchorLeafStart + anchorOffset : null;\n    var focusBlockOffset = focusLeaf ? focusLeafStart + focusOffset : null;\n    var areEqual = selection.getAnchorKey() === anchorBlockKey && selection.getAnchorOffset() === anchorBlockOffset && selection.getFocusKey() === focusBlockKey && selection.getFocusOffset() === focusBlockOffset;\n    if (areEqual) {\n        return selection;\n    }\n    var isBackward = false;\n    if (anchorBlockKey === focusBlockKey) {\n        var anchorLeafEnd = anchorLeaf.get(\"end\");\n        var focusLeafEnd = focusLeaf.get(\"end\");\n        if (focusLeafStart === anchorLeafStart && focusLeafEnd === anchorLeafEnd) {\n            isBackward = focusOffset < anchorOffset;\n        } else {\n            isBackward = focusLeafStart < anchorLeafStart;\n        }\n    } else {\n        var startKey = editorState.getCurrentContent().getBlockMap().keySeq().skipUntil(function(v) {\n            return v === anchorBlockKey || v === focusBlockKey;\n        }).first();\n        isBackward = startKey === focusBlockKey;\n    }\n    return selection.merge({\n        anchorKey: anchorBlockKey,\n        anchorOffset: anchorBlockOffset,\n        focusKey: focusBlockKey,\n        focusOffset: focusBlockOffset,\n        isBackward: isBackward\n    });\n}\nmodule.exports = getUpdatedSelectionState;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldFVwZGF0ZWRTZWxlY3Rpb25TdGF0ZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLElBQUlBLGlCQUFpQkMsbUJBQU9BLENBQUMsNkVBQWtCO0FBRS9DLElBQUlDLGFBQWFELG1CQUFPQSxDQUFDLHdFQUFxQjtBQUU5QyxTQUFTRSx5QkFBeUJDLFdBQVcsRUFBRUMsU0FBUyxFQUFFQyxZQUFZLEVBQUVDLFFBQVEsRUFBRUMsV0FBVztJQUMzRixJQUFJQyxZQUFZUCxXQUFXRSxZQUFZTSxZQUFZO0lBRW5ELElBQUksQ0FBQ0wsYUFBYSxDQUFDRSxVQUFVO1FBQzNCLG9GQUFvRjtRQUNwRixJQUFJSSxJQUFxQyxFQUFFO1lBQ3pDLDRCQUE0QixHQUM1QkMsUUFBUUMsSUFBSSxDQUFDLDRCQUE0QkMsV0FBV1YsWUFBWVcsSUFBSTtRQUN0RTtRQUVBLE9BQU9OO0lBQ1Q7SUFFQSxJQUFJTyxhQUFhaEIsZUFBZWlCLE1BQU0sQ0FBQ1o7SUFDdkMsSUFBSWEsaUJBQWlCRixXQUFXRyxRQUFRO0lBQ3hDLElBQUlDLHNCQUFzQmhCLFlBQVlpQixZQUFZLENBQUNIO0lBQ25ELElBQUlJLGFBQWFGLHVCQUF1QkEsb0JBQW9CRyxLQUFLLENBQUM7UUFBQ1AsV0FBV1EsWUFBWTtRQUFFO1FBQVVSLFdBQVdTLE9BQU87S0FBQztJQUN6SCxJQUFJQyxZQUFZMUIsZUFBZWlCLE1BQU0sQ0FBQ1Y7SUFDdEMsSUFBSW9CLGdCQUFnQkQsVUFBVVAsUUFBUTtJQUN0QyxJQUFJUyxxQkFBcUJ4QixZQUFZaUIsWUFBWSxDQUFDTTtJQUNsRCxJQUFJRSxZQUFZRCxzQkFBc0JBLG1CQUFtQkwsS0FBSyxDQUFDO1FBQUNHLFVBQVVGLFlBQVk7UUFBRTtRQUFVRSxVQUFVRCxPQUFPO0tBQUM7SUFFcEgsSUFBSSxDQUFDSCxjQUFjLENBQUNPLFdBQVc7UUFDN0Isb0ZBQW9GO1FBQ3BGLElBQUlsQixJQUFxQyxFQUFFO1lBQ3pDLDRCQUE0QixHQUM1QkMsUUFBUUMsSUFBSSxDQUFDLDRCQUE0QkMsV0FBV1YsWUFBWVcsSUFBSTtRQUN0RTtRQUVBLE9BQU9OO0lBQ1Q7SUFFQSxJQUFJcUIsa0JBQWtCUixXQUFXUyxHQUFHLENBQUM7SUFDckMsSUFBSUMsaUJBQWlCSCxVQUFVRSxHQUFHLENBQUM7SUFDbkMsSUFBSUUsb0JBQW9CWCxhQUFhUSxrQkFBa0J4QixlQUFlO0lBQ3RFLElBQUk0QixtQkFBbUJMLFlBQVlHLGlCQUFpQnhCLGNBQWM7SUFDbEUsSUFBSTJCLFdBQVcxQixVQUFVMkIsWUFBWSxPQUFPbEIsa0JBQWtCVCxVQUFVNEIsZUFBZSxPQUFPSixxQkFBcUJ4QixVQUFVNkIsV0FBVyxPQUFPWCxpQkFBaUJsQixVQUFVOEIsY0FBYyxPQUFPTDtJQUUvTCxJQUFJQyxVQUFVO1FBQ1osT0FBTzFCO0lBQ1Q7SUFFQSxJQUFJK0IsYUFBYTtJQUVqQixJQUFJdEIsbUJBQW1CUyxlQUFlO1FBQ3BDLElBQUljLGdCQUFnQm5CLFdBQVdTLEdBQUcsQ0FBQztRQUNuQyxJQUFJVyxlQUFlYixVQUFVRSxHQUFHLENBQUM7UUFFakMsSUFBSUMsbUJBQW1CRixtQkFBbUJZLGlCQUFpQkQsZUFBZTtZQUN4RUQsYUFBYWhDLGNBQWNGO1FBQzdCLE9BQU87WUFDTGtDLGFBQWFSLGlCQUFpQkY7UUFDaEM7SUFDRixPQUFPO1FBQ0wsSUFBSWEsV0FBV3ZDLFlBQVl3QyxpQkFBaUIsR0FBR0MsV0FBVyxHQUFHQyxNQUFNLEdBQUdDLFNBQVMsQ0FBQyxTQUFVQyxDQUFDO1lBQ3pGLE9BQU9BLE1BQU05QixrQkFBa0I4QixNQUFNckI7UUFDdkMsR0FBR3NCLEtBQUs7UUFDUlQsYUFBYUcsYUFBYWhCO0lBQzVCO0lBRUEsT0FBT2xCLFVBQVV5QyxLQUFLLENBQUM7UUFDckI3QyxXQUFXYTtRQUNYWixjQUFjMkI7UUFDZDFCLFVBQVVvQjtRQUNWbkIsYUFBYTBCO1FBQ2JNLFlBQVlBO0lBQ2Q7QUFDRjtBQUVBVyxPQUFPQyxPQUFPLEdBQUdqRCIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9nZXRVcGRhdGVkU2VsZWN0aW9uU3RhdGUuanM/YTBmNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRHJhZnRPZmZzZXRLZXkgPSByZXF1aXJlKFwiLi9EcmFmdE9mZnNldEtleVwiKTtcblxudmFyIG51bGx0aHJvd3MgPSByZXF1aXJlKFwiZmJqcy9saWIvbnVsbHRocm93c1wiKTtcblxuZnVuY3Rpb24gZ2V0VXBkYXRlZFNlbGVjdGlvblN0YXRlKGVkaXRvclN0YXRlLCBhbmNob3JLZXksIGFuY2hvck9mZnNldCwgZm9jdXNLZXksIGZvY3VzT2Zmc2V0KSB7XG4gIHZhciBzZWxlY3Rpb24gPSBudWxsdGhyb3dzKGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpKTtcblxuICBpZiAoIWFuY2hvcktleSB8fCAhZm9jdXNLZXkpIHtcbiAgICAvLyBJZiB3ZSBjYW5ub3QgbWFrZSBzZW5zZSBvZiB0aGUgdXBkYXRlZCBzZWxlY3Rpb24gc3RhdGUsIHN0aWNrIHRvIHRoZSBjdXJyZW50IG9uZS5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgKi9cbiAgICAgIGNvbnNvbGUud2FybignSW52YWxpZCBzZWxlY3Rpb24gc3RhdGUuJywgYXJndW1lbnRzLCBlZGl0b3JTdGF0ZS50b0pTKCkpO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxlY3Rpb247XG4gIH1cblxuICB2YXIgYW5jaG9yUGF0aCA9IERyYWZ0T2Zmc2V0S2V5LmRlY29kZShhbmNob3JLZXkpO1xuICB2YXIgYW5jaG9yQmxvY2tLZXkgPSBhbmNob3JQYXRoLmJsb2NrS2V5O1xuICB2YXIgYW5jaG9yTGVhZkJsb2NrVHJlZSA9IGVkaXRvclN0YXRlLmdldEJsb2NrVHJlZShhbmNob3JCbG9ja0tleSk7XG4gIHZhciBhbmNob3JMZWFmID0gYW5jaG9yTGVhZkJsb2NrVHJlZSAmJiBhbmNob3JMZWFmQmxvY2tUcmVlLmdldEluKFthbmNob3JQYXRoLmRlY29yYXRvcktleSwgJ2xlYXZlcycsIGFuY2hvclBhdGgubGVhZktleV0pO1xuICB2YXIgZm9jdXNQYXRoID0gRHJhZnRPZmZzZXRLZXkuZGVjb2RlKGZvY3VzS2V5KTtcbiAgdmFyIGZvY3VzQmxvY2tLZXkgPSBmb2N1c1BhdGguYmxvY2tLZXk7XG4gIHZhciBmb2N1c0xlYWZCbG9ja1RyZWUgPSBlZGl0b3JTdGF0ZS5nZXRCbG9ja1RyZWUoZm9jdXNCbG9ja0tleSk7XG4gIHZhciBmb2N1c0xlYWYgPSBmb2N1c0xlYWZCbG9ja1RyZWUgJiYgZm9jdXNMZWFmQmxvY2tUcmVlLmdldEluKFtmb2N1c1BhdGguZGVjb3JhdG9yS2V5LCAnbGVhdmVzJywgZm9jdXNQYXRoLmxlYWZLZXldKTtcblxuICBpZiAoIWFuY2hvckxlYWYgfHwgIWZvY3VzTGVhZikge1xuICAgIC8vIElmIHdlIGNhbm5vdCBtYWtlIHNlbnNlIG9mIHRoZSB1cGRhdGVkIHNlbGVjdGlvbiBzdGF0ZSwgc3RpY2sgdG8gdGhlIGN1cnJlbnQgb25lLlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSAqL1xuICAgICAgY29uc29sZS53YXJuKCdJbnZhbGlkIHNlbGVjdGlvbiBzdGF0ZS4nLCBhcmd1bWVudHMsIGVkaXRvclN0YXRlLnRvSlMoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGVjdGlvbjtcbiAgfVxuXG4gIHZhciBhbmNob3JMZWFmU3RhcnQgPSBhbmNob3JMZWFmLmdldCgnc3RhcnQnKTtcbiAgdmFyIGZvY3VzTGVhZlN0YXJ0ID0gZm9jdXNMZWFmLmdldCgnc3RhcnQnKTtcbiAgdmFyIGFuY2hvckJsb2NrT2Zmc2V0ID0gYW5jaG9yTGVhZiA/IGFuY2hvckxlYWZTdGFydCArIGFuY2hvck9mZnNldCA6IG51bGw7XG4gIHZhciBmb2N1c0Jsb2NrT2Zmc2V0ID0gZm9jdXNMZWFmID8gZm9jdXNMZWFmU3RhcnQgKyBmb2N1c09mZnNldCA6IG51bGw7XG4gIHZhciBhcmVFcXVhbCA9IHNlbGVjdGlvbi5nZXRBbmNob3JLZXkoKSA9PT0gYW5jaG9yQmxvY2tLZXkgJiYgc2VsZWN0aW9uLmdldEFuY2hvck9mZnNldCgpID09PSBhbmNob3JCbG9ja09mZnNldCAmJiBzZWxlY3Rpb24uZ2V0Rm9jdXNLZXkoKSA9PT0gZm9jdXNCbG9ja0tleSAmJiBzZWxlY3Rpb24uZ2V0Rm9jdXNPZmZzZXQoKSA9PT0gZm9jdXNCbG9ja09mZnNldDtcblxuICBpZiAoYXJlRXF1YWwpIHtcbiAgICByZXR1cm4gc2VsZWN0aW9uO1xuICB9XG5cbiAgdmFyIGlzQmFja3dhcmQgPSBmYWxzZTtcblxuICBpZiAoYW5jaG9yQmxvY2tLZXkgPT09IGZvY3VzQmxvY2tLZXkpIHtcbiAgICB2YXIgYW5jaG9yTGVhZkVuZCA9IGFuY2hvckxlYWYuZ2V0KCdlbmQnKTtcbiAgICB2YXIgZm9jdXNMZWFmRW5kID0gZm9jdXNMZWFmLmdldCgnZW5kJyk7XG5cbiAgICBpZiAoZm9jdXNMZWFmU3RhcnQgPT09IGFuY2hvckxlYWZTdGFydCAmJiBmb2N1c0xlYWZFbmQgPT09IGFuY2hvckxlYWZFbmQpIHtcbiAgICAgIGlzQmFja3dhcmQgPSBmb2N1c09mZnNldCA8IGFuY2hvck9mZnNldDtcbiAgICB9IGVsc2Uge1xuICAgICAgaXNCYWNrd2FyZCA9IGZvY3VzTGVhZlN0YXJ0IDwgYW5jaG9yTGVhZlN0YXJ0O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgc3RhcnRLZXkgPSBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpLmdldEJsb2NrTWFwKCkua2V5U2VxKCkuc2tpcFVudGlsKGZ1bmN0aW9uICh2KSB7XG4gICAgICByZXR1cm4gdiA9PT0gYW5jaG9yQmxvY2tLZXkgfHwgdiA9PT0gZm9jdXNCbG9ja0tleTtcbiAgICB9KS5maXJzdCgpO1xuICAgIGlzQmFja3dhcmQgPSBzdGFydEtleSA9PT0gZm9jdXNCbG9ja0tleTtcbiAgfVxuXG4gIHJldHVybiBzZWxlY3Rpb24ubWVyZ2Uoe1xuICAgIGFuY2hvcktleTogYW5jaG9yQmxvY2tLZXksXG4gICAgYW5jaG9yT2Zmc2V0OiBhbmNob3JCbG9ja09mZnNldCxcbiAgICBmb2N1c0tleTogZm9jdXNCbG9ja0tleSxcbiAgICBmb2N1c09mZnNldDogZm9jdXNCbG9ja09mZnNldCxcbiAgICBpc0JhY2t3YXJkOiBpc0JhY2t3YXJkXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFVwZGF0ZWRTZWxlY3Rpb25TdGF0ZTsiXSwibmFtZXMiOlsiRHJhZnRPZmZzZXRLZXkiLCJyZXF1aXJlIiwibnVsbHRocm93cyIsImdldFVwZGF0ZWRTZWxlY3Rpb25TdGF0ZSIsImVkaXRvclN0YXRlIiwiYW5jaG9yS2V5IiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNLZXkiLCJmb2N1c09mZnNldCIsInNlbGVjdGlvbiIsImdldFNlbGVjdGlvbiIsInByb2Nlc3MiLCJjb25zb2xlIiwid2FybiIsImFyZ3VtZW50cyIsInRvSlMiLCJhbmNob3JQYXRoIiwiZGVjb2RlIiwiYW5jaG9yQmxvY2tLZXkiLCJibG9ja0tleSIsImFuY2hvckxlYWZCbG9ja1RyZWUiLCJnZXRCbG9ja1RyZWUiLCJhbmNob3JMZWFmIiwiZ2V0SW4iLCJkZWNvcmF0b3JLZXkiLCJsZWFmS2V5IiwiZm9jdXNQYXRoIiwiZm9jdXNCbG9ja0tleSIsImZvY3VzTGVhZkJsb2NrVHJlZSIsImZvY3VzTGVhZiIsImFuY2hvckxlYWZTdGFydCIsImdldCIsImZvY3VzTGVhZlN0YXJ0IiwiYW5jaG9yQmxvY2tPZmZzZXQiLCJmb2N1c0Jsb2NrT2Zmc2V0IiwiYXJlRXF1YWwiLCJnZXRBbmNob3JLZXkiLCJnZXRBbmNob3JPZmZzZXQiLCJnZXRGb2N1c0tleSIsImdldEZvY3VzT2Zmc2V0IiwiaXNCYWNrd2FyZCIsImFuY2hvckxlYWZFbmQiLCJmb2N1c0xlYWZFbmQiLCJzdGFydEtleSIsImdldEN1cnJlbnRDb250ZW50IiwiZ2V0QmxvY2tNYXAiLCJrZXlTZXEiLCJza2lwVW50aWwiLCJ2IiwiZmlyc3QiLCJtZXJnZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getUpdatedSelectionState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getVisibleSelectionRect.js":
/*!**************************************************************!*\
  !*** ./node_modules/draft-js/lib/getVisibleSelectionRect.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar getRangeBoundingClientRect = __webpack_require__(/*! ./getRangeBoundingClientRect */ \"(ssr)/./node_modules/draft-js/lib/getRangeBoundingClientRect.js\");\n/**\n * Return the bounding ClientRect for the visible DOM selection, if any.\n * In cases where there are no selected ranges or the bounding rect is\n * temporarily invalid, return null.\n *\n * When using from an iframe, you should pass the iframe window object\n */ function getVisibleSelectionRect(global) {\n    var selection = global.getSelection();\n    if (!selection.rangeCount) {\n        return null;\n    }\n    var range = selection.getRangeAt(0);\n    var boundingRect = getRangeBoundingClientRect(range);\n    var top = boundingRect.top, right = boundingRect.right, bottom = boundingRect.bottom, left = boundingRect.left; // When a re-render leads to a node being removed, the DOM selection will\n    // temporarily be placed on an ancestor node, which leads to an invalid\n    // bounding rect. Discard this state.\n    if (top === 0 && right === 0 && bottom === 0 && left === 0) {\n        return null;\n    }\n    return boundingRect;\n}\nmodule.exports = getVisibleSelectionRect;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldFZpc2libGVTZWxlY3Rpb25SZWN0LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsNkJBQTZCQyxtQkFBT0EsQ0FBQyxxR0FBOEI7QUFDdkU7Ozs7OztDQU1DLEdBR0QsU0FBU0Msd0JBQXdCQyxNQUFNO0lBQ3JDLElBQUlDLFlBQVlELE9BQU9FLFlBQVk7SUFFbkMsSUFBSSxDQUFDRCxVQUFVRSxVQUFVLEVBQUU7UUFDekIsT0FBTztJQUNUO0lBRUEsSUFBSUMsUUFBUUgsVUFBVUksVUFBVSxDQUFDO0lBQ2pDLElBQUlDLGVBQWVULDJCQUEyQk87SUFDOUMsSUFBSUcsTUFBTUQsYUFBYUMsR0FBRyxFQUN0QkMsUUFBUUYsYUFBYUUsS0FBSyxFQUMxQkMsU0FBU0gsYUFBYUcsTUFBTSxFQUM1QkMsT0FBT0osYUFBYUksSUFBSSxFQUFFLHlFQUF5RTtJQUN2Ryx1RUFBdUU7SUFDdkUscUNBQXFDO0lBRXJDLElBQUlILFFBQVEsS0FBS0MsVUFBVSxLQUFLQyxXQUFXLEtBQUtDLFNBQVMsR0FBRztRQUMxRCxPQUFPO0lBQ1Q7SUFFQSxPQUFPSjtBQUNUO0FBRUFLLE9BQU9DLE9BQU8sR0FBR2IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWVsLWhhcnZlc3Rlci8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZ2V0VmlzaWJsZVNlbGVjdGlvblJlY3QuanM/MzEyZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0UmFuZ2VCb3VuZGluZ0NsaWVudFJlY3QgPSByZXF1aXJlKFwiLi9nZXRSYW5nZUJvdW5kaW5nQ2xpZW50UmVjdFwiKTtcbi8qKlxuICogUmV0dXJuIHRoZSBib3VuZGluZyBDbGllbnRSZWN0IGZvciB0aGUgdmlzaWJsZSBET00gc2VsZWN0aW9uLCBpZiBhbnkuXG4gKiBJbiBjYXNlcyB3aGVyZSB0aGVyZSBhcmUgbm8gc2VsZWN0ZWQgcmFuZ2VzIG9yIHRoZSBib3VuZGluZyByZWN0IGlzXG4gKiB0ZW1wb3JhcmlseSBpbnZhbGlkLCByZXR1cm4gbnVsbC5cbiAqXG4gKiBXaGVuIHVzaW5nIGZyb20gYW4gaWZyYW1lLCB5b3Ugc2hvdWxkIHBhc3MgdGhlIGlmcmFtZSB3aW5kb3cgb2JqZWN0XG4gKi9cblxuXG5mdW5jdGlvbiBnZXRWaXNpYmxlU2VsZWN0aW9uUmVjdChnbG9iYWwpIHtcbiAgdmFyIHNlbGVjdGlvbiA9IGdsb2JhbC5nZXRTZWxlY3Rpb24oKTtcblxuICBpZiAoIXNlbGVjdGlvbi5yYW5nZUNvdW50KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgcmFuZ2UgPSBzZWxlY3Rpb24uZ2V0UmFuZ2VBdCgwKTtcbiAgdmFyIGJvdW5kaW5nUmVjdCA9IGdldFJhbmdlQm91bmRpbmdDbGllbnRSZWN0KHJhbmdlKTtcbiAgdmFyIHRvcCA9IGJvdW5kaW5nUmVjdC50b3AsXG4gICAgICByaWdodCA9IGJvdW5kaW5nUmVjdC5yaWdodCxcbiAgICAgIGJvdHRvbSA9IGJvdW5kaW5nUmVjdC5ib3R0b20sXG4gICAgICBsZWZ0ID0gYm91bmRpbmdSZWN0LmxlZnQ7IC8vIFdoZW4gYSByZS1yZW5kZXIgbGVhZHMgdG8gYSBub2RlIGJlaW5nIHJlbW92ZWQsIHRoZSBET00gc2VsZWN0aW9uIHdpbGxcbiAgLy8gdGVtcG9yYXJpbHkgYmUgcGxhY2VkIG9uIGFuIGFuY2VzdG9yIG5vZGUsIHdoaWNoIGxlYWRzIHRvIGFuIGludmFsaWRcbiAgLy8gYm91bmRpbmcgcmVjdC4gRGlzY2FyZCB0aGlzIHN0YXRlLlxuXG4gIGlmICh0b3AgPT09IDAgJiYgcmlnaHQgPT09IDAgJiYgYm90dG9tID09PSAwICYmIGxlZnQgPT09IDApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBib3VuZGluZ1JlY3Q7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VmlzaWJsZVNlbGVjdGlvblJlY3Q7Il0sIm5hbWVzIjpbImdldFJhbmdlQm91bmRpbmdDbGllbnRSZWN0IiwicmVxdWlyZSIsImdldFZpc2libGVTZWxlY3Rpb25SZWN0IiwiZ2xvYmFsIiwic2VsZWN0aW9uIiwiZ2V0U2VsZWN0aW9uIiwicmFuZ2VDb3VudCIsInJhbmdlIiwiZ2V0UmFuZ2VBdCIsImJvdW5kaW5nUmVjdCIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwibGVmdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getVisibleSelectionRect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/getWindowForNode.js":
/*!*******************************************************!*\
  !*** ./node_modules/draft-js/lib/getWindowForNode.js ***!
  \*******************************************************/
/***/ ((module) => {

"use strict";
eval("\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ function getWindowForNode(node) {\n    if (!node || !node.ownerDocument || !node.ownerDocument.defaultView) {\n        return window;\n    }\n    return node.ownerDocument.defaultView;\n}\nmodule.exports = getWindowForNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dldFdpbmRvd0Zvck5vZGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYjs7Ozs7Ozs7O0NBU0MsR0FDRCxTQUFTQSxpQkFBaUJDLElBQUk7SUFDNUIsSUFBSSxDQUFDQSxRQUFRLENBQUNBLEtBQUtDLGFBQWEsSUFBSSxDQUFDRCxLQUFLQyxhQUFhLENBQUNDLFdBQVcsRUFBRTtRQUNuRSxPQUFPQztJQUNUO0lBRUEsT0FBT0gsS0FBS0MsYUFBYSxDQUFDQyxXQUFXO0FBQ3ZDO0FBRUFFLE9BQU9DLE9BQU8sR0FBR04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWVsLWhhcnZlc3Rlci8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvZ2V0V2luZG93Rm9yTm9kZS5qcz82ZmUwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuZnVuY3Rpb24gZ2V0V2luZG93Rm9yTm9kZShub2RlKSB7XG4gIGlmICghbm9kZSB8fCAhbm9kZS5vd25lckRvY3VtZW50IHx8ICFub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcpIHtcbiAgICByZXR1cm4gd2luZG93O1xuICB9XG5cbiAgcmV0dXJuIG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRXaW5kb3dGb3JOb2RlOyJdLCJuYW1lcyI6WyJnZXRXaW5kb3dGb3JOb2RlIiwibm9kZSIsIm93bmVyRG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsIndpbmRvdyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/getWindowForNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/gkx.js":
/*!******************************************!*\
  !*** ./node_modules/draft-js/lib/gkx.js ***!
  \******************************************/
/***/ ((module) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */ \nmodule.exports = function(name) {\n    if (false) {}\n    return false;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2dreC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Q0FRQyxHQUNEO0FBRUFBLE9BQU9DLE9BQU8sR0FBRyxTQUFVQyxJQUFJO0lBQzdCLElBQUksS0FBbUQsRUFBRSxFQUV4RDtJQUVELE9BQU87QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9na3guanM/MDU0YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICovXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5fX0RSQUZUX0dLWCkge1xuICAgIHJldHVybiAhIXdpbmRvdy5fX0RSQUZUX0dLWFtuYW1lXTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJuYW1lIiwid2luZG93IiwiX19EUkFGVF9HS1giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/gkx.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/insertFragmentIntoContentState.js":
/*!*********************************************************************!*\
  !*** ./node_modules/draft-js/lib/insertFragmentIntoContentState.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar BlockMapBuilder = __webpack_require__(/*! ./BlockMapBuilder */ \"(ssr)/./node_modules/draft-js/lib/BlockMapBuilder.js\");\nvar ContentBlockNode = __webpack_require__(/*! ./ContentBlockNode */ \"(ssr)/./node_modules/draft-js/lib/ContentBlockNode.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar insertIntoList = __webpack_require__(/*! ./insertIntoList */ \"(ssr)/./node_modules/draft-js/lib/insertIntoList.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar randomizeBlockMapKeys = __webpack_require__(/*! ./randomizeBlockMapKeys */ \"(ssr)/./node_modules/draft-js/lib/randomizeBlockMapKeys.js\");\nvar List = Immutable.List;\nvar updateExistingBlock = function updateExistingBlock(contentState, selectionState, blockMap, fragmentBlock, targetKey, targetOffset) {\n    var mergeBlockData = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : \"REPLACE_WITH_NEW_DATA\";\n    var targetBlock = blockMap.get(targetKey);\n    var text = targetBlock.getText();\n    var chars = targetBlock.getCharacterList();\n    var finalKey = targetKey;\n    var finalOffset = targetOffset + fragmentBlock.getText().length;\n    var data = null;\n    switch(mergeBlockData){\n        case \"MERGE_OLD_DATA_TO_NEW_DATA\":\n            data = fragmentBlock.getData().merge(targetBlock.getData());\n            break;\n        case \"REPLACE_WITH_NEW_DATA\":\n            data = fragmentBlock.getData();\n            break;\n    }\n    var type = targetBlock.getType();\n    if (text && type === \"unstyled\") {\n        type = fragmentBlock.getType();\n    }\n    var newBlock = targetBlock.merge({\n        text: text.slice(0, targetOffset) + fragmentBlock.getText() + text.slice(targetOffset),\n        characterList: insertIntoList(chars, fragmentBlock.getCharacterList(), targetOffset),\n        type: type,\n        data: data\n    });\n    return contentState.merge({\n        blockMap: blockMap.set(targetKey, newBlock),\n        selectionBefore: selectionState,\n        selectionAfter: selectionState.merge({\n            anchorKey: finalKey,\n            anchorOffset: finalOffset,\n            focusKey: finalKey,\n            focusOffset: finalOffset,\n            isBackward: false\n        })\n    });\n};\n/**\n * Appends text/characterList from the fragment first block to\n * target block.\n */ var updateHead = function updateHead(block, targetOffset, fragment) {\n    var text = block.getText();\n    var chars = block.getCharacterList(); // Modify head portion of block.\n    var headText = text.slice(0, targetOffset);\n    var headCharacters = chars.slice(0, targetOffset);\n    var appendToHead = fragment.first();\n    return block.merge({\n        text: headText + appendToHead.getText(),\n        characterList: headCharacters.concat(appendToHead.getCharacterList()),\n        type: headText ? block.getType() : appendToHead.getType(),\n        data: appendToHead.getData()\n    });\n};\n/**\n * Appends offset text/characterList from the target block to the last\n * fragment block.\n */ var updateTail = function updateTail(block, targetOffset, fragment) {\n    // Modify tail portion of block.\n    var text = block.getText();\n    var chars = block.getCharacterList(); // Modify head portion of block.\n    var blockSize = text.length;\n    var tailText = text.slice(targetOffset, blockSize);\n    var tailCharacters = chars.slice(targetOffset, blockSize);\n    var prependToTail = fragment.last();\n    return prependToTail.merge({\n        text: prependToTail.getText() + tailText,\n        characterList: prependToTail.getCharacterList().concat(tailCharacters),\n        data: prependToTail.getData()\n    });\n};\nvar getRootBlocks = function getRootBlocks(block, blockMap) {\n    var headKey = block.getKey();\n    var rootBlock = block;\n    var rootBlocks = []; // sometimes the fragment head block will not be part of the blockMap itself this can happen when\n    // the fragment head is used to update the target block, however when this does not happen we need\n    // to make sure that we include it on the rootBlocks since the first block of a fragment is always a\n    // fragment root block\n    if (blockMap.get(headKey)) {\n        rootBlocks.push(headKey);\n    }\n    while(rootBlock && rootBlock.getNextSiblingKey()){\n        var lastSiblingKey = rootBlock.getNextSiblingKey();\n        if (!lastSiblingKey) {\n            break;\n        }\n        rootBlocks.push(lastSiblingKey);\n        rootBlock = blockMap.get(lastSiblingKey);\n    }\n    return rootBlocks;\n};\nvar updateBlockMapLinks = function updateBlockMapLinks(blockMap, originalBlockMap, targetBlock, fragmentHeadBlock) {\n    return blockMap.withMutations(function(blockMapState) {\n        var targetKey = targetBlock.getKey();\n        var headKey = fragmentHeadBlock.getKey();\n        var targetNextKey = targetBlock.getNextSiblingKey();\n        var targetParentKey = targetBlock.getParentKey();\n        var fragmentRootBlocks = getRootBlocks(fragmentHeadBlock, blockMap);\n        var lastRootFragmentBlockKey = fragmentRootBlocks[fragmentRootBlocks.length - 1];\n        if (blockMapState.get(headKey)) {\n            // update the fragment head when it is part of the blockMap otherwise\n            blockMapState.setIn([\n                targetKey,\n                \"nextSibling\"\n            ], headKey);\n            blockMapState.setIn([\n                headKey,\n                \"prevSibling\"\n            ], targetKey);\n        } else {\n            // update the target block that had the fragment head contents merged into it\n            blockMapState.setIn([\n                targetKey,\n                \"nextSibling\"\n            ], fragmentHeadBlock.getNextSiblingKey());\n            blockMapState.setIn([\n                fragmentHeadBlock.getNextSiblingKey(),\n                \"prevSibling\"\n            ], targetKey);\n        } // update the last root block fragment\n        blockMapState.setIn([\n            lastRootFragmentBlockKey,\n            \"nextSibling\"\n        ], targetNextKey); // update the original target next block\n        if (targetNextKey) {\n            blockMapState.setIn([\n                targetNextKey,\n                \"prevSibling\"\n            ], lastRootFragmentBlockKey);\n        } // update fragment parent links\n        fragmentRootBlocks.forEach(function(blockKey) {\n            return blockMapState.setIn([\n                blockKey,\n                \"parent\"\n            ], targetParentKey);\n        }); // update targetBlock parent child links\n        if (targetParentKey) {\n            var targetParent = blockMap.get(targetParentKey);\n            var originalTargetParentChildKeys = targetParent.getChildKeys();\n            var targetBlockIndex = originalTargetParentChildKeys.indexOf(targetKey);\n            var insertionIndex = targetBlockIndex + 1;\n            var newChildrenKeysArray = originalTargetParentChildKeys.toArray(); // insert fragment children\n            newChildrenKeysArray.splice.apply(newChildrenKeysArray, [\n                insertionIndex,\n                0\n            ].concat(fragmentRootBlocks));\n            blockMapState.setIn([\n                targetParentKey,\n                \"children\"\n            ], List(newChildrenKeysArray));\n        }\n    });\n};\nvar insertFragment = function insertFragment(contentState, selectionState, blockMap, fragment, targetKey, targetOffset) {\n    var isTreeBasedBlockMap = blockMap.first() instanceof ContentBlockNode;\n    var newBlockArr = [];\n    var fragmentSize = fragment.size;\n    var target = blockMap.get(targetKey);\n    var head = fragment.first();\n    var tail = fragment.last();\n    var finalOffset = tail.getLength();\n    var finalKey = tail.getKey();\n    var shouldNotUpdateFromFragmentBlock = isTreeBasedBlockMap && (!target.getChildKeys().isEmpty() || !head.getChildKeys().isEmpty());\n    blockMap.forEach(function(block, blockKey) {\n        if (blockKey !== targetKey) {\n            newBlockArr.push(block);\n            return;\n        }\n        if (shouldNotUpdateFromFragmentBlock) {\n            newBlockArr.push(block);\n        } else {\n            newBlockArr.push(updateHead(block, targetOffset, fragment));\n        } // Insert fragment blocks after the head and before the tail.\n        fragment // when we are updating the target block with the head fragment block we skip the first fragment\n        // head since its contents have already been merged with the target block otherwise we include\n        // the whole fragment\n        .slice(shouldNotUpdateFromFragmentBlock ? 0 : 1, fragmentSize - 1).forEach(function(fragmentBlock) {\n            return newBlockArr.push(fragmentBlock);\n        }); // update tail\n        newBlockArr.push(updateTail(block, targetOffset, fragment));\n    });\n    var updatedBlockMap = BlockMapBuilder.createFromArray(newBlockArr);\n    if (isTreeBasedBlockMap) {\n        updatedBlockMap = updateBlockMapLinks(updatedBlockMap, blockMap, target, head);\n    }\n    return contentState.merge({\n        blockMap: updatedBlockMap,\n        selectionBefore: selectionState,\n        selectionAfter: selectionState.merge({\n            anchorKey: finalKey,\n            anchorOffset: finalOffset,\n            focusKey: finalKey,\n            focusOffset: finalOffset,\n            isBackward: false\n        })\n    });\n};\nvar insertFragmentIntoContentState = function insertFragmentIntoContentState(contentState, selectionState, fragmentBlockMap) {\n    var mergeBlockData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"REPLACE_WITH_NEW_DATA\";\n    !selectionState.isCollapsed() ?  true ? invariant(false, \"`insertFragment` should only be called with a collapsed selection state.\") : 0 : void 0;\n    var blockMap = contentState.getBlockMap();\n    var fragment = randomizeBlockMapKeys(fragmentBlockMap);\n    var targetKey = selectionState.getStartKey();\n    var targetOffset = selectionState.getStartOffset();\n    var targetBlock = blockMap.get(targetKey);\n    if (targetBlock instanceof ContentBlockNode) {\n        !targetBlock.getChildKeys().isEmpty() ?  true ? invariant(false, \"`insertFragment` should not be called when a container node is selected.\") : 0 : void 0;\n    } // When we insert a fragment with a single block we simply update the target block\n    // with the contents of the inserted fragment block\n    if (fragment.size === 1) {\n        return updateExistingBlock(contentState, selectionState, blockMap, fragment.first(), targetKey, targetOffset, mergeBlockData);\n    }\n    return insertFragment(contentState, selectionState, blockMap, fragment, targetKey, targetOffset);\n};\nmodule.exports = insertFragmentIntoContentState;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/insertFragmentIntoContentState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/insertIntoList.js":
/*!*****************************************************!*\
  !*** ./node_modules/draft-js/lib/insertIntoList.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \n/**\n * Maintain persistence for target list when appending and prepending.\n */ function insertIntoList(targetListArg, toInsert, offset) {\n    var targetList = targetListArg;\n    if (offset === targetList.count()) {\n        toInsert.forEach(function(c) {\n            targetList = targetList.push(c);\n        });\n    } else if (offset === 0) {\n        toInsert.reverse().forEach(function(c) {\n            targetList = targetList.unshift(c);\n        });\n    } else {\n        var head = targetList.slice(0, offset);\n        var tail = targetList.slice(offset);\n        targetList = head.concat(toInsert, tail).toList();\n    }\n    return targetList;\n}\nmodule.exports = insertIntoList;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2luc2VydEludG9MaXN0LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUE7O0NBRUMsR0FDRCxTQUFTQSxlQUFlQyxhQUFhLEVBQUVDLFFBQVEsRUFBRUMsTUFBTTtJQUNyRCxJQUFJQyxhQUFhSDtJQUVqQixJQUFJRSxXQUFXQyxXQUFXQyxLQUFLLElBQUk7UUFDakNILFNBQVNJLE9BQU8sQ0FBQyxTQUFVQyxDQUFDO1lBQzFCSCxhQUFhQSxXQUFXSSxJQUFJLENBQUNEO1FBQy9CO0lBQ0YsT0FBTyxJQUFJSixXQUFXLEdBQUc7UUFDdkJELFNBQVNPLE9BQU8sR0FBR0gsT0FBTyxDQUFDLFNBQVVDLENBQUM7WUFDcENILGFBQWFBLFdBQVdNLE9BQU8sQ0FBQ0g7UUFDbEM7SUFDRixPQUFPO1FBQ0wsSUFBSUksT0FBT1AsV0FBV1EsS0FBSyxDQUFDLEdBQUdUO1FBQy9CLElBQUlVLE9BQU9ULFdBQVdRLEtBQUssQ0FBQ1Q7UUFDNUJDLGFBQWFPLEtBQUtHLE1BQU0sQ0FBQ1osVUFBVVcsTUFBTUUsTUFBTTtJQUNqRDtJQUVBLE9BQU9YO0FBQ1Q7QUFFQVksT0FBT0MsT0FBTyxHQUFHakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWVsLWhhcnZlc3Rlci8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvaW5zZXJ0SW50b0xpc3QuanM/ZjBmZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1haW50YWluIHBlcnNpc3RlbmNlIGZvciB0YXJnZXQgbGlzdCB3aGVuIGFwcGVuZGluZyBhbmQgcHJlcGVuZGluZy5cbiAqL1xuZnVuY3Rpb24gaW5zZXJ0SW50b0xpc3QodGFyZ2V0TGlzdEFyZywgdG9JbnNlcnQsIG9mZnNldCkge1xuICB2YXIgdGFyZ2V0TGlzdCA9IHRhcmdldExpc3RBcmc7XG5cbiAgaWYgKG9mZnNldCA9PT0gdGFyZ2V0TGlzdC5jb3VudCgpKSB7XG4gICAgdG9JbnNlcnQuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgdGFyZ2V0TGlzdCA9IHRhcmdldExpc3QucHVzaChjKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChvZmZzZXQgPT09IDApIHtcbiAgICB0b0luc2VydC5yZXZlcnNlKCkuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgdGFyZ2V0TGlzdCA9IHRhcmdldExpc3QudW5zaGlmdChjKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaGVhZCA9IHRhcmdldExpc3Quc2xpY2UoMCwgb2Zmc2V0KTtcbiAgICB2YXIgdGFpbCA9IHRhcmdldExpc3Quc2xpY2Uob2Zmc2V0KTtcbiAgICB0YXJnZXRMaXN0ID0gaGVhZC5jb25jYXQodG9JbnNlcnQsIHRhaWwpLnRvTGlzdCgpO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldExpc3Q7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0SW50b0xpc3Q7Il0sIm5hbWVzIjpbImluc2VydEludG9MaXN0IiwidGFyZ2V0TGlzdEFyZyIsInRvSW5zZXJ0Iiwib2Zmc2V0IiwidGFyZ2V0TGlzdCIsImNvdW50IiwiZm9yRWFjaCIsImMiLCJwdXNoIiwicmV2ZXJzZSIsInVuc2hpZnQiLCJoZWFkIiwic2xpY2UiLCJ0YWlsIiwiY29uY2F0IiwidG9MaXN0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/insertIntoList.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/insertTextIntoContentState.js":
/*!*****************************************************************!*\
  !*** ./node_modules/draft-js/lib/insertTextIntoContentState.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar insertIntoList = __webpack_require__(/*! ./insertIntoList */ \"(ssr)/./node_modules/draft-js/lib/insertIntoList.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar Repeat = Immutable.Repeat;\nfunction insertTextIntoContentState(contentState, selectionState, text, characterMetadata) {\n    !selectionState.isCollapsed() ?  true ? invariant(false, \"`insertText` should only be called with a collapsed range.\") : 0 : void 0;\n    var len = null;\n    if (text != null) {\n        len = text.length;\n    }\n    if (len == null || len === 0) {\n        return contentState;\n    }\n    var blockMap = contentState.getBlockMap();\n    var key = selectionState.getStartKey();\n    var offset = selectionState.getStartOffset();\n    var block = blockMap.get(key);\n    var blockText = block.getText();\n    var newBlock = block.merge({\n        text: blockText.slice(0, offset) + text + blockText.slice(offset, block.getLength()),\n        characterList: insertIntoList(block.getCharacterList(), Repeat(characterMetadata, len).toList(), offset)\n    });\n    var newOffset = offset + len;\n    return contentState.merge({\n        blockMap: blockMap.set(key, newBlock),\n        selectionAfter: selectionState.merge({\n            anchorOffset: newOffset,\n            focusOffset: newOffset\n        })\n    });\n}\nmodule.exports = insertTextIntoContentState;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2luc2VydFRleHRJbnRvQ29udGVudFN0YXRlLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsWUFBWUMsbUJBQU9BLENBQUMseUZBQVc7QUFFbkMsSUFBSUMsaUJBQWlCRCxtQkFBT0EsQ0FBQyw2RUFBa0I7QUFFL0MsSUFBSUUsWUFBWUYsbUJBQU9BLENBQUMsc0VBQW9CO0FBRTVDLElBQUlHLFNBQVNKLFVBQVVJLE1BQU07QUFFN0IsU0FBU0MsMkJBQTJCQyxZQUFZLEVBQUVDLGNBQWMsRUFBRUMsSUFBSSxFQUFFQyxpQkFBaUI7SUFDdkYsQ0FBQ0YsZUFBZUcsV0FBVyxLQUFLQyxLQUFxQyxHQUFHUixVQUFVLE9BQU8sZ0VBQWdFQSxDQUFnQixHQUFHLEtBQUs7SUFDakwsSUFBSVMsTUFBTTtJQUVWLElBQUlKLFFBQVEsTUFBTTtRQUNoQkksTUFBTUosS0FBS0ssTUFBTTtJQUNuQjtJQUVBLElBQUlELE9BQU8sUUFBUUEsUUFBUSxHQUFHO1FBQzVCLE9BQU9OO0lBQ1Q7SUFFQSxJQUFJUSxXQUFXUixhQUFhUyxXQUFXO0lBQ3ZDLElBQUlDLE1BQU1ULGVBQWVVLFdBQVc7SUFDcEMsSUFBSUMsU0FBU1gsZUFBZVksY0FBYztJQUMxQyxJQUFJQyxRQUFRTixTQUFTTyxHQUFHLENBQUNMO0lBQ3pCLElBQUlNLFlBQVlGLE1BQU1HLE9BQU87SUFDN0IsSUFBSUMsV0FBV0osTUFBTUssS0FBSyxDQUFDO1FBQ3pCakIsTUFBTWMsVUFBVUksS0FBSyxDQUFDLEdBQUdSLFVBQVVWLE9BQU9jLFVBQVVJLEtBQUssQ0FBQ1IsUUFBUUUsTUFBTU8sU0FBUztRQUNqRkMsZUFBZTFCLGVBQWVrQixNQUFNUyxnQkFBZ0IsSUFBSXpCLE9BQU9LLG1CQUFtQkcsS0FBS2tCLE1BQU0sSUFBSVo7SUFDbkc7SUFDQSxJQUFJYSxZQUFZYixTQUFTTjtJQUN6QixPQUFPTixhQUFhbUIsS0FBSyxDQUFDO1FBQ3hCWCxVQUFVQSxTQUFTa0IsR0FBRyxDQUFDaEIsS0FBS1E7UUFDNUJTLGdCQUFnQjFCLGVBQWVrQixLQUFLLENBQUM7WUFDbkNTLGNBQWNIO1lBQ2RJLGFBQWFKO1FBQ2Y7SUFDRjtBQUNGO0FBRUFLLE9BQU9DLE9BQU8sR0FBR2hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVlbC1oYXJ2ZXN0ZXIvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2luc2VydFRleHRJbnRvQ29udGVudFN0YXRlLmpzPzU1ZGQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIEltbXV0YWJsZSA9IHJlcXVpcmUoXCJpbW11dGFibGVcIik7XG5cbnZhciBpbnNlcnRJbnRvTGlzdCA9IHJlcXVpcmUoXCIuL2luc2VydEludG9MaXN0XCIpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKTtcblxudmFyIFJlcGVhdCA9IEltbXV0YWJsZS5SZXBlYXQ7XG5cbmZ1bmN0aW9uIGluc2VydFRleHRJbnRvQ29udGVudFN0YXRlKGNvbnRlbnRTdGF0ZSwgc2VsZWN0aW9uU3RhdGUsIHRleHQsIGNoYXJhY3Rlck1ldGFkYXRhKSB7XG4gICFzZWxlY3Rpb25TdGF0ZS5pc0NvbGxhcHNlZCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnYGluc2VydFRleHRgIHNob3VsZCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgY29sbGFwc2VkIHJhbmdlLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGxlbiA9IG51bGw7XG5cbiAgaWYgKHRleHQgIT0gbnVsbCkge1xuICAgIGxlbiA9IHRleHQubGVuZ3RoO1xuICB9XG5cbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA9PT0gMCkge1xuICAgIHJldHVybiBjb250ZW50U3RhdGU7XG4gIH1cblxuICB2YXIgYmxvY2tNYXAgPSBjb250ZW50U3RhdGUuZ2V0QmxvY2tNYXAoKTtcbiAgdmFyIGtleSA9IHNlbGVjdGlvblN0YXRlLmdldFN0YXJ0S2V5KCk7XG4gIHZhciBvZmZzZXQgPSBzZWxlY3Rpb25TdGF0ZS5nZXRTdGFydE9mZnNldCgpO1xuICB2YXIgYmxvY2sgPSBibG9ja01hcC5nZXQoa2V5KTtcbiAgdmFyIGJsb2NrVGV4dCA9IGJsb2NrLmdldFRleHQoKTtcbiAgdmFyIG5ld0Jsb2NrID0gYmxvY2subWVyZ2Uoe1xuICAgIHRleHQ6IGJsb2NrVGV4dC5zbGljZSgwLCBvZmZzZXQpICsgdGV4dCArIGJsb2NrVGV4dC5zbGljZShvZmZzZXQsIGJsb2NrLmdldExlbmd0aCgpKSxcbiAgICBjaGFyYWN0ZXJMaXN0OiBpbnNlcnRJbnRvTGlzdChibG9jay5nZXRDaGFyYWN0ZXJMaXN0KCksIFJlcGVhdChjaGFyYWN0ZXJNZXRhZGF0YSwgbGVuKS50b0xpc3QoKSwgb2Zmc2V0KVxuICB9KTtcbiAgdmFyIG5ld09mZnNldCA9IG9mZnNldCArIGxlbjtcbiAgcmV0dXJuIGNvbnRlbnRTdGF0ZS5tZXJnZSh7XG4gICAgYmxvY2tNYXA6IGJsb2NrTWFwLnNldChrZXksIG5ld0Jsb2NrKSxcbiAgICBzZWxlY3Rpb25BZnRlcjogc2VsZWN0aW9uU3RhdGUubWVyZ2Uoe1xuICAgICAgYW5jaG9yT2Zmc2V0OiBuZXdPZmZzZXQsXG4gICAgICBmb2N1c09mZnNldDogbmV3T2Zmc2V0XG4gICAgfSlcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0VGV4dEludG9Db250ZW50U3RhdGU7Il0sIm5hbWVzIjpbIkltbXV0YWJsZSIsInJlcXVpcmUiLCJpbnNlcnRJbnRvTGlzdCIsImludmFyaWFudCIsIlJlcGVhdCIsImluc2VydFRleHRJbnRvQ29udGVudFN0YXRlIiwiY29udGVudFN0YXRlIiwic2VsZWN0aW9uU3RhdGUiLCJ0ZXh0IiwiY2hhcmFjdGVyTWV0YWRhdGEiLCJpc0NvbGxhcHNlZCIsInByb2Nlc3MiLCJsZW4iLCJsZW5ndGgiLCJibG9ja01hcCIsImdldEJsb2NrTWFwIiwia2V5IiwiZ2V0U3RhcnRLZXkiLCJvZmZzZXQiLCJnZXRTdGFydE9mZnNldCIsImJsb2NrIiwiZ2V0IiwiYmxvY2tUZXh0IiwiZ2V0VGV4dCIsIm5ld0Jsb2NrIiwibWVyZ2UiLCJzbGljZSIsImdldExlbmd0aCIsImNoYXJhY3Rlckxpc3QiLCJnZXRDaGFyYWN0ZXJMaXN0IiwidG9MaXN0IiwibmV3T2Zmc2V0Iiwic2V0Iiwic2VsZWN0aW9uQWZ0ZXIiLCJhbmNob3JPZmZzZXQiLCJmb2N1c09mZnNldCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/insertTextIntoContentState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/isElement.js":
/*!************************************************!*\
  !*** ./node_modules/draft-js/lib/isElement.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";
eval("\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ function isElement(node) {\n    if (!node || !node.ownerDocument) {\n        return false;\n    }\n    return node.nodeType === Node.ELEMENT_NODE;\n}\nmodule.exports = isElement;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2lzRWxlbWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViOzs7Ozs7Ozs7Q0FTQyxHQUNELFNBQVNBLFVBQVVDLElBQUk7SUFDckIsSUFBSSxDQUFDQSxRQUFRLENBQUNBLEtBQUtDLGFBQWEsRUFBRTtRQUNoQyxPQUFPO0lBQ1Q7SUFFQSxPQUFPRCxLQUFLRSxRQUFRLEtBQUtDLEtBQUtDLFlBQVk7QUFDNUM7QUFFQUMsT0FBT0MsT0FBTyxHQUFHUCIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9pc0VsZW1lbnQuanM/M2YzYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbmZ1bmN0aW9uIGlzRWxlbWVudChub2RlKSB7XG4gIGlmICghbm9kZSB8fCAhbm9kZS5vd25lckRvY3VtZW50KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRWxlbWVudDsiXSwibmFtZXMiOlsiaXNFbGVtZW50Iiwibm9kZSIsIm93bmVyRG9jdW1lbnQiLCJub2RlVHlwZSIsIk5vZGUiLCJFTEVNRU5UX05PREUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/isElement.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/isEventHandled.js":
/*!*****************************************************!*\
  !*** ./node_modules/draft-js/lib/isEventHandled.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \n/**\n * Utility method for determining whether or not the value returned\n * from a handler indicates that it was handled.\n */ function isEventHandled(value) {\n    return value === \"handled\" || value === true;\n}\nmodule.exports = isEventHandled;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2lzRXZlbnRIYW5kbGVkLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUE7OztDQUdDLEdBQ0QsU0FBU0EsZUFBZUMsS0FBSztJQUMzQixPQUFPQSxVQUFVLGFBQWFBLFVBQVU7QUFDMUM7QUFFQUMsT0FBT0MsT0FBTyxHQUFHSCIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9pc0V2ZW50SGFuZGxlZC5qcz84N2Q4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXRpbGl0eSBtZXRob2QgZm9yIGRldGVybWluaW5nIHdoZXRoZXIgb3Igbm90IHRoZSB2YWx1ZSByZXR1cm5lZFxuICogZnJvbSBhIGhhbmRsZXIgaW5kaWNhdGVzIHRoYXQgaXQgd2FzIGhhbmRsZWQuXG4gKi9cbmZ1bmN0aW9uIGlzRXZlbnRIYW5kbGVkKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gJ2hhbmRsZWQnIHx8IHZhbHVlID09PSB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRXZlbnRIYW5kbGVkOyJdLCJuYW1lcyI6WyJpc0V2ZW50SGFuZGxlZCIsInZhbHVlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/isEventHandled.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/isHTMLAnchorElement.js":
/*!**********************************************************!*\
  !*** ./node_modules/draft-js/lib/isHTMLAnchorElement.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ var isElement = __webpack_require__(/*! ./isElement */ \"(ssr)/./node_modules/draft-js/lib/isElement.js\");\nfunction isHTMLAnchorElement(node) {\n    if (!node || !node.ownerDocument) {\n        return false;\n    }\n    return isElement(node) && node.nodeName === \"A\";\n}\nmodule.exports = isHTMLAnchorElement;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2lzSFRNTEFuY2hvckVsZW1lbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYjs7Ozs7Ozs7O0NBU0MsR0FDRCxJQUFJQSxZQUFZQyxtQkFBT0EsQ0FBQyxtRUFBYTtBQUVyQyxTQUFTQyxvQkFBb0JDLElBQUk7SUFDL0IsSUFBSSxDQUFDQSxRQUFRLENBQUNBLEtBQUtDLGFBQWEsRUFBRTtRQUNoQyxPQUFPO0lBQ1Q7SUFFQSxPQUFPSixVQUFVRyxTQUFTQSxLQUFLRSxRQUFRLEtBQUs7QUFDOUM7QUFFQUMsT0FBT0MsT0FBTyxHQUFHTCIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9pc0hUTUxBbmNob3JFbGVtZW50LmpzPzY1MmUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG52YXIgaXNFbGVtZW50ID0gcmVxdWlyZShcIi4vaXNFbGVtZW50XCIpO1xuXG5mdW5jdGlvbiBpc0hUTUxBbmNob3JFbGVtZW50KG5vZGUpIHtcbiAgaWYgKCFub2RlIHx8ICFub2RlLm93bmVyRG9jdW1lbnQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gaXNFbGVtZW50KG5vZGUpICYmIG5vZGUubm9kZU5hbWUgPT09ICdBJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0hUTUxBbmNob3JFbGVtZW50OyJdLCJuYW1lcyI6WyJpc0VsZW1lbnQiLCJyZXF1aXJlIiwiaXNIVE1MQW5jaG9yRWxlbWVudCIsIm5vZGUiLCJvd25lckRvY3VtZW50Iiwibm9kZU5hbWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/isHTMLAnchorElement.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/isHTMLBRElement.js":
/*!******************************************************!*\
  !*** ./node_modules/draft-js/lib/isHTMLBRElement.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ var isElement = __webpack_require__(/*! ./isElement */ \"(ssr)/./node_modules/draft-js/lib/isElement.js\");\nfunction isHTMLBRElement(node) {\n    if (!node || !node.ownerDocument) {\n        return false;\n    }\n    return isElement(node) && node.nodeName === \"BR\";\n}\nmodule.exports = isHTMLBRElement;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2lzSFRNTEJSRWxlbWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViOzs7Ozs7Ozs7Q0FTQyxHQUNELElBQUlBLFlBQVlDLG1CQUFPQSxDQUFDLG1FQUFhO0FBRXJDLFNBQVNDLGdCQUFnQkMsSUFBSTtJQUMzQixJQUFJLENBQUNBLFFBQVEsQ0FBQ0EsS0FBS0MsYUFBYSxFQUFFO1FBQ2hDLE9BQU87SUFDVDtJQUVBLE9BQU9KLFVBQVVHLFNBQVNBLEtBQUtFLFFBQVEsS0FBSztBQUM5QztBQUVBQyxPQUFPQyxPQUFPLEdBQUdMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVlbC1oYXJ2ZXN0ZXIvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2lzSFRNTEJSRWxlbWVudC5qcz84NDEwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xudmFyIGlzRWxlbWVudCA9IHJlcXVpcmUoXCIuL2lzRWxlbWVudFwiKTtcblxuZnVuY3Rpb24gaXNIVE1MQlJFbGVtZW50KG5vZGUpIHtcbiAgaWYgKCFub2RlIHx8ICFub2RlLm93bmVyRG9jdW1lbnQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gaXNFbGVtZW50KG5vZGUpICYmIG5vZGUubm9kZU5hbWUgPT09ICdCUic7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNIVE1MQlJFbGVtZW50OyJdLCJuYW1lcyI6WyJpc0VsZW1lbnQiLCJyZXF1aXJlIiwiaXNIVE1MQlJFbGVtZW50Iiwibm9kZSIsIm93bmVyRG9jdW1lbnQiLCJub2RlTmFtZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/isHTMLBRElement.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/isHTMLElement.js":
/*!****************************************************!*\
  !*** ./node_modules/draft-js/lib/isHTMLElement.js ***!
  \****************************************************/
/***/ ((module) => {

"use strict";
eval("\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ function isHTMLElement(node) {\n    if (!node || !node.ownerDocument) {\n        return false;\n    }\n    if (!node.ownerDocument.defaultView) {\n        return node instanceof HTMLElement;\n    }\n    if (node instanceof node.ownerDocument.defaultView.HTMLElement) {\n        return true;\n    }\n    return false;\n}\nmodule.exports = isHTMLElement;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2lzSFRNTEVsZW1lbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYjs7Ozs7Ozs7O0NBU0MsR0FDRCxTQUFTQSxjQUFjQyxJQUFJO0lBQ3pCLElBQUksQ0FBQ0EsUUFBUSxDQUFDQSxLQUFLQyxhQUFhLEVBQUU7UUFDaEMsT0FBTztJQUNUO0lBRUEsSUFBSSxDQUFDRCxLQUFLQyxhQUFhLENBQUNDLFdBQVcsRUFBRTtRQUNuQyxPQUFPRixnQkFBZ0JHO0lBQ3pCO0lBRUEsSUFBSUgsZ0JBQWdCQSxLQUFLQyxhQUFhLENBQUNDLFdBQVcsQ0FBQ0MsV0FBVyxFQUFFO1FBQzlELE9BQU87SUFDVDtJQUVBLE9BQU87QUFDVDtBQUVBQyxPQUFPQyxPQUFPLEdBQUdOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVlbC1oYXJ2ZXN0ZXIvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2lzSFRNTEVsZW1lbnQuanM/NDM3NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbmZ1bmN0aW9uIGlzSFRNTEVsZW1lbnQobm9kZSkge1xuICBpZiAoIW5vZGUgfHwgIW5vZGUub3duZXJEb2N1bWVudCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICghbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KSB7XG4gICAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudDtcbiAgfVxuXG4gIGlmIChub2RlIGluc3RhbmNlb2Ygbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LkhUTUxFbGVtZW50KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNIVE1MRWxlbWVudDsiXSwibmFtZXMiOlsiaXNIVE1MRWxlbWVudCIsIm5vZGUiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJIVE1MRWxlbWVudCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/isHTMLElement.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/isHTMLImageElement.js":
/*!*********************************************************!*\
  !*** ./node_modules/draft-js/lib/isHTMLImageElement.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ var isElement = __webpack_require__(/*! ./isElement */ \"(ssr)/./node_modules/draft-js/lib/isElement.js\");\nfunction isHTMLImageElement(node) {\n    if (!node || !node.ownerDocument) {\n        return false;\n    }\n    return isElement(node) && node.nodeName === \"IMG\";\n}\nmodule.exports = isHTMLImageElement;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2lzSFRNTEltYWdlRWxlbWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViOzs7Ozs7Ozs7Q0FTQyxHQUNELElBQUlBLFlBQVlDLG1CQUFPQSxDQUFDLG1FQUFhO0FBRXJDLFNBQVNDLG1CQUFtQkMsSUFBSTtJQUM5QixJQUFJLENBQUNBLFFBQVEsQ0FBQ0EsS0FBS0MsYUFBYSxFQUFFO1FBQ2hDLE9BQU87SUFDVDtJQUVBLE9BQU9KLFVBQVVHLFNBQVNBLEtBQUtFLFFBQVEsS0FBSztBQUM5QztBQUVBQyxPQUFPQyxPQUFPLEdBQUdMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVlbC1oYXJ2ZXN0ZXIvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2lzSFRNTEltYWdlRWxlbWVudC5qcz9jZWFkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xudmFyIGlzRWxlbWVudCA9IHJlcXVpcmUoXCIuL2lzRWxlbWVudFwiKTtcblxuZnVuY3Rpb24gaXNIVE1MSW1hZ2VFbGVtZW50KG5vZGUpIHtcbiAgaWYgKCFub2RlIHx8ICFub2RlLm93bmVyRG9jdW1lbnQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gaXNFbGVtZW50KG5vZGUpICYmIG5vZGUubm9kZU5hbWUgPT09ICdJTUcnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzSFRNTEltYWdlRWxlbWVudDsiXSwibmFtZXMiOlsiaXNFbGVtZW50IiwicmVxdWlyZSIsImlzSFRNTEltYWdlRWxlbWVudCIsIm5vZGUiLCJvd25lckRvY3VtZW50Iiwibm9kZU5hbWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/isHTMLImageElement.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/isInstanceOfNode.js":
/*!*******************************************************!*\
  !*** ./node_modules/draft-js/lib/isInstanceOfNode.js ***!
  \*******************************************************/
/***/ ((module) => {

"use strict";
eval("\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ function isInstanceOfNode(target) {\n    // we changed the name because of having duplicate module provider (fbjs)\n    if (!target || !(\"ownerDocument\" in target)) {\n        return false;\n    }\n    if (\"ownerDocument\" in target) {\n        var node = target;\n        if (!node.ownerDocument.defaultView) {\n            return node instanceof Node;\n        }\n        if (node instanceof node.ownerDocument.defaultView.Node) {\n            return true;\n        }\n    }\n    return false;\n}\nmodule.exports = isInstanceOfNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2lzSW5zdGFuY2VPZk5vZGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYjs7Ozs7Ozs7O0NBU0MsR0FDRCxTQUFTQSxpQkFBaUJDLE1BQU07SUFDOUIseUVBQXlFO0lBQ3pFLElBQUksQ0FBQ0EsVUFBVSxDQUFFLG9CQUFtQkEsTUFBSyxHQUFJO1FBQzNDLE9BQU87SUFDVDtJQUVBLElBQUksbUJBQW1CQSxRQUFRO1FBQzdCLElBQUlDLE9BQU9EO1FBRVgsSUFBSSxDQUFDQyxLQUFLQyxhQUFhLENBQUNDLFdBQVcsRUFBRTtZQUNuQyxPQUFPRixnQkFBZ0JHO1FBQ3pCO1FBRUEsSUFBSUgsZ0JBQWdCQSxLQUFLQyxhQUFhLENBQUNDLFdBQVcsQ0FBQ0MsSUFBSSxFQUFFO1lBQ3ZELE9BQU87UUFDVDtJQUNGO0lBRUEsT0FBTztBQUNUO0FBRUFDLE9BQU9DLE9BQU8sR0FBR1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWVsLWhhcnZlc3Rlci8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvaXNJbnN0YW5jZU9mTm9kZS5qcz9hYTRiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuZnVuY3Rpb24gaXNJbnN0YW5jZU9mTm9kZSh0YXJnZXQpIHtcbiAgLy8gd2UgY2hhbmdlZCB0aGUgbmFtZSBiZWNhdXNlIG9mIGhhdmluZyBkdXBsaWNhdGUgbW9kdWxlIHByb3ZpZGVyIChmYmpzKVxuICBpZiAoIXRhcmdldCB8fCAhKCdvd25lckRvY3VtZW50JyBpbiB0YXJnZXQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKCdvd25lckRvY3VtZW50JyBpbiB0YXJnZXQpIHtcbiAgICB2YXIgbm9kZSA9IHRhcmdldDtcblxuICAgIGlmICghbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KSB7XG4gICAgICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIE5vZGU7XG4gICAgfVxuXG4gICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBub2RlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuTm9kZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzSW5zdGFuY2VPZk5vZGU7Il0sIm5hbWVzIjpbImlzSW5zdGFuY2VPZk5vZGUiLCJ0YXJnZXQiLCJub2RlIiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwiTm9kZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/isInstanceOfNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/isSelectionAtLeafStart.js":
/*!*************************************************************!*\
  !*** ./node_modules/draft-js/lib/isSelectionAtLeafStart.js ***!
  \*************************************************************/
/***/ ((module) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nfunction isSelectionAtLeafStart(editorState) {\n    var selection = editorState.getSelection();\n    var anchorKey = selection.getAnchorKey();\n    var blockTree = editorState.getBlockTree(anchorKey);\n    var offset = selection.getStartOffset();\n    var isAtStart = false;\n    blockTree.some(function(leafSet) {\n        if (offset === leafSet.get(\"start\")) {\n            isAtStart = true;\n            return true;\n        }\n        if (offset < leafSet.get(\"end\")) {\n            return leafSet.get(\"leaves\").some(function(leaf) {\n                var leafStart = leaf.get(\"start\");\n                if (offset === leafStart) {\n                    isAtStart = true;\n                    return true;\n                }\n                return false;\n            });\n        }\n        return false;\n    });\n    return isAtStart;\n}\nmodule.exports = isSelectionAtLeafStart;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2lzU2VsZWN0aW9uQXRMZWFmU3RhcnQuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFFQSxTQUFTQSx1QkFBdUJDLFdBQVc7SUFDekMsSUFBSUMsWUFBWUQsWUFBWUUsWUFBWTtJQUN4QyxJQUFJQyxZQUFZRixVQUFVRyxZQUFZO0lBQ3RDLElBQUlDLFlBQVlMLFlBQVlNLFlBQVksQ0FBQ0g7SUFDekMsSUFBSUksU0FBU04sVUFBVU8sY0FBYztJQUNyQyxJQUFJQyxZQUFZO0lBQ2hCSixVQUFVSyxJQUFJLENBQUMsU0FBVUMsT0FBTztRQUM5QixJQUFJSixXQUFXSSxRQUFRQyxHQUFHLENBQUMsVUFBVTtZQUNuQ0gsWUFBWTtZQUNaLE9BQU87UUFDVDtRQUVBLElBQUlGLFNBQVNJLFFBQVFDLEdBQUcsQ0FBQyxRQUFRO1lBQy9CLE9BQU9ELFFBQVFDLEdBQUcsQ0FBQyxVQUFVRixJQUFJLENBQUMsU0FBVUcsSUFBSTtnQkFDOUMsSUFBSUMsWUFBWUQsS0FBS0QsR0FBRyxDQUFDO2dCQUV6QixJQUFJTCxXQUFXTyxXQUFXO29CQUN4QkwsWUFBWTtvQkFDWixPQUFPO2dCQUNUO2dCQUVBLE9BQU87WUFDVDtRQUNGO1FBRUEsT0FBTztJQUNUO0lBQ0EsT0FBT0E7QUFDVDtBQUVBTSxPQUFPQyxPQUFPLEdBQUdqQiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9pc1NlbGVjdGlvbkF0TGVhZlN0YXJ0LmpzPzU1MzMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gaXNTZWxlY3Rpb25BdExlYWZTdGFydChlZGl0b3JTdGF0ZSkge1xuICB2YXIgc2VsZWN0aW9uID0gZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCk7XG4gIHZhciBhbmNob3JLZXkgPSBzZWxlY3Rpb24uZ2V0QW5jaG9yS2V5KCk7XG4gIHZhciBibG9ja1RyZWUgPSBlZGl0b3JTdGF0ZS5nZXRCbG9ja1RyZWUoYW5jaG9yS2V5KTtcbiAgdmFyIG9mZnNldCA9IHNlbGVjdGlvbi5nZXRTdGFydE9mZnNldCgpO1xuICB2YXIgaXNBdFN0YXJ0ID0gZmFsc2U7XG4gIGJsb2NrVHJlZS5zb21lKGZ1bmN0aW9uIChsZWFmU2V0KSB7XG4gICAgaWYgKG9mZnNldCA9PT0gbGVhZlNldC5nZXQoJ3N0YXJ0JykpIHtcbiAgICAgIGlzQXRTdGFydCA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAob2Zmc2V0IDwgbGVhZlNldC5nZXQoJ2VuZCcpKSB7XG4gICAgICByZXR1cm4gbGVhZlNldC5nZXQoJ2xlYXZlcycpLnNvbWUoZnVuY3Rpb24gKGxlYWYpIHtcbiAgICAgICAgdmFyIGxlYWZTdGFydCA9IGxlYWYuZ2V0KCdzdGFydCcpO1xuXG4gICAgICAgIGlmIChvZmZzZXQgPT09IGxlYWZTdGFydCkge1xuICAgICAgICAgIGlzQXRTdGFydCA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0pO1xuICByZXR1cm4gaXNBdFN0YXJ0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU2VsZWN0aW9uQXRMZWFmU3RhcnQ7Il0sIm5hbWVzIjpbImlzU2VsZWN0aW9uQXRMZWFmU3RhcnQiLCJlZGl0b3JTdGF0ZSIsInNlbGVjdGlvbiIsImdldFNlbGVjdGlvbiIsImFuY2hvcktleSIsImdldEFuY2hvcktleSIsImJsb2NrVHJlZSIsImdldEJsb2NrVHJlZSIsIm9mZnNldCIsImdldFN0YXJ0T2Zmc2V0IiwiaXNBdFN0YXJ0Iiwic29tZSIsImxlYWZTZXQiLCJnZXQiLCJsZWFmIiwibGVhZlN0YXJ0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/isSelectionAtLeafStart.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/isSoftNewlineEvent.js":
/*!*********************************************************!*\
  !*** ./node_modules/draft-js/lib/isSoftNewlineEvent.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar Keys = __webpack_require__(/*! fbjs/lib/Keys */ \"(ssr)/./node_modules/fbjs/lib/Keys.js\");\nfunction isSoftNewlineEvent(e) {\n    return e.which === Keys.RETURN && (e.getModifierState(\"Shift\") || e.getModifierState(\"Alt\") || e.getModifierState(\"Control\"));\n}\nmodule.exports = isSoftNewlineEvent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2lzU29mdE5ld2xpbmVFdmVudC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLElBQUlBLE9BQU9DLG1CQUFPQSxDQUFDLDREQUFlO0FBRWxDLFNBQVNDLG1CQUFtQkMsQ0FBQztJQUMzQixPQUFPQSxFQUFFQyxLQUFLLEtBQUtKLEtBQUtLLE1BQU0sSUFBS0YsQ0FBQUEsRUFBRUcsZ0JBQWdCLENBQUMsWUFBWUgsRUFBRUcsZ0JBQWdCLENBQUMsVUFBVUgsRUFBRUcsZ0JBQWdCLENBQUMsVUFBUztBQUM3SDtBQUVBQyxPQUFPQyxPQUFPLEdBQUdOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVlbC1oYXJ2ZXN0ZXIvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2lzU29mdE5ld2xpbmVFdmVudC5qcz9iYjdjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBLZXlzID0gcmVxdWlyZShcImZianMvbGliL0tleXNcIik7XG5cbmZ1bmN0aW9uIGlzU29mdE5ld2xpbmVFdmVudChlKSB7XG4gIHJldHVybiBlLndoaWNoID09PSBLZXlzLlJFVFVSTiAmJiAoZS5nZXRNb2RpZmllclN0YXRlKCdTaGlmdCcpIHx8IGUuZ2V0TW9kaWZpZXJTdGF0ZSgnQWx0JykgfHwgZS5nZXRNb2RpZmllclN0YXRlKCdDb250cm9sJykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU29mdE5ld2xpbmVFdmVudDsiXSwibmFtZXMiOlsiS2V5cyIsInJlcXVpcmUiLCJpc1NvZnROZXdsaW5lRXZlbnQiLCJlIiwid2hpY2giLCJSRVRVUk4iLCJnZXRNb2RpZmllclN0YXRlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/isSoftNewlineEvent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/keyCommandBackspaceToStartOfLine.js":
/*!***********************************************************************!*\
  !*** ./node_modules/draft-js/lib/keyCommandBackspaceToStartOfLine.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar expandRangeToStartOfLine = __webpack_require__(/*! ./expandRangeToStartOfLine */ \"(ssr)/./node_modules/draft-js/lib/expandRangeToStartOfLine.js\");\nvar getDraftEditorSelectionWithNodes = __webpack_require__(/*! ./getDraftEditorSelectionWithNodes */ \"(ssr)/./node_modules/draft-js/lib/getDraftEditorSelectionWithNodes.js\");\nvar moveSelectionBackward = __webpack_require__(/*! ./moveSelectionBackward */ \"(ssr)/./node_modules/draft-js/lib/moveSelectionBackward.js\");\nvar removeTextWithStrategy = __webpack_require__(/*! ./removeTextWithStrategy */ \"(ssr)/./node_modules/draft-js/lib/removeTextWithStrategy.js\");\nfunction keyCommandBackspaceToStartOfLine(editorState, e) {\n    var afterRemoval = removeTextWithStrategy(editorState, function(strategyState) {\n        var selection = strategyState.getSelection();\n        if (selection.isCollapsed() && selection.getAnchorOffset() === 0) {\n            return moveSelectionBackward(strategyState, 1);\n        }\n        var ownerDocument = e.currentTarget.ownerDocument;\n        var domSelection = ownerDocument.defaultView.getSelection(); // getRangeAt can technically throw if there's no selection, but we know\n        // there is one here because text editor has focus (the cursor is a\n        // selection of length 0). Therefore, we don't need to wrap this in a\n        // try-catch block.\n        var range = domSelection.getRangeAt(0);\n        range = expandRangeToStartOfLine(range);\n        return getDraftEditorSelectionWithNodes(strategyState, null, range.endContainer, range.endOffset, range.startContainer, range.startOffset).selectionState;\n    }, \"backward\");\n    if (afterRemoval === editorState.getCurrentContent()) {\n        return editorState;\n    }\n    return EditorState.push(editorState, afterRemoval, \"remove-range\");\n}\nmodule.exports = keyCommandBackspaceToStartOfLine;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2tleUNvbW1hbmRCYWNrc3BhY2VUb1N0YXJ0T2ZMaW5lLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsY0FBY0MsbUJBQU9BLENBQUMsdUVBQWU7QUFFekMsSUFBSUMsMkJBQTJCRCxtQkFBT0EsQ0FBQyxpR0FBNEI7QUFFbkUsSUFBSUUsbUNBQW1DRixtQkFBT0EsQ0FBQyxpSEFBb0M7QUFFbkYsSUFBSUcsd0JBQXdCSCxtQkFBT0EsQ0FBQywyRkFBeUI7QUFFN0QsSUFBSUkseUJBQXlCSixtQkFBT0EsQ0FBQyw2RkFBMEI7QUFFL0QsU0FBU0ssaUNBQWlDQyxXQUFXLEVBQUVDLENBQUM7SUFDdEQsSUFBSUMsZUFBZUosdUJBQXVCRSxhQUFhLFNBQVVHLGFBQWE7UUFDNUUsSUFBSUMsWUFBWUQsY0FBY0UsWUFBWTtRQUUxQyxJQUFJRCxVQUFVRSxXQUFXLE1BQU1GLFVBQVVHLGVBQWUsT0FBTyxHQUFHO1lBQ2hFLE9BQU9WLHNCQUFzQk0sZUFBZTtRQUM5QztRQUVBLElBQUlLLGdCQUFnQlAsRUFBRVEsYUFBYSxDQUFDRCxhQUFhO1FBQ2pELElBQUlFLGVBQWVGLGNBQWNHLFdBQVcsQ0FBQ04sWUFBWSxJQUFJLHdFQUF3RTtRQUNySSxtRUFBbUU7UUFDbkUscUVBQXFFO1FBQ3JFLG1CQUFtQjtRQUVuQixJQUFJTyxRQUFRRixhQUFhRyxVQUFVLENBQUM7UUFDcENELFFBQVFqQix5QkFBeUJpQjtRQUNqQyxPQUFPaEIsaUNBQWlDTyxlQUFlLE1BQU1TLE1BQU1FLFlBQVksRUFBRUYsTUFBTUcsU0FBUyxFQUFFSCxNQUFNSSxjQUFjLEVBQUVKLE1BQU1LLFdBQVcsRUFBRUMsY0FBYztJQUMzSixHQUFHO0lBRUgsSUFBSWhCLGlCQUFpQkYsWUFBWW1CLGlCQUFpQixJQUFJO1FBQ3BELE9BQU9uQjtJQUNUO0lBRUEsT0FBT1AsWUFBWTJCLElBQUksQ0FBQ3BCLGFBQWFFLGNBQWM7QUFDckQ7QUFFQW1CLE9BQU9DLE9BQU8sR0FBR3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVlbC1oYXJ2ZXN0ZXIvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2tleUNvbW1hbmRCYWNrc3BhY2VUb1N0YXJ0T2ZMaW5lLmpzPzVmMzAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIEVkaXRvclN0YXRlID0gcmVxdWlyZShcIi4vRWRpdG9yU3RhdGVcIik7XG5cbnZhciBleHBhbmRSYW5nZVRvU3RhcnRPZkxpbmUgPSByZXF1aXJlKFwiLi9leHBhbmRSYW5nZVRvU3RhcnRPZkxpbmVcIik7XG5cbnZhciBnZXREcmFmdEVkaXRvclNlbGVjdGlvbldpdGhOb2RlcyA9IHJlcXVpcmUoXCIuL2dldERyYWZ0RWRpdG9yU2VsZWN0aW9uV2l0aE5vZGVzXCIpO1xuXG52YXIgbW92ZVNlbGVjdGlvbkJhY2t3YXJkID0gcmVxdWlyZShcIi4vbW92ZVNlbGVjdGlvbkJhY2t3YXJkXCIpO1xuXG52YXIgcmVtb3ZlVGV4dFdpdGhTdHJhdGVneSA9IHJlcXVpcmUoXCIuL3JlbW92ZVRleHRXaXRoU3RyYXRlZ3lcIik7XG5cbmZ1bmN0aW9uIGtleUNvbW1hbmRCYWNrc3BhY2VUb1N0YXJ0T2ZMaW5lKGVkaXRvclN0YXRlLCBlKSB7XG4gIHZhciBhZnRlclJlbW92YWwgPSByZW1vdmVUZXh0V2l0aFN0cmF0ZWd5KGVkaXRvclN0YXRlLCBmdW5jdGlvbiAoc3RyYXRlZ3lTdGF0ZSkge1xuICAgIHZhciBzZWxlY3Rpb24gPSBzdHJhdGVneVN0YXRlLmdldFNlbGVjdGlvbigpO1xuXG4gICAgaWYgKHNlbGVjdGlvbi5pc0NvbGxhcHNlZCgpICYmIHNlbGVjdGlvbi5nZXRBbmNob3JPZmZzZXQoKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIG1vdmVTZWxlY3Rpb25CYWNrd2FyZChzdHJhdGVneVN0YXRlLCAxKTtcbiAgICB9XG5cbiAgICB2YXIgb3duZXJEb2N1bWVudCA9IGUuY3VycmVudFRhcmdldC5vd25lckRvY3VtZW50O1xuICAgIHZhciBkb21TZWxlY3Rpb24gPSBvd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmdldFNlbGVjdGlvbigpOyAvLyBnZXRSYW5nZUF0IGNhbiB0ZWNobmljYWxseSB0aHJvdyBpZiB0aGVyZSdzIG5vIHNlbGVjdGlvbiwgYnV0IHdlIGtub3dcbiAgICAvLyB0aGVyZSBpcyBvbmUgaGVyZSBiZWNhdXNlIHRleHQgZWRpdG9yIGhhcyBmb2N1cyAodGhlIGN1cnNvciBpcyBhXG4gICAgLy8gc2VsZWN0aW9uIG9mIGxlbmd0aCAwKS4gVGhlcmVmb3JlLCB3ZSBkb24ndCBuZWVkIHRvIHdyYXAgdGhpcyBpbiBhXG4gICAgLy8gdHJ5LWNhdGNoIGJsb2NrLlxuXG4gICAgdmFyIHJhbmdlID0gZG9tU2VsZWN0aW9uLmdldFJhbmdlQXQoMCk7XG4gICAgcmFuZ2UgPSBleHBhbmRSYW5nZVRvU3RhcnRPZkxpbmUocmFuZ2UpO1xuICAgIHJldHVybiBnZXREcmFmdEVkaXRvclNlbGVjdGlvbldpdGhOb2RlcyhzdHJhdGVneVN0YXRlLCBudWxsLCByYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCwgcmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0KS5zZWxlY3Rpb25TdGF0ZTtcbiAgfSwgJ2JhY2t3YXJkJyk7XG5cbiAgaWYgKGFmdGVyUmVtb3ZhbCA9PT0gZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKSkge1xuICAgIHJldHVybiBlZGl0b3JTdGF0ZTtcbiAgfVxuXG4gIHJldHVybiBFZGl0b3JTdGF0ZS5wdXNoKGVkaXRvclN0YXRlLCBhZnRlclJlbW92YWwsICdyZW1vdmUtcmFuZ2UnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBrZXlDb21tYW5kQmFja3NwYWNlVG9TdGFydE9mTGluZTsiXSwibmFtZXMiOlsiRWRpdG9yU3RhdGUiLCJyZXF1aXJlIiwiZXhwYW5kUmFuZ2VUb1N0YXJ0T2ZMaW5lIiwiZ2V0RHJhZnRFZGl0b3JTZWxlY3Rpb25XaXRoTm9kZXMiLCJtb3ZlU2VsZWN0aW9uQmFja3dhcmQiLCJyZW1vdmVUZXh0V2l0aFN0cmF0ZWd5Iiwia2V5Q29tbWFuZEJhY2tzcGFjZVRvU3RhcnRPZkxpbmUiLCJlZGl0b3JTdGF0ZSIsImUiLCJhZnRlclJlbW92YWwiLCJzdHJhdGVneVN0YXRlIiwic2VsZWN0aW9uIiwiZ2V0U2VsZWN0aW9uIiwiaXNDb2xsYXBzZWQiLCJnZXRBbmNob3JPZmZzZXQiLCJvd25lckRvY3VtZW50IiwiY3VycmVudFRhcmdldCIsImRvbVNlbGVjdGlvbiIsImRlZmF1bHRWaWV3IiwicmFuZ2UiLCJnZXRSYW5nZUF0IiwiZW5kQ29udGFpbmVyIiwiZW5kT2Zmc2V0Iiwic3RhcnRDb250YWluZXIiLCJzdGFydE9mZnNldCIsInNlbGVjdGlvblN0YXRlIiwiZ2V0Q3VycmVudENvbnRlbnQiLCJwdXNoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/keyCommandBackspaceToStartOfLine.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/keyCommandBackspaceWord.js":
/*!**************************************************************!*\
  !*** ./node_modules/draft-js/lib/keyCommandBackspaceWord.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DraftRemovableWord = __webpack_require__(/*! ./DraftRemovableWord */ \"(ssr)/./node_modules/draft-js/lib/DraftRemovableWord.js\");\nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar moveSelectionBackward = __webpack_require__(/*! ./moveSelectionBackward */ \"(ssr)/./node_modules/draft-js/lib/moveSelectionBackward.js\");\nvar removeTextWithStrategy = __webpack_require__(/*! ./removeTextWithStrategy */ \"(ssr)/./node_modules/draft-js/lib/removeTextWithStrategy.js\");\n/**\n * Delete the word that is left of the cursor, as well as any spaces or\n * punctuation after the word.\n */ function keyCommandBackspaceWord(editorState) {\n    var afterRemoval = removeTextWithStrategy(editorState, function(strategyState) {\n        var selection = strategyState.getSelection();\n        var offset = selection.getStartOffset(); // If there are no words before the cursor, remove the preceding newline.\n        if (offset === 0) {\n            return moveSelectionBackward(strategyState, 1);\n        }\n        var key = selection.getStartKey();\n        var content = strategyState.getCurrentContent();\n        var text = content.getBlockForKey(key).getText().slice(0, offset);\n        var toRemove = DraftRemovableWord.getBackward(text);\n        return moveSelectionBackward(strategyState, toRemove.length || 1);\n    }, \"backward\");\n    if (afterRemoval === editorState.getCurrentContent()) {\n        return editorState;\n    }\n    return EditorState.push(editorState, afterRemoval, \"remove-range\");\n}\nmodule.exports = keyCommandBackspaceWord;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2tleUNvbW1hbmRCYWNrc3BhY2VXb3JkLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEscUJBQXFCQyxtQkFBT0EsQ0FBQyxxRkFBc0I7QUFFdkQsSUFBSUMsY0FBY0QsbUJBQU9BLENBQUMsdUVBQWU7QUFFekMsSUFBSUUsd0JBQXdCRixtQkFBT0EsQ0FBQywyRkFBeUI7QUFFN0QsSUFBSUcseUJBQXlCSCxtQkFBT0EsQ0FBQyw2RkFBMEI7QUFDL0Q7OztDQUdDLEdBR0QsU0FBU0ksd0JBQXdCQyxXQUFXO0lBQzFDLElBQUlDLGVBQWVILHVCQUF1QkUsYUFBYSxTQUFVRSxhQUFhO1FBQzVFLElBQUlDLFlBQVlELGNBQWNFLFlBQVk7UUFDMUMsSUFBSUMsU0FBU0YsVUFBVUcsY0FBYyxJQUFJLHlFQUF5RTtRQUVsSCxJQUFJRCxXQUFXLEdBQUc7WUFDaEIsT0FBT1Isc0JBQXNCSyxlQUFlO1FBQzlDO1FBRUEsSUFBSUssTUFBTUosVUFBVUssV0FBVztRQUMvQixJQUFJQyxVQUFVUCxjQUFjUSxpQkFBaUI7UUFDN0MsSUFBSUMsT0FBT0YsUUFBUUcsY0FBYyxDQUFDTCxLQUFLTSxPQUFPLEdBQUdDLEtBQUssQ0FBQyxHQUFHVDtRQUMxRCxJQUFJVSxXQUFXckIsbUJBQW1Cc0IsV0FBVyxDQUFDTDtRQUM5QyxPQUFPZCxzQkFBc0JLLGVBQWVhLFNBQVNFLE1BQU0sSUFBSTtJQUNqRSxHQUFHO0lBRUgsSUFBSWhCLGlCQUFpQkQsWUFBWVUsaUJBQWlCLElBQUk7UUFDcEQsT0FBT1Y7SUFDVDtJQUVBLE9BQU9KLFlBQVlzQixJQUFJLENBQUNsQixhQUFhQyxjQUFjO0FBQ3JEO0FBRUFrQixPQUFPQyxPQUFPLEdBQUdyQiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9rZXlDb21tYW5kQmFja3NwYWNlV29yZC5qcz9kYWI0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBEcmFmdFJlbW92YWJsZVdvcmQgPSByZXF1aXJlKFwiLi9EcmFmdFJlbW92YWJsZVdvcmRcIik7XG5cbnZhciBFZGl0b3JTdGF0ZSA9IHJlcXVpcmUoXCIuL0VkaXRvclN0YXRlXCIpO1xuXG52YXIgbW92ZVNlbGVjdGlvbkJhY2t3YXJkID0gcmVxdWlyZShcIi4vbW92ZVNlbGVjdGlvbkJhY2t3YXJkXCIpO1xuXG52YXIgcmVtb3ZlVGV4dFdpdGhTdHJhdGVneSA9IHJlcXVpcmUoXCIuL3JlbW92ZVRleHRXaXRoU3RyYXRlZ3lcIik7XG4vKipcbiAqIERlbGV0ZSB0aGUgd29yZCB0aGF0IGlzIGxlZnQgb2YgdGhlIGN1cnNvciwgYXMgd2VsbCBhcyBhbnkgc3BhY2VzIG9yXG4gKiBwdW5jdHVhdGlvbiBhZnRlciB0aGUgd29yZC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGtleUNvbW1hbmRCYWNrc3BhY2VXb3JkKGVkaXRvclN0YXRlKSB7XG4gIHZhciBhZnRlclJlbW92YWwgPSByZW1vdmVUZXh0V2l0aFN0cmF0ZWd5KGVkaXRvclN0YXRlLCBmdW5jdGlvbiAoc3RyYXRlZ3lTdGF0ZSkge1xuICAgIHZhciBzZWxlY3Rpb24gPSBzdHJhdGVneVN0YXRlLmdldFNlbGVjdGlvbigpO1xuICAgIHZhciBvZmZzZXQgPSBzZWxlY3Rpb24uZ2V0U3RhcnRPZmZzZXQoKTsgLy8gSWYgdGhlcmUgYXJlIG5vIHdvcmRzIGJlZm9yZSB0aGUgY3Vyc29yLCByZW1vdmUgdGhlIHByZWNlZGluZyBuZXdsaW5lLlxuXG4gICAgaWYgKG9mZnNldCA9PT0gMCkge1xuICAgICAgcmV0dXJuIG1vdmVTZWxlY3Rpb25CYWNrd2FyZChzdHJhdGVneVN0YXRlLCAxKTtcbiAgICB9XG5cbiAgICB2YXIga2V5ID0gc2VsZWN0aW9uLmdldFN0YXJ0S2V5KCk7XG4gICAgdmFyIGNvbnRlbnQgPSBzdHJhdGVneVN0YXRlLmdldEN1cnJlbnRDb250ZW50KCk7XG4gICAgdmFyIHRleHQgPSBjb250ZW50LmdldEJsb2NrRm9yS2V5KGtleSkuZ2V0VGV4dCgpLnNsaWNlKDAsIG9mZnNldCk7XG4gICAgdmFyIHRvUmVtb3ZlID0gRHJhZnRSZW1vdmFibGVXb3JkLmdldEJhY2t3YXJkKHRleHQpO1xuICAgIHJldHVybiBtb3ZlU2VsZWN0aW9uQmFja3dhcmQoc3RyYXRlZ3lTdGF0ZSwgdG9SZW1vdmUubGVuZ3RoIHx8IDEpO1xuICB9LCAnYmFja3dhcmQnKTtcblxuICBpZiAoYWZ0ZXJSZW1vdmFsID09PSBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpKSB7XG4gICAgcmV0dXJuIGVkaXRvclN0YXRlO1xuICB9XG5cbiAgcmV0dXJuIEVkaXRvclN0YXRlLnB1c2goZWRpdG9yU3RhdGUsIGFmdGVyUmVtb3ZhbCwgJ3JlbW92ZS1yYW5nZScpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleUNvbW1hbmRCYWNrc3BhY2VXb3JkOyJdLCJuYW1lcyI6WyJEcmFmdFJlbW92YWJsZVdvcmQiLCJyZXF1aXJlIiwiRWRpdG9yU3RhdGUiLCJtb3ZlU2VsZWN0aW9uQmFja3dhcmQiLCJyZW1vdmVUZXh0V2l0aFN0cmF0ZWd5Iiwia2V5Q29tbWFuZEJhY2tzcGFjZVdvcmQiLCJlZGl0b3JTdGF0ZSIsImFmdGVyUmVtb3ZhbCIsInN0cmF0ZWd5U3RhdGUiLCJzZWxlY3Rpb24iLCJnZXRTZWxlY3Rpb24iLCJvZmZzZXQiLCJnZXRTdGFydE9mZnNldCIsImtleSIsImdldFN0YXJ0S2V5IiwiY29udGVudCIsImdldEN1cnJlbnRDb250ZW50IiwidGV4dCIsImdldEJsb2NrRm9yS2V5IiwiZ2V0VGV4dCIsInNsaWNlIiwidG9SZW1vdmUiLCJnZXRCYWNrd2FyZCIsImxlbmd0aCIsInB1c2giLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/keyCommandBackspaceWord.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/keyCommandDeleteWord.js":
/*!***********************************************************!*\
  !*** ./node_modules/draft-js/lib/keyCommandDeleteWord.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DraftRemovableWord = __webpack_require__(/*! ./DraftRemovableWord */ \"(ssr)/./node_modules/draft-js/lib/DraftRemovableWord.js\");\nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar moveSelectionForward = __webpack_require__(/*! ./moveSelectionForward */ \"(ssr)/./node_modules/draft-js/lib/moveSelectionForward.js\");\nvar removeTextWithStrategy = __webpack_require__(/*! ./removeTextWithStrategy */ \"(ssr)/./node_modules/draft-js/lib/removeTextWithStrategy.js\");\n/**\n * Delete the word that is right of the cursor, as well as any spaces or\n * punctuation before the word.\n */ function keyCommandDeleteWord(editorState) {\n    var afterRemoval = removeTextWithStrategy(editorState, function(strategyState) {\n        var selection = strategyState.getSelection();\n        var offset = selection.getStartOffset();\n        var key = selection.getStartKey();\n        var content = strategyState.getCurrentContent();\n        var text = content.getBlockForKey(key).getText().slice(offset);\n        var toRemove = DraftRemovableWord.getForward(text); // If there are no words in front of the cursor, remove the newline.\n        return moveSelectionForward(strategyState, toRemove.length || 1);\n    }, \"forward\");\n    if (afterRemoval === editorState.getCurrentContent()) {\n        return editorState;\n    }\n    return EditorState.push(editorState, afterRemoval, \"remove-range\");\n}\nmodule.exports = keyCommandDeleteWord;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2tleUNvbW1hbmREZWxldGVXb3JkLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEscUJBQXFCQyxtQkFBT0EsQ0FBQyxxRkFBc0I7QUFFdkQsSUFBSUMsY0FBY0QsbUJBQU9BLENBQUMsdUVBQWU7QUFFekMsSUFBSUUsdUJBQXVCRixtQkFBT0EsQ0FBQyx5RkFBd0I7QUFFM0QsSUFBSUcseUJBQXlCSCxtQkFBT0EsQ0FBQyw2RkFBMEI7QUFDL0Q7OztDQUdDLEdBR0QsU0FBU0kscUJBQXFCQyxXQUFXO0lBQ3ZDLElBQUlDLGVBQWVILHVCQUF1QkUsYUFBYSxTQUFVRSxhQUFhO1FBQzVFLElBQUlDLFlBQVlELGNBQWNFLFlBQVk7UUFDMUMsSUFBSUMsU0FBU0YsVUFBVUcsY0FBYztRQUNyQyxJQUFJQyxNQUFNSixVQUFVSyxXQUFXO1FBQy9CLElBQUlDLFVBQVVQLGNBQWNRLGlCQUFpQjtRQUM3QyxJQUFJQyxPQUFPRixRQUFRRyxjQUFjLENBQUNMLEtBQUtNLE9BQU8sR0FBR0MsS0FBSyxDQUFDVDtRQUN2RCxJQUFJVSxXQUFXckIsbUJBQW1Cc0IsVUFBVSxDQUFDTCxPQUFPLG9FQUFvRTtRQUV4SCxPQUFPZCxxQkFBcUJLLGVBQWVhLFNBQVNFLE1BQU0sSUFBSTtJQUNoRSxHQUFHO0lBRUgsSUFBSWhCLGlCQUFpQkQsWUFBWVUsaUJBQWlCLElBQUk7UUFDcEQsT0FBT1Y7SUFDVDtJQUVBLE9BQU9KLFlBQVlzQixJQUFJLENBQUNsQixhQUFhQyxjQUFjO0FBQ3JEO0FBRUFrQixPQUFPQyxPQUFPLEdBQUdyQiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9rZXlDb21tYW5kRGVsZXRlV29yZC5qcz9lYTQ5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBEcmFmdFJlbW92YWJsZVdvcmQgPSByZXF1aXJlKFwiLi9EcmFmdFJlbW92YWJsZVdvcmRcIik7XG5cbnZhciBFZGl0b3JTdGF0ZSA9IHJlcXVpcmUoXCIuL0VkaXRvclN0YXRlXCIpO1xuXG52YXIgbW92ZVNlbGVjdGlvbkZvcndhcmQgPSByZXF1aXJlKFwiLi9tb3ZlU2VsZWN0aW9uRm9yd2FyZFwiKTtcblxudmFyIHJlbW92ZVRleHRXaXRoU3RyYXRlZ3kgPSByZXF1aXJlKFwiLi9yZW1vdmVUZXh0V2l0aFN0cmF0ZWd5XCIpO1xuLyoqXG4gKiBEZWxldGUgdGhlIHdvcmQgdGhhdCBpcyByaWdodCBvZiB0aGUgY3Vyc29yLCBhcyB3ZWxsIGFzIGFueSBzcGFjZXMgb3JcbiAqIHB1bmN0dWF0aW9uIGJlZm9yZSB0aGUgd29yZC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGtleUNvbW1hbmREZWxldGVXb3JkKGVkaXRvclN0YXRlKSB7XG4gIHZhciBhZnRlclJlbW92YWwgPSByZW1vdmVUZXh0V2l0aFN0cmF0ZWd5KGVkaXRvclN0YXRlLCBmdW5jdGlvbiAoc3RyYXRlZ3lTdGF0ZSkge1xuICAgIHZhciBzZWxlY3Rpb24gPSBzdHJhdGVneVN0YXRlLmdldFNlbGVjdGlvbigpO1xuICAgIHZhciBvZmZzZXQgPSBzZWxlY3Rpb24uZ2V0U3RhcnRPZmZzZXQoKTtcbiAgICB2YXIga2V5ID0gc2VsZWN0aW9uLmdldFN0YXJ0S2V5KCk7XG4gICAgdmFyIGNvbnRlbnQgPSBzdHJhdGVneVN0YXRlLmdldEN1cnJlbnRDb250ZW50KCk7XG4gICAgdmFyIHRleHQgPSBjb250ZW50LmdldEJsb2NrRm9yS2V5KGtleSkuZ2V0VGV4dCgpLnNsaWNlKG9mZnNldCk7XG4gICAgdmFyIHRvUmVtb3ZlID0gRHJhZnRSZW1vdmFibGVXb3JkLmdldEZvcndhcmQodGV4dCk7IC8vIElmIHRoZXJlIGFyZSBubyB3b3JkcyBpbiBmcm9udCBvZiB0aGUgY3Vyc29yLCByZW1vdmUgdGhlIG5ld2xpbmUuXG5cbiAgICByZXR1cm4gbW92ZVNlbGVjdGlvbkZvcndhcmQoc3RyYXRlZ3lTdGF0ZSwgdG9SZW1vdmUubGVuZ3RoIHx8IDEpO1xuICB9LCAnZm9yd2FyZCcpO1xuXG4gIGlmIChhZnRlclJlbW92YWwgPT09IGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCkpIHtcbiAgICByZXR1cm4gZWRpdG9yU3RhdGU7XG4gIH1cblxuICByZXR1cm4gRWRpdG9yU3RhdGUucHVzaChlZGl0b3JTdGF0ZSwgYWZ0ZXJSZW1vdmFsLCAncmVtb3ZlLXJhbmdlJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5Q29tbWFuZERlbGV0ZVdvcmQ7Il0sIm5hbWVzIjpbIkRyYWZ0UmVtb3ZhYmxlV29yZCIsInJlcXVpcmUiLCJFZGl0b3JTdGF0ZSIsIm1vdmVTZWxlY3Rpb25Gb3J3YXJkIiwicmVtb3ZlVGV4dFdpdGhTdHJhdGVneSIsImtleUNvbW1hbmREZWxldGVXb3JkIiwiZWRpdG9yU3RhdGUiLCJhZnRlclJlbW92YWwiLCJzdHJhdGVneVN0YXRlIiwic2VsZWN0aW9uIiwiZ2V0U2VsZWN0aW9uIiwib2Zmc2V0IiwiZ2V0U3RhcnRPZmZzZXQiLCJrZXkiLCJnZXRTdGFydEtleSIsImNvbnRlbnQiLCJnZXRDdXJyZW50Q29udGVudCIsInRleHQiLCJnZXRCbG9ja0ZvcktleSIsImdldFRleHQiLCJzbGljZSIsInRvUmVtb3ZlIiwiZ2V0Rm9yd2FyZCIsImxlbmd0aCIsInB1c2giLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/keyCommandDeleteWord.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/keyCommandInsertNewline.js":
/*!**************************************************************!*\
  !*** ./node_modules/draft-js/lib/keyCommandInsertNewline.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DraftModifier = __webpack_require__(/*! ./DraftModifier */ \"(ssr)/./node_modules/draft-js/lib/DraftModifier.js\");\nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nfunction keyCommandInsertNewline(editorState) {\n    var contentState = DraftModifier.splitBlock(editorState.getCurrentContent(), editorState.getSelection());\n    return EditorState.push(editorState, contentState, \"split-block\");\n}\nmodule.exports = keyCommandInsertNewline;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2tleUNvbW1hbmRJbnNlcnROZXdsaW5lLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsZ0JBQWdCQyxtQkFBT0EsQ0FBQywyRUFBaUI7QUFFN0MsSUFBSUMsY0FBY0QsbUJBQU9BLENBQUMsdUVBQWU7QUFFekMsU0FBU0Usd0JBQXdCQyxXQUFXO0lBQzFDLElBQUlDLGVBQWVMLGNBQWNNLFVBQVUsQ0FBQ0YsWUFBWUcsaUJBQWlCLElBQUlILFlBQVlJLFlBQVk7SUFDckcsT0FBT04sWUFBWU8sSUFBSSxDQUFDTCxhQUFhQyxjQUFjO0FBQ3JEO0FBRUFLLE9BQU9DLE9BQU8sR0FBR1IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWVsLWhhcnZlc3Rlci8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIva2V5Q29tbWFuZEluc2VydE5ld2xpbmUuanM/ZjBkZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRHJhZnRNb2RpZmllciA9IHJlcXVpcmUoXCIuL0RyYWZ0TW9kaWZpZXJcIik7XG5cbnZhciBFZGl0b3JTdGF0ZSA9IHJlcXVpcmUoXCIuL0VkaXRvclN0YXRlXCIpO1xuXG5mdW5jdGlvbiBrZXlDb21tYW5kSW5zZXJ0TmV3bGluZShlZGl0b3JTdGF0ZSkge1xuICB2YXIgY29udGVudFN0YXRlID0gRHJhZnRNb2RpZmllci5zcGxpdEJsb2NrKGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCksIGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpKTtcbiAgcmV0dXJuIEVkaXRvclN0YXRlLnB1c2goZWRpdG9yU3RhdGUsIGNvbnRlbnRTdGF0ZSwgJ3NwbGl0LWJsb2NrJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5Q29tbWFuZEluc2VydE5ld2xpbmU7Il0sIm5hbWVzIjpbIkRyYWZ0TW9kaWZpZXIiLCJyZXF1aXJlIiwiRWRpdG9yU3RhdGUiLCJrZXlDb21tYW5kSW5zZXJ0TmV3bGluZSIsImVkaXRvclN0YXRlIiwiY29udGVudFN0YXRlIiwic3BsaXRCbG9jayIsImdldEN1cnJlbnRDb250ZW50IiwiZ2V0U2VsZWN0aW9uIiwicHVzaCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/keyCommandInsertNewline.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/keyCommandMoveSelectionToEndOfBlock.js":
/*!**************************************************************************!*\
  !*** ./node_modules/draft-js/lib/keyCommandMoveSelectionToEndOfBlock.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\n/**\n * See comment for `moveSelectionToStartOfBlock`.\n */ function keyCommandMoveSelectionToEndOfBlock(editorState) {\n    var selection = editorState.getSelection();\n    var endKey = selection.getEndKey();\n    var content = editorState.getCurrentContent();\n    var textLength = content.getBlockForKey(endKey).getLength();\n    return EditorState.set(editorState, {\n        selection: selection.merge({\n            anchorKey: endKey,\n            anchorOffset: textLength,\n            focusKey: endKey,\n            focusOffset: textLength,\n            isBackward: false\n        }),\n        forceSelection: true\n    });\n}\nmodule.exports = keyCommandMoveSelectionToEndOfBlock;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2tleUNvbW1hbmRNb3ZlU2VsZWN0aW9uVG9FbmRPZkJsb2NrLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsY0FBY0MsbUJBQU9BLENBQUMsdUVBQWU7QUFDekM7O0NBRUMsR0FHRCxTQUFTQyxvQ0FBb0NDLFdBQVc7SUFDdEQsSUFBSUMsWUFBWUQsWUFBWUUsWUFBWTtJQUN4QyxJQUFJQyxTQUFTRixVQUFVRyxTQUFTO0lBQ2hDLElBQUlDLFVBQVVMLFlBQVlNLGlCQUFpQjtJQUMzQyxJQUFJQyxhQUFhRixRQUFRRyxjQUFjLENBQUNMLFFBQVFNLFNBQVM7SUFDekQsT0FBT1osWUFBWWEsR0FBRyxDQUFDVixhQUFhO1FBQ2xDQyxXQUFXQSxVQUFVVSxLQUFLLENBQUM7WUFDekJDLFdBQVdUO1lBQ1hVLGNBQWNOO1lBQ2RPLFVBQVVYO1lBQ1ZZLGFBQWFSO1lBQ2JTLFlBQVk7UUFDZDtRQUNBQyxnQkFBZ0I7SUFDbEI7QUFDRjtBQUVBQyxPQUFPQyxPQUFPLEdBQUdwQiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9rZXlDb21tYW5kTW92ZVNlbGVjdGlvblRvRW5kT2ZCbG9jay5qcz9jOTliIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFZGl0b3JTdGF0ZSA9IHJlcXVpcmUoXCIuL0VkaXRvclN0YXRlXCIpO1xuLyoqXG4gKiBTZWUgY29tbWVudCBmb3IgYG1vdmVTZWxlY3Rpb25Ub1N0YXJ0T2ZCbG9ja2AuXG4gKi9cblxuXG5mdW5jdGlvbiBrZXlDb21tYW5kTW92ZVNlbGVjdGlvblRvRW5kT2ZCbG9jayhlZGl0b3JTdGF0ZSkge1xuICB2YXIgc2VsZWN0aW9uID0gZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCk7XG4gIHZhciBlbmRLZXkgPSBzZWxlY3Rpb24uZ2V0RW5kS2V5KCk7XG4gIHZhciBjb250ZW50ID0gZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKTtcbiAgdmFyIHRleHRMZW5ndGggPSBjb250ZW50LmdldEJsb2NrRm9yS2V5KGVuZEtleSkuZ2V0TGVuZ3RoKCk7XG4gIHJldHVybiBFZGl0b3JTdGF0ZS5zZXQoZWRpdG9yU3RhdGUsIHtcbiAgICBzZWxlY3Rpb246IHNlbGVjdGlvbi5tZXJnZSh7XG4gICAgICBhbmNob3JLZXk6IGVuZEtleSxcbiAgICAgIGFuY2hvck9mZnNldDogdGV4dExlbmd0aCxcbiAgICAgIGZvY3VzS2V5OiBlbmRLZXksXG4gICAgICBmb2N1c09mZnNldDogdGV4dExlbmd0aCxcbiAgICAgIGlzQmFja3dhcmQ6IGZhbHNlXG4gICAgfSksXG4gICAgZm9yY2VTZWxlY3Rpb246IHRydWVcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5Q29tbWFuZE1vdmVTZWxlY3Rpb25Ub0VuZE9mQmxvY2s7Il0sIm5hbWVzIjpbIkVkaXRvclN0YXRlIiwicmVxdWlyZSIsImtleUNvbW1hbmRNb3ZlU2VsZWN0aW9uVG9FbmRPZkJsb2NrIiwiZWRpdG9yU3RhdGUiLCJzZWxlY3Rpb24iLCJnZXRTZWxlY3Rpb24iLCJlbmRLZXkiLCJnZXRFbmRLZXkiLCJjb250ZW50IiwiZ2V0Q3VycmVudENvbnRlbnQiLCJ0ZXh0TGVuZ3RoIiwiZ2V0QmxvY2tGb3JLZXkiLCJnZXRMZW5ndGgiLCJzZXQiLCJtZXJnZSIsImFuY2hvcktleSIsImFuY2hvck9mZnNldCIsImZvY3VzS2V5IiwiZm9jdXNPZmZzZXQiLCJpc0JhY2t3YXJkIiwiZm9yY2VTZWxlY3Rpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/keyCommandMoveSelectionToEndOfBlock.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/keyCommandMoveSelectionToStartOfBlock.js":
/*!****************************************************************************!*\
  !*** ./node_modules/draft-js/lib/keyCommandMoveSelectionToStartOfBlock.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\n/**\n * Collapse selection at the start of the first selected block. This is used\n * for Firefox versions that attempt to navigate forward/backward instead of\n * moving the cursor. Other browsers are able to move the cursor natively.\n */ function keyCommandMoveSelectionToStartOfBlock(editorState) {\n    var selection = editorState.getSelection();\n    var startKey = selection.getStartKey();\n    return EditorState.set(editorState, {\n        selection: selection.merge({\n            anchorKey: startKey,\n            anchorOffset: 0,\n            focusKey: startKey,\n            focusOffset: 0,\n            isBackward: false\n        }),\n        forceSelection: true\n    });\n}\nmodule.exports = keyCommandMoveSelectionToStartOfBlock;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2tleUNvbW1hbmRNb3ZlU2VsZWN0aW9uVG9TdGFydE9mQmxvY2suanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFFQSxJQUFJQSxjQUFjQyxtQkFBT0EsQ0FBQyx1RUFBZTtBQUN6Qzs7OztDQUlDLEdBR0QsU0FBU0Msc0NBQXNDQyxXQUFXO0lBQ3hELElBQUlDLFlBQVlELFlBQVlFLFlBQVk7SUFDeEMsSUFBSUMsV0FBV0YsVUFBVUcsV0FBVztJQUNwQyxPQUFPUCxZQUFZUSxHQUFHLENBQUNMLGFBQWE7UUFDbENDLFdBQVdBLFVBQVVLLEtBQUssQ0FBQztZQUN6QkMsV0FBV0o7WUFDWEssY0FBYztZQUNkQyxVQUFVTjtZQUNWTyxhQUFhO1lBQ2JDLFlBQVk7UUFDZDtRQUNBQyxnQkFBZ0I7SUFDbEI7QUFDRjtBQUVBQyxPQUFPQyxPQUFPLEdBQUdmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVlbC1oYXJ2ZXN0ZXIvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2tleUNvbW1hbmRNb3ZlU2VsZWN0aW9uVG9TdGFydE9mQmxvY2suanM/YjI5MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRWRpdG9yU3RhdGUgPSByZXF1aXJlKFwiLi9FZGl0b3JTdGF0ZVwiKTtcbi8qKlxuICogQ29sbGFwc2Ugc2VsZWN0aW9uIGF0IHRoZSBzdGFydCBvZiB0aGUgZmlyc3Qgc2VsZWN0ZWQgYmxvY2suIFRoaXMgaXMgdXNlZFxuICogZm9yIEZpcmVmb3ggdmVyc2lvbnMgdGhhdCBhdHRlbXB0IHRvIG5hdmlnYXRlIGZvcndhcmQvYmFja3dhcmQgaW5zdGVhZCBvZlxuICogbW92aW5nIHRoZSBjdXJzb3IuIE90aGVyIGJyb3dzZXJzIGFyZSBhYmxlIHRvIG1vdmUgdGhlIGN1cnNvciBuYXRpdmVseS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGtleUNvbW1hbmRNb3ZlU2VsZWN0aW9uVG9TdGFydE9mQmxvY2soZWRpdG9yU3RhdGUpIHtcbiAgdmFyIHNlbGVjdGlvbiA9IGVkaXRvclN0YXRlLmdldFNlbGVjdGlvbigpO1xuICB2YXIgc3RhcnRLZXkgPSBzZWxlY3Rpb24uZ2V0U3RhcnRLZXkoKTtcbiAgcmV0dXJuIEVkaXRvclN0YXRlLnNldChlZGl0b3JTdGF0ZSwge1xuICAgIHNlbGVjdGlvbjogc2VsZWN0aW9uLm1lcmdlKHtcbiAgICAgIGFuY2hvcktleTogc3RhcnRLZXksXG4gICAgICBhbmNob3JPZmZzZXQ6IDAsXG4gICAgICBmb2N1c0tleTogc3RhcnRLZXksXG4gICAgICBmb2N1c09mZnNldDogMCxcbiAgICAgIGlzQmFja3dhcmQ6IGZhbHNlXG4gICAgfSksXG4gICAgZm9yY2VTZWxlY3Rpb246IHRydWVcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5Q29tbWFuZE1vdmVTZWxlY3Rpb25Ub1N0YXJ0T2ZCbG9jazsiXSwibmFtZXMiOlsiRWRpdG9yU3RhdGUiLCJyZXF1aXJlIiwia2V5Q29tbWFuZE1vdmVTZWxlY3Rpb25Ub1N0YXJ0T2ZCbG9jayIsImVkaXRvclN0YXRlIiwic2VsZWN0aW9uIiwiZ2V0U2VsZWN0aW9uIiwic3RhcnRLZXkiLCJnZXRTdGFydEtleSIsInNldCIsIm1lcmdlIiwiYW5jaG9yS2V5IiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNLZXkiLCJmb2N1c09mZnNldCIsImlzQmFja3dhcmQiLCJmb3JjZVNlbGVjdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/keyCommandMoveSelectionToStartOfBlock.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/keyCommandPlainBackspace.js":
/*!***************************************************************!*\
  !*** ./node_modules/draft-js/lib/keyCommandPlainBackspace.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar UnicodeUtils = __webpack_require__(/*! fbjs/lib/UnicodeUtils */ \"(ssr)/./node_modules/fbjs/lib/UnicodeUtils.js\");\nvar moveSelectionBackward = __webpack_require__(/*! ./moveSelectionBackward */ \"(ssr)/./node_modules/draft-js/lib/moveSelectionBackward.js\");\nvar removeTextWithStrategy = __webpack_require__(/*! ./removeTextWithStrategy */ \"(ssr)/./node_modules/draft-js/lib/removeTextWithStrategy.js\");\n/**\n * Remove the selected range. If the cursor is collapsed, remove the preceding\n * character. This operation is Unicode-aware, so removing a single character\n * will remove a surrogate pair properly as well.\n */ function keyCommandPlainBackspace(editorState) {\n    var afterRemoval = removeTextWithStrategy(editorState, function(strategyState) {\n        var selection = strategyState.getSelection();\n        var content = strategyState.getCurrentContent();\n        var key = selection.getAnchorKey();\n        var offset = selection.getAnchorOffset();\n        var charBehind = content.getBlockForKey(key).getText()[offset - 1];\n        return moveSelectionBackward(strategyState, charBehind ? UnicodeUtils.getUTF16Length(charBehind, 0) : 1);\n    }, \"backward\");\n    if (afterRemoval === editorState.getCurrentContent()) {\n        return editorState;\n    }\n    var selection = editorState.getSelection();\n    return EditorState.push(editorState, afterRemoval.set(\"selectionBefore\", selection), selection.isCollapsed() ? \"backspace-character\" : \"remove-range\");\n}\nmodule.exports = keyCommandPlainBackspace;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2tleUNvbW1hbmRQbGFpbkJhY2tzcGFjZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLElBQUlBLGNBQWNDLG1CQUFPQSxDQUFDLHVFQUFlO0FBRXpDLElBQUlDLGVBQWVELG1CQUFPQSxDQUFDLDRFQUF1QjtBQUVsRCxJQUFJRSx3QkFBd0JGLG1CQUFPQSxDQUFDLDJGQUF5QjtBQUU3RCxJQUFJRyx5QkFBeUJILG1CQUFPQSxDQUFDLDZGQUEwQjtBQUMvRDs7OztDQUlDLEdBR0QsU0FBU0kseUJBQXlCQyxXQUFXO0lBQzNDLElBQUlDLGVBQWVILHVCQUF1QkUsYUFBYSxTQUFVRSxhQUFhO1FBQzVFLElBQUlDLFlBQVlELGNBQWNFLFlBQVk7UUFDMUMsSUFBSUMsVUFBVUgsY0FBY0ksaUJBQWlCO1FBQzdDLElBQUlDLE1BQU1KLFVBQVVLLFlBQVk7UUFDaEMsSUFBSUMsU0FBU04sVUFBVU8sZUFBZTtRQUN0QyxJQUFJQyxhQUFhTixRQUFRTyxjQUFjLENBQUNMLEtBQUtNLE9BQU8sRUFBRSxDQUFDSixTQUFTLEVBQUU7UUFDbEUsT0FBT1osc0JBQXNCSyxlQUFlUyxhQUFhZixhQUFha0IsY0FBYyxDQUFDSCxZQUFZLEtBQUs7SUFDeEcsR0FBRztJQUVILElBQUlWLGlCQUFpQkQsWUFBWU0saUJBQWlCLElBQUk7UUFDcEQsT0FBT047SUFDVDtJQUVBLElBQUlHLFlBQVlILFlBQVlJLFlBQVk7SUFDeEMsT0FBT1YsWUFBWXFCLElBQUksQ0FBQ2YsYUFBYUMsYUFBYWUsR0FBRyxDQUFDLG1CQUFtQmIsWUFBWUEsVUFBVWMsV0FBVyxLQUFLLHdCQUF3QjtBQUN6STtBQUVBQyxPQUFPQyxPQUFPLEdBQUdwQiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9rZXlDb21tYW5kUGxhaW5CYWNrc3BhY2UuanM/MWVhNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRWRpdG9yU3RhdGUgPSByZXF1aXJlKFwiLi9FZGl0b3JTdGF0ZVwiKTtcblxudmFyIFVuaWNvZGVVdGlscyA9IHJlcXVpcmUoXCJmYmpzL2xpYi9Vbmljb2RlVXRpbHNcIik7XG5cbnZhciBtb3ZlU2VsZWN0aW9uQmFja3dhcmQgPSByZXF1aXJlKFwiLi9tb3ZlU2VsZWN0aW9uQmFja3dhcmRcIik7XG5cbnZhciByZW1vdmVUZXh0V2l0aFN0cmF0ZWd5ID0gcmVxdWlyZShcIi4vcmVtb3ZlVGV4dFdpdGhTdHJhdGVneVwiKTtcbi8qKlxuICogUmVtb3ZlIHRoZSBzZWxlY3RlZCByYW5nZS4gSWYgdGhlIGN1cnNvciBpcyBjb2xsYXBzZWQsIHJlbW92ZSB0aGUgcHJlY2VkaW5nXG4gKiBjaGFyYWN0ZXIuIFRoaXMgb3BlcmF0aW9uIGlzIFVuaWNvZGUtYXdhcmUsIHNvIHJlbW92aW5nIGEgc2luZ2xlIGNoYXJhY3RlclxuICogd2lsbCByZW1vdmUgYSBzdXJyb2dhdGUgcGFpciBwcm9wZXJseSBhcyB3ZWxsLlxuICovXG5cblxuZnVuY3Rpb24ga2V5Q29tbWFuZFBsYWluQmFja3NwYWNlKGVkaXRvclN0YXRlKSB7XG4gIHZhciBhZnRlclJlbW92YWwgPSByZW1vdmVUZXh0V2l0aFN0cmF0ZWd5KGVkaXRvclN0YXRlLCBmdW5jdGlvbiAoc3RyYXRlZ3lTdGF0ZSkge1xuICAgIHZhciBzZWxlY3Rpb24gPSBzdHJhdGVneVN0YXRlLmdldFNlbGVjdGlvbigpO1xuICAgIHZhciBjb250ZW50ID0gc3RyYXRlZ3lTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpO1xuICAgIHZhciBrZXkgPSBzZWxlY3Rpb24uZ2V0QW5jaG9yS2V5KCk7XG4gICAgdmFyIG9mZnNldCA9IHNlbGVjdGlvbi5nZXRBbmNob3JPZmZzZXQoKTtcbiAgICB2YXIgY2hhckJlaGluZCA9IGNvbnRlbnQuZ2V0QmxvY2tGb3JLZXkoa2V5KS5nZXRUZXh0KClbb2Zmc2V0IC0gMV07XG4gICAgcmV0dXJuIG1vdmVTZWxlY3Rpb25CYWNrd2FyZChzdHJhdGVneVN0YXRlLCBjaGFyQmVoaW5kID8gVW5pY29kZVV0aWxzLmdldFVURjE2TGVuZ3RoKGNoYXJCZWhpbmQsIDApIDogMSk7XG4gIH0sICdiYWNrd2FyZCcpO1xuXG4gIGlmIChhZnRlclJlbW92YWwgPT09IGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCkpIHtcbiAgICByZXR1cm4gZWRpdG9yU3RhdGU7XG4gIH1cblxuICB2YXIgc2VsZWN0aW9uID0gZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCk7XG4gIHJldHVybiBFZGl0b3JTdGF0ZS5wdXNoKGVkaXRvclN0YXRlLCBhZnRlclJlbW92YWwuc2V0KCdzZWxlY3Rpb25CZWZvcmUnLCBzZWxlY3Rpb24pLCBzZWxlY3Rpb24uaXNDb2xsYXBzZWQoKSA/ICdiYWNrc3BhY2UtY2hhcmFjdGVyJyA6ICdyZW1vdmUtcmFuZ2UnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBrZXlDb21tYW5kUGxhaW5CYWNrc3BhY2U7Il0sIm5hbWVzIjpbIkVkaXRvclN0YXRlIiwicmVxdWlyZSIsIlVuaWNvZGVVdGlscyIsIm1vdmVTZWxlY3Rpb25CYWNrd2FyZCIsInJlbW92ZVRleHRXaXRoU3RyYXRlZ3kiLCJrZXlDb21tYW5kUGxhaW5CYWNrc3BhY2UiLCJlZGl0b3JTdGF0ZSIsImFmdGVyUmVtb3ZhbCIsInN0cmF0ZWd5U3RhdGUiLCJzZWxlY3Rpb24iLCJnZXRTZWxlY3Rpb24iLCJjb250ZW50IiwiZ2V0Q3VycmVudENvbnRlbnQiLCJrZXkiLCJnZXRBbmNob3JLZXkiLCJvZmZzZXQiLCJnZXRBbmNob3JPZmZzZXQiLCJjaGFyQmVoaW5kIiwiZ2V0QmxvY2tGb3JLZXkiLCJnZXRUZXh0IiwiZ2V0VVRGMTZMZW5ndGgiLCJwdXNoIiwic2V0IiwiaXNDb2xsYXBzZWQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/keyCommandPlainBackspace.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/keyCommandPlainDelete.js":
/*!************************************************************!*\
  !*** ./node_modules/draft-js/lib/keyCommandPlainDelete.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar UnicodeUtils = __webpack_require__(/*! fbjs/lib/UnicodeUtils */ \"(ssr)/./node_modules/fbjs/lib/UnicodeUtils.js\");\nvar moveSelectionForward = __webpack_require__(/*! ./moveSelectionForward */ \"(ssr)/./node_modules/draft-js/lib/moveSelectionForward.js\");\nvar removeTextWithStrategy = __webpack_require__(/*! ./removeTextWithStrategy */ \"(ssr)/./node_modules/draft-js/lib/removeTextWithStrategy.js\");\n/**\n * Remove the selected range. If the cursor is collapsed, remove the following\n * character. This operation is Unicode-aware, so removing a single character\n * will remove a surrogate pair properly as well.\n */ function keyCommandPlainDelete(editorState) {\n    var afterRemoval = removeTextWithStrategy(editorState, function(strategyState) {\n        var selection = strategyState.getSelection();\n        var content = strategyState.getCurrentContent();\n        var key = selection.getAnchorKey();\n        var offset = selection.getAnchorOffset();\n        var charAhead = content.getBlockForKey(key).getText()[offset];\n        return moveSelectionForward(strategyState, charAhead ? UnicodeUtils.getUTF16Length(charAhead, 0) : 1);\n    }, \"forward\");\n    if (afterRemoval === editorState.getCurrentContent()) {\n        return editorState;\n    }\n    var selection = editorState.getSelection();\n    return EditorState.push(editorState, afterRemoval.set(\"selectionBefore\", selection), selection.isCollapsed() ? \"delete-character\" : \"remove-range\");\n}\nmodule.exports = keyCommandPlainDelete;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2tleUNvbW1hbmRQbGFpbkRlbGV0ZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLElBQUlBLGNBQWNDLG1CQUFPQSxDQUFDLHVFQUFlO0FBRXpDLElBQUlDLGVBQWVELG1CQUFPQSxDQUFDLDRFQUF1QjtBQUVsRCxJQUFJRSx1QkFBdUJGLG1CQUFPQSxDQUFDLHlGQUF3QjtBQUUzRCxJQUFJRyx5QkFBeUJILG1CQUFPQSxDQUFDLDZGQUEwQjtBQUMvRDs7OztDQUlDLEdBR0QsU0FBU0ksc0JBQXNCQyxXQUFXO0lBQ3hDLElBQUlDLGVBQWVILHVCQUF1QkUsYUFBYSxTQUFVRSxhQUFhO1FBQzVFLElBQUlDLFlBQVlELGNBQWNFLFlBQVk7UUFDMUMsSUFBSUMsVUFBVUgsY0FBY0ksaUJBQWlCO1FBQzdDLElBQUlDLE1BQU1KLFVBQVVLLFlBQVk7UUFDaEMsSUFBSUMsU0FBU04sVUFBVU8sZUFBZTtRQUN0QyxJQUFJQyxZQUFZTixRQUFRTyxjQUFjLENBQUNMLEtBQUtNLE9BQU8sRUFBRSxDQUFDSixPQUFPO1FBQzdELE9BQU9aLHFCQUFxQkssZUFBZVMsWUFBWWYsYUFBYWtCLGNBQWMsQ0FBQ0gsV0FBVyxLQUFLO0lBQ3JHLEdBQUc7SUFFSCxJQUFJVixpQkFBaUJELFlBQVlNLGlCQUFpQixJQUFJO1FBQ3BELE9BQU9OO0lBQ1Q7SUFFQSxJQUFJRyxZQUFZSCxZQUFZSSxZQUFZO0lBQ3hDLE9BQU9WLFlBQVlxQixJQUFJLENBQUNmLGFBQWFDLGFBQWFlLEdBQUcsQ0FBQyxtQkFBbUJiLFlBQVlBLFVBQVVjLFdBQVcsS0FBSyxxQkFBcUI7QUFDdEk7QUFFQUMsT0FBT0MsT0FBTyxHQUFHcEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWVsLWhhcnZlc3Rlci8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIva2V5Q29tbWFuZFBsYWluRGVsZXRlLmpzPzhhMDQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIEVkaXRvclN0YXRlID0gcmVxdWlyZShcIi4vRWRpdG9yU3RhdGVcIik7XG5cbnZhciBVbmljb2RlVXRpbHMgPSByZXF1aXJlKFwiZmJqcy9saWIvVW5pY29kZVV0aWxzXCIpO1xuXG52YXIgbW92ZVNlbGVjdGlvbkZvcndhcmQgPSByZXF1aXJlKFwiLi9tb3ZlU2VsZWN0aW9uRm9yd2FyZFwiKTtcblxudmFyIHJlbW92ZVRleHRXaXRoU3RyYXRlZ3kgPSByZXF1aXJlKFwiLi9yZW1vdmVUZXh0V2l0aFN0cmF0ZWd5XCIpO1xuLyoqXG4gKiBSZW1vdmUgdGhlIHNlbGVjdGVkIHJhbmdlLiBJZiB0aGUgY3Vyc29yIGlzIGNvbGxhcHNlZCwgcmVtb3ZlIHRoZSBmb2xsb3dpbmdcbiAqIGNoYXJhY3Rlci4gVGhpcyBvcGVyYXRpb24gaXMgVW5pY29kZS1hd2FyZSwgc28gcmVtb3ZpbmcgYSBzaW5nbGUgY2hhcmFjdGVyXG4gKiB3aWxsIHJlbW92ZSBhIHN1cnJvZ2F0ZSBwYWlyIHByb3Blcmx5IGFzIHdlbGwuXG4gKi9cblxuXG5mdW5jdGlvbiBrZXlDb21tYW5kUGxhaW5EZWxldGUoZWRpdG9yU3RhdGUpIHtcbiAgdmFyIGFmdGVyUmVtb3ZhbCA9IHJlbW92ZVRleHRXaXRoU3RyYXRlZ3koZWRpdG9yU3RhdGUsIGZ1bmN0aW9uIChzdHJhdGVneVN0YXRlKSB7XG4gICAgdmFyIHNlbGVjdGlvbiA9IHN0cmF0ZWd5U3RhdGUuZ2V0U2VsZWN0aW9uKCk7XG4gICAgdmFyIGNvbnRlbnQgPSBzdHJhdGVneVN0YXRlLmdldEN1cnJlbnRDb250ZW50KCk7XG4gICAgdmFyIGtleSA9IHNlbGVjdGlvbi5nZXRBbmNob3JLZXkoKTtcbiAgICB2YXIgb2Zmc2V0ID0gc2VsZWN0aW9uLmdldEFuY2hvck9mZnNldCgpO1xuICAgIHZhciBjaGFyQWhlYWQgPSBjb250ZW50LmdldEJsb2NrRm9yS2V5KGtleSkuZ2V0VGV4dCgpW29mZnNldF07XG4gICAgcmV0dXJuIG1vdmVTZWxlY3Rpb25Gb3J3YXJkKHN0cmF0ZWd5U3RhdGUsIGNoYXJBaGVhZCA/IFVuaWNvZGVVdGlscy5nZXRVVEYxNkxlbmd0aChjaGFyQWhlYWQsIDApIDogMSk7XG4gIH0sICdmb3J3YXJkJyk7XG5cbiAgaWYgKGFmdGVyUmVtb3ZhbCA9PT0gZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKSkge1xuICAgIHJldHVybiBlZGl0b3JTdGF0ZTtcbiAgfVxuXG4gIHZhciBzZWxlY3Rpb24gPSBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcbiAgcmV0dXJuIEVkaXRvclN0YXRlLnB1c2goZWRpdG9yU3RhdGUsIGFmdGVyUmVtb3ZhbC5zZXQoJ3NlbGVjdGlvbkJlZm9yZScsIHNlbGVjdGlvbiksIHNlbGVjdGlvbi5pc0NvbGxhcHNlZCgpID8gJ2RlbGV0ZS1jaGFyYWN0ZXInIDogJ3JlbW92ZS1yYW5nZScpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleUNvbW1hbmRQbGFpbkRlbGV0ZTsiXSwibmFtZXMiOlsiRWRpdG9yU3RhdGUiLCJyZXF1aXJlIiwiVW5pY29kZVV0aWxzIiwibW92ZVNlbGVjdGlvbkZvcndhcmQiLCJyZW1vdmVUZXh0V2l0aFN0cmF0ZWd5Iiwia2V5Q29tbWFuZFBsYWluRGVsZXRlIiwiZWRpdG9yU3RhdGUiLCJhZnRlclJlbW92YWwiLCJzdHJhdGVneVN0YXRlIiwic2VsZWN0aW9uIiwiZ2V0U2VsZWN0aW9uIiwiY29udGVudCIsImdldEN1cnJlbnRDb250ZW50Iiwia2V5IiwiZ2V0QW5jaG9yS2V5Iiwib2Zmc2V0IiwiZ2V0QW5jaG9yT2Zmc2V0IiwiY2hhckFoZWFkIiwiZ2V0QmxvY2tGb3JLZXkiLCJnZXRUZXh0IiwiZ2V0VVRGMTZMZW5ndGgiLCJwdXNoIiwic2V0IiwiaXNDb2xsYXBzZWQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/keyCommandPlainDelete.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/keyCommandTransposeCharacters.js":
/*!********************************************************************!*\
  !*** ./node_modules/draft-js/lib/keyCommandTransposeCharacters.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DraftModifier = __webpack_require__(/*! ./DraftModifier */ \"(ssr)/./node_modules/draft-js/lib/DraftModifier.js\");\nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nvar getContentStateFragment = __webpack_require__(/*! ./getContentStateFragment */ \"(ssr)/./node_modules/draft-js/lib/getContentStateFragment.js\");\n/**\n * Transpose the characters on either side of a collapsed cursor, or\n * if the cursor is at the end of the block, transpose the last two\n * characters.\n */ function keyCommandTransposeCharacters(editorState) {\n    var selection = editorState.getSelection();\n    if (!selection.isCollapsed()) {\n        return editorState;\n    }\n    var offset = selection.getAnchorOffset();\n    if (offset === 0) {\n        return editorState;\n    }\n    var blockKey = selection.getAnchorKey();\n    var content = editorState.getCurrentContent();\n    var block = content.getBlockForKey(blockKey);\n    var length = block.getLength(); // Nothing to transpose if there aren't two characters.\n    if (length <= 1) {\n        return editorState;\n    }\n    var removalRange;\n    var finalSelection;\n    if (offset === length) {\n        // The cursor is at the end of the block. Swap the last two characters.\n        removalRange = selection.set(\"anchorOffset\", offset - 1);\n        finalSelection = selection;\n    } else {\n        removalRange = selection.set(\"focusOffset\", offset + 1);\n        finalSelection = removalRange.set(\"anchorOffset\", offset + 1);\n    } // Extract the character to move as a fragment. This preserves its\n    // styling and entity, if any.\n    var movedFragment = getContentStateFragment(content, removalRange);\n    var afterRemoval = DraftModifier.removeRange(content, removalRange, \"backward\"); // After the removal, the insertion target is one character back.\n    var selectionAfter = afterRemoval.getSelectionAfter();\n    var targetOffset = selectionAfter.getAnchorOffset() - 1;\n    var targetRange = selectionAfter.merge({\n        anchorOffset: targetOffset,\n        focusOffset: targetOffset\n    });\n    var afterInsert = DraftModifier.replaceWithFragment(afterRemoval, targetRange, movedFragment);\n    var newEditorState = EditorState.push(editorState, afterInsert, \"insert-fragment\");\n    return EditorState.acceptSelection(newEditorState, finalSelection);\n}\nmodule.exports = keyCommandTransposeCharacters;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2tleUNvbW1hbmRUcmFuc3Bvc2VDaGFyYWN0ZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsZ0JBQWdCQyxtQkFBT0EsQ0FBQywyRUFBaUI7QUFFN0MsSUFBSUMsY0FBY0QsbUJBQU9BLENBQUMsdUVBQWU7QUFFekMsSUFBSUUsMEJBQTBCRixtQkFBT0EsQ0FBQywrRkFBMkI7QUFDakU7Ozs7Q0FJQyxHQUdELFNBQVNHLDhCQUE4QkMsV0FBVztJQUNoRCxJQUFJQyxZQUFZRCxZQUFZRSxZQUFZO0lBRXhDLElBQUksQ0FBQ0QsVUFBVUUsV0FBVyxJQUFJO1FBQzVCLE9BQU9IO0lBQ1Q7SUFFQSxJQUFJSSxTQUFTSCxVQUFVSSxlQUFlO0lBRXRDLElBQUlELFdBQVcsR0FBRztRQUNoQixPQUFPSjtJQUNUO0lBRUEsSUFBSU0sV0FBV0wsVUFBVU0sWUFBWTtJQUNyQyxJQUFJQyxVQUFVUixZQUFZUyxpQkFBaUI7SUFDM0MsSUFBSUMsUUFBUUYsUUFBUUcsY0FBYyxDQUFDTDtJQUNuQyxJQUFJTSxTQUFTRixNQUFNRyxTQUFTLElBQUksdURBQXVEO0lBRXZGLElBQUlELFVBQVUsR0FBRztRQUNmLE9BQU9aO0lBQ1Q7SUFFQSxJQUFJYztJQUNKLElBQUlDO0lBRUosSUFBSVgsV0FBV1EsUUFBUTtRQUNyQix1RUFBdUU7UUFDdkVFLGVBQWViLFVBQVVlLEdBQUcsQ0FBQyxnQkFBZ0JaLFNBQVM7UUFDdERXLGlCQUFpQmQ7SUFDbkIsT0FBTztRQUNMYSxlQUFlYixVQUFVZSxHQUFHLENBQUMsZUFBZVosU0FBUztRQUNyRFcsaUJBQWlCRCxhQUFhRSxHQUFHLENBQUMsZ0JBQWdCWixTQUFTO0lBQzdELEVBQUUsa0VBQWtFO0lBQ3BFLDhCQUE4QjtJQUc5QixJQUFJYSxnQkFBZ0JuQix3QkFBd0JVLFNBQVNNO0lBQ3JELElBQUlJLGVBQWV2QixjQUFjd0IsV0FBVyxDQUFDWCxTQUFTTSxjQUFjLGFBQWEsaUVBQWlFO0lBRWxKLElBQUlNLGlCQUFpQkYsYUFBYUcsaUJBQWlCO0lBQ25ELElBQUlDLGVBQWVGLGVBQWVmLGVBQWUsS0FBSztJQUN0RCxJQUFJa0IsY0FBY0gsZUFBZUksS0FBSyxDQUFDO1FBQ3JDQyxjQUFjSDtRQUNkSSxhQUFhSjtJQUNmO0lBQ0EsSUFBSUssY0FBY2hDLGNBQWNpQyxtQkFBbUIsQ0FBQ1YsY0FBY0ssYUFBYU47SUFDL0UsSUFBSVksaUJBQWlCaEMsWUFBWWlDLElBQUksQ0FBQzlCLGFBQWEyQixhQUFhO0lBQ2hFLE9BQU85QixZQUFZa0MsZUFBZSxDQUFDRixnQkFBZ0JkO0FBQ3JEO0FBRUFpQixPQUFPQyxPQUFPLEdBQUdsQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9rZXlDb21tYW5kVHJhbnNwb3NlQ2hhcmFjdGVycy5qcz8zYmQ5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBEcmFmdE1vZGlmaWVyID0gcmVxdWlyZShcIi4vRHJhZnRNb2RpZmllclwiKTtcblxudmFyIEVkaXRvclN0YXRlID0gcmVxdWlyZShcIi4vRWRpdG9yU3RhdGVcIik7XG5cbnZhciBnZXRDb250ZW50U3RhdGVGcmFnbWVudCA9IHJlcXVpcmUoXCIuL2dldENvbnRlbnRTdGF0ZUZyYWdtZW50XCIpO1xuLyoqXG4gKiBUcmFuc3Bvc2UgdGhlIGNoYXJhY3RlcnMgb24gZWl0aGVyIHNpZGUgb2YgYSBjb2xsYXBzZWQgY3Vyc29yLCBvclxuICogaWYgdGhlIGN1cnNvciBpcyBhdCB0aGUgZW5kIG9mIHRoZSBibG9jaywgdHJhbnNwb3NlIHRoZSBsYXN0IHR3b1xuICogY2hhcmFjdGVycy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGtleUNvbW1hbmRUcmFuc3Bvc2VDaGFyYWN0ZXJzKGVkaXRvclN0YXRlKSB7XG4gIHZhciBzZWxlY3Rpb24gPSBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcblxuICBpZiAoIXNlbGVjdGlvbi5pc0NvbGxhcHNlZCgpKSB7XG4gICAgcmV0dXJuIGVkaXRvclN0YXRlO1xuICB9XG5cbiAgdmFyIG9mZnNldCA9IHNlbGVjdGlvbi5nZXRBbmNob3JPZmZzZXQoKTtcblxuICBpZiAob2Zmc2V0ID09PSAwKSB7XG4gICAgcmV0dXJuIGVkaXRvclN0YXRlO1xuICB9XG5cbiAgdmFyIGJsb2NrS2V5ID0gc2VsZWN0aW9uLmdldEFuY2hvcktleSgpO1xuICB2YXIgY29udGVudCA9IGVkaXRvclN0YXRlLmdldEN1cnJlbnRDb250ZW50KCk7XG4gIHZhciBibG9jayA9IGNvbnRlbnQuZ2V0QmxvY2tGb3JLZXkoYmxvY2tLZXkpO1xuICB2YXIgbGVuZ3RoID0gYmxvY2suZ2V0TGVuZ3RoKCk7IC8vIE5vdGhpbmcgdG8gdHJhbnNwb3NlIGlmIHRoZXJlIGFyZW4ndCB0d28gY2hhcmFjdGVycy5cblxuICBpZiAobGVuZ3RoIDw9IDEpIHtcbiAgICByZXR1cm4gZWRpdG9yU3RhdGU7XG4gIH1cblxuICB2YXIgcmVtb3ZhbFJhbmdlO1xuICB2YXIgZmluYWxTZWxlY3Rpb247XG5cbiAgaWYgKG9mZnNldCA9PT0gbGVuZ3RoKSB7XG4gICAgLy8gVGhlIGN1cnNvciBpcyBhdCB0aGUgZW5kIG9mIHRoZSBibG9jay4gU3dhcCB0aGUgbGFzdCB0d28gY2hhcmFjdGVycy5cbiAgICByZW1vdmFsUmFuZ2UgPSBzZWxlY3Rpb24uc2V0KCdhbmNob3JPZmZzZXQnLCBvZmZzZXQgLSAxKTtcbiAgICBmaW5hbFNlbGVjdGlvbiA9IHNlbGVjdGlvbjtcbiAgfSBlbHNlIHtcbiAgICByZW1vdmFsUmFuZ2UgPSBzZWxlY3Rpb24uc2V0KCdmb2N1c09mZnNldCcsIG9mZnNldCArIDEpO1xuICAgIGZpbmFsU2VsZWN0aW9uID0gcmVtb3ZhbFJhbmdlLnNldCgnYW5jaG9yT2Zmc2V0Jywgb2Zmc2V0ICsgMSk7XG4gIH0gLy8gRXh0cmFjdCB0aGUgY2hhcmFjdGVyIHRvIG1vdmUgYXMgYSBmcmFnbWVudC4gVGhpcyBwcmVzZXJ2ZXMgaXRzXG4gIC8vIHN0eWxpbmcgYW5kIGVudGl0eSwgaWYgYW55LlxuXG5cbiAgdmFyIG1vdmVkRnJhZ21lbnQgPSBnZXRDb250ZW50U3RhdGVGcmFnbWVudChjb250ZW50LCByZW1vdmFsUmFuZ2UpO1xuICB2YXIgYWZ0ZXJSZW1vdmFsID0gRHJhZnRNb2RpZmllci5yZW1vdmVSYW5nZShjb250ZW50LCByZW1vdmFsUmFuZ2UsICdiYWNrd2FyZCcpOyAvLyBBZnRlciB0aGUgcmVtb3ZhbCwgdGhlIGluc2VydGlvbiB0YXJnZXQgaXMgb25lIGNoYXJhY3RlciBiYWNrLlxuXG4gIHZhciBzZWxlY3Rpb25BZnRlciA9IGFmdGVyUmVtb3ZhbC5nZXRTZWxlY3Rpb25BZnRlcigpO1xuICB2YXIgdGFyZ2V0T2Zmc2V0ID0gc2VsZWN0aW9uQWZ0ZXIuZ2V0QW5jaG9yT2Zmc2V0KCkgLSAxO1xuICB2YXIgdGFyZ2V0UmFuZ2UgPSBzZWxlY3Rpb25BZnRlci5tZXJnZSh7XG4gICAgYW5jaG9yT2Zmc2V0OiB0YXJnZXRPZmZzZXQsXG4gICAgZm9jdXNPZmZzZXQ6IHRhcmdldE9mZnNldFxuICB9KTtcbiAgdmFyIGFmdGVySW5zZXJ0ID0gRHJhZnRNb2RpZmllci5yZXBsYWNlV2l0aEZyYWdtZW50KGFmdGVyUmVtb3ZhbCwgdGFyZ2V0UmFuZ2UsIG1vdmVkRnJhZ21lbnQpO1xuICB2YXIgbmV3RWRpdG9yU3RhdGUgPSBFZGl0b3JTdGF0ZS5wdXNoKGVkaXRvclN0YXRlLCBhZnRlckluc2VydCwgJ2luc2VydC1mcmFnbWVudCcpO1xuICByZXR1cm4gRWRpdG9yU3RhdGUuYWNjZXB0U2VsZWN0aW9uKG5ld0VkaXRvclN0YXRlLCBmaW5hbFNlbGVjdGlvbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5Q29tbWFuZFRyYW5zcG9zZUNoYXJhY3RlcnM7Il0sIm5hbWVzIjpbIkRyYWZ0TW9kaWZpZXIiLCJyZXF1aXJlIiwiRWRpdG9yU3RhdGUiLCJnZXRDb250ZW50U3RhdGVGcmFnbWVudCIsImtleUNvbW1hbmRUcmFuc3Bvc2VDaGFyYWN0ZXJzIiwiZWRpdG9yU3RhdGUiLCJzZWxlY3Rpb24iLCJnZXRTZWxlY3Rpb24iLCJpc0NvbGxhcHNlZCIsIm9mZnNldCIsImdldEFuY2hvck9mZnNldCIsImJsb2NrS2V5IiwiZ2V0QW5jaG9yS2V5IiwiY29udGVudCIsImdldEN1cnJlbnRDb250ZW50IiwiYmxvY2siLCJnZXRCbG9ja0ZvcktleSIsImxlbmd0aCIsImdldExlbmd0aCIsInJlbW92YWxSYW5nZSIsImZpbmFsU2VsZWN0aW9uIiwic2V0IiwibW92ZWRGcmFnbWVudCIsImFmdGVyUmVtb3ZhbCIsInJlbW92ZVJhbmdlIiwic2VsZWN0aW9uQWZ0ZXIiLCJnZXRTZWxlY3Rpb25BZnRlciIsInRhcmdldE9mZnNldCIsInRhcmdldFJhbmdlIiwibWVyZ2UiLCJhbmNob3JPZmZzZXQiLCJmb2N1c09mZnNldCIsImFmdGVySW5zZXJ0IiwicmVwbGFjZVdpdGhGcmFnbWVudCIsIm5ld0VkaXRvclN0YXRlIiwicHVzaCIsImFjY2VwdFNlbGVjdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/keyCommandTransposeCharacters.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/keyCommandUndo.js":
/*!*****************************************************!*\
  !*** ./node_modules/draft-js/lib/keyCommandUndo.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar EditorState = __webpack_require__(/*! ./EditorState */ \"(ssr)/./node_modules/draft-js/lib/EditorState.js\");\nfunction keyCommandUndo(e, editorState, updateFn) {\n    var undoneState = EditorState.undo(editorState); // If the last change to occur was a spellcheck change, allow the undo\n    // event to fall through to the browser. This allows the browser to record\n    // the unwanted change, which should soon lead it to learn not to suggest\n    // the correction again.\n    if (editorState.getLastChangeType() === \"spellcheck-change\") {\n        var nativelyRenderedContent = undoneState.getCurrentContent();\n        updateFn(EditorState.set(undoneState, {\n            nativelyRenderedContent: nativelyRenderedContent\n        }));\n        return;\n    } // Otheriwse, manage the undo behavior manually.\n    e.preventDefault();\n    if (!editorState.getNativelyRenderedContent()) {\n        updateFn(undoneState);\n        return;\n    } // Trigger a re-render with the current content state to ensure that the\n    // component tree has up-to-date props for comparison.\n    updateFn(EditorState.set(editorState, {\n        nativelyRenderedContent: null\n    })); // Wait to ensure that the re-render has occurred before performing\n    // the undo action.\n    setTimeout(function() {\n        updateFn(undoneState);\n    }, 0);\n}\nmodule.exports = keyCommandUndo;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL2tleUNvbW1hbmRVbmRvLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsY0FBY0MsbUJBQU9BLENBQUMsdUVBQWU7QUFFekMsU0FBU0MsZUFBZUMsQ0FBQyxFQUFFQyxXQUFXLEVBQUVDLFFBQVE7SUFDOUMsSUFBSUMsY0FBY04sWUFBWU8sSUFBSSxDQUFDSCxjQUFjLHNFQUFzRTtJQUN2SCwwRUFBMEU7SUFDMUUseUVBQXlFO0lBQ3pFLHdCQUF3QjtJQUV4QixJQUFJQSxZQUFZSSxpQkFBaUIsT0FBTyxxQkFBcUI7UUFDM0QsSUFBSUMsMEJBQTBCSCxZQUFZSSxpQkFBaUI7UUFDM0RMLFNBQVNMLFlBQVlXLEdBQUcsQ0FBQ0wsYUFBYTtZQUNwQ0cseUJBQXlCQTtRQUMzQjtRQUNBO0lBQ0YsRUFBRSxnREFBZ0Q7SUFHbEROLEVBQUVTLGNBQWM7SUFFaEIsSUFBSSxDQUFDUixZQUFZUywwQkFBMEIsSUFBSTtRQUM3Q1IsU0FBU0M7UUFDVDtJQUNGLEVBQUUsd0VBQXdFO0lBQzFFLHNEQUFzRDtJQUd0REQsU0FBU0wsWUFBWVcsR0FBRyxDQUFDUCxhQUFhO1FBQ3BDSyx5QkFBeUI7SUFDM0IsS0FBSyxtRUFBbUU7SUFDeEUsbUJBQW1CO0lBRW5CSyxXQUFXO1FBQ1RULFNBQVNDO0lBQ1gsR0FBRztBQUNMO0FBRUFTLE9BQU9DLE9BQU8sR0FBR2QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWVsLWhhcnZlc3Rlci8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIva2V5Q29tbWFuZFVuZG8uanM/ODA0MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRWRpdG9yU3RhdGUgPSByZXF1aXJlKFwiLi9FZGl0b3JTdGF0ZVwiKTtcblxuZnVuY3Rpb24ga2V5Q29tbWFuZFVuZG8oZSwgZWRpdG9yU3RhdGUsIHVwZGF0ZUZuKSB7XG4gIHZhciB1bmRvbmVTdGF0ZSA9IEVkaXRvclN0YXRlLnVuZG8oZWRpdG9yU3RhdGUpOyAvLyBJZiB0aGUgbGFzdCBjaGFuZ2UgdG8gb2NjdXIgd2FzIGEgc3BlbGxjaGVjayBjaGFuZ2UsIGFsbG93IHRoZSB1bmRvXG4gIC8vIGV2ZW50IHRvIGZhbGwgdGhyb3VnaCB0byB0aGUgYnJvd3Nlci4gVGhpcyBhbGxvd3MgdGhlIGJyb3dzZXIgdG8gcmVjb3JkXG4gIC8vIHRoZSB1bndhbnRlZCBjaGFuZ2UsIHdoaWNoIHNob3VsZCBzb29uIGxlYWQgaXQgdG8gbGVhcm4gbm90IHRvIHN1Z2dlc3RcbiAgLy8gdGhlIGNvcnJlY3Rpb24gYWdhaW4uXG5cbiAgaWYgKGVkaXRvclN0YXRlLmdldExhc3RDaGFuZ2VUeXBlKCkgPT09ICdzcGVsbGNoZWNrLWNoYW5nZScpIHtcbiAgICB2YXIgbmF0aXZlbHlSZW5kZXJlZENvbnRlbnQgPSB1bmRvbmVTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpO1xuICAgIHVwZGF0ZUZuKEVkaXRvclN0YXRlLnNldCh1bmRvbmVTdGF0ZSwge1xuICAgICAgbmF0aXZlbHlSZW5kZXJlZENvbnRlbnQ6IG5hdGl2ZWx5UmVuZGVyZWRDb250ZW50XG4gICAgfSkpO1xuICAgIHJldHVybjtcbiAgfSAvLyBPdGhlcml3c2UsIG1hbmFnZSB0aGUgdW5kbyBiZWhhdmlvciBtYW51YWxseS5cblxuXG4gIGUucHJldmVudERlZmF1bHQoKTtcblxuICBpZiAoIWVkaXRvclN0YXRlLmdldE5hdGl2ZWx5UmVuZGVyZWRDb250ZW50KCkpIHtcbiAgICB1cGRhdGVGbih1bmRvbmVTdGF0ZSk7XG4gICAgcmV0dXJuO1xuICB9IC8vIFRyaWdnZXIgYSByZS1yZW5kZXIgd2l0aCB0aGUgY3VycmVudCBjb250ZW50IHN0YXRlIHRvIGVuc3VyZSB0aGF0IHRoZVxuICAvLyBjb21wb25lbnQgdHJlZSBoYXMgdXAtdG8tZGF0ZSBwcm9wcyBmb3IgY29tcGFyaXNvbi5cblxuXG4gIHVwZGF0ZUZuKEVkaXRvclN0YXRlLnNldChlZGl0b3JTdGF0ZSwge1xuICAgIG5hdGl2ZWx5UmVuZGVyZWRDb250ZW50OiBudWxsXG4gIH0pKTsgLy8gV2FpdCB0byBlbnN1cmUgdGhhdCB0aGUgcmUtcmVuZGVyIGhhcyBvY2N1cnJlZCBiZWZvcmUgcGVyZm9ybWluZ1xuICAvLyB0aGUgdW5kbyBhY3Rpb24uXG5cbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgdXBkYXRlRm4odW5kb25lU3RhdGUpO1xuICB9LCAwKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBrZXlDb21tYW5kVW5kbzsiXSwibmFtZXMiOlsiRWRpdG9yU3RhdGUiLCJyZXF1aXJlIiwia2V5Q29tbWFuZFVuZG8iLCJlIiwiZWRpdG9yU3RhdGUiLCJ1cGRhdGVGbiIsInVuZG9uZVN0YXRlIiwidW5kbyIsImdldExhc3RDaGFuZ2VUeXBlIiwibmF0aXZlbHlSZW5kZXJlZENvbnRlbnQiLCJnZXRDdXJyZW50Q29udGVudCIsInNldCIsInByZXZlbnREZWZhdWx0IiwiZ2V0TmF0aXZlbHlSZW5kZXJlZENvbnRlbnQiLCJzZXRUaW1lb3V0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/keyCommandUndo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/modifyBlockForContentState.js":
/*!*****************************************************************!*\
  !*** ./node_modules/draft-js/lib/modifyBlockForContentState.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar Map = Immutable.Map;\nfunction modifyBlockForContentState(contentState, selectionState, operation) {\n    var startKey = selectionState.getStartKey();\n    var endKey = selectionState.getEndKey();\n    var blockMap = contentState.getBlockMap();\n    var newBlocks = blockMap.toSeq().skipUntil(function(_, k) {\n        return k === startKey;\n    }).takeUntil(function(_, k) {\n        return k === endKey;\n    }).concat(Map([\n        [\n            endKey,\n            blockMap.get(endKey)\n        ]\n    ])).map(operation);\n    return contentState.merge({\n        blockMap: blockMap.merge(newBlocks),\n        selectionBefore: selectionState,\n        selectionAfter: selectionState\n    });\n}\nmodule.exports = modifyBlockForContentState;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL21vZGlmeUJsb2NrRm9yQ29udGVudFN0YXRlLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsWUFBWUMsbUJBQU9BLENBQUMseUZBQVc7QUFFbkMsSUFBSUMsTUFBTUYsVUFBVUUsR0FBRztBQUV2QixTQUFTQywyQkFBMkJDLFlBQVksRUFBRUMsY0FBYyxFQUFFQyxTQUFTO0lBQ3pFLElBQUlDLFdBQVdGLGVBQWVHLFdBQVc7SUFDekMsSUFBSUMsU0FBU0osZUFBZUssU0FBUztJQUNyQyxJQUFJQyxXQUFXUCxhQUFhUSxXQUFXO0lBQ3ZDLElBQUlDLFlBQVlGLFNBQVNHLEtBQUssR0FBR0MsU0FBUyxDQUFDLFNBQVVDLENBQUMsRUFBRUMsQ0FBQztRQUN2RCxPQUFPQSxNQUFNVjtJQUNmLEdBQUdXLFNBQVMsQ0FBQyxTQUFVRixDQUFDLEVBQUVDLENBQUM7UUFDekIsT0FBT0EsTUFBTVI7SUFDZixHQUFHVSxNQUFNLENBQUNqQixJQUFJO1FBQUM7WUFBQ087WUFBUUUsU0FBU1MsR0FBRyxDQUFDWDtTQUFRO0tBQUMsR0FBR1ksR0FBRyxDQUFDZjtJQUNyRCxPQUFPRixhQUFha0IsS0FBSyxDQUFDO1FBQ3hCWCxVQUFVQSxTQUFTVyxLQUFLLENBQUNUO1FBQ3pCVSxpQkFBaUJsQjtRQUNqQm1CLGdCQUFnQm5CO0lBQ2xCO0FBQ0Y7QUFFQW9CLE9BQU9DLE9BQU8sR0FBR3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVlbC1oYXJ2ZXN0ZXIvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL21vZGlmeUJsb2NrRm9yQ29udGVudFN0YXRlLmpzPzYzMmQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIEltbXV0YWJsZSA9IHJlcXVpcmUoXCJpbW11dGFibGVcIik7XG5cbnZhciBNYXAgPSBJbW11dGFibGUuTWFwO1xuXG5mdW5jdGlvbiBtb2RpZnlCbG9ja0ZvckNvbnRlbnRTdGF0ZShjb250ZW50U3RhdGUsIHNlbGVjdGlvblN0YXRlLCBvcGVyYXRpb24pIHtcbiAgdmFyIHN0YXJ0S2V5ID0gc2VsZWN0aW9uU3RhdGUuZ2V0U3RhcnRLZXkoKTtcbiAgdmFyIGVuZEtleSA9IHNlbGVjdGlvblN0YXRlLmdldEVuZEtleSgpO1xuICB2YXIgYmxvY2tNYXAgPSBjb250ZW50U3RhdGUuZ2V0QmxvY2tNYXAoKTtcbiAgdmFyIG5ld0Jsb2NrcyA9IGJsb2NrTWFwLnRvU2VxKCkuc2tpcFVudGlsKGZ1bmN0aW9uIChfLCBrKSB7XG4gICAgcmV0dXJuIGsgPT09IHN0YXJ0S2V5O1xuICB9KS50YWtlVW50aWwoZnVuY3Rpb24gKF8sIGspIHtcbiAgICByZXR1cm4gayA9PT0gZW5kS2V5O1xuICB9KS5jb25jYXQoTWFwKFtbZW5kS2V5LCBibG9ja01hcC5nZXQoZW5kS2V5KV1dKSkubWFwKG9wZXJhdGlvbik7XG4gIHJldHVybiBjb250ZW50U3RhdGUubWVyZ2Uoe1xuICAgIGJsb2NrTWFwOiBibG9ja01hcC5tZXJnZShuZXdCbG9ja3MpLFxuICAgIHNlbGVjdGlvbkJlZm9yZTogc2VsZWN0aW9uU3RhdGUsXG4gICAgc2VsZWN0aW9uQWZ0ZXI6IHNlbGVjdGlvblN0YXRlXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1vZGlmeUJsb2NrRm9yQ29udGVudFN0YXRlOyJdLCJuYW1lcyI6WyJJbW11dGFibGUiLCJyZXF1aXJlIiwiTWFwIiwibW9kaWZ5QmxvY2tGb3JDb250ZW50U3RhdGUiLCJjb250ZW50U3RhdGUiLCJzZWxlY3Rpb25TdGF0ZSIsIm9wZXJhdGlvbiIsInN0YXJ0S2V5IiwiZ2V0U3RhcnRLZXkiLCJlbmRLZXkiLCJnZXRFbmRLZXkiLCJibG9ja01hcCIsImdldEJsb2NrTWFwIiwibmV3QmxvY2tzIiwidG9TZXEiLCJza2lwVW50aWwiLCJfIiwiayIsInRha2VVbnRpbCIsImNvbmNhdCIsImdldCIsIm1hcCIsIm1lcmdlIiwic2VsZWN0aW9uQmVmb3JlIiwic2VsZWN0aW9uQWZ0ZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/modifyBlockForContentState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/moveBlockInContentState.js":
/*!**************************************************************!*\
  !*** ./node_modules/draft-js/lib/moveBlockInContentState.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar ContentBlockNode = __webpack_require__(/*! ./ContentBlockNode */ \"(ssr)/./node_modules/draft-js/lib/ContentBlockNode.js\");\nvar getNextDelimiterBlockKey = __webpack_require__(/*! ./getNextDelimiterBlockKey */ \"(ssr)/./node_modules/draft-js/lib/getNextDelimiterBlockKey.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar OrderedMap = Immutable.OrderedMap, List = Immutable.List;\nvar transformBlock = function transformBlock(key, blockMap, func) {\n    if (!key) {\n        return;\n    }\n    var block = blockMap.get(key);\n    if (!block) {\n        return;\n    }\n    blockMap.set(key, func(block));\n};\nvar updateBlockMapLinks = function updateBlockMapLinks(blockMap, originalBlockToBeMoved, originalTargetBlock, insertionMode, isExperimentalTreeBlock) {\n    if (!isExperimentalTreeBlock) {\n        return blockMap;\n    } // possible values of 'insertionMode' are: 'after', 'before'\n    var isInsertedAfterTarget = insertionMode === \"after\";\n    var originalBlockKey = originalBlockToBeMoved.getKey();\n    var originalTargetKey = originalTargetBlock.getKey();\n    var originalParentKey = originalBlockToBeMoved.getParentKey();\n    var originalNextSiblingKey = originalBlockToBeMoved.getNextSiblingKey();\n    var originalPrevSiblingKey = originalBlockToBeMoved.getPrevSiblingKey();\n    var newParentKey = originalTargetBlock.getParentKey();\n    var newNextSiblingKey = isInsertedAfterTarget ? originalTargetBlock.getNextSiblingKey() : originalTargetKey;\n    var newPrevSiblingKey = isInsertedAfterTarget ? originalTargetKey : originalTargetBlock.getPrevSiblingKey();\n    return blockMap.withMutations(function(blocks) {\n        // update old parent\n        transformBlock(originalParentKey, blocks, function(block) {\n            var parentChildrenList = block.getChildKeys();\n            return block.merge({\n                children: parentChildrenList[\"delete\"](parentChildrenList.indexOf(originalBlockKey))\n            });\n        }); // update old prev\n        transformBlock(originalPrevSiblingKey, blocks, function(block) {\n            return block.merge({\n                nextSibling: originalNextSiblingKey\n            });\n        }); // update old next\n        transformBlock(originalNextSiblingKey, blocks, function(block) {\n            return block.merge({\n                prevSibling: originalPrevSiblingKey\n            });\n        }); // update new next\n        transformBlock(newNextSiblingKey, blocks, function(block) {\n            return block.merge({\n                prevSibling: originalBlockKey\n            });\n        }); // update new prev\n        transformBlock(newPrevSiblingKey, blocks, function(block) {\n            return block.merge({\n                nextSibling: originalBlockKey\n            });\n        }); // update new parent\n        transformBlock(newParentKey, blocks, function(block) {\n            var newParentChildrenList = block.getChildKeys();\n            var targetBlockIndex = newParentChildrenList.indexOf(originalTargetKey);\n            var insertionIndex = isInsertedAfterTarget ? targetBlockIndex + 1 : targetBlockIndex !== 0 ? targetBlockIndex - 1 : 0;\n            var newChildrenArray = newParentChildrenList.toArray();\n            newChildrenArray.splice(insertionIndex, 0, originalBlockKey);\n            return block.merge({\n                children: List(newChildrenArray)\n            });\n        }); // update block\n        transformBlock(originalBlockKey, blocks, function(block) {\n            return block.merge({\n                nextSibling: newNextSiblingKey,\n                prevSibling: newPrevSiblingKey,\n                parent: newParentKey\n            });\n        });\n    });\n};\nvar moveBlockInContentState = function moveBlockInContentState(contentState, blockToBeMoved, targetBlock, insertionMode) {\n    !(insertionMode !== \"replace\") ?  true ? invariant(false, \"Replacing blocks is not supported.\") : 0 : void 0;\n    var targetKey = targetBlock.getKey();\n    var blockKey = blockToBeMoved.getKey();\n    !(blockKey !== targetKey) ?  true ? invariant(false, \"Block cannot be moved next to itself.\") : 0 : void 0;\n    var blockMap = contentState.getBlockMap();\n    var isExperimentalTreeBlock = blockToBeMoved instanceof ContentBlockNode;\n    var blocksToBeMoved = [\n        blockToBeMoved\n    ];\n    var blockMapWithoutBlocksToBeMoved = blockMap[\"delete\"](blockKey);\n    if (isExperimentalTreeBlock) {\n        blocksToBeMoved = [];\n        blockMapWithoutBlocksToBeMoved = blockMap.withMutations(function(blocks) {\n            var nextSiblingKey = blockToBeMoved.getNextSiblingKey();\n            var nextDelimiterBlockKey = getNextDelimiterBlockKey(blockToBeMoved, blocks);\n            blocks.toSeq().skipUntil(function(block) {\n                return block.getKey() === blockKey;\n            }).takeWhile(function(block) {\n                var key = block.getKey();\n                var isBlockToBeMoved = key === blockKey;\n                var hasNextSiblingAndIsNotNextSibling = nextSiblingKey && key !== nextSiblingKey;\n                var doesNotHaveNextSiblingAndIsNotDelimiter = !nextSiblingKey && block.getParentKey() && (!nextDelimiterBlockKey || key !== nextDelimiterBlockKey);\n                return !!(isBlockToBeMoved || hasNextSiblingAndIsNotNextSibling || doesNotHaveNextSiblingAndIsNotDelimiter);\n            }).forEach(function(block) {\n                blocksToBeMoved.push(block);\n                blocks[\"delete\"](block.getKey());\n            });\n        });\n    }\n    var blocksBefore = blockMapWithoutBlocksToBeMoved.toSeq().takeUntil(function(v) {\n        return v === targetBlock;\n    });\n    var blocksAfter = blockMapWithoutBlocksToBeMoved.toSeq().skipUntil(function(v) {\n        return v === targetBlock;\n    }).skip(1);\n    var slicedBlocks = blocksToBeMoved.map(function(block) {\n        return [\n            block.getKey(),\n            block\n        ];\n    });\n    var newBlocks = OrderedMap();\n    if (insertionMode === \"before\") {\n        var blockBefore = contentState.getBlockBefore(targetKey);\n        !(!blockBefore || blockBefore.getKey() !== blockToBeMoved.getKey()) ?  true ? invariant(false, \"Block cannot be moved next to itself.\") : 0 : void 0;\n        newBlocks = blocksBefore.concat([].concat(slicedBlocks, [\n            [\n                targetKey,\n                targetBlock\n            ]\n        ]), blocksAfter).toOrderedMap();\n    } else if (insertionMode === \"after\") {\n        var blockAfter = contentState.getBlockAfter(targetKey);\n        !(!blockAfter || blockAfter.getKey() !== blockKey) ?  true ? invariant(false, \"Block cannot be moved next to itself.\") : 0 : void 0;\n        newBlocks = blocksBefore.concat([\n            [\n                targetKey,\n                targetBlock\n            ]\n        ].concat(slicedBlocks), blocksAfter).toOrderedMap();\n    }\n    return contentState.merge({\n        blockMap: updateBlockMapLinks(newBlocks, blockToBeMoved, targetBlock, insertionMode, isExperimentalTreeBlock),\n        selectionBefore: contentState.getSelectionAfter(),\n        selectionAfter: contentState.getSelectionAfter().merge({\n            anchorKey: blockKey,\n            focusKey: blockKey\n        })\n    });\n};\nmodule.exports = moveBlockInContentState;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/moveBlockInContentState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/moveSelectionBackward.js":
/*!************************************************************!*\
  !*** ./node_modules/draft-js/lib/moveSelectionBackward.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar warning = __webpack_require__(/*! fbjs/lib/warning */ \"(ssr)/./node_modules/fbjs/lib/warning.js\");\n/**\n * Given a collapsed selection, move the focus `maxDistance` backward within\n * the selected block. If the selection will go beyond the start of the block,\n * move focus to the end of the previous block, but no further.\n *\n * This function is not Unicode-aware, so surrogate pairs will be treated\n * as having length 2.\n */ function moveSelectionBackward(editorState, maxDistance) {\n    var selection = editorState.getSelection(); // Should eventually make this an invariant\n     true ? warning(selection.isCollapsed(), \"moveSelectionBackward should only be called with a collapsed SelectionState\") : 0;\n    var content = editorState.getCurrentContent();\n    var key = selection.getStartKey();\n    var offset = selection.getStartOffset();\n    var focusKey = key;\n    var focusOffset = 0;\n    if (maxDistance > offset) {\n        var keyBefore = content.getKeyBefore(key);\n        if (keyBefore == null) {\n            focusKey = key;\n        } else {\n            focusKey = keyBefore;\n            var blockBefore = content.getBlockForKey(keyBefore);\n            focusOffset = blockBefore.getText().length;\n        }\n    } else {\n        focusOffset = offset - maxDistance;\n    }\n    return selection.merge({\n        focusKey: focusKey,\n        focusOffset: focusOffset,\n        isBackward: true\n    });\n}\nmodule.exports = moveSelectionBackward;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL21vdmVTZWxlY3Rpb25CYWNrd2FyZC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLElBQUlBLFVBQVVDLG1CQUFPQSxDQUFDLGtFQUFrQjtBQUN4Qzs7Ozs7OztDQU9DLEdBR0QsU0FBU0Msc0JBQXNCQyxXQUFXLEVBQUVDLFdBQVc7SUFDckQsSUFBSUMsWUFBWUYsWUFBWUcsWUFBWSxJQUFJLDJDQUEyQztJQXhCekYsS0EwQnVDLEdBQUdOLFFBQVFLLFVBQVVFLFdBQVcsSUFBSSxpRkFBaUYsQ0FBTTtJQUNoSyxJQUFJQyxVQUFVTCxZQUFZTSxpQkFBaUI7SUFDM0MsSUFBSUMsTUFBTUwsVUFBVU0sV0FBVztJQUMvQixJQUFJQyxTQUFTUCxVQUFVUSxjQUFjO0lBQ3JDLElBQUlDLFdBQVdKO0lBQ2YsSUFBSUssY0FBYztJQUVsQixJQUFJWCxjQUFjUSxRQUFRO1FBQ3hCLElBQUlJLFlBQVlSLFFBQVFTLFlBQVksQ0FBQ1A7UUFFckMsSUFBSU0sYUFBYSxNQUFNO1lBQ3JCRixXQUFXSjtRQUNiLE9BQU87WUFDTEksV0FBV0U7WUFDWCxJQUFJRSxjQUFjVixRQUFRVyxjQUFjLENBQUNIO1lBQ3pDRCxjQUFjRyxZQUFZRSxPQUFPLEdBQUdDLE1BQU07UUFDNUM7SUFDRixPQUFPO1FBQ0xOLGNBQWNILFNBQVNSO0lBQ3pCO0lBRUEsT0FBT0MsVUFBVWlCLEtBQUssQ0FBQztRQUNyQlIsVUFBVUE7UUFDVkMsYUFBYUE7UUFDYlEsWUFBWTtJQUNkO0FBQ0Y7QUFFQUMsT0FBT0MsT0FBTyxHQUFHdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWVsLWhhcnZlc3Rlci8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvbW92ZVNlbGVjdGlvbkJhY2t3YXJkLmpzP2M5MWIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHdhcm5pbmcgPSByZXF1aXJlKFwiZmJqcy9saWIvd2FybmluZ1wiKTtcbi8qKlxuICogR2l2ZW4gYSBjb2xsYXBzZWQgc2VsZWN0aW9uLCBtb3ZlIHRoZSBmb2N1cyBgbWF4RGlzdGFuY2VgIGJhY2t3YXJkIHdpdGhpblxuICogdGhlIHNlbGVjdGVkIGJsb2NrLiBJZiB0aGUgc2VsZWN0aW9uIHdpbGwgZ28gYmV5b25kIHRoZSBzdGFydCBvZiB0aGUgYmxvY2ssXG4gKiBtb3ZlIGZvY3VzIHRvIHRoZSBlbmQgb2YgdGhlIHByZXZpb3VzIGJsb2NrLCBidXQgbm8gZnVydGhlci5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIG5vdCBVbmljb2RlLWF3YXJlLCBzbyBzdXJyb2dhdGUgcGFpcnMgd2lsbCBiZSB0cmVhdGVkXG4gKiBhcyBoYXZpbmcgbGVuZ3RoIDIuXG4gKi9cblxuXG5mdW5jdGlvbiBtb3ZlU2VsZWN0aW9uQmFja3dhcmQoZWRpdG9yU3RhdGUsIG1heERpc3RhbmNlKSB7XG4gIHZhciBzZWxlY3Rpb24gPSBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKTsgLy8gU2hvdWxkIGV2ZW50dWFsbHkgbWFrZSB0aGlzIGFuIGludmFyaWFudFxuXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc2VsZWN0aW9uLmlzQ29sbGFwc2VkKCksICdtb3ZlU2VsZWN0aW9uQmFja3dhcmQgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIHdpdGggYSBjb2xsYXBzZWQgU2VsZWN0aW9uU3RhdGUnKSA6IHZvaWQgMDtcbiAgdmFyIGNvbnRlbnQgPSBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpO1xuICB2YXIga2V5ID0gc2VsZWN0aW9uLmdldFN0YXJ0S2V5KCk7XG4gIHZhciBvZmZzZXQgPSBzZWxlY3Rpb24uZ2V0U3RhcnRPZmZzZXQoKTtcbiAgdmFyIGZvY3VzS2V5ID0ga2V5O1xuICB2YXIgZm9jdXNPZmZzZXQgPSAwO1xuXG4gIGlmIChtYXhEaXN0YW5jZSA+IG9mZnNldCkge1xuICAgIHZhciBrZXlCZWZvcmUgPSBjb250ZW50LmdldEtleUJlZm9yZShrZXkpO1xuXG4gICAgaWYgKGtleUJlZm9yZSA9PSBudWxsKSB7XG4gICAgICBmb2N1c0tleSA9IGtleTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9jdXNLZXkgPSBrZXlCZWZvcmU7XG4gICAgICB2YXIgYmxvY2tCZWZvcmUgPSBjb250ZW50LmdldEJsb2NrRm9yS2V5KGtleUJlZm9yZSk7XG4gICAgICBmb2N1c09mZnNldCA9IGJsb2NrQmVmb3JlLmdldFRleHQoKS5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvY3VzT2Zmc2V0ID0gb2Zmc2V0IC0gbWF4RGlzdGFuY2U7XG4gIH1cblxuICByZXR1cm4gc2VsZWN0aW9uLm1lcmdlKHtcbiAgICBmb2N1c0tleTogZm9jdXNLZXksXG4gICAgZm9jdXNPZmZzZXQ6IGZvY3VzT2Zmc2V0LFxuICAgIGlzQmFja3dhcmQ6IHRydWVcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbW92ZVNlbGVjdGlvbkJhY2t3YXJkOyJdLCJuYW1lcyI6WyJ3YXJuaW5nIiwicmVxdWlyZSIsIm1vdmVTZWxlY3Rpb25CYWNrd2FyZCIsImVkaXRvclN0YXRlIiwibWF4RGlzdGFuY2UiLCJzZWxlY3Rpb24iLCJnZXRTZWxlY3Rpb24iLCJpc0NvbGxhcHNlZCIsImNvbnRlbnQiLCJnZXRDdXJyZW50Q29udGVudCIsImtleSIsImdldFN0YXJ0S2V5Iiwib2Zmc2V0IiwiZ2V0U3RhcnRPZmZzZXQiLCJmb2N1c0tleSIsImZvY3VzT2Zmc2V0Iiwia2V5QmVmb3JlIiwiZ2V0S2V5QmVmb3JlIiwiYmxvY2tCZWZvcmUiLCJnZXRCbG9ja0ZvcktleSIsImdldFRleHQiLCJsZW5ndGgiLCJtZXJnZSIsImlzQmFja3dhcmQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/moveSelectionBackward.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/moveSelectionForward.js":
/*!***********************************************************!*\
  !*** ./node_modules/draft-js/lib/moveSelectionForward.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar warning = __webpack_require__(/*! fbjs/lib/warning */ \"(ssr)/./node_modules/fbjs/lib/warning.js\");\n/**\n * Given a collapsed selection, move the focus `maxDistance` forward within\n * the selected block. If the selection will go beyond the end of the block,\n * move focus to the start of the next block, but no further.\n *\n * This function is not Unicode-aware, so surrogate pairs will be treated\n * as having length 2.\n */ function moveSelectionForward(editorState, maxDistance) {\n    var selection = editorState.getSelection(); // Should eventually make this an invariant\n     true ? warning(selection.isCollapsed(), \"moveSelectionForward should only be called with a collapsed SelectionState\") : 0;\n    var key = selection.getStartKey();\n    var offset = selection.getStartOffset();\n    var content = editorState.getCurrentContent();\n    var focusKey = key;\n    var focusOffset;\n    var block = content.getBlockForKey(key);\n    if (maxDistance > block.getText().length - offset) {\n        focusKey = content.getKeyAfter(key);\n        focusOffset = 0;\n    } else {\n        focusOffset = offset + maxDistance;\n    }\n    return selection.merge({\n        focusKey: focusKey,\n        focusOffset: focusOffset\n    });\n}\nmodule.exports = moveSelectionForward;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL21vdmVTZWxlY3Rpb25Gb3J3YXJkLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsVUFBVUMsbUJBQU9BLENBQUMsa0VBQWtCO0FBQ3hDOzs7Ozs7O0NBT0MsR0FHRCxTQUFTQyxxQkFBcUJDLFdBQVcsRUFBRUMsV0FBVztJQUNwRCxJQUFJQyxZQUFZRixZQUFZRyxZQUFZLElBQUksMkNBQTJDO0lBeEJ6RixLQTBCdUMsR0FBR04sUUFBUUssVUFBVUUsV0FBVyxJQUFJLGdGQUFnRixDQUFNO0lBQy9KLElBQUlDLE1BQU1ILFVBQVVJLFdBQVc7SUFDL0IsSUFBSUMsU0FBU0wsVUFBVU0sY0FBYztJQUNyQyxJQUFJQyxVQUFVVCxZQUFZVSxpQkFBaUI7SUFDM0MsSUFBSUMsV0FBV047SUFDZixJQUFJTztJQUNKLElBQUlDLFFBQVFKLFFBQVFLLGNBQWMsQ0FBQ1Q7SUFFbkMsSUFBSUosY0FBY1ksTUFBTUUsT0FBTyxHQUFHQyxNQUFNLEdBQUdULFFBQVE7UUFDakRJLFdBQVdGLFFBQVFRLFdBQVcsQ0FBQ1o7UUFDL0JPLGNBQWM7SUFDaEIsT0FBTztRQUNMQSxjQUFjTCxTQUFTTjtJQUN6QjtJQUVBLE9BQU9DLFVBQVVnQixLQUFLLENBQUM7UUFDckJQLFVBQVVBO1FBQ1ZDLGFBQWFBO0lBQ2Y7QUFDRjtBQUVBTyxPQUFPQyxPQUFPLEdBQUdyQiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9tb3ZlU2VsZWN0aW9uRm9yd2FyZC5qcz9lMWI0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZShcImZianMvbGliL3dhcm5pbmdcIik7XG4vKipcbiAqIEdpdmVuIGEgY29sbGFwc2VkIHNlbGVjdGlvbiwgbW92ZSB0aGUgZm9jdXMgYG1heERpc3RhbmNlYCBmb3J3YXJkIHdpdGhpblxuICogdGhlIHNlbGVjdGVkIGJsb2NrLiBJZiB0aGUgc2VsZWN0aW9uIHdpbGwgZ28gYmV5b25kIHRoZSBlbmQgb2YgdGhlIGJsb2NrLFxuICogbW92ZSBmb2N1cyB0byB0aGUgc3RhcnQgb2YgdGhlIG5leHQgYmxvY2ssIGJ1dCBubyBmdXJ0aGVyLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbm90IFVuaWNvZGUtYXdhcmUsIHNvIHN1cnJvZ2F0ZSBwYWlycyB3aWxsIGJlIHRyZWF0ZWRcbiAqIGFzIGhhdmluZyBsZW5ndGggMi5cbiAqL1xuXG5cbmZ1bmN0aW9uIG1vdmVTZWxlY3Rpb25Gb3J3YXJkKGVkaXRvclN0YXRlLCBtYXhEaXN0YW5jZSkge1xuICB2YXIgc2VsZWN0aW9uID0gZWRpdG9yU3RhdGUuZ2V0U2VsZWN0aW9uKCk7IC8vIFNob3VsZCBldmVudHVhbGx5IG1ha2UgdGhpcyBhbiBpbnZhcmlhbnRcblxuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHNlbGVjdGlvbi5pc0NvbGxhcHNlZCgpLCAnbW92ZVNlbGVjdGlvbkZvcndhcmQgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIHdpdGggYSBjb2xsYXBzZWQgU2VsZWN0aW9uU3RhdGUnKSA6IHZvaWQgMDtcbiAgdmFyIGtleSA9IHNlbGVjdGlvbi5nZXRTdGFydEtleSgpO1xuICB2YXIgb2Zmc2V0ID0gc2VsZWN0aW9uLmdldFN0YXJ0T2Zmc2V0KCk7XG4gIHZhciBjb250ZW50ID0gZWRpdG9yU3RhdGUuZ2V0Q3VycmVudENvbnRlbnQoKTtcbiAgdmFyIGZvY3VzS2V5ID0ga2V5O1xuICB2YXIgZm9jdXNPZmZzZXQ7XG4gIHZhciBibG9jayA9IGNvbnRlbnQuZ2V0QmxvY2tGb3JLZXkoa2V5KTtcblxuICBpZiAobWF4RGlzdGFuY2UgPiBibG9jay5nZXRUZXh0KCkubGVuZ3RoIC0gb2Zmc2V0KSB7XG4gICAgZm9jdXNLZXkgPSBjb250ZW50LmdldEtleUFmdGVyKGtleSk7XG4gICAgZm9jdXNPZmZzZXQgPSAwO1xuICB9IGVsc2Uge1xuICAgIGZvY3VzT2Zmc2V0ID0gb2Zmc2V0ICsgbWF4RGlzdGFuY2U7XG4gIH1cblxuICByZXR1cm4gc2VsZWN0aW9uLm1lcmdlKHtcbiAgICBmb2N1c0tleTogZm9jdXNLZXksXG4gICAgZm9jdXNPZmZzZXQ6IGZvY3VzT2Zmc2V0XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1vdmVTZWxlY3Rpb25Gb3J3YXJkOyJdLCJuYW1lcyI6WyJ3YXJuaW5nIiwicmVxdWlyZSIsIm1vdmVTZWxlY3Rpb25Gb3J3YXJkIiwiZWRpdG9yU3RhdGUiLCJtYXhEaXN0YW5jZSIsInNlbGVjdGlvbiIsImdldFNlbGVjdGlvbiIsImlzQ29sbGFwc2VkIiwia2V5IiwiZ2V0U3RhcnRLZXkiLCJvZmZzZXQiLCJnZXRTdGFydE9mZnNldCIsImNvbnRlbnQiLCJnZXRDdXJyZW50Q29udGVudCIsImZvY3VzS2V5IiwiZm9jdXNPZmZzZXQiLCJibG9jayIsImdldEJsb2NrRm9yS2V5IiwiZ2V0VGV4dCIsImxlbmd0aCIsImdldEtleUFmdGVyIiwibWVyZ2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/moveSelectionForward.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/randomizeBlockMapKeys.js":
/*!************************************************************!*\
  !*** ./node_modules/draft-js/lib/randomizeBlockMapKeys.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar ContentBlockNode = __webpack_require__(/*! ./ContentBlockNode */ \"(ssr)/./node_modules/draft-js/lib/ContentBlockNode.js\");\nvar generateRandomKey = __webpack_require__(/*! ./generateRandomKey */ \"(ssr)/./node_modules/draft-js/lib/generateRandomKey.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar OrderedMap = Immutable.OrderedMap;\nvar randomizeContentBlockNodeKeys = function randomizeContentBlockNodeKeys(blockMap) {\n    var newKeysRef = {}; // we keep track of root blocks in order to update subsequent sibling links\n    var lastRootBlock;\n    return OrderedMap(blockMap.withMutations(function(blockMapState) {\n        blockMapState.forEach(function(block, index) {\n            var oldKey = block.getKey();\n            var nextKey = block.getNextSiblingKey();\n            var prevKey = block.getPrevSiblingKey();\n            var childrenKeys = block.getChildKeys();\n            var parentKey = block.getParentKey(); // new key that we will use to build linking\n            var key = generateRandomKey(); // we will add it here to re-use it later\n            newKeysRef[oldKey] = key;\n            if (nextKey) {\n                var nextBlock = blockMapState.get(nextKey);\n                if (nextBlock) {\n                    blockMapState.setIn([\n                        nextKey,\n                        \"prevSibling\"\n                    ], key);\n                } else {\n                    // this can happen when generating random keys for fragments\n                    blockMapState.setIn([\n                        oldKey,\n                        \"nextSibling\"\n                    ], null);\n                }\n            }\n            if (prevKey) {\n                var prevBlock = blockMapState.get(prevKey);\n                if (prevBlock) {\n                    blockMapState.setIn([\n                        prevKey,\n                        \"nextSibling\"\n                    ], key);\n                } else {\n                    // this can happen when generating random keys for fragments\n                    blockMapState.setIn([\n                        oldKey,\n                        \"prevSibling\"\n                    ], null);\n                }\n            }\n            if (parentKey && blockMapState.get(parentKey)) {\n                var parentBlock = blockMapState.get(parentKey);\n                var parentChildrenList = parentBlock.getChildKeys();\n                blockMapState.setIn([\n                    parentKey,\n                    \"children\"\n                ], parentChildrenList.set(parentChildrenList.indexOf(block.getKey()), key));\n            } else {\n                // blocks will then be treated as root block nodes\n                blockMapState.setIn([\n                    oldKey,\n                    \"parent\"\n                ], null);\n                if (lastRootBlock) {\n                    blockMapState.setIn([\n                        lastRootBlock.getKey(),\n                        \"nextSibling\"\n                    ], key);\n                    blockMapState.setIn([\n                        oldKey,\n                        \"prevSibling\"\n                    ], newKeysRef[lastRootBlock.getKey()]);\n                }\n                lastRootBlock = blockMapState.get(oldKey);\n            }\n            childrenKeys.forEach(function(childKey) {\n                var childBlock = blockMapState.get(childKey);\n                if (childBlock) {\n                    blockMapState.setIn([\n                        childKey,\n                        \"parent\"\n                    ], key);\n                } else {\n                    blockMapState.setIn([\n                        oldKey,\n                        \"children\"\n                    ], block.getChildKeys().filter(function(child) {\n                        return child !== childKey;\n                    }));\n                }\n            });\n        });\n    }).toArray().map(function(block) {\n        return [\n            newKeysRef[block.getKey()],\n            block.set(\"key\", newKeysRef[block.getKey()])\n        ];\n    }));\n};\nvar randomizeContentBlockKeys = function randomizeContentBlockKeys(blockMap) {\n    return OrderedMap(blockMap.toArray().map(function(block) {\n        var key = generateRandomKey();\n        return [\n            key,\n            block.set(\"key\", key)\n        ];\n    }));\n};\nvar randomizeBlockMapKeys = function randomizeBlockMapKeys(blockMap) {\n    var isTreeBasedBlockMap = blockMap.first() instanceof ContentBlockNode;\n    if (!isTreeBasedBlockMap) {\n        return randomizeContentBlockKeys(blockMap);\n    }\n    return randomizeContentBlockNodeKeys(blockMap);\n};\nmodule.exports = randomizeBlockMapKeys;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/randomizeBlockMapKeys.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/removeEntitiesAtEdges.js":
/*!************************************************************!*\
  !*** ./node_modules/draft-js/lib/removeEntitiesAtEdges.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar CharacterMetadata = __webpack_require__(/*! ./CharacterMetadata */ \"(ssr)/./node_modules/draft-js/lib/CharacterMetadata.js\");\nvar findRangesImmutable = __webpack_require__(/*! ./findRangesImmutable */ \"(ssr)/./node_modules/draft-js/lib/findRangesImmutable.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nfunction removeEntitiesAtEdges(contentState, selectionState) {\n    var blockMap = contentState.getBlockMap();\n    var entityMap = contentState.getEntityMap();\n    var updatedBlocks = {};\n    var startKey = selectionState.getStartKey();\n    var startOffset = selectionState.getStartOffset();\n    var startBlock = blockMap.get(startKey);\n    var updatedStart = removeForBlock(entityMap, startBlock, startOffset);\n    if (updatedStart !== startBlock) {\n        updatedBlocks[startKey] = updatedStart;\n    }\n    var endKey = selectionState.getEndKey();\n    var endOffset = selectionState.getEndOffset();\n    var endBlock = blockMap.get(endKey);\n    if (startKey === endKey) {\n        endBlock = updatedStart;\n    }\n    var updatedEnd = removeForBlock(entityMap, endBlock, endOffset);\n    if (updatedEnd !== endBlock) {\n        updatedBlocks[endKey] = updatedEnd;\n    }\n    if (!Object.keys(updatedBlocks).length) {\n        return contentState.set(\"selectionAfter\", selectionState);\n    }\n    return contentState.merge({\n        blockMap: blockMap.merge(updatedBlocks),\n        selectionAfter: selectionState\n    });\n}\n/**\n * Given a list of characters and an offset that is in the middle of an entity,\n * returns the start and end of the entity that is overlapping the offset.\n * Note: This method requires that the offset be in an entity range.\n */ function getRemovalRange(characters, entityKey, offset) {\n    var removalRange; // Iterates through a list looking for ranges of matching items\n    // based on the 'isEqual' callback.\n    // Then instead of returning the result, call the 'found' callback\n    // with each range.\n    // Then filters those ranges based on the 'filter' callback\n    //\n    // Here we use it to find ranges of characters with the same entity key.\n    findRangesImmutable(characters, function(a, b) {\n        return a.getEntity() === b.getEntity();\n    }, function(element) {\n        return element.getEntity() === entityKey;\n    }, function(start, end) {\n        // 'found' callback\n        if (start <= offset && end >= offset) {\n            // this entity overlaps the offset index\n            removalRange = {\n                start: start,\n                end: end\n            };\n        }\n    });\n    !(typeof removalRange === \"object\") ?  true ? invariant(false, \"Removal range must exist within character list.\") : 0 : void 0;\n    return removalRange;\n}\nfunction removeForBlock(entityMap, block, offset) {\n    var chars = block.getCharacterList();\n    var charBefore = offset > 0 ? chars.get(offset - 1) : undefined;\n    var charAfter = offset < chars.count() ? chars.get(offset) : undefined;\n    var entityBeforeCursor = charBefore ? charBefore.getEntity() : undefined;\n    var entityAfterCursor = charAfter ? charAfter.getEntity() : undefined;\n    if (entityAfterCursor && entityAfterCursor === entityBeforeCursor) {\n        var entity = entityMap.__get(entityAfterCursor);\n        if (entity.getMutability() !== \"MUTABLE\") {\n            var _getRemovalRange = getRemovalRange(chars, entityAfterCursor, offset), start = _getRemovalRange.start, end = _getRemovalRange.end;\n            var current;\n            while(start < end){\n                current = chars.get(start);\n                chars = chars.set(start, CharacterMetadata.applyEntity(current, null));\n                start++;\n            }\n            return block.set(\"characterList\", chars);\n        }\n    }\n    return block;\n}\nmodule.exports = removeEntitiesAtEdges;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL3JlbW92ZUVudGl0aWVzQXRFZGdlcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0NBU0MsR0FDRDtBQUVBLElBQUlBLG9CQUFvQkMsbUJBQU9BLENBQUMsbUZBQXFCO0FBRXJELElBQUlDLHNCQUFzQkQsbUJBQU9BLENBQUMsdUZBQXVCO0FBRXpELElBQUlFLFlBQVlGLG1CQUFPQSxDQUFDLHNFQUFvQjtBQUU1QyxTQUFTRyxzQkFBc0JDLFlBQVksRUFBRUMsY0FBYztJQUN6RCxJQUFJQyxXQUFXRixhQUFhRyxXQUFXO0lBQ3ZDLElBQUlDLFlBQVlKLGFBQWFLLFlBQVk7SUFDekMsSUFBSUMsZ0JBQWdCLENBQUM7SUFDckIsSUFBSUMsV0FBV04sZUFBZU8sV0FBVztJQUN6QyxJQUFJQyxjQUFjUixlQUFlUyxjQUFjO0lBQy9DLElBQUlDLGFBQWFULFNBQVNVLEdBQUcsQ0FBQ0w7SUFDOUIsSUFBSU0sZUFBZUMsZUFBZVYsV0FBV08sWUFBWUY7SUFFekQsSUFBSUksaUJBQWlCRixZQUFZO1FBQy9CTCxhQUFhLENBQUNDLFNBQVMsR0FBR007SUFDNUI7SUFFQSxJQUFJRSxTQUFTZCxlQUFlZSxTQUFTO0lBQ3JDLElBQUlDLFlBQVloQixlQUFlaUIsWUFBWTtJQUMzQyxJQUFJQyxXQUFXakIsU0FBU1UsR0FBRyxDQUFDRztJQUU1QixJQUFJUixhQUFhUSxRQUFRO1FBQ3ZCSSxXQUFXTjtJQUNiO0lBRUEsSUFBSU8sYUFBYU4sZUFBZVYsV0FBV2UsVUFBVUY7SUFFckQsSUFBSUcsZUFBZUQsVUFBVTtRQUMzQmIsYUFBYSxDQUFDUyxPQUFPLEdBQUdLO0lBQzFCO0lBRUEsSUFBSSxDQUFDQyxPQUFPQyxJQUFJLENBQUNoQixlQUFlaUIsTUFBTSxFQUFFO1FBQ3RDLE9BQU92QixhQUFhd0IsR0FBRyxDQUFDLGtCQUFrQnZCO0lBQzVDO0lBRUEsT0FBT0QsYUFBYXlCLEtBQUssQ0FBQztRQUN4QnZCLFVBQVVBLFNBQVN1QixLQUFLLENBQUNuQjtRQUN6Qm9CLGdCQUFnQnpCO0lBQ2xCO0FBQ0Y7QUFDQTs7OztDQUlDLEdBR0QsU0FBUzBCLGdCQUFnQkMsVUFBVSxFQUFFQyxTQUFTLEVBQUVDLE1BQU07SUFDcEQsSUFBSUMsY0FBYywrREFBK0Q7SUFDakYsbUNBQW1DO0lBQ25DLGtFQUFrRTtJQUNsRSxtQkFBbUI7SUFDbkIsMkRBQTJEO0lBQzNELEVBQUU7SUFDRix3RUFBd0U7SUFFeEVsQyxvQkFBb0IrQixZQUNwQixTQUFVSSxDQUFDLEVBQUVDLENBQUM7UUFDWixPQUFPRCxFQUFFRSxTQUFTLE9BQU9ELEVBQUVDLFNBQVM7SUFDdEMsR0FDQSxTQUFVQyxPQUFPO1FBQ2YsT0FBT0EsUUFBUUQsU0FBUyxPQUFPTDtJQUNqQyxHQUNBLFNBQVVPLEtBQUssRUFBRUMsR0FBRztRQUNsQixtQkFBbUI7UUFDbkIsSUFBSUQsU0FBU04sVUFBVU8sT0FBT1AsUUFBUTtZQUNwQyx3Q0FBd0M7WUFDeENDLGVBQWU7Z0JBQ2JLLE9BQU9BO2dCQUNQQyxLQUFLQTtZQUNQO1FBQ0Y7SUFDRjtJQUNBLENBQUUsUUFBT04saUJBQWlCLFFBQU8sSUFBS08sS0FBcUMsR0FBR3hDLFVBQVUsT0FBTyxxREFBcURBLENBQWdCLEdBQUcsS0FBSztJQUM1SyxPQUFPaUM7QUFDVDtBQUVBLFNBQVNqQixlQUFlVixTQUFTLEVBQUVtQyxLQUFLLEVBQUVULE1BQU07SUFDOUMsSUFBSVUsUUFBUUQsTUFBTUUsZ0JBQWdCO0lBQ2xDLElBQUlDLGFBQWFaLFNBQVMsSUFBSVUsTUFBTTVCLEdBQUcsQ0FBQ2tCLFNBQVMsS0FBS2E7SUFDdEQsSUFBSUMsWUFBWWQsU0FBU1UsTUFBTUssS0FBSyxLQUFLTCxNQUFNNUIsR0FBRyxDQUFDa0IsVUFBVWE7SUFDN0QsSUFBSUcscUJBQXFCSixhQUFhQSxXQUFXUixTQUFTLEtBQUtTO0lBQy9ELElBQUlJLG9CQUFvQkgsWUFBWUEsVUFBVVYsU0FBUyxLQUFLUztJQUU1RCxJQUFJSSxxQkFBcUJBLHNCQUFzQkQsb0JBQW9CO1FBQ2pFLElBQUlFLFNBQVM1QyxVQUFVNkMsS0FBSyxDQUFDRjtRQUU3QixJQUFJQyxPQUFPRSxhQUFhLE9BQU8sV0FBVztZQUN4QyxJQUFJQyxtQkFBbUJ4QixnQkFBZ0JhLE9BQU9PLG1CQUFtQmpCLFNBQzdETSxRQUFRZSxpQkFBaUJmLEtBQUssRUFDOUJDLE1BQU1jLGlCQUFpQmQsR0FBRztZQUU5QixJQUFJZTtZQUVKLE1BQU9oQixRQUFRQyxJQUFLO2dCQUNsQmUsVUFBVVosTUFBTTVCLEdBQUcsQ0FBQ3dCO2dCQUNwQkksUUFBUUEsTUFBTWhCLEdBQUcsQ0FBQ1ksT0FBT3pDLGtCQUFrQjBELFdBQVcsQ0FBQ0QsU0FBUztnQkFDaEVoQjtZQUNGO1lBRUEsT0FBT0csTUFBTWYsR0FBRyxDQUFDLGlCQUFpQmdCO1FBQ3BDO0lBQ0Y7SUFFQSxPQUFPRDtBQUNUO0FBRUFlLE9BQU9DLE9BQU8sR0FBR3hEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVlbC1oYXJ2ZXN0ZXIvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL3JlbW92ZUVudGl0aWVzQXRFZGdlcy5qcz8wNzJlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBDaGFyYWN0ZXJNZXRhZGF0YSA9IHJlcXVpcmUoXCIuL0NoYXJhY3Rlck1ldGFkYXRhXCIpO1xuXG52YXIgZmluZFJhbmdlc0ltbXV0YWJsZSA9IHJlcXVpcmUoXCIuL2ZpbmRSYW5nZXNJbW11dGFibGVcIik7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpO1xuXG5mdW5jdGlvbiByZW1vdmVFbnRpdGllc0F0RWRnZXMoY29udGVudFN0YXRlLCBzZWxlY3Rpb25TdGF0ZSkge1xuICB2YXIgYmxvY2tNYXAgPSBjb250ZW50U3RhdGUuZ2V0QmxvY2tNYXAoKTtcbiAgdmFyIGVudGl0eU1hcCA9IGNvbnRlbnRTdGF0ZS5nZXRFbnRpdHlNYXAoKTtcbiAgdmFyIHVwZGF0ZWRCbG9ja3MgPSB7fTtcbiAgdmFyIHN0YXJ0S2V5ID0gc2VsZWN0aW9uU3RhdGUuZ2V0U3RhcnRLZXkoKTtcbiAgdmFyIHN0YXJ0T2Zmc2V0ID0gc2VsZWN0aW9uU3RhdGUuZ2V0U3RhcnRPZmZzZXQoKTtcbiAgdmFyIHN0YXJ0QmxvY2sgPSBibG9ja01hcC5nZXQoc3RhcnRLZXkpO1xuICB2YXIgdXBkYXRlZFN0YXJ0ID0gcmVtb3ZlRm9yQmxvY2soZW50aXR5TWFwLCBzdGFydEJsb2NrLCBzdGFydE9mZnNldCk7XG5cbiAgaWYgKHVwZGF0ZWRTdGFydCAhPT0gc3RhcnRCbG9jaykge1xuICAgIHVwZGF0ZWRCbG9ja3Nbc3RhcnRLZXldID0gdXBkYXRlZFN0YXJ0O1xuICB9XG5cbiAgdmFyIGVuZEtleSA9IHNlbGVjdGlvblN0YXRlLmdldEVuZEtleSgpO1xuICB2YXIgZW5kT2Zmc2V0ID0gc2VsZWN0aW9uU3RhdGUuZ2V0RW5kT2Zmc2V0KCk7XG4gIHZhciBlbmRCbG9jayA9IGJsb2NrTWFwLmdldChlbmRLZXkpO1xuXG4gIGlmIChzdGFydEtleSA9PT0gZW5kS2V5KSB7XG4gICAgZW5kQmxvY2sgPSB1cGRhdGVkU3RhcnQ7XG4gIH1cblxuICB2YXIgdXBkYXRlZEVuZCA9IHJlbW92ZUZvckJsb2NrKGVudGl0eU1hcCwgZW5kQmxvY2ssIGVuZE9mZnNldCk7XG5cbiAgaWYgKHVwZGF0ZWRFbmQgIT09IGVuZEJsb2NrKSB7XG4gICAgdXBkYXRlZEJsb2Nrc1tlbmRLZXldID0gdXBkYXRlZEVuZDtcbiAgfVxuXG4gIGlmICghT2JqZWN0LmtleXModXBkYXRlZEJsb2NrcykubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGNvbnRlbnRTdGF0ZS5zZXQoJ3NlbGVjdGlvbkFmdGVyJywgc2VsZWN0aW9uU3RhdGUpO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRlbnRTdGF0ZS5tZXJnZSh7XG4gICAgYmxvY2tNYXA6IGJsb2NrTWFwLm1lcmdlKHVwZGF0ZWRCbG9ja3MpLFxuICAgIHNlbGVjdGlvbkFmdGVyOiBzZWxlY3Rpb25TdGF0ZVxuICB9KTtcbn1cbi8qKlxuICogR2l2ZW4gYSBsaXN0IG9mIGNoYXJhY3RlcnMgYW5kIGFuIG9mZnNldCB0aGF0IGlzIGluIHRoZSBtaWRkbGUgb2YgYW4gZW50aXR5LFxuICogcmV0dXJucyB0aGUgc3RhcnQgYW5kIGVuZCBvZiB0aGUgZW50aXR5IHRoYXQgaXMgb3ZlcmxhcHBpbmcgdGhlIG9mZnNldC5cbiAqIE5vdGU6IFRoaXMgbWV0aG9kIHJlcXVpcmVzIHRoYXQgdGhlIG9mZnNldCBiZSBpbiBhbiBlbnRpdHkgcmFuZ2UuXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRSZW1vdmFsUmFuZ2UoY2hhcmFjdGVycywgZW50aXR5S2V5LCBvZmZzZXQpIHtcbiAgdmFyIHJlbW92YWxSYW5nZTsgLy8gSXRlcmF0ZXMgdGhyb3VnaCBhIGxpc3QgbG9va2luZyBmb3IgcmFuZ2VzIG9mIG1hdGNoaW5nIGl0ZW1zXG4gIC8vIGJhc2VkIG9uIHRoZSAnaXNFcXVhbCcgY2FsbGJhY2suXG4gIC8vIFRoZW4gaW5zdGVhZCBvZiByZXR1cm5pbmcgdGhlIHJlc3VsdCwgY2FsbCB0aGUgJ2ZvdW5kJyBjYWxsYmFja1xuICAvLyB3aXRoIGVhY2ggcmFuZ2UuXG4gIC8vIFRoZW4gZmlsdGVycyB0aG9zZSByYW5nZXMgYmFzZWQgb24gdGhlICdmaWx0ZXInIGNhbGxiYWNrXG4gIC8vXG4gIC8vIEhlcmUgd2UgdXNlIGl0IHRvIGZpbmQgcmFuZ2VzIG9mIGNoYXJhY3RlcnMgd2l0aCB0aGUgc2FtZSBlbnRpdHkga2V5LlxuXG4gIGZpbmRSYW5nZXNJbW11dGFibGUoY2hhcmFjdGVycywgLy8gdGhlIGxpc3QgdG8gaXRlcmF0ZSB0aHJvdWdoXG4gIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGEuZ2V0RW50aXR5KCkgPT09IGIuZ2V0RW50aXR5KCk7XG4gIH0sIC8vICdpc0VxdWFsJyBjYWxsYmFja1xuICBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50LmdldEVudGl0eSgpID09PSBlbnRpdHlLZXk7XG4gIH0sIC8vICdmaWx0ZXInIGNhbGxiYWNrXG4gIGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgLy8gJ2ZvdW5kJyBjYWxsYmFja1xuICAgIGlmIChzdGFydCA8PSBvZmZzZXQgJiYgZW5kID49IG9mZnNldCkge1xuICAgICAgLy8gdGhpcyBlbnRpdHkgb3ZlcmxhcHMgdGhlIG9mZnNldCBpbmRleFxuICAgICAgcmVtb3ZhbFJhbmdlID0ge1xuICAgICAgICBzdGFydDogc3RhcnQsXG4gICAgICAgIGVuZDogZW5kXG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG4gICEodHlwZW9mIHJlbW92YWxSYW5nZSA9PT0gJ29iamVjdCcpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnUmVtb3ZhbCByYW5nZSBtdXN0IGV4aXN0IHdpdGhpbiBjaGFyYWN0ZXIgbGlzdC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiByZW1vdmFsUmFuZ2U7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUZvckJsb2NrKGVudGl0eU1hcCwgYmxvY2ssIG9mZnNldCkge1xuICB2YXIgY2hhcnMgPSBibG9jay5nZXRDaGFyYWN0ZXJMaXN0KCk7XG4gIHZhciBjaGFyQmVmb3JlID0gb2Zmc2V0ID4gMCA/IGNoYXJzLmdldChvZmZzZXQgLSAxKSA6IHVuZGVmaW5lZDtcbiAgdmFyIGNoYXJBZnRlciA9IG9mZnNldCA8IGNoYXJzLmNvdW50KCkgPyBjaGFycy5nZXQob2Zmc2V0KSA6IHVuZGVmaW5lZDtcbiAgdmFyIGVudGl0eUJlZm9yZUN1cnNvciA9IGNoYXJCZWZvcmUgPyBjaGFyQmVmb3JlLmdldEVudGl0eSgpIDogdW5kZWZpbmVkO1xuICB2YXIgZW50aXR5QWZ0ZXJDdXJzb3IgPSBjaGFyQWZ0ZXIgPyBjaGFyQWZ0ZXIuZ2V0RW50aXR5KCkgOiB1bmRlZmluZWQ7XG5cbiAgaWYgKGVudGl0eUFmdGVyQ3Vyc29yICYmIGVudGl0eUFmdGVyQ3Vyc29yID09PSBlbnRpdHlCZWZvcmVDdXJzb3IpIHtcbiAgICB2YXIgZW50aXR5ID0gZW50aXR5TWFwLl9fZ2V0KGVudGl0eUFmdGVyQ3Vyc29yKTtcblxuICAgIGlmIChlbnRpdHkuZ2V0TXV0YWJpbGl0eSgpICE9PSAnTVVUQUJMRScpIHtcbiAgICAgIHZhciBfZ2V0UmVtb3ZhbFJhbmdlID0gZ2V0UmVtb3ZhbFJhbmdlKGNoYXJzLCBlbnRpdHlBZnRlckN1cnNvciwgb2Zmc2V0KSxcbiAgICAgICAgICBzdGFydCA9IF9nZXRSZW1vdmFsUmFuZ2Uuc3RhcnQsXG4gICAgICAgICAgZW5kID0gX2dldFJlbW92YWxSYW5nZS5lbmQ7XG5cbiAgICAgIHZhciBjdXJyZW50O1xuXG4gICAgICB3aGlsZSAoc3RhcnQgPCBlbmQpIHtcbiAgICAgICAgY3VycmVudCA9IGNoYXJzLmdldChzdGFydCk7XG4gICAgICAgIGNoYXJzID0gY2hhcnMuc2V0KHN0YXJ0LCBDaGFyYWN0ZXJNZXRhZGF0YS5hcHBseUVudGl0eShjdXJyZW50LCBudWxsKSk7XG4gICAgICAgIHN0YXJ0Kys7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBibG9jay5zZXQoJ2NoYXJhY3Rlckxpc3QnLCBjaGFycyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJsb2NrO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlbW92ZUVudGl0aWVzQXRFZGdlczsiXSwibmFtZXMiOlsiQ2hhcmFjdGVyTWV0YWRhdGEiLCJyZXF1aXJlIiwiZmluZFJhbmdlc0ltbXV0YWJsZSIsImludmFyaWFudCIsInJlbW92ZUVudGl0aWVzQXRFZGdlcyIsImNvbnRlbnRTdGF0ZSIsInNlbGVjdGlvblN0YXRlIiwiYmxvY2tNYXAiLCJnZXRCbG9ja01hcCIsImVudGl0eU1hcCIsImdldEVudGl0eU1hcCIsInVwZGF0ZWRCbG9ja3MiLCJzdGFydEtleSIsImdldFN0YXJ0S2V5Iiwic3RhcnRPZmZzZXQiLCJnZXRTdGFydE9mZnNldCIsInN0YXJ0QmxvY2siLCJnZXQiLCJ1cGRhdGVkU3RhcnQiLCJyZW1vdmVGb3JCbG9jayIsImVuZEtleSIsImdldEVuZEtleSIsImVuZE9mZnNldCIsImdldEVuZE9mZnNldCIsImVuZEJsb2NrIiwidXBkYXRlZEVuZCIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJzZXQiLCJtZXJnZSIsInNlbGVjdGlvbkFmdGVyIiwiZ2V0UmVtb3ZhbFJhbmdlIiwiY2hhcmFjdGVycyIsImVudGl0eUtleSIsIm9mZnNldCIsInJlbW92YWxSYW5nZSIsImEiLCJiIiwiZ2V0RW50aXR5IiwiZWxlbWVudCIsInN0YXJ0IiwiZW5kIiwicHJvY2VzcyIsImJsb2NrIiwiY2hhcnMiLCJnZXRDaGFyYWN0ZXJMaXN0IiwiY2hhckJlZm9yZSIsInVuZGVmaW5lZCIsImNoYXJBZnRlciIsImNvdW50IiwiZW50aXR5QmVmb3JlQ3Vyc29yIiwiZW50aXR5QWZ0ZXJDdXJzb3IiLCJlbnRpdHkiLCJfX2dldCIsImdldE11dGFiaWxpdHkiLCJfZ2V0UmVtb3ZhbFJhbmdlIiwiY3VycmVudCIsImFwcGx5RW50aXR5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/removeEntitiesAtEdges.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/removeRangeFromContentState.js":
/*!******************************************************************!*\
  !*** ./node_modules/draft-js/lib/removeRangeFromContentState.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar ContentBlockNode = __webpack_require__(/*! ./ContentBlockNode */ \"(ssr)/./node_modules/draft-js/lib/ContentBlockNode.js\");\nvar getNextDelimiterBlockKey = __webpack_require__(/*! ./getNextDelimiterBlockKey */ \"(ssr)/./node_modules/draft-js/lib/getNextDelimiterBlockKey.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar List = Immutable.List, Map = Immutable.Map;\nvar transformBlock = function transformBlock(key, blockMap, func) {\n    if (!key) {\n        return;\n    }\n    var block = blockMap.get(key);\n    if (!block) {\n        return;\n    }\n    blockMap.set(key, func(block));\n};\n/**\n * Ancestors needs to be preserved when there are non selected\n * children to make sure we do not leave any orphans behind\n */ var getAncestorsKeys = function getAncestorsKeys(blockKey, blockMap) {\n    var parents = [];\n    if (!blockKey) {\n        return parents;\n    }\n    var blockNode = blockMap.get(blockKey);\n    while(blockNode && blockNode.getParentKey()){\n        var parentKey = blockNode.getParentKey();\n        if (parentKey) {\n            parents.push(parentKey);\n        }\n        blockNode = parentKey ? blockMap.get(parentKey) : null;\n    }\n    return parents;\n};\n/**\n * Get all next delimiter keys until we hit a root delimiter and return\n * an array of key references\n */ var getNextDelimitersBlockKeys = function getNextDelimitersBlockKeys(block, blockMap) {\n    var nextDelimiters = [];\n    if (!block) {\n        return nextDelimiters;\n    }\n    var nextDelimiter = getNextDelimiterBlockKey(block, blockMap);\n    while(nextDelimiter && blockMap.get(nextDelimiter)){\n        var _block = blockMap.get(nextDelimiter);\n        nextDelimiters.push(nextDelimiter); // we do not need to keep checking all root node siblings, just the first occurance\n        nextDelimiter = _block.getParentKey() ? getNextDelimiterBlockKey(_block, blockMap) : null;\n    }\n    return nextDelimiters;\n};\nvar getNextValidSibling = function getNextValidSibling(block, blockMap, originalBlockMap) {\n    if (!block) {\n        return null;\n    } // note that we need to make sure we refer to the original block since this\n    // function is called within a withMutations\n    var nextValidSiblingKey = originalBlockMap.get(block.getKey()).getNextSiblingKey();\n    while(nextValidSiblingKey && !blockMap.get(nextValidSiblingKey)){\n        nextValidSiblingKey = originalBlockMap.get(nextValidSiblingKey).getNextSiblingKey() || null;\n    }\n    return nextValidSiblingKey;\n};\nvar getPrevValidSibling = function getPrevValidSibling(block, blockMap, originalBlockMap) {\n    if (!block) {\n        return null;\n    } // note that we need to make sure we refer to the original block since this\n    // function is called within a withMutations\n    var prevValidSiblingKey = originalBlockMap.get(block.getKey()).getPrevSiblingKey();\n    while(prevValidSiblingKey && !blockMap.get(prevValidSiblingKey)){\n        prevValidSiblingKey = originalBlockMap.get(prevValidSiblingKey).getPrevSiblingKey() || null;\n    }\n    return prevValidSiblingKey;\n};\nvar updateBlockMapLinks = function updateBlockMapLinks(blockMap, startBlock, endBlock, originalBlockMap) {\n    return blockMap.withMutations(function(blocks) {\n        // update start block if its retained\n        transformBlock(startBlock.getKey(), blocks, function(block) {\n            return block.merge({\n                nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\n                prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n            });\n        }); // update endblock if its retained\n        transformBlock(endBlock.getKey(), blocks, function(block) {\n            return block.merge({\n                nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\n                prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n            });\n        }); // update start block parent ancestors\n        getAncestorsKeys(startBlock.getKey(), originalBlockMap).forEach(function(parentKey) {\n            return transformBlock(parentKey, blocks, function(block) {\n                return block.merge({\n                    children: block.getChildKeys().filter(function(key) {\n                        return blocks.get(key);\n                    }),\n                    nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\n                    prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n                });\n            });\n        }); // update start block next - can only happen if startBlock == endBlock\n        transformBlock(startBlock.getNextSiblingKey(), blocks, function(block) {\n            return block.merge({\n                prevSibling: startBlock.getPrevSiblingKey()\n            });\n        }); // update start block prev\n        transformBlock(startBlock.getPrevSiblingKey(), blocks, function(block) {\n            return block.merge({\n                nextSibling: getNextValidSibling(block, blocks, originalBlockMap)\n            });\n        }); // update end block next\n        transformBlock(endBlock.getNextSiblingKey(), blocks, function(block) {\n            return block.merge({\n                prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n            });\n        }); // update end block prev\n        transformBlock(endBlock.getPrevSiblingKey(), blocks, function(block) {\n            return block.merge({\n                nextSibling: endBlock.getNextSiblingKey()\n            });\n        }); // update end block parent ancestors\n        getAncestorsKeys(endBlock.getKey(), originalBlockMap).forEach(function(parentKey) {\n            transformBlock(parentKey, blocks, function(block) {\n                return block.merge({\n                    children: block.getChildKeys().filter(function(key) {\n                        return blocks.get(key);\n                    }),\n                    nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\n                    prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n                });\n            });\n        }); // update next delimiters all the way to a root delimiter\n        getNextDelimitersBlockKeys(endBlock, originalBlockMap).forEach(function(delimiterKey) {\n            return transformBlock(delimiterKey, blocks, function(block) {\n                return block.merge({\n                    nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\n                    prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n                });\n            });\n        }); // if parent (startBlock) was deleted\n        if (blockMap.get(startBlock.getKey()) == null && blockMap.get(endBlock.getKey()) != null && endBlock.getParentKey() === startBlock.getKey() && endBlock.getPrevSiblingKey() == null) {\n            var prevSiblingKey = startBlock.getPrevSiblingKey(); // endBlock becomes next sibling of parent's prevSibling\n            transformBlock(endBlock.getKey(), blocks, function(block) {\n                return block.merge({\n                    prevSibling: prevSiblingKey\n                });\n            });\n            transformBlock(prevSiblingKey, blocks, function(block) {\n                return block.merge({\n                    nextSibling: endBlock.getKey()\n                });\n            }); // Update parent for previous parent's children, and children for that parent\n            var prevSibling = prevSiblingKey ? blockMap.get(prevSiblingKey) : null;\n            var newParentKey = prevSibling ? prevSibling.getParentKey() : null;\n            startBlock.getChildKeys().forEach(function(childKey) {\n                transformBlock(childKey, blocks, function(block) {\n                    return block.merge({\n                        parent: newParentKey // set to null if there is no parent\n                    });\n                });\n            });\n            if (newParentKey != null) {\n                var newParent = blockMap.get(newParentKey);\n                transformBlock(newParentKey, blocks, function(block) {\n                    return block.merge({\n                        children: newParent.getChildKeys().concat(startBlock.getChildKeys())\n                    });\n                });\n            } // last child of deleted parent should point to next sibling\n            transformBlock(startBlock.getChildKeys().find(function(key) {\n                var block = blockMap.get(key);\n                return block.getNextSiblingKey() === null;\n            }), blocks, function(block) {\n                return block.merge({\n                    nextSibling: startBlock.getNextSiblingKey()\n                });\n            });\n        }\n    });\n};\nvar removeRangeFromContentState = function removeRangeFromContentState(contentState, selectionState) {\n    if (selectionState.isCollapsed()) {\n        return contentState;\n    }\n    var blockMap = contentState.getBlockMap();\n    var startKey = selectionState.getStartKey();\n    var startOffset = selectionState.getStartOffset();\n    var endKey = selectionState.getEndKey();\n    var endOffset = selectionState.getEndOffset();\n    var startBlock = blockMap.get(startKey);\n    var endBlock = blockMap.get(endKey); // we assume that ContentBlockNode and ContentBlocks are not mixed together\n    var isExperimentalTreeBlock = startBlock instanceof ContentBlockNode; // used to retain blocks that should not be deleted to avoid orphan children\n    var parentAncestors = [];\n    if (isExperimentalTreeBlock) {\n        var endBlockchildrenKeys = endBlock.getChildKeys();\n        var endBlockAncestors = getAncestorsKeys(endKey, blockMap); // endBlock has unselected siblings so we can not remove its ancestors parents\n        if (endBlock.getNextSiblingKey()) {\n            parentAncestors = parentAncestors.concat(endBlockAncestors);\n        } // endBlock has children so can not remove this block or any of its ancestors\n        if (!endBlockchildrenKeys.isEmpty()) {\n            parentAncestors = parentAncestors.concat(endBlockAncestors.concat([\n                endKey\n            ]));\n        } // we need to retain all ancestors of the next delimiter block\n        parentAncestors = parentAncestors.concat(getAncestorsKeys(getNextDelimiterBlockKey(endBlock, blockMap), blockMap));\n    }\n    var characterList;\n    if (startBlock === endBlock) {\n        characterList = removeFromList(startBlock.getCharacterList(), startOffset, endOffset);\n    } else {\n        characterList = startBlock.getCharacterList().slice(0, startOffset).concat(endBlock.getCharacterList().slice(endOffset));\n    }\n    var modifiedStart = startBlock.merge({\n        text: startBlock.getText().slice(0, startOffset) + endBlock.getText().slice(endOffset),\n        characterList: characterList\n    }); // If cursor (collapsed) is at the start of the first child, delete parent\n    // instead of child\n    var shouldDeleteParent = isExperimentalTreeBlock && startOffset === 0 && endOffset === 0 && endBlock.getParentKey() === startKey && endBlock.getPrevSiblingKey() == null;\n    var newBlocks = shouldDeleteParent ? Map([\n        [\n            startKey,\n            null\n        ]\n    ]) : blockMap.toSeq().skipUntil(function(_, k) {\n        return k === startKey;\n    }).takeUntil(function(_, k) {\n        return k === endKey;\n    }).filter(function(_, k) {\n        return parentAncestors.indexOf(k) === -1;\n    }).concat(Map([\n        [\n            endKey,\n            null\n        ]\n    ])).map(function(_, k) {\n        return k === startKey ? modifiedStart : null;\n    });\n    var updatedBlockMap = blockMap.merge(newBlocks).filter(function(block) {\n        return !!block;\n    }); // Only update tree block pointers if the range is across blocks\n    if (isExperimentalTreeBlock && startBlock !== endBlock) {\n        updatedBlockMap = updateBlockMapLinks(updatedBlockMap, startBlock, endBlock, blockMap);\n    }\n    return contentState.merge({\n        blockMap: updatedBlockMap,\n        selectionBefore: selectionState,\n        selectionAfter: selectionState.merge({\n            anchorKey: startKey,\n            anchorOffset: startOffset,\n            focusKey: startKey,\n            focusOffset: startOffset,\n            isBackward: false\n        })\n    });\n};\n/**\n * Maintain persistence for target list when removing characters on the\n * head and tail of the character list.\n */ var removeFromList = function removeFromList(targetList, startOffset, endOffset) {\n    if (startOffset === 0) {\n        while(startOffset < endOffset){\n            targetList = targetList.shift();\n            startOffset++;\n        }\n    } else if (endOffset === targetList.count()) {\n        while(endOffset > startOffset){\n            targetList = targetList.pop();\n            endOffset--;\n        }\n    } else {\n        var head = targetList.slice(0, startOffset);\n        var tail = targetList.slice(endOffset);\n        targetList = head.concat(tail).toList();\n    }\n    return targetList;\n};\nmodule.exports = removeRangeFromContentState;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/removeRangeFromContentState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/removeTextWithStrategy.js":
/*!*************************************************************!*\
  !*** ./node_modules/draft-js/lib/removeTextWithStrategy.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DraftModifier = __webpack_require__(/*! ./DraftModifier */ \"(ssr)/./node_modules/draft-js/lib/DraftModifier.js\");\nvar gkx = __webpack_require__(/*! ./gkx */ \"(ssr)/./node_modules/draft-js/lib/gkx.js\");\nvar experimentalTreeDataSupport = gkx(\"draft_tree_data_support\");\n/**\n * For a collapsed selection state, remove text based on the specified strategy.\n * If the selection state is not collapsed, remove the entire selected range.\n */ function removeTextWithStrategy(editorState, strategy, direction) {\n    var selection = editorState.getSelection();\n    var content = editorState.getCurrentContent();\n    var target = selection;\n    var anchorKey = selection.getAnchorKey();\n    var focusKey = selection.getFocusKey();\n    var anchorBlock = content.getBlockForKey(anchorKey);\n    if (experimentalTreeDataSupport) {\n        if (direction === \"forward\") {\n            if (anchorKey !== focusKey) {\n                // For now we ignore forward delete across blocks,\n                // if there is demand for this we will implement it.\n                return content;\n            }\n        }\n    }\n    if (selection.isCollapsed()) {\n        if (direction === \"forward\") {\n            if (editorState.isSelectionAtEndOfContent()) {\n                return content;\n            }\n            if (experimentalTreeDataSupport) {\n                var isAtEndOfBlock = selection.getAnchorOffset() === content.getBlockForKey(anchorKey).getLength();\n                if (isAtEndOfBlock) {\n                    var anchorBlockSibling = content.getBlockForKey(anchorBlock.nextSibling);\n                    if (!anchorBlockSibling || anchorBlockSibling.getLength() === 0) {\n                        // For now we ignore forward delete at the end of a block,\n                        // if there is demand for this we will implement it.\n                        return content;\n                    }\n                }\n            }\n        } else if (editorState.isSelectionAtStartOfContent()) {\n            return content;\n        }\n        target = strategy(editorState);\n        if (target === selection) {\n            return content;\n        }\n    }\n    return DraftModifier.removeRange(content, target, direction);\n}\nmodule.exports = removeTextWithStrategy;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL3JlbW92ZVRleHRXaXRoU3RyYXRlZ3kuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztDQVNDLEdBQ0Q7QUFFQSxJQUFJQSxnQkFBZ0JDLG1CQUFPQSxDQUFDLDJFQUFpQjtBQUU3QyxJQUFJQyxNQUFNRCxtQkFBT0EsQ0FBQyx1REFBTztBQUV6QixJQUFJRSw4QkFBOEJELElBQUk7QUFDdEM7OztDQUdDLEdBRUQsU0FBU0UsdUJBQXVCQyxXQUFXLEVBQUVDLFFBQVEsRUFBRUMsU0FBUztJQUM5RCxJQUFJQyxZQUFZSCxZQUFZSSxZQUFZO0lBQ3hDLElBQUlDLFVBQVVMLFlBQVlNLGlCQUFpQjtJQUMzQyxJQUFJQyxTQUFTSjtJQUNiLElBQUlLLFlBQVlMLFVBQVVNLFlBQVk7SUFDdEMsSUFBSUMsV0FBV1AsVUFBVVEsV0FBVztJQUNwQyxJQUFJQyxjQUFjUCxRQUFRUSxjQUFjLENBQUNMO0lBRXpDLElBQUlWLDZCQUE2QjtRQUMvQixJQUFJSSxjQUFjLFdBQVc7WUFDM0IsSUFBSU0sY0FBY0UsVUFBVTtnQkFDMUIsa0RBQWtEO2dCQUNsRCxvREFBb0Q7Z0JBQ3BELE9BQU9MO1lBQ1Q7UUFDRjtJQUNGO0lBRUEsSUFBSUYsVUFBVVcsV0FBVyxJQUFJO1FBQzNCLElBQUlaLGNBQWMsV0FBVztZQUMzQixJQUFJRixZQUFZZSx5QkFBeUIsSUFBSTtnQkFDM0MsT0FBT1Y7WUFDVDtZQUVBLElBQUlQLDZCQUE2QjtnQkFDL0IsSUFBSWtCLGlCQUFpQmIsVUFBVWMsZUFBZSxPQUFPWixRQUFRUSxjQUFjLENBQUNMLFdBQVdVLFNBQVM7Z0JBRWhHLElBQUlGLGdCQUFnQjtvQkFDbEIsSUFBSUcscUJBQXFCZCxRQUFRUSxjQUFjLENBQUNELFlBQVlRLFdBQVc7b0JBRXZFLElBQUksQ0FBQ0Qsc0JBQXNCQSxtQkFBbUJELFNBQVMsT0FBTyxHQUFHO3dCQUMvRCwwREFBMEQ7d0JBQzFELG9EQUFvRDt3QkFDcEQsT0FBT2I7b0JBQ1Q7Z0JBQ0Y7WUFDRjtRQUNGLE9BQU8sSUFBSUwsWUFBWXFCLDJCQUEyQixJQUFJO1lBQ3BELE9BQU9oQjtRQUNUO1FBRUFFLFNBQVNOLFNBQVNEO1FBRWxCLElBQUlPLFdBQVdKLFdBQVc7WUFDeEIsT0FBT0U7UUFDVDtJQUNGO0lBRUEsT0FBT1YsY0FBYzJCLFdBQVcsQ0FBQ2pCLFNBQVNFLFFBQVFMO0FBQ3BEO0FBRUFxQixPQUFPQyxPQUFPLEdBQUd6QiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9yZW1vdmVUZXh0V2l0aFN0cmF0ZWd5LmpzPzUyZGYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBcbiAqIEBlbWFpbHMgb25jYWxsK2RyYWZ0X2pzXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIERyYWZ0TW9kaWZpZXIgPSByZXF1aXJlKFwiLi9EcmFmdE1vZGlmaWVyXCIpO1xuXG52YXIgZ2t4ID0gcmVxdWlyZShcIi4vZ2t4XCIpO1xuXG52YXIgZXhwZXJpbWVudGFsVHJlZURhdGFTdXBwb3J0ID0gZ2t4KCdkcmFmdF90cmVlX2RhdGFfc3VwcG9ydCcpO1xuLyoqXG4gKiBGb3IgYSBjb2xsYXBzZWQgc2VsZWN0aW9uIHN0YXRlLCByZW1vdmUgdGV4dCBiYXNlZCBvbiB0aGUgc3BlY2lmaWVkIHN0cmF0ZWd5LlxuICogSWYgdGhlIHNlbGVjdGlvbiBzdGF0ZSBpcyBub3QgY29sbGFwc2VkLCByZW1vdmUgdGhlIGVudGlyZSBzZWxlY3RlZCByYW5nZS5cbiAqL1xuXG5mdW5jdGlvbiByZW1vdmVUZXh0V2l0aFN0cmF0ZWd5KGVkaXRvclN0YXRlLCBzdHJhdGVneSwgZGlyZWN0aW9uKSB7XG4gIHZhciBzZWxlY3Rpb24gPSBlZGl0b3JTdGF0ZS5nZXRTZWxlY3Rpb24oKTtcbiAgdmFyIGNvbnRlbnQgPSBlZGl0b3JTdGF0ZS5nZXRDdXJyZW50Q29udGVudCgpO1xuICB2YXIgdGFyZ2V0ID0gc2VsZWN0aW9uO1xuICB2YXIgYW5jaG9yS2V5ID0gc2VsZWN0aW9uLmdldEFuY2hvcktleSgpO1xuICB2YXIgZm9jdXNLZXkgPSBzZWxlY3Rpb24uZ2V0Rm9jdXNLZXkoKTtcbiAgdmFyIGFuY2hvckJsb2NrID0gY29udGVudC5nZXRCbG9ja0ZvcktleShhbmNob3JLZXkpO1xuXG4gIGlmIChleHBlcmltZW50YWxUcmVlRGF0YVN1cHBvcnQpIHtcbiAgICBpZiAoZGlyZWN0aW9uID09PSAnZm9yd2FyZCcpIHtcbiAgICAgIGlmIChhbmNob3JLZXkgIT09IGZvY3VzS2V5KSB7XG4gICAgICAgIC8vIEZvciBub3cgd2UgaWdub3JlIGZvcndhcmQgZGVsZXRlIGFjcm9zcyBibG9ja3MsXG4gICAgICAgIC8vIGlmIHRoZXJlIGlzIGRlbWFuZCBmb3IgdGhpcyB3ZSB3aWxsIGltcGxlbWVudCBpdC5cbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHNlbGVjdGlvbi5pc0NvbGxhcHNlZCgpKSB7XG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gJ2ZvcndhcmQnKSB7XG4gICAgICBpZiAoZWRpdG9yU3RhdGUuaXNTZWxlY3Rpb25BdEVuZE9mQ29udGVudCgpKSB7XG4gICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgfVxuXG4gICAgICBpZiAoZXhwZXJpbWVudGFsVHJlZURhdGFTdXBwb3J0KSB7XG4gICAgICAgIHZhciBpc0F0RW5kT2ZCbG9jayA9IHNlbGVjdGlvbi5nZXRBbmNob3JPZmZzZXQoKSA9PT0gY29udGVudC5nZXRCbG9ja0ZvcktleShhbmNob3JLZXkpLmdldExlbmd0aCgpO1xuXG4gICAgICAgIGlmIChpc0F0RW5kT2ZCbG9jaykge1xuICAgICAgICAgIHZhciBhbmNob3JCbG9ja1NpYmxpbmcgPSBjb250ZW50LmdldEJsb2NrRm9yS2V5KGFuY2hvckJsb2NrLm5leHRTaWJsaW5nKTtcblxuICAgICAgICAgIGlmICghYW5jaG9yQmxvY2tTaWJsaW5nIHx8IGFuY2hvckJsb2NrU2libGluZy5nZXRMZW5ndGgoKSA9PT0gMCkge1xuICAgICAgICAgICAgLy8gRm9yIG5vdyB3ZSBpZ25vcmUgZm9yd2FyZCBkZWxldGUgYXQgdGhlIGVuZCBvZiBhIGJsb2NrLFxuICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgZGVtYW5kIGZvciB0aGlzIHdlIHdpbGwgaW1wbGVtZW50IGl0LlxuICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlZGl0b3JTdGF0ZS5pc1NlbGVjdGlvbkF0U3RhcnRPZkNvbnRlbnQoKSkge1xuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfVxuXG4gICAgdGFyZ2V0ID0gc3RyYXRlZ3koZWRpdG9yU3RhdGUpO1xuXG4gICAgaWYgKHRhcmdldCA9PT0gc2VsZWN0aW9uKSB7XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gRHJhZnRNb2RpZmllci5yZW1vdmVSYW5nZShjb250ZW50LCB0YXJnZXQsIGRpcmVjdGlvbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVtb3ZlVGV4dFdpdGhTdHJhdGVneTsiXSwibmFtZXMiOlsiRHJhZnRNb2RpZmllciIsInJlcXVpcmUiLCJna3giLCJleHBlcmltZW50YWxUcmVlRGF0YVN1cHBvcnQiLCJyZW1vdmVUZXh0V2l0aFN0cmF0ZWd5IiwiZWRpdG9yU3RhdGUiLCJzdHJhdGVneSIsImRpcmVjdGlvbiIsInNlbGVjdGlvbiIsImdldFNlbGVjdGlvbiIsImNvbnRlbnQiLCJnZXRDdXJyZW50Q29udGVudCIsInRhcmdldCIsImFuY2hvcktleSIsImdldEFuY2hvcktleSIsImZvY3VzS2V5IiwiZ2V0Rm9jdXNLZXkiLCJhbmNob3JCbG9jayIsImdldEJsb2NrRm9yS2V5IiwiaXNDb2xsYXBzZWQiLCJpc1NlbGVjdGlvbkF0RW5kT2ZDb250ZW50IiwiaXNBdEVuZE9mQmxvY2siLCJnZXRBbmNob3JPZmZzZXQiLCJnZXRMZW5ndGgiLCJhbmNob3JCbG9ja1NpYmxpbmciLCJuZXh0U2libGluZyIsImlzU2VsZWN0aW9uQXRTdGFydE9mQ29udGVudCIsInJlbW92ZVJhbmdlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/removeTextWithStrategy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/sanitizeDraftText.js":
/*!********************************************************!*\
  !*** ./node_modules/draft-js/lib/sanitizeDraftText.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar REGEX_BLOCK_DELIMITER = new RegExp(\"\\r\", \"g\");\nfunction sanitizeDraftText(input) {\n    return input.replace(REGEX_BLOCK_DELIMITER, \"\");\n}\nmodule.exports = sanitizeDraftText;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL3Nhbml0aXplRHJhZnRUZXh0LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsd0JBQXdCLElBQUlDLE9BQU8sTUFBTTtBQUU3QyxTQUFTQyxrQkFBa0JDLEtBQUs7SUFDOUIsT0FBT0EsTUFBTUMsT0FBTyxDQUFDSix1QkFBdUI7QUFDOUM7QUFFQUssT0FBT0MsT0FBTyxHQUFHSiIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZWwtaGFydmVzdGVyLy4vbm9kZV9tb2R1bGVzL2RyYWZ0LWpzL2xpYi9zYW5pdGl6ZURyYWZ0VGV4dC5qcz9jYTBjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogXG4gKiBAZW1haWxzIG9uY2FsbCtkcmFmdF9qc1xuICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSRUdFWF9CTE9DS19ERUxJTUlURVIgPSBuZXcgUmVnRXhwKCdcXHInLCAnZycpO1xuXG5mdW5jdGlvbiBzYW5pdGl6ZURyYWZ0VGV4dChpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZShSRUdFWF9CTE9DS19ERUxJTUlURVIsICcnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzYW5pdGl6ZURyYWZ0VGV4dDsiXSwibmFtZXMiOlsiUkVHRVhfQkxPQ0tfREVMSU1JVEVSIiwiUmVnRXhwIiwic2FuaXRpemVEcmFmdFRleHQiLCJpbnB1dCIsInJlcGxhY2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/sanitizeDraftText.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/setDraftEditorSelection.js":
/*!**************************************************************!*\
  !*** ./node_modules/draft-js/lib/setDraftEditorSelection.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar DraftEffects = __webpack_require__(/*! ./DraftEffects */ \"(ssr)/./node_modules/draft-js/lib/DraftEffects.js\");\nvar DraftJsDebugLogging = __webpack_require__(/*! ./DraftJsDebugLogging */ \"(ssr)/./node_modules/draft-js/lib/DraftJsDebugLogging.js\");\nvar UserAgent = __webpack_require__(/*! fbjs/lib/UserAgent */ \"(ssr)/./node_modules/fbjs/lib/UserAgent.js\");\nvar containsNode = __webpack_require__(/*! fbjs/lib/containsNode */ \"(ssr)/./node_modules/fbjs/lib/containsNode.js\");\nvar getActiveElement = __webpack_require__(/*! fbjs/lib/getActiveElement */ \"(ssr)/./node_modules/fbjs/lib/getActiveElement.js\");\nvar getCorrectDocumentFromNode = __webpack_require__(/*! ./getCorrectDocumentFromNode */ \"(ssr)/./node_modules/draft-js/lib/getCorrectDocumentFromNode.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar isElement = __webpack_require__(/*! ./isElement */ \"(ssr)/./node_modules/draft-js/lib/isElement.js\");\nvar isIE = UserAgent.isBrowser(\"IE\");\nfunction getAnonymizedDOM(node, getNodeLabels) {\n    if (!node) {\n        return \"[empty]\";\n    }\n    var anonymized = anonymizeTextWithin(node, getNodeLabels);\n    if (anonymized.nodeType === Node.TEXT_NODE) {\n        return anonymized.textContent;\n    }\n    !isElement(anonymized) ?  true ? invariant(false, \"Node must be an Element if it is not a text node.\") : 0 : void 0;\n    var castedElement = anonymized;\n    return castedElement.outerHTML;\n}\nfunction anonymizeTextWithin(node, getNodeLabels) {\n    var labels = getNodeLabels !== undefined ? getNodeLabels(node) : [];\n    if (node.nodeType === Node.TEXT_NODE) {\n        var length = node.textContent.length;\n        return getCorrectDocumentFromNode(node).createTextNode(\"[text \" + length + (labels.length ? \" | \" + labels.join(\", \") : \"\") + \"]\");\n    }\n    var clone = node.cloneNode();\n    if (clone.nodeType === 1 && labels.length) {\n        clone.setAttribute(\"data-labels\", labels.join(\", \"));\n    }\n    var childNodes = node.childNodes;\n    for(var ii = 0; ii < childNodes.length; ii++){\n        clone.appendChild(anonymizeTextWithin(childNodes[ii], getNodeLabels));\n    }\n    return clone;\n}\nfunction getAnonymizedEditorDOM(node, getNodeLabels) {\n    // grabbing the DOM content of the Draft editor\n    var currentNode = node; // this should only be used after checking with isElement\n    var castedNode = currentNode;\n    while(currentNode){\n        if (isElement(currentNode) && castedNode.hasAttribute(\"contenteditable\")) {\n            // found the Draft editor container\n            return getAnonymizedDOM(currentNode, getNodeLabels);\n        } else {\n            currentNode = currentNode.parentNode;\n            castedNode = currentNode;\n        }\n    }\n    return \"Could not find contentEditable parent of node\";\n}\nfunction getNodeLength(node) {\n    return node.nodeValue === null ? node.childNodes.length : node.nodeValue.length;\n}\n/**\n * In modern non-IE browsers, we can support both forward and backward\n * selections.\n *\n * Note: IE10+ supports the Selection object, but it does not support\n * the `extend` method, which means that even in modern IE, it's not possible\n * to programatically create a backward selection. Thus, for all IE\n * versions, we use the old IE API to create our selections.\n */ function setDraftEditorSelection(selectionState, node, blockKey, nodeStart, nodeEnd) {\n    // It's possible that the editor has been removed from the DOM but\n    // our selection code doesn't know it yet. Forcing selection in\n    // this case may lead to errors, so just bail now.\n    var documentObject = getCorrectDocumentFromNode(node);\n    if (!containsNode(documentObject.documentElement, node)) {\n        return;\n    }\n    var selection = documentObject.defaultView.getSelection();\n    var anchorKey = selectionState.getAnchorKey();\n    var anchorOffset = selectionState.getAnchorOffset();\n    var focusKey = selectionState.getFocusKey();\n    var focusOffset = selectionState.getFocusOffset();\n    var isBackward = selectionState.getIsBackward(); // IE doesn't support backward selection. Swap key/offset pairs.\n    if (!selection.extend && isBackward) {\n        var tempKey = anchorKey;\n        var tempOffset = anchorOffset;\n        anchorKey = focusKey;\n        anchorOffset = focusOffset;\n        focusKey = tempKey;\n        focusOffset = tempOffset;\n        isBackward = false;\n    }\n    var hasAnchor = anchorKey === blockKey && nodeStart <= anchorOffset && nodeEnd >= anchorOffset;\n    var hasFocus = focusKey === blockKey && nodeStart <= focusOffset && nodeEnd >= focusOffset; // If the selection is entirely bound within this node, set the selection\n    // and be done.\n    if (hasAnchor && hasFocus) {\n        selection.removeAllRanges();\n        addPointToSelection(selection, node, anchorOffset - nodeStart, selectionState);\n        addFocusToSelection(selection, node, focusOffset - nodeStart, selectionState);\n        return;\n    }\n    if (!isBackward) {\n        // If the anchor is within this node, set the range start.\n        if (hasAnchor) {\n            selection.removeAllRanges();\n            addPointToSelection(selection, node, anchorOffset - nodeStart, selectionState);\n        } // If the focus is within this node, we can assume that we have\n        // already set the appropriate start range on the selection, and\n        // can simply extend the selection.\n        if (hasFocus) {\n            addFocusToSelection(selection, node, focusOffset - nodeStart, selectionState);\n        }\n    } else {\n        // If this node has the focus, set the selection range to be a\n        // collapsed range beginning here. Later, when we encounter the anchor,\n        // we'll use this information to extend the selection.\n        if (hasFocus) {\n            selection.removeAllRanges();\n            addPointToSelection(selection, node, focusOffset - nodeStart, selectionState);\n        } // If this node has the anchor, we may assume that the correct\n        // focus information is already stored on the selection object.\n        // We keep track of it, reset the selection range, and extend it\n        // back to the focus point.\n        if (hasAnchor) {\n            var storedFocusNode = selection.focusNode;\n            var storedFocusOffset = selection.focusOffset;\n            selection.removeAllRanges();\n            addPointToSelection(selection, node, anchorOffset - nodeStart, selectionState);\n            addFocusToSelection(selection, storedFocusNode, storedFocusOffset, selectionState);\n        }\n    }\n}\n/**\n * Extend selection towards focus point.\n */ function addFocusToSelection(selection, node, offset, selectionState) {\n    var activeElement = getActiveElement();\n    var extend = selection.extend; // containsNode returns false if node is null.\n    // Let's refine the type of this value out here so flow knows.\n    if (extend && node != null && containsNode(activeElement, node)) {\n        // If `extend` is called while another element has focus, an error is\n        // thrown. We therefore disable `extend` if the active element is somewhere\n        // other than the node we are selecting. This should only occur in Firefox,\n        // since it is the only browser to support multiple selections.\n        // See https://bugzilla.mozilla.org/show_bug.cgi?id=921444.\n        // logging to catch bug that is being reported in t16250795\n        if (offset > getNodeLength(node)) {\n            // the call to 'selection.extend' is about to throw\n            DraftJsDebugLogging.logSelectionStateFailure({\n                anonymizedDom: getAnonymizedEditorDOM(node),\n                extraParams: JSON.stringify({\n                    offset: offset\n                }),\n                selectionState: JSON.stringify(selectionState.toJS())\n            });\n        } // logging to catch bug that is being reported in t18110632\n        var nodeWasFocus = node === selection.focusNode;\n        try {\n            // Fixes some reports of \"InvalidStateError: Failed to execute 'extend' on\n            // 'Selection': This Selection object doesn't have any Ranges.\"\n            // Note: selection.extend does not exist in IE.\n            if (selection.rangeCount > 0 && selection.extend) {\n                selection.extend(node, offset);\n            }\n        } catch (e) {\n            DraftJsDebugLogging.logSelectionStateFailure({\n                anonymizedDom: getAnonymizedEditorDOM(node, function(n) {\n                    var labels = [];\n                    if (n === activeElement) {\n                        labels.push(\"active element\");\n                    }\n                    if (n === selection.anchorNode) {\n                        labels.push(\"selection anchor node\");\n                    }\n                    if (n === selection.focusNode) {\n                        labels.push(\"selection focus node\");\n                    }\n                    return labels;\n                }),\n                extraParams: JSON.stringify({\n                    activeElementName: activeElement ? activeElement.nodeName : null,\n                    nodeIsFocus: node === selection.focusNode,\n                    nodeWasFocus: nodeWasFocus,\n                    selectionRangeCount: selection.rangeCount,\n                    selectionAnchorNodeName: selection.anchorNode ? selection.anchorNode.nodeName : null,\n                    selectionAnchorOffset: selection.anchorOffset,\n                    selectionFocusNodeName: selection.focusNode ? selection.focusNode.nodeName : null,\n                    selectionFocusOffset: selection.focusOffset,\n                    message: e ? \"\" + e : null,\n                    offset: offset\n                }, null, 2),\n                selectionState: JSON.stringify(selectionState.toJS(), null, 2)\n            }); // allow the error to be thrown -\n            // better than continuing in a broken state\n            throw e;\n        }\n    } else {\n        // IE doesn't support extend. This will mean no backward selection.\n        // Extract the existing selection range and add focus to it.\n        // Additionally, clone the selection range. IE11 throws an\n        // InvalidStateError when attempting to access selection properties\n        // after the range is detached.\n        if (node && selection.rangeCount > 0) {\n            var range = selection.getRangeAt(0);\n            range.setEnd(node, offset);\n            selection.addRange(range.cloneRange());\n        }\n    }\n}\nfunction addPointToSelection(selection, node, offset, selectionState) {\n    var range = getCorrectDocumentFromNode(node).createRange(); // logging to catch bug that is being reported in t16250795\n    if (offset > getNodeLength(node)) {\n        // in this case we know that the call to 'range.setStart' is about to throw\n        DraftJsDebugLogging.logSelectionStateFailure({\n            anonymizedDom: getAnonymizedEditorDOM(node),\n            extraParams: JSON.stringify({\n                offset: offset\n            }),\n            selectionState: JSON.stringify(selectionState.toJS())\n        });\n        DraftEffects.handleExtensionCausedError();\n    }\n    range.setStart(node, offset); // IE sometimes throws Unspecified Error when trying to addRange\n    if (isIE) {\n        try {\n            selection.addRange(range);\n        } catch (e) {\n            if (true) {\n                /* eslint-disable-next-line no-console */ console.warn(\"Call to selection.addRange() threw exception: \", e);\n            }\n        }\n    } else {\n        selection.addRange(range);\n    }\n}\nmodule.exports = {\n    setDraftEditorSelection: setDraftEditorSelection,\n    addFocusToSelection: addFocusToSelection\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/setDraftEditorSelection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/splitBlockInContentState.js":
/*!***************************************************************!*\
  !*** ./node_modules/draft-js/lib/splitBlockInContentState.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar ContentBlockNode = __webpack_require__(/*! ./ContentBlockNode */ \"(ssr)/./node_modules/draft-js/lib/ContentBlockNode.js\");\nvar generateRandomKey = __webpack_require__(/*! ./generateRandomKey */ \"(ssr)/./node_modules/draft-js/lib/generateRandomKey.js\");\nvar Immutable = __webpack_require__(/*! immutable */ \"(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\");\nvar invariant = __webpack_require__(/*! fbjs/lib/invariant */ \"(ssr)/./node_modules/fbjs/lib/invariant.js\");\nvar modifyBlockForContentState = __webpack_require__(/*! ./modifyBlockForContentState */ \"(ssr)/./node_modules/draft-js/lib/modifyBlockForContentState.js\");\nvar List = Immutable.List, Map = Immutable.Map;\nvar transformBlock = function transformBlock(key, blockMap, func) {\n    if (!key) {\n        return;\n    }\n    var block = blockMap.get(key);\n    if (!block) {\n        return;\n    }\n    blockMap.set(key, func(block));\n};\nvar updateBlockMapLinks = function updateBlockMapLinks(blockMap, originalBlock, belowBlock) {\n    return blockMap.withMutations(function(blocks) {\n        var originalBlockKey = originalBlock.getKey();\n        var belowBlockKey = belowBlock.getKey(); // update block parent\n        transformBlock(originalBlock.getParentKey(), blocks, function(block) {\n            var parentChildrenList = block.getChildKeys();\n            var insertionIndex = parentChildrenList.indexOf(originalBlockKey) + 1;\n            var newChildrenArray = parentChildrenList.toArray();\n            newChildrenArray.splice(insertionIndex, 0, belowBlockKey);\n            return block.merge({\n                children: List(newChildrenArray)\n            });\n        }); // update original next block\n        transformBlock(originalBlock.getNextSiblingKey(), blocks, function(block) {\n            return block.merge({\n                prevSibling: belowBlockKey\n            });\n        }); // update original block\n        transformBlock(originalBlockKey, blocks, function(block) {\n            return block.merge({\n                nextSibling: belowBlockKey\n            });\n        }); // update below block\n        transformBlock(belowBlockKey, blocks, function(block) {\n            return block.merge({\n                prevSibling: originalBlockKey\n            });\n        });\n    });\n};\nvar splitBlockInContentState = function splitBlockInContentState(contentState, selectionState) {\n    !selectionState.isCollapsed() ?  true ? invariant(false, \"Selection range must be collapsed.\") : 0 : void 0;\n    var key = selectionState.getAnchorKey();\n    var blockMap = contentState.getBlockMap();\n    var blockToSplit = blockMap.get(key);\n    var text = blockToSplit.getText();\n    if (!text) {\n        var blockType = blockToSplit.getType();\n        if (blockType === \"unordered-list-item\" || blockType === \"ordered-list-item\") {\n            return modifyBlockForContentState(contentState, selectionState, function(block) {\n                return block.merge({\n                    type: \"unstyled\",\n                    depth: 0\n                });\n            });\n        }\n    }\n    var offset = selectionState.getAnchorOffset();\n    var chars = blockToSplit.getCharacterList();\n    var keyBelow = generateRandomKey();\n    var isExperimentalTreeBlock = blockToSplit instanceof ContentBlockNode;\n    var blockAbove = blockToSplit.merge({\n        text: text.slice(0, offset),\n        characterList: chars.slice(0, offset)\n    });\n    var blockBelow = blockAbove.merge({\n        key: keyBelow,\n        text: text.slice(offset),\n        characterList: chars.slice(offset),\n        data: Map()\n    });\n    var blocksBefore = blockMap.toSeq().takeUntil(function(v) {\n        return v === blockToSplit;\n    });\n    var blocksAfter = blockMap.toSeq().skipUntil(function(v) {\n        return v === blockToSplit;\n    }).rest();\n    var newBlocks = blocksBefore.concat([\n        [\n            key,\n            blockAbove\n        ],\n        [\n            keyBelow,\n            blockBelow\n        ]\n    ], blocksAfter).toOrderedMap();\n    if (isExperimentalTreeBlock) {\n        !blockToSplit.getChildKeys().isEmpty() ?  true ? invariant(false, \"ContentBlockNode must not have children\") : 0 : void 0;\n        newBlocks = updateBlockMapLinks(newBlocks, blockAbove, blockBelow);\n    }\n    return contentState.merge({\n        blockMap: newBlocks,\n        selectionBefore: selectionState,\n        selectionAfter: selectionState.merge({\n            anchorKey: keyBelow,\n            anchorOffset: 0,\n            focusKey: keyBelow,\n            focusOffset: 0,\n            isBackward: false\n        })\n    });\n};\nmodule.exports = splitBlockInContentState;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/splitBlockInContentState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/splitTextIntoTextBlocks.js":
/*!**************************************************************!*\
  !*** ./node_modules/draft-js/lib/splitTextIntoTextBlocks.js ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
eval("/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */ \nvar NEWLINE_REGEX = /\\r\\n?|\\n/g;\nfunction splitTextIntoTextBlocks(text) {\n    return text.split(NEWLINE_REGEX);\n}\nmodule.exports = splitTextIntoTextBlocks;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL3NwbGl0VGV4dEludG9UZXh0QmxvY2tzLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Q0FTQyxHQUNEO0FBRUEsSUFBSUEsZ0JBQWdCO0FBRXBCLFNBQVNDLHdCQUF3QkMsSUFBSTtJQUNuQyxPQUFPQSxLQUFLQyxLQUFLLENBQUNIO0FBQ3BCO0FBRUFJLE9BQU9DLE9BQU8sR0FBR0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWVsLWhhcnZlc3Rlci8uL25vZGVfbW9kdWxlcy9kcmFmdC1qcy9saWIvc3BsaXRUZXh0SW50b1RleHRCbG9ja3MuanM/MzdlNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIFxuICogQGVtYWlscyBvbmNhbGwrZHJhZnRfanNcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgTkVXTElORV9SRUdFWCA9IC9cXHJcXG4/fFxcbi9nO1xuXG5mdW5jdGlvbiBzcGxpdFRleHRJbnRvVGV4dEJsb2Nrcyh0ZXh0KSB7XG4gIHJldHVybiB0ZXh0LnNwbGl0KE5FV0xJTkVfUkVHRVgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNwbGl0VGV4dEludG9UZXh0QmxvY2tzOyJdLCJuYW1lcyI6WyJORVdMSU5FX1JFR0VYIiwic3BsaXRUZXh0SW50b1RleHRCbG9ja3MiLCJ0ZXh0Iiwic3BsaXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/splitTextIntoTextBlocks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/lib/uuid.js":
/*!*******************************************!*\
  !*** ./node_modules/draft-js/lib/uuid.js ***!
  \*******************************************/
/***/ ((module) => {

"use strict";
eval("\n/**\n * Copyright 2004-present Facebook. All Rights Reserved.\n *\n * @typechecks\n * \n * @format\n */ /*eslint-disable no-bitwise */ /**\n * Based on the rfc4122-compliant solution posted at\n * http://stackoverflow.com/questions/105034\n */ function uuid() {\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n        var r = Math.random() * 16 | 0;\n        var v = c == \"x\" ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n    });\n}\nmodule.exports = uuid;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL3V1aWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYjs7Ozs7O0NBTUMsR0FFRCw0QkFBNEIsR0FFNUI7OztDQUdDLEdBQ0QsU0FBU0E7SUFDUCxPQUFPLHVDQUF1Q0MsT0FBTyxDQUFDLFNBQVMsU0FBVUMsQ0FBQztRQUN4RSxJQUFJQyxJQUFJQyxLQUFLQyxNQUFNLEtBQUssS0FBSztRQUM3QixJQUFJQyxJQUFJSixLQUFLLE1BQU1DLElBQUlBLElBQUksTUFBTTtRQUNqQyxPQUFPRyxFQUFFQyxRQUFRLENBQUM7SUFDcEI7QUFDRjtBQUVBQyxPQUFPQyxPQUFPLEdBQUdUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVlbC1oYXJ2ZXN0ZXIvLi9ub2RlX21vZHVsZXMvZHJhZnQtanMvbGliL3V1aWQuanM/Yjc2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAwNC1wcmVzZW50IEZhY2Vib29rLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuXG4vKmVzbGludC1kaXNhYmxlIG5vLWJpdHdpc2UgKi9cblxuLyoqXG4gKiBCYXNlZCBvbiB0aGUgcmZjNDEyMi1jb21wbGlhbnQgc29sdXRpb24gcG9zdGVkIGF0XG4gKiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEwNTAzNFxuICovXG5mdW5jdGlvbiB1dWlkKCkge1xuICByZXR1cm4gJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHZhciByID0gTWF0aC5yYW5kb20oKSAqIDE2IHwgMDtcbiAgICB2YXIgdiA9IGMgPT0gJ3gnID8gciA6IHIgJiAweDMgfCAweDg7XG4gICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1dWlkOyJdLCJuYW1lcyI6WyJ1dWlkIiwicmVwbGFjZSIsImMiLCJyIiwiTWF0aCIsInJhbmRvbSIsInYiLCJ0b1N0cmluZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/lib/uuid.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js":
/*!************************************************************************!*\
  !*** ./node_modules/draft-js/node_modules/immutable/dist/immutable.js ***!
  \************************************************************************/
/***/ (function(module) {

eval("/**\n *  Copyright (c) 2014-2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */ (function(global, factory) {\n     true ? module.exports = factory() : 0;\n})(this, function() {\n    \"use strict\";\n    var SLICE$0 = Array.prototype.slice;\n    function createClass(ctor, superClass) {\n        if (superClass) {\n            ctor.prototype = Object.create(superClass.prototype);\n        }\n        ctor.prototype.constructor = ctor;\n    }\n    function Iterable(value) {\n        return isIterable(value) ? value : Seq(value);\n    }\n    createClass(KeyedIterable, Iterable);\n    function KeyedIterable(value) {\n        return isKeyed(value) ? value : KeyedSeq(value);\n    }\n    createClass(IndexedIterable, Iterable);\n    function IndexedIterable(value) {\n        return isIndexed(value) ? value : IndexedSeq(value);\n    }\n    createClass(SetIterable, Iterable);\n    function SetIterable(value) {\n        return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);\n    }\n    function isIterable(maybeIterable) {\n        return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);\n    }\n    function isKeyed(maybeKeyed) {\n        return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);\n    }\n    function isIndexed(maybeIndexed) {\n        return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);\n    }\n    function isAssociative(maybeAssociative) {\n        return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n    }\n    function isOrdered(maybeOrdered) {\n        return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);\n    }\n    Iterable.isIterable = isIterable;\n    Iterable.isKeyed = isKeyed;\n    Iterable.isIndexed = isIndexed;\n    Iterable.isAssociative = isAssociative;\n    Iterable.isOrdered = isOrdered;\n    Iterable.Keyed = KeyedIterable;\n    Iterable.Indexed = IndexedIterable;\n    Iterable.Set = SetIterable;\n    var IS_ITERABLE_SENTINEL = \"@@__IMMUTABLE_ITERABLE__@@\";\n    var IS_KEYED_SENTINEL = \"@@__IMMUTABLE_KEYED__@@\";\n    var IS_INDEXED_SENTINEL = \"@@__IMMUTABLE_INDEXED__@@\";\n    var IS_ORDERED_SENTINEL = \"@@__IMMUTABLE_ORDERED__@@\";\n    // Used for setting prototype methods that IE8 chokes on.\n    var DELETE = \"delete\";\n    // Constants describing the size of trie nodes.\n    var SHIFT = 5; // Resulted in best performance after ______?\n    var SIZE = 1 << SHIFT;\n    var MASK = SIZE - 1;\n    // A consistent shared value representing \"not set\" which equals nothing other\n    // than itself, and nothing that could be provided externally.\n    var NOT_SET = {};\n    // Boolean references, Rough equivalent of `bool &`.\n    var CHANGE_LENGTH = {\n        value: false\n    };\n    var DID_ALTER = {\n        value: false\n    };\n    function MakeRef(ref) {\n        ref.value = false;\n        return ref;\n    }\n    function SetRef(ref) {\n        ref && (ref.value = true);\n    }\n    // A function which returns a value representing an \"owner\" for transient writes\n    // to tries. The return value will only ever equal itself, and will not equal\n    // the return of any subsequent call of this function.\n    function OwnerID() {}\n    // http://jsperf.com/copy-array-inline\n    function arrCopy(arr, offset) {\n        offset = offset || 0;\n        var len = Math.max(0, arr.length - offset);\n        var newArr = new Array(len);\n        for(var ii = 0; ii < len; ii++){\n            newArr[ii] = arr[ii + offset];\n        }\n        return newArr;\n    }\n    function ensureSize(iter) {\n        if (iter.size === undefined) {\n            iter.size = iter.__iterate(returnTrue);\n        }\n        return iter.size;\n    }\n    function wrapIndex(iter, index) {\n        // This implements \"is array index\" which the ECMAString spec defines as:\n        //\n        //     A String property name P is an array index if and only if\n        //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n        //     to 2^32−1.\n        //\n        // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n        if (typeof index !== \"number\") {\n            var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n            if (\"\" + uint32Index !== index || uint32Index === 4294967295) {\n                return NaN;\n            }\n            index = uint32Index;\n        }\n        return index < 0 ? ensureSize(iter) + index : index;\n    }\n    function returnTrue() {\n        return true;\n    }\n    function wholeSlice(begin, end, size) {\n        return (begin === 0 || size !== undefined && begin <= -size) && (end === undefined || size !== undefined && end >= size);\n    }\n    function resolveBegin(begin, size) {\n        return resolveIndex(begin, size, 0);\n    }\n    function resolveEnd(end, size) {\n        return resolveIndex(end, size, size);\n    }\n    function resolveIndex(index, size, defaultIndex) {\n        return index === undefined ? defaultIndex : index < 0 ? Math.max(0, size + index) : size === undefined ? index : Math.min(size, index);\n    }\n    /* global Symbol */ var ITERATE_KEYS = 0;\n    var ITERATE_VALUES = 1;\n    var ITERATE_ENTRIES = 2;\n    var REAL_ITERATOR_SYMBOL = typeof Symbol === \"function\" && Symbol.iterator;\n    var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n    var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n    function Iterator(next) {\n        this.next = next;\n    }\n    Iterator.prototype.toString = function() {\n        return \"[Iterator]\";\n    };\n    Iterator.KEYS = ITERATE_KEYS;\n    Iterator.VALUES = ITERATE_VALUES;\n    Iterator.ENTRIES = ITERATE_ENTRIES;\n    Iterator.prototype.inspect = Iterator.prototype.toSource = function() {\n        return this.toString();\n    };\n    Iterator.prototype[ITERATOR_SYMBOL] = function() {\n        return this;\n    };\n    function iteratorValue(type, k, v, iteratorResult) {\n        var value = type === 0 ? k : type === 1 ? v : [\n            k,\n            v\n        ];\n        iteratorResult ? iteratorResult.value = value : iteratorResult = {\n            value: value,\n            done: false\n        };\n        return iteratorResult;\n    }\n    function iteratorDone() {\n        return {\n            value: undefined,\n            done: true\n        };\n    }\n    function hasIterator(maybeIterable) {\n        return !!getIteratorFn(maybeIterable);\n    }\n    function isIterator(maybeIterator) {\n        return maybeIterator && typeof maybeIterator.next === \"function\";\n    }\n    function getIterator(iterable) {\n        var iteratorFn = getIteratorFn(iterable);\n        return iteratorFn && iteratorFn.call(iterable);\n    }\n    function getIteratorFn(iterable) {\n        var iteratorFn = iterable && (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL] || iterable[FAUX_ITERATOR_SYMBOL]);\n        if (typeof iteratorFn === \"function\") {\n            return iteratorFn;\n        }\n    }\n    function isArrayLike(value) {\n        return value && typeof value.length === \"number\";\n    }\n    createClass(Seq, Iterable);\n    function Seq(value) {\n        return value === null || value === undefined ? emptySequence() : isIterable(value) ? value.toSeq() : seqFromValue(value);\n    }\n    Seq.of = function() {\n        return Seq(arguments);\n    };\n    Seq.prototype.toSeq = function() {\n        return this;\n    };\n    Seq.prototype.toString = function() {\n        return this.__toString(\"Seq {\", \"}\");\n    };\n    Seq.prototype.cacheResult = function() {\n        if (!this._cache && this.__iterateUncached) {\n            this._cache = this.entrySeq().toArray();\n            this.size = this._cache.length;\n        }\n        return this;\n    };\n    // abstract __iterateUncached(fn, reverse)\n    Seq.prototype.__iterate = function(fn, reverse) {\n        return seqIterate(this, fn, reverse, true);\n    };\n    // abstract __iteratorUncached(type, reverse)\n    Seq.prototype.__iterator = function(type, reverse) {\n        return seqIterator(this, type, reverse, true);\n    };\n    createClass(KeyedSeq, Seq);\n    function KeyedSeq(value) {\n        return value === null || value === undefined ? emptySequence().toKeyedSeq() : isIterable(value) ? isKeyed(value) ? value.toSeq() : value.fromEntrySeq() : keyedSeqFromValue(value);\n    }\n    KeyedSeq.prototype.toKeyedSeq = function() {\n        return this;\n    };\n    createClass(IndexedSeq, Seq);\n    function IndexedSeq(value) {\n        return value === null || value === undefined ? emptySequence() : !isIterable(value) ? indexedSeqFromValue(value) : isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();\n    }\n    IndexedSeq.of = function() {\n        return IndexedSeq(arguments);\n    };\n    IndexedSeq.prototype.toIndexedSeq = function() {\n        return this;\n    };\n    IndexedSeq.prototype.toString = function() {\n        return this.__toString(\"Seq [\", \"]\");\n    };\n    IndexedSeq.prototype.__iterate = function(fn, reverse) {\n        return seqIterate(this, fn, reverse, false);\n    };\n    IndexedSeq.prototype.__iterator = function(type, reverse) {\n        return seqIterator(this, type, reverse, false);\n    };\n    createClass(SetSeq, Seq);\n    function SetSeq(value) {\n        return (value === null || value === undefined ? emptySequence() : !isIterable(value) ? indexedSeqFromValue(value) : isKeyed(value) ? value.entrySeq() : value).toSetSeq();\n    }\n    SetSeq.of = function() {\n        return SetSeq(arguments);\n    };\n    SetSeq.prototype.toSetSeq = function() {\n        return this;\n    };\n    Seq.isSeq = isSeq;\n    Seq.Keyed = KeyedSeq;\n    Seq.Set = SetSeq;\n    Seq.Indexed = IndexedSeq;\n    var IS_SEQ_SENTINEL = \"@@__IMMUTABLE_SEQ__@@\";\n    Seq.prototype[IS_SEQ_SENTINEL] = true;\n    createClass(ArraySeq, IndexedSeq);\n    function ArraySeq(array) {\n        this._array = array;\n        this.size = array.length;\n    }\n    ArraySeq.prototype.get = function(index, notSetValue) {\n        return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n    };\n    ArraySeq.prototype.__iterate = function(fn, reverse) {\n        var array = this._array;\n        var maxIndex = array.length - 1;\n        for(var ii = 0; ii <= maxIndex; ii++){\n            if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {\n                return ii + 1;\n            }\n        }\n        return ii;\n    };\n    ArraySeq.prototype.__iterator = function(type, reverse) {\n        var array = this._array;\n        var maxIndex = array.length - 1;\n        var ii = 0;\n        return new Iterator(function() {\n            return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++]);\n        });\n    };\n    createClass(ObjectSeq, KeyedSeq);\n    function ObjectSeq(object) {\n        var keys = Object.keys(object);\n        this._object = object;\n        this._keys = keys;\n        this.size = keys.length;\n    }\n    ObjectSeq.prototype.get = function(key, notSetValue) {\n        if (notSetValue !== undefined && !this.has(key)) {\n            return notSetValue;\n        }\n        return this._object[key];\n    };\n    ObjectSeq.prototype.has = function(key) {\n        return this._object.hasOwnProperty(key);\n    };\n    ObjectSeq.prototype.__iterate = function(fn, reverse) {\n        var object = this._object;\n        var keys = this._keys;\n        var maxIndex = keys.length - 1;\n        for(var ii = 0; ii <= maxIndex; ii++){\n            var key = keys[reverse ? maxIndex - ii : ii];\n            if (fn(object[key], key, this) === false) {\n                return ii + 1;\n            }\n        }\n        return ii;\n    };\n    ObjectSeq.prototype.__iterator = function(type, reverse) {\n        var object = this._object;\n        var keys = this._keys;\n        var maxIndex = keys.length - 1;\n        var ii = 0;\n        return new Iterator(function() {\n            var key = keys[reverse ? maxIndex - ii : ii];\n            return ii++ > maxIndex ? iteratorDone() : iteratorValue(type, key, object[key]);\n        });\n    };\n    ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;\n    createClass(IterableSeq, IndexedSeq);\n    function IterableSeq(iterable) {\n        this._iterable = iterable;\n        this.size = iterable.length || iterable.size;\n    }\n    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {\n        if (reverse) {\n            return this.cacheResult().__iterate(fn, reverse);\n        }\n        var iterable = this._iterable;\n        var iterator = getIterator(iterable);\n        var iterations = 0;\n        if (isIterator(iterator)) {\n            var step;\n            while(!(step = iterator.next()).done){\n                if (fn(step.value, iterations++, this) === false) {\n                    break;\n                }\n            }\n        }\n        return iterations;\n    };\n    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {\n        if (reverse) {\n            return this.cacheResult().__iterator(type, reverse);\n        }\n        var iterable = this._iterable;\n        var iterator = getIterator(iterable);\n        if (!isIterator(iterator)) {\n            return new Iterator(iteratorDone);\n        }\n        var iterations = 0;\n        return new Iterator(function() {\n            var step = iterator.next();\n            return step.done ? step : iteratorValue(type, iterations++, step.value);\n        });\n    };\n    createClass(IteratorSeq, IndexedSeq);\n    function IteratorSeq(iterator) {\n        this._iterator = iterator;\n        this._iteratorCache = [];\n    }\n    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {\n        if (reverse) {\n            return this.cacheResult().__iterate(fn, reverse);\n        }\n        var iterator = this._iterator;\n        var cache = this._iteratorCache;\n        var iterations = 0;\n        while(iterations < cache.length){\n            if (fn(cache[iterations], iterations++, this) === false) {\n                return iterations;\n            }\n        }\n        var step;\n        while(!(step = iterator.next()).done){\n            var val = step.value;\n            cache[iterations] = val;\n            if (fn(val, iterations++, this) === false) {\n                break;\n            }\n        }\n        return iterations;\n    };\n    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {\n        if (reverse) {\n            return this.cacheResult().__iterator(type, reverse);\n        }\n        var iterator = this._iterator;\n        var cache = this._iteratorCache;\n        var iterations = 0;\n        return new Iterator(function() {\n            if (iterations >= cache.length) {\n                var step = iterator.next();\n                if (step.done) {\n                    return step;\n                }\n                cache[iterations] = step.value;\n            }\n            return iteratorValue(type, iterations, cache[iterations++]);\n        });\n    };\n    // # pragma Helper functions\n    function isSeq(maybeSeq) {\n        return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);\n    }\n    var EMPTY_SEQ;\n    function emptySequence() {\n        return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n    }\n    function keyedSeqFromValue(value) {\n        var seq = Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() : isIterator(value) ? new IteratorSeq(value).fromEntrySeq() : hasIterator(value) ? new IterableSeq(value).fromEntrySeq() : typeof value === \"object\" ? new ObjectSeq(value) : undefined;\n        if (!seq) {\n            throw new TypeError(\"Expected Array or iterable object of [k, v] entries, \" + \"or keyed object: \" + value);\n        }\n        return seq;\n    }\n    function indexedSeqFromValue(value) {\n        var seq = maybeIndexedSeqFromValue(value);\n        if (!seq) {\n            throw new TypeError(\"Expected Array or iterable object of values: \" + value);\n        }\n        return seq;\n    }\n    function seqFromValue(value) {\n        var seq = maybeIndexedSeqFromValue(value) || typeof value === \"object\" && new ObjectSeq(value);\n        if (!seq) {\n            throw new TypeError(\"Expected Array or iterable object of values, or keyed object: \" + value);\n        }\n        return seq;\n    }\n    function maybeIndexedSeqFromValue(value) {\n        return isArrayLike(value) ? new ArraySeq(value) : isIterator(value) ? new IteratorSeq(value) : hasIterator(value) ? new IterableSeq(value) : undefined;\n    }\n    function seqIterate(seq, fn, reverse, useKeys) {\n        var cache = seq._cache;\n        if (cache) {\n            var maxIndex = cache.length - 1;\n            for(var ii = 0; ii <= maxIndex; ii++){\n                var entry = cache[reverse ? maxIndex - ii : ii];\n                if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {\n                    return ii + 1;\n                }\n            }\n            return ii;\n        }\n        return seq.__iterateUncached(fn, reverse);\n    }\n    function seqIterator(seq, type, reverse, useKeys) {\n        var cache = seq._cache;\n        if (cache) {\n            var maxIndex = cache.length - 1;\n            var ii = 0;\n            return new Iterator(function() {\n                var entry = cache[reverse ? maxIndex - ii : ii];\n                return ii++ > maxIndex ? iteratorDone() : iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);\n            });\n        }\n        return seq.__iteratorUncached(type, reverse);\n    }\n    function fromJS(json, converter) {\n        return converter ? fromJSWith(converter, json, \"\", {\n            \"\": json\n        }) : fromJSDefault(json);\n    }\n    function fromJSWith(converter, json, key, parentJSON) {\n        if (Array.isArray(json)) {\n            return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k) {\n                return fromJSWith(converter, v, k, json);\n            }));\n        }\n        if (isPlainObj(json)) {\n            return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k) {\n                return fromJSWith(converter, v, k, json);\n            }));\n        }\n        return json;\n    }\n    function fromJSDefault(json) {\n        if (Array.isArray(json)) {\n            return IndexedSeq(json).map(fromJSDefault).toList();\n        }\n        if (isPlainObj(json)) {\n            return KeyedSeq(json).map(fromJSDefault).toMap();\n        }\n        return json;\n    }\n    function isPlainObj(value) {\n        return value && (value.constructor === Object || value.constructor === undefined);\n    }\n    /**\n   * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n   *\n   * NaN is considered the same as NaN, however -0 and 0 are considered the same\n   * value, which is different from the algorithm described by\n   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n   *\n   * This is extended further to allow Objects to describe the values they\n   * represent, by way of `valueOf` or `equals` (and `hashCode`).\n   *\n   * Note: because of this extension, the key equality of Immutable.Map and the\n   * value equality of Immutable.Set will differ from ES6 Map and Set.\n   *\n   * ### Defining custom values\n   *\n   * The easiest way to describe the value an object represents is by implementing\n   * `valueOf`. For example, `Date` represents a value by returning a unix\n   * timestamp for `valueOf`:\n   *\n   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n   *     var date2 = new Date(1234567890000);\n   *     date1.valueOf(); // 1234567890000\n   *     assert( date1 !== date2 );\n   *     assert( Immutable.is( date1, date2 ) );\n   *\n   * Note: overriding `valueOf` may have other implications if you use this object\n   * where JavaScript expects a primitive, such as implicit string coercion.\n   *\n   * For more complex types, especially collections, implementing `valueOf` may\n   * not be performant. An alternative is to implement `equals` and `hashCode`.\n   *\n   * `equals` takes another object, presumably of similar type, and returns true\n   * if the it is equal. Equality is symmetrical, so the same result should be\n   * returned if this and the argument are flipped.\n   *\n   *     assert( a.equals(b) === b.equals(a) );\n   *\n   * `hashCode` returns a 32bit integer number representing the object which will\n   * be used to determine how to store the value object in a Map or Set. You must\n   * provide both or neither methods, one must not exist without the other.\n   *\n   * Also, an important relationship between these methods must be upheld: if two\n   * values are equal, they *must* return the same hashCode. If the values are not\n   * equal, they might have the same hashCode; this is called a hash collision,\n   * and while undesirable for performance reasons, it is acceptable.\n   *\n   *     if (a.equals(b)) {\n   *       assert( a.hashCode() === b.hashCode() );\n   *     }\n   *\n   * All Immutable collections implement `equals` and `hashCode`.\n   *\n   */ function is(valueA, valueB) {\n        if (valueA === valueB || valueA !== valueA && valueB !== valueB) {\n            return true;\n        }\n        if (!valueA || !valueB) {\n            return false;\n        }\n        if (typeof valueA.valueOf === \"function\" && typeof valueB.valueOf === \"function\") {\n            valueA = valueA.valueOf();\n            valueB = valueB.valueOf();\n            if (valueA === valueB || valueA !== valueA && valueB !== valueB) {\n                return true;\n            }\n            if (!valueA || !valueB) {\n                return false;\n            }\n        }\n        if (typeof valueA.equals === \"function\" && typeof valueB.equals === \"function\" && valueA.equals(valueB)) {\n            return true;\n        }\n        return false;\n    }\n    function deepEqual(a, b) {\n        if (a === b) {\n            return true;\n        }\n        if (!isIterable(b) || a.size !== undefined && b.size !== undefined && a.size !== b.size || a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash || isKeyed(a) !== isKeyed(b) || isIndexed(a) !== isIndexed(b) || isOrdered(a) !== isOrdered(b)) {\n            return false;\n        }\n        if (a.size === 0 && b.size === 0) {\n            return true;\n        }\n        var notAssociative = !isAssociative(a);\n        if (isOrdered(a)) {\n            var entries = a.entries();\n            return b.every(function(v, k) {\n                var entry = entries.next().value;\n                return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n            }) && entries.next().done;\n        }\n        var flipped = false;\n        if (a.size === undefined) {\n            if (b.size === undefined) {\n                if (typeof a.cacheResult === \"function\") {\n                    a.cacheResult();\n                }\n            } else {\n                flipped = true;\n                var _ = a;\n                a = b;\n                b = _;\n            }\n        }\n        var allEqual = true;\n        var bSize = b.__iterate(function(v, k) {\n            if (notAssociative ? !a.has(v) : flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {\n                allEqual = false;\n                return false;\n            }\n        });\n        return allEqual && a.size === bSize;\n    }\n    createClass(Repeat, IndexedSeq);\n    function Repeat(value, times) {\n        if (!(this instanceof Repeat)) {\n            return new Repeat(value, times);\n        }\n        this._value = value;\n        this.size = times === undefined ? Infinity : Math.max(0, times);\n        if (this.size === 0) {\n            if (EMPTY_REPEAT) {\n                return EMPTY_REPEAT;\n            }\n            EMPTY_REPEAT = this;\n        }\n    }\n    Repeat.prototype.toString = function() {\n        if (this.size === 0) {\n            return \"Repeat []\";\n        }\n        return \"Repeat [ \" + this._value + \" \" + this.size + \" times ]\";\n    };\n    Repeat.prototype.get = function(index, notSetValue) {\n        return this.has(index) ? this._value : notSetValue;\n    };\n    Repeat.prototype.includes = function(searchValue) {\n        return is(this._value, searchValue);\n    };\n    Repeat.prototype.slice = function(begin, end) {\n        var size = this.size;\n        return wholeSlice(begin, end, size) ? this : new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));\n    };\n    Repeat.prototype.reverse = function() {\n        return this;\n    };\n    Repeat.prototype.indexOf = function(searchValue) {\n        if (is(this._value, searchValue)) {\n            return 0;\n        }\n        return -1;\n    };\n    Repeat.prototype.lastIndexOf = function(searchValue) {\n        if (is(this._value, searchValue)) {\n            return this.size;\n        }\n        return -1;\n    };\n    Repeat.prototype.__iterate = function(fn, reverse) {\n        for(var ii = 0; ii < this.size; ii++){\n            if (fn(this._value, ii, this) === false) {\n                return ii + 1;\n            }\n        }\n        return ii;\n    };\n    Repeat.prototype.__iterator = function(type, reverse) {\n        var this$0 = this;\n        var ii = 0;\n        return new Iterator(function() {\n            return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone();\n        });\n    };\n    Repeat.prototype.equals = function(other) {\n        return other instanceof Repeat ? is(this._value, other._value) : deepEqual(other);\n    };\n    var EMPTY_REPEAT;\n    function invariant(condition, error) {\n        if (!condition) throw new Error(error);\n    }\n    createClass(Range, IndexedSeq);\n    function Range(start, end, step) {\n        if (!(this instanceof Range)) {\n            return new Range(start, end, step);\n        }\n        invariant(step !== 0, \"Cannot step a Range by 0\");\n        start = start || 0;\n        if (end === undefined) {\n            end = Infinity;\n        }\n        step = step === undefined ? 1 : Math.abs(step);\n        if (end < start) {\n            step = -step;\n        }\n        this._start = start;\n        this._end = end;\n        this._step = step;\n        this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n        if (this.size === 0) {\n            if (EMPTY_RANGE) {\n                return EMPTY_RANGE;\n            }\n            EMPTY_RANGE = this;\n        }\n    }\n    Range.prototype.toString = function() {\n        if (this.size === 0) {\n            return \"Range []\";\n        }\n        return \"Range [ \" + this._start + \"...\" + this._end + (this._step > 1 ? \" by \" + this._step : \"\") + \" ]\";\n    };\n    Range.prototype.get = function(index, notSetValue) {\n        return this.has(index) ? this._start + wrapIndex(this, index) * this._step : notSetValue;\n    };\n    Range.prototype.includes = function(searchValue) {\n        var possibleIndex = (searchValue - this._start) / this._step;\n        return possibleIndex >= 0 && possibleIndex < this.size && possibleIndex === Math.floor(possibleIndex);\n    };\n    Range.prototype.slice = function(begin, end) {\n        if (wholeSlice(begin, end, this.size)) {\n            return this;\n        }\n        begin = resolveBegin(begin, this.size);\n        end = resolveEnd(end, this.size);\n        if (end <= begin) {\n            return new Range(0, 0);\n        }\n        return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);\n    };\n    Range.prototype.indexOf = function(searchValue) {\n        var offsetValue = searchValue - this._start;\n        if (offsetValue % this._step === 0) {\n            var index = offsetValue / this._step;\n            if (index >= 0 && index < this.size) {\n                return index;\n            }\n        }\n        return -1;\n    };\n    Range.prototype.lastIndexOf = function(searchValue) {\n        return this.indexOf(searchValue);\n    };\n    Range.prototype.__iterate = function(fn, reverse) {\n        var maxIndex = this.size - 1;\n        var step = this._step;\n        var value = reverse ? this._start + maxIndex * step : this._start;\n        for(var ii = 0; ii <= maxIndex; ii++){\n            if (fn(value, ii, this) === false) {\n                return ii + 1;\n            }\n            value += reverse ? -step : step;\n        }\n        return ii;\n    };\n    Range.prototype.__iterator = function(type, reverse) {\n        var maxIndex = this.size - 1;\n        var step = this._step;\n        var value = reverse ? this._start + maxIndex * step : this._start;\n        var ii = 0;\n        return new Iterator(function() {\n            var v = value;\n            value += reverse ? -step : step;\n            return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);\n        });\n    };\n    Range.prototype.equals = function(other) {\n        return other instanceof Range ? this._start === other._start && this._end === other._end && this._step === other._step : deepEqual(this, other);\n    };\n    var EMPTY_RANGE;\n    createClass(Collection, Iterable);\n    function Collection() {\n        throw TypeError(\"Abstract\");\n    }\n    createClass(KeyedCollection, Collection);\n    function KeyedCollection() {}\n    createClass(IndexedCollection, Collection);\n    function IndexedCollection() {}\n    createClass(SetCollection, Collection);\n    function SetCollection() {}\n    Collection.Keyed = KeyedCollection;\n    Collection.Indexed = IndexedCollection;\n    Collection.Set = SetCollection;\n    var imul = typeof Math.imul === \"function\" && Math.imul(0xffffffff, 2) === -2 ? Math.imul : function imul(a, b) {\n        a = a | 0; // int\n        b = b | 0; // int\n        var c = a & 0xffff;\n        var d = b & 0xffff;\n        // Shift by 0 fixes the sign on the high part.\n        return c * d + ((a >>> 16) * d + c * (b >>> 16) << 16 >>> 0) | 0; // int\n    };\n    // v8 has an optimization for storing 31-bit signed numbers.\n    // Values which have either 00 or 11 as the high order bits qualify.\n    // This function drops the highest order bit in a signed number, maintaining\n    // the sign bit.\n    function smi(i32) {\n        return i32 >>> 1 & 0x40000000 | i32 & 0xBFFFFFFF;\n    }\n    function hash(o) {\n        if (o === false || o === null || o === undefined) {\n            return 0;\n        }\n        if (typeof o.valueOf === \"function\") {\n            o = o.valueOf();\n            if (o === false || o === null || o === undefined) {\n                return 0;\n            }\n        }\n        if (o === true) {\n            return 1;\n        }\n        var type = typeof o;\n        if (type === \"number\") {\n            var h = o | 0;\n            if (h !== o) {\n                h ^= o * 0xFFFFFFFF;\n            }\n            while(o > 0xFFFFFFFF){\n                o /= 0xFFFFFFFF;\n                h ^= o;\n            }\n            return smi(h);\n        }\n        if (type === \"string\") {\n            return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);\n        }\n        if (typeof o.hashCode === \"function\") {\n            return o.hashCode();\n        }\n        if (type === \"object\") {\n            return hashJSObj(o);\n        }\n        if (typeof o.toString === \"function\") {\n            return hashString(o.toString());\n        }\n        throw new Error(\"Value type \" + type + \" cannot be hashed.\");\n    }\n    function cachedHashString(string) {\n        var hash = stringHashCache[string];\n        if (hash === undefined) {\n            hash = hashString(string);\n            if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n                STRING_HASH_CACHE_SIZE = 0;\n                stringHashCache = {};\n            }\n            STRING_HASH_CACHE_SIZE++;\n            stringHashCache[string] = hash;\n        }\n        return hash;\n    }\n    // http://jsperf.com/hashing-strings\n    function hashString(string) {\n        // This is the hash from JVM\n        // The hash code for a string is computed as\n        // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n        // where s[i] is the ith character of the string and n is the length of\n        // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n        // (exclusive) by dropping high bits.\n        var hash = 0;\n        for(var ii = 0; ii < string.length; ii++){\n            hash = 31 * hash + string.charCodeAt(ii) | 0;\n        }\n        return smi(hash);\n    }\n    function hashJSObj(obj) {\n        var hash;\n        if (usingWeakMap) {\n            hash = weakMap.get(obj);\n            if (hash !== undefined) {\n                return hash;\n            }\n        }\n        hash = obj[UID_HASH_KEY];\n        if (hash !== undefined) {\n            return hash;\n        }\n        if (!canDefineProperty) {\n            hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n            if (hash !== undefined) {\n                return hash;\n            }\n            hash = getIENodeHash(obj);\n            if (hash !== undefined) {\n                return hash;\n            }\n        }\n        hash = ++objHashUID;\n        if (objHashUID & 0x40000000) {\n            objHashUID = 0;\n        }\n        if (usingWeakMap) {\n            weakMap.set(obj, hash);\n        } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n            throw new Error(\"Non-extensible objects are not allowed as keys.\");\n        } else if (canDefineProperty) {\n            Object.defineProperty(obj, UID_HASH_KEY, {\n                \"enumerable\": false,\n                \"configurable\": false,\n                \"writable\": false,\n                \"value\": hash\n            });\n        } else if (obj.propertyIsEnumerable !== undefined && obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {\n            // Since we can't define a non-enumerable property on the object\n            // we'll hijack one of the less-used non-enumerable properties to\n            // save our hash on it. Since this is a function it will not show up in\n            // `JSON.stringify` which is what we want.\n            obj.propertyIsEnumerable = function() {\n                return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);\n            };\n            obj.propertyIsEnumerable[UID_HASH_KEY] = hash;\n        } else if (obj.nodeType !== undefined) {\n            // At this point we couldn't get the IE `uniqueID` to use as a hash\n            // and we couldn't use a non-enumerable property to exploit the\n            // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n            // itself.\n            obj[UID_HASH_KEY] = hash;\n        } else {\n            throw new Error(\"Unable to set a non-enumerable property on object.\");\n        }\n        return hash;\n    }\n    // Get references to ES5 object methods.\n    var isExtensible = Object.isExtensible;\n    // True if Object.defineProperty works as expected. IE8 fails this test.\n    var canDefineProperty = function() {\n        try {\n            Object.defineProperty({}, \"@\", {});\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }();\n    // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n    // and avoid memory leaks from the IE cloneNode bug.\n    function getIENodeHash(node) {\n        if (node && node.nodeType > 0) {\n            switch(node.nodeType){\n                case 1:\n                    return node.uniqueID;\n                case 9:\n                    return node.documentElement && node.documentElement.uniqueID;\n            }\n        }\n    }\n    // If possible, use a WeakMap.\n    var usingWeakMap = typeof WeakMap === \"function\";\n    var weakMap;\n    if (usingWeakMap) {\n        weakMap = new WeakMap();\n    }\n    var objHashUID = 0;\n    var UID_HASH_KEY = \"__immutablehash__\";\n    if (typeof Symbol === \"function\") {\n        UID_HASH_KEY = Symbol(UID_HASH_KEY);\n    }\n    var STRING_HASH_CACHE_MIN_STRLEN = 16;\n    var STRING_HASH_CACHE_MAX_SIZE = 255;\n    var STRING_HASH_CACHE_SIZE = 0;\n    var stringHashCache = {};\n    function assertNotInfinite(size) {\n        invariant(size !== Infinity, \"Cannot perform this action with an infinite size.\");\n    }\n    createClass(Map, KeyedCollection);\n    // @pragma Construction\n    function Map(value) {\n        return value === null || value === undefined ? emptyMap() : isMap(value) && !isOrdered(value) ? value : emptyMap().withMutations(function(map) {\n            var iter = KeyedIterable(value);\n            assertNotInfinite(iter.size);\n            iter.forEach(function(v, k) {\n                return map.set(k, v);\n            });\n        });\n    }\n    Map.prototype.toString = function() {\n        return this.__toString(\"Map {\", \"}\");\n    };\n    // @pragma Access\n    Map.prototype.get = function(k, notSetValue) {\n        return this._root ? this._root.get(0, undefined, k, notSetValue) : notSetValue;\n    };\n    // @pragma Modification\n    Map.prototype.set = function(k, v) {\n        return updateMap(this, k, v);\n    };\n    Map.prototype.setIn = function(keyPath, v) {\n        return this.updateIn(keyPath, NOT_SET, function() {\n            return v;\n        });\n    };\n    Map.prototype.remove = function(k) {\n        return updateMap(this, k, NOT_SET);\n    };\n    Map.prototype.deleteIn = function(keyPath) {\n        return this.updateIn(keyPath, function() {\n            return NOT_SET;\n        });\n    };\n    Map.prototype.update = function(k, notSetValue, updater) {\n        return arguments.length === 1 ? k(this) : this.updateIn([\n            k\n        ], notSetValue, updater);\n    };\n    Map.prototype.updateIn = function(keyPath, notSetValue, updater) {\n        if (!updater) {\n            updater = notSetValue;\n            notSetValue = undefined;\n        }\n        var updatedValue = updateInDeepMap(this, forceIterator(keyPath), notSetValue, updater);\n        return updatedValue === NOT_SET ? undefined : updatedValue;\n    };\n    Map.prototype.clear = function() {\n        if (this.size === 0) {\n            return this;\n        }\n        if (this.__ownerID) {\n            this.size = 0;\n            this._root = null;\n            this.__hash = undefined;\n            this.__altered = true;\n            return this;\n        }\n        return emptyMap();\n    };\n    // @pragma Composition\n    Map.prototype.merge = function() {\n        return mergeIntoMapWith(this, undefined, arguments);\n    };\n    Map.prototype.mergeWith = function(merger) {\n        var iters = SLICE$0.call(arguments, 1);\n        return mergeIntoMapWith(this, merger, iters);\n    };\n    Map.prototype.mergeIn = function(keyPath) {\n        var iters = SLICE$0.call(arguments, 1);\n        return this.updateIn(keyPath, emptyMap(), function(m) {\n            return typeof m.merge === \"function\" ? m.merge.apply(m, iters) : iters[iters.length - 1];\n        });\n    };\n    Map.prototype.mergeDeep = function() {\n        return mergeIntoMapWith(this, deepMerger, arguments);\n    };\n    Map.prototype.mergeDeepWith = function(merger) {\n        var iters = SLICE$0.call(arguments, 1);\n        return mergeIntoMapWith(this, deepMergerWith(merger), iters);\n    };\n    Map.prototype.mergeDeepIn = function(keyPath) {\n        var iters = SLICE$0.call(arguments, 1);\n        return this.updateIn(keyPath, emptyMap(), function(m) {\n            return typeof m.mergeDeep === \"function\" ? m.mergeDeep.apply(m, iters) : iters[iters.length - 1];\n        });\n    };\n    Map.prototype.sort = function(comparator) {\n        // Late binding\n        return OrderedMap(sortFactory(this, comparator));\n    };\n    Map.prototype.sortBy = function(mapper, comparator) {\n        // Late binding\n        return OrderedMap(sortFactory(this, comparator, mapper));\n    };\n    // @pragma Mutability\n    Map.prototype.withMutations = function(fn) {\n        var mutable = this.asMutable();\n        fn(mutable);\n        return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n    };\n    Map.prototype.asMutable = function() {\n        return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n    };\n    Map.prototype.asImmutable = function() {\n        return this.__ensureOwner();\n    };\n    Map.prototype.wasAltered = function() {\n        return this.__altered;\n    };\n    Map.prototype.__iterator = function(type, reverse) {\n        return new MapIterator(this, type, reverse);\n    };\n    Map.prototype.__iterate = function(fn, reverse) {\n        var this$0 = this;\n        var iterations = 0;\n        this._root && this._root.iterate(function(entry) {\n            iterations++;\n            return fn(entry[1], entry[0], this$0);\n        }, reverse);\n        return iterations;\n    };\n    Map.prototype.__ensureOwner = function(ownerID) {\n        if (ownerID === this.__ownerID) {\n            return this;\n        }\n        if (!ownerID) {\n            this.__ownerID = ownerID;\n            this.__altered = false;\n            return this;\n        }\n        return makeMap(this.size, this._root, ownerID, this.__hash);\n    };\n    function isMap(maybeMap) {\n        return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);\n    }\n    Map.isMap = isMap;\n    var IS_MAP_SENTINEL = \"@@__IMMUTABLE_MAP__@@\";\n    var MapPrototype = Map.prototype;\n    MapPrototype[IS_MAP_SENTINEL] = true;\n    MapPrototype[DELETE] = MapPrototype.remove;\n    MapPrototype.removeIn = MapPrototype.deleteIn;\n    // #pragma Trie Nodes\n    function ArrayMapNode(ownerID, entries) {\n        this.ownerID = ownerID;\n        this.entries = entries;\n    }\n    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n        var entries = this.entries;\n        for(var ii = 0, len = entries.length; ii < len; ii++){\n            if (is(key, entries[ii][0])) {\n                return entries[ii][1];\n            }\n        }\n        return notSetValue;\n    };\n    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n        var removed = value === NOT_SET;\n        var entries = this.entries;\n        var idx = 0;\n        for(var len = entries.length; idx < len; idx++){\n            if (is(key, entries[idx][0])) {\n                break;\n            }\n        }\n        var exists = idx < len;\n        if (exists ? entries[idx][1] === value : removed) {\n            return this;\n        }\n        SetRef(didAlter);\n        (removed || !exists) && SetRef(didChangeSize);\n        if (removed && entries.length === 1) {\n            return; // undefined\n        }\n        if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n            return createNodes(ownerID, entries, key, value);\n        }\n        var isEditable = ownerID && ownerID === this.ownerID;\n        var newEntries = isEditable ? entries : arrCopy(entries);\n        if (exists) {\n            if (removed) {\n                idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();\n            } else {\n                newEntries[idx] = [\n                    key,\n                    value\n                ];\n            }\n        } else {\n            newEntries.push([\n                key,\n                value\n            ]);\n        }\n        if (isEditable) {\n            this.entries = newEntries;\n            return this;\n        }\n        return new ArrayMapNode(ownerID, newEntries);\n    };\n    function BitmapIndexedNode(ownerID, bitmap, nodes) {\n        this.ownerID = ownerID;\n        this.bitmap = bitmap;\n        this.nodes = nodes;\n    }\n    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n        if (keyHash === undefined) {\n            keyHash = hash(key);\n        }\n        var bit = 1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK);\n        var bitmap = this.bitmap;\n        return (bitmap & bit) === 0 ? notSetValue : this.nodes[popCount(bitmap & bit - 1)].get(shift + SHIFT, keyHash, key, notSetValue);\n    };\n    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n        if (keyHash === undefined) {\n            keyHash = hash(key);\n        }\n        var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n        var bit = 1 << keyHashFrag;\n        var bitmap = this.bitmap;\n        var exists = (bitmap & bit) !== 0;\n        if (!exists && value === NOT_SET) {\n            return this;\n        }\n        var idx = popCount(bitmap & bit - 1);\n        var nodes = this.nodes;\n        var node = exists ? nodes[idx] : undefined;\n        var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n        if (newNode === node) {\n            return this;\n        }\n        if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n            return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n        }\n        if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {\n            return nodes[idx ^ 1];\n        }\n        if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n            return newNode;\n        }\n        var isEditable = ownerID && ownerID === this.ownerID;\n        var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;\n        var newNodes = exists ? newNode ? setIn(nodes, idx, newNode, isEditable) : spliceOut(nodes, idx, isEditable) : spliceIn(nodes, idx, newNode, isEditable);\n        if (isEditable) {\n            this.bitmap = newBitmap;\n            this.nodes = newNodes;\n            return this;\n        }\n        return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n    };\n    function HashArrayMapNode(ownerID, count, nodes) {\n        this.ownerID = ownerID;\n        this.count = count;\n        this.nodes = nodes;\n    }\n    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n        if (keyHash === undefined) {\n            keyHash = hash(key);\n        }\n        var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n        var node = this.nodes[idx];\n        return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;\n    };\n    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n        if (keyHash === undefined) {\n            keyHash = hash(key);\n        }\n        var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n        var removed = value === NOT_SET;\n        var nodes = this.nodes;\n        var node = nodes[idx];\n        if (removed && !node) {\n            return this;\n        }\n        var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n        if (newNode === node) {\n            return this;\n        }\n        var newCount = this.count;\n        if (!node) {\n            newCount++;\n        } else if (!newNode) {\n            newCount--;\n            if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n                return packNodes(ownerID, nodes, newCount, idx);\n            }\n        }\n        var isEditable = ownerID && ownerID === this.ownerID;\n        var newNodes = setIn(nodes, idx, newNode, isEditable);\n        if (isEditable) {\n            this.count = newCount;\n            this.nodes = newNodes;\n            return this;\n        }\n        return new HashArrayMapNode(ownerID, newCount, newNodes);\n    };\n    function HashCollisionNode(ownerID, keyHash, entries) {\n        this.ownerID = ownerID;\n        this.keyHash = keyHash;\n        this.entries = entries;\n    }\n    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n        var entries = this.entries;\n        for(var ii = 0, len = entries.length; ii < len; ii++){\n            if (is(key, entries[ii][0])) {\n                return entries[ii][1];\n            }\n        }\n        return notSetValue;\n    };\n    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n        if (keyHash === undefined) {\n            keyHash = hash(key);\n        }\n        var removed = value === NOT_SET;\n        if (keyHash !== this.keyHash) {\n            if (removed) {\n                return this;\n            }\n            SetRef(didAlter);\n            SetRef(didChangeSize);\n            return mergeIntoNode(this, ownerID, shift, keyHash, [\n                key,\n                value\n            ]);\n        }\n        var entries = this.entries;\n        var idx = 0;\n        for(var len = entries.length; idx < len; idx++){\n            if (is(key, entries[idx][0])) {\n                break;\n            }\n        }\n        var exists = idx < len;\n        if (exists ? entries[idx][1] === value : removed) {\n            return this;\n        }\n        SetRef(didAlter);\n        (removed || !exists) && SetRef(didChangeSize);\n        if (removed && len === 2) {\n            return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n        }\n        var isEditable = ownerID && ownerID === this.ownerID;\n        var newEntries = isEditable ? entries : arrCopy(entries);\n        if (exists) {\n            if (removed) {\n                idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();\n            } else {\n                newEntries[idx] = [\n                    key,\n                    value\n                ];\n            }\n        } else {\n            newEntries.push([\n                key,\n                value\n            ]);\n        }\n        if (isEditable) {\n            this.entries = newEntries;\n            return this;\n        }\n        return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n    };\n    function ValueNode(ownerID, keyHash, entry) {\n        this.ownerID = ownerID;\n        this.keyHash = keyHash;\n        this.entry = entry;\n    }\n    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n        return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n    };\n    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n        var removed = value === NOT_SET;\n        var keyMatch = is(key, this.entry[0]);\n        if (keyMatch ? value === this.entry[1] : removed) {\n            return this;\n        }\n        SetRef(didAlter);\n        if (removed) {\n            SetRef(didChangeSize);\n            return; // undefined\n        }\n        if (keyMatch) {\n            if (ownerID && ownerID === this.ownerID) {\n                this.entry[1] = value;\n                return this;\n            }\n            return new ValueNode(ownerID, this.keyHash, [\n                key,\n                value\n            ]);\n        }\n        SetRef(didChangeSize);\n        return mergeIntoNode(this, ownerID, shift, hash(key), [\n            key,\n            value\n        ]);\n    };\n    // #pragma Iterators\n    ArrayMapNode.prototype.iterate = HashCollisionNode.prototype.iterate = function(fn, reverse) {\n        var entries = this.entries;\n        for(var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++){\n            if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n                return false;\n            }\n        }\n    };\n    BitmapIndexedNode.prototype.iterate = HashArrayMapNode.prototype.iterate = function(fn, reverse) {\n        var nodes = this.nodes;\n        for(var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++){\n            var node = nodes[reverse ? maxIndex - ii : ii];\n            if (node && node.iterate(fn, reverse) === false) {\n                return false;\n            }\n        }\n    };\n    ValueNode.prototype.iterate = function(fn, reverse) {\n        return fn(this.entry);\n    };\n    createClass(MapIterator, Iterator);\n    function MapIterator(map, type, reverse) {\n        this._type = type;\n        this._reverse = reverse;\n        this._stack = map._root && mapIteratorFrame(map._root);\n    }\n    MapIterator.prototype.next = function() {\n        var type = this._type;\n        var stack = this._stack;\n        while(stack){\n            var node = stack.node;\n            var index = stack.index++;\n            var maxIndex;\n            if (node.entry) {\n                if (index === 0) {\n                    return mapIteratorValue(type, node.entry);\n                }\n            } else if (node.entries) {\n                maxIndex = node.entries.length - 1;\n                if (index <= maxIndex) {\n                    return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);\n                }\n            } else {\n                maxIndex = node.nodes.length - 1;\n                if (index <= maxIndex) {\n                    var subNode = node.nodes[this._reverse ? maxIndex - index : index];\n                    if (subNode) {\n                        if (subNode.entry) {\n                            return mapIteratorValue(type, subNode.entry);\n                        }\n                        stack = this._stack = mapIteratorFrame(subNode, stack);\n                    }\n                    continue;\n                }\n            }\n            stack = this._stack = this._stack.__prev;\n        }\n        return iteratorDone();\n    };\n    function mapIteratorValue(type, entry) {\n        return iteratorValue(type, entry[0], entry[1]);\n    }\n    function mapIteratorFrame(node, prev) {\n        return {\n            node: node,\n            index: 0,\n            __prev: prev\n        };\n    }\n    function makeMap(size, root, ownerID, hash) {\n        var map = Object.create(MapPrototype);\n        map.size = size;\n        map._root = root;\n        map.__ownerID = ownerID;\n        map.__hash = hash;\n        map.__altered = false;\n        return map;\n    }\n    var EMPTY_MAP;\n    function emptyMap() {\n        return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n    }\n    function updateMap(map, k, v) {\n        var newRoot;\n        var newSize;\n        if (!map._root) {\n            if (v === NOT_SET) {\n                return map;\n            }\n            newSize = 1;\n            newRoot = new ArrayMapNode(map.__ownerID, [\n                [\n                    k,\n                    v\n                ]\n            ]);\n        } else {\n            var didChangeSize = MakeRef(CHANGE_LENGTH);\n            var didAlter = MakeRef(DID_ALTER);\n            newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);\n            if (!didAlter.value) {\n                return map;\n            }\n            newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);\n        }\n        if (map.__ownerID) {\n            map.size = newSize;\n            map._root = newRoot;\n            map.__hash = undefined;\n            map.__altered = true;\n            return map;\n        }\n        return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n    }\n    function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n        if (!node) {\n            if (value === NOT_SET) {\n                return node;\n            }\n            SetRef(didAlter);\n            SetRef(didChangeSize);\n            return new ValueNode(ownerID, keyHash, [\n                key,\n                value\n            ]);\n        }\n        return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);\n    }\n    function isLeafNode(node) {\n        return node.constructor === ValueNode || node.constructor === HashCollisionNode;\n    }\n    function mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n        if (node.keyHash === keyHash) {\n            return new HashCollisionNode(ownerID, keyHash, [\n                node.entry,\n                entry\n            ]);\n        }\n        var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n        var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n        var newNode;\n        var nodes = idx1 === idx2 ? [\n            mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)\n        ] : (newNode = new ValueNode(ownerID, keyHash, entry), idx1 < idx2 ? [\n            node,\n            newNode\n        ] : [\n            newNode,\n            node\n        ]);\n        return new BitmapIndexedNode(ownerID, 1 << idx1 | 1 << idx2, nodes);\n    }\n    function createNodes(ownerID, entries, key, value) {\n        if (!ownerID) {\n            ownerID = new OwnerID();\n        }\n        var node = new ValueNode(ownerID, hash(key), [\n            key,\n            value\n        ]);\n        for(var ii = 0; ii < entries.length; ii++){\n            var entry = entries[ii];\n            node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n        }\n        return node;\n    }\n    function packNodes(ownerID, nodes, count, excluding) {\n        var bitmap = 0;\n        var packedII = 0;\n        var packedNodes = new Array(count);\n        for(var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1){\n            var node = nodes[ii];\n            if (node !== undefined && ii !== excluding) {\n                bitmap |= bit;\n                packedNodes[packedII++] = node;\n            }\n        }\n        return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n    }\n    function expandNodes(ownerID, nodes, bitmap, including, node) {\n        var count = 0;\n        var expandedNodes = new Array(SIZE);\n        for(var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1){\n            expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n        }\n        expandedNodes[including] = node;\n        return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n    }\n    function mergeIntoMapWith(map, merger, iterables) {\n        var iters = [];\n        for(var ii = 0; ii < iterables.length; ii++){\n            var value = iterables[ii];\n            var iter = KeyedIterable(value);\n            if (!isIterable(value)) {\n                iter = iter.map(function(v) {\n                    return fromJS(v);\n                });\n            }\n            iters.push(iter);\n        }\n        return mergeIntoCollectionWith(map, merger, iters);\n    }\n    function deepMerger(existing, value, key) {\n        return existing && existing.mergeDeep && isIterable(value) ? existing.mergeDeep(value) : is(existing, value) ? existing : value;\n    }\n    function deepMergerWith(merger) {\n        return function(existing, value, key) {\n            if (existing && existing.mergeDeepWith && isIterable(value)) {\n                return existing.mergeDeepWith(merger, value);\n            }\n            var nextValue = merger(existing, value, key);\n            return is(existing, nextValue) ? existing : nextValue;\n        };\n    }\n    function mergeIntoCollectionWith(collection, merger, iters) {\n        iters = iters.filter(function(x) {\n            return x.size !== 0;\n        });\n        if (iters.length === 0) {\n            return collection;\n        }\n        if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {\n            return collection.constructor(iters[0]);\n        }\n        return collection.withMutations(function(collection) {\n            var mergeIntoMap = merger ? function(value, key) {\n                collection.update(key, NOT_SET, function(existing) {\n                    return existing === NOT_SET ? value : merger(existing, value, key);\n                });\n            } : function(value, key) {\n                collection.set(key, value);\n            };\n            for(var ii = 0; ii < iters.length; ii++){\n                iters[ii].forEach(mergeIntoMap);\n            }\n        });\n    }\n    function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {\n        var isNotSet = existing === NOT_SET;\n        var step = keyPathIter.next();\n        if (step.done) {\n            var existingValue = isNotSet ? notSetValue : existing;\n            var newValue = updater(existingValue);\n            return newValue === existingValue ? existing : newValue;\n        }\n        invariant(isNotSet || existing && existing.set, \"invalid keyPath\");\n        var key = step.value;\n        var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);\n        var nextUpdated = updateInDeepMap(nextExisting, keyPathIter, notSetValue, updater);\n        return nextUpdated === nextExisting ? existing : nextUpdated === NOT_SET ? existing.remove(key) : (isNotSet ? emptyMap() : existing).set(key, nextUpdated);\n    }\n    function popCount(x) {\n        x = x - (x >> 1 & 0x55555555);\n        x = (x & 0x33333333) + (x >> 2 & 0x33333333);\n        x = x + (x >> 4) & 0x0f0f0f0f;\n        x = x + (x >> 8);\n        x = x + (x >> 16);\n        return x & 0x7f;\n    }\n    function setIn(array, idx, val, canEdit) {\n        var newArray = canEdit ? array : arrCopy(array);\n        newArray[idx] = val;\n        return newArray;\n    }\n    function spliceIn(array, idx, val, canEdit) {\n        var newLen = array.length + 1;\n        if (canEdit && idx + 1 === newLen) {\n            array[idx] = val;\n            return array;\n        }\n        var newArray = new Array(newLen);\n        var after = 0;\n        for(var ii = 0; ii < newLen; ii++){\n            if (ii === idx) {\n                newArray[ii] = val;\n                after = -1;\n            } else {\n                newArray[ii] = array[ii + after];\n            }\n        }\n        return newArray;\n    }\n    function spliceOut(array, idx, canEdit) {\n        var newLen = array.length - 1;\n        if (canEdit && idx === newLen) {\n            array.pop();\n            return array;\n        }\n        var newArray = new Array(newLen);\n        var after = 0;\n        for(var ii = 0; ii < newLen; ii++){\n            if (ii === idx) {\n                after = 1;\n            }\n            newArray[ii] = array[ii + after];\n        }\n        return newArray;\n    }\n    var MAX_ARRAY_MAP_SIZE = SIZE / 4;\n    var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\n    var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n    createClass(List, IndexedCollection);\n    // @pragma Construction\n    function List(value) {\n        var empty = emptyList();\n        if (value === null || value === undefined) {\n            return empty;\n        }\n        if (isList(value)) {\n            return value;\n        }\n        var iter = IndexedIterable(value);\n        var size = iter.size;\n        if (size === 0) {\n            return empty;\n        }\n        assertNotInfinite(size);\n        if (size > 0 && size < SIZE) {\n            return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n        }\n        return empty.withMutations(function(list) {\n            list.setSize(size);\n            iter.forEach(function(v, i) {\n                return list.set(i, v);\n            });\n        });\n    }\n    List.of = function() {\n        return this(arguments);\n    };\n    List.prototype.toString = function() {\n        return this.__toString(\"List [\", \"]\");\n    };\n    // @pragma Access\n    List.prototype.get = function(index, notSetValue) {\n        index = wrapIndex(this, index);\n        if (index >= 0 && index < this.size) {\n            index += this._origin;\n            var node = listNodeFor(this, index);\n            return node && node.array[index & MASK];\n        }\n        return notSetValue;\n    };\n    // @pragma Modification\n    List.prototype.set = function(index, value) {\n        return updateList(this, index, value);\n    };\n    List.prototype.remove = function(index) {\n        return !this.has(index) ? this : index === 0 ? this.shift() : index === this.size - 1 ? this.pop() : this.splice(index, 1);\n    };\n    List.prototype.insert = function(index, value) {\n        return this.splice(index, 0, value);\n    };\n    List.prototype.clear = function() {\n        if (this.size === 0) {\n            return this;\n        }\n        if (this.__ownerID) {\n            this.size = this._origin = this._capacity = 0;\n            this._level = SHIFT;\n            this._root = this._tail = null;\n            this.__hash = undefined;\n            this.__altered = true;\n            return this;\n        }\n        return emptyList();\n    };\n    List.prototype.push = function() {\n        var values = arguments;\n        var oldSize = this.size;\n        return this.withMutations(function(list) {\n            setListBounds(list, 0, oldSize + values.length);\n            for(var ii = 0; ii < values.length; ii++){\n                list.set(oldSize + ii, values[ii]);\n            }\n        });\n    };\n    List.prototype.pop = function() {\n        return setListBounds(this, 0, -1);\n    };\n    List.prototype.unshift = function() {\n        var values = arguments;\n        return this.withMutations(function(list) {\n            setListBounds(list, -values.length);\n            for(var ii = 0; ii < values.length; ii++){\n                list.set(ii, values[ii]);\n            }\n        });\n    };\n    List.prototype.shift = function() {\n        return setListBounds(this, 1);\n    };\n    // @pragma Composition\n    List.prototype.merge = function() {\n        return mergeIntoListWith(this, undefined, arguments);\n    };\n    List.prototype.mergeWith = function(merger) {\n        var iters = SLICE$0.call(arguments, 1);\n        return mergeIntoListWith(this, merger, iters);\n    };\n    List.prototype.mergeDeep = function() {\n        return mergeIntoListWith(this, deepMerger, arguments);\n    };\n    List.prototype.mergeDeepWith = function(merger) {\n        var iters = SLICE$0.call(arguments, 1);\n        return mergeIntoListWith(this, deepMergerWith(merger), iters);\n    };\n    List.prototype.setSize = function(size) {\n        return setListBounds(this, 0, size);\n    };\n    // @pragma Iteration\n    List.prototype.slice = function(begin, end) {\n        var size = this.size;\n        if (wholeSlice(begin, end, size)) {\n            return this;\n        }\n        return setListBounds(this, resolveBegin(begin, size), resolveEnd(end, size));\n    };\n    List.prototype.__iterator = function(type, reverse) {\n        var index = 0;\n        var values = iterateList(this, reverse);\n        return new Iterator(function() {\n            var value = values();\n            return value === DONE ? iteratorDone() : iteratorValue(type, index++, value);\n        });\n    };\n    List.prototype.__iterate = function(fn, reverse) {\n        var index = 0;\n        var values = iterateList(this, reverse);\n        var value;\n        while((value = values()) !== DONE){\n            if (fn(value, index++, this) === false) {\n                break;\n            }\n        }\n        return index;\n    };\n    List.prototype.__ensureOwner = function(ownerID) {\n        if (ownerID === this.__ownerID) {\n            return this;\n        }\n        if (!ownerID) {\n            this.__ownerID = ownerID;\n            return this;\n        }\n        return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);\n    };\n    function isList(maybeList) {\n        return !!(maybeList && maybeList[IS_LIST_SENTINEL]);\n    }\n    List.isList = isList;\n    var IS_LIST_SENTINEL = \"@@__IMMUTABLE_LIST__@@\";\n    var ListPrototype = List.prototype;\n    ListPrototype[IS_LIST_SENTINEL] = true;\n    ListPrototype[DELETE] = ListPrototype.remove;\n    ListPrototype.setIn = MapPrototype.setIn;\n    ListPrototype.deleteIn = ListPrototype.removeIn = MapPrototype.removeIn;\n    ListPrototype.update = MapPrototype.update;\n    ListPrototype.updateIn = MapPrototype.updateIn;\n    ListPrototype.mergeIn = MapPrototype.mergeIn;\n    ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n    ListPrototype.withMutations = MapPrototype.withMutations;\n    ListPrototype.asMutable = MapPrototype.asMutable;\n    ListPrototype.asImmutable = MapPrototype.asImmutable;\n    ListPrototype.wasAltered = MapPrototype.wasAltered;\n    function VNode(array, ownerID) {\n        this.array = array;\n        this.ownerID = ownerID;\n    }\n    // TODO: seems like these methods are very similar\n    VNode.prototype.removeBefore = function(ownerID, level, index) {\n        if (index === level ? 1 << level :  false || this.array.length === 0) {\n            return this;\n        }\n        var originIndex = index >>> level & MASK;\n        if (originIndex >= this.array.length) {\n            return new VNode([], ownerID);\n        }\n        var removingFirst = originIndex === 0;\n        var newChild;\n        if (level > 0) {\n            var oldChild = this.array[originIndex];\n            newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n            if (newChild === oldChild && removingFirst) {\n                return this;\n            }\n        }\n        if (removingFirst && !newChild) {\n            return this;\n        }\n        var editable = editableVNode(this, ownerID);\n        if (!removingFirst) {\n            for(var ii = 0; ii < originIndex; ii++){\n                editable.array[ii] = undefined;\n            }\n        }\n        if (newChild) {\n            editable.array[originIndex] = newChild;\n        }\n        return editable;\n    };\n    VNode.prototype.removeAfter = function(ownerID, level, index) {\n        if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n            return this;\n        }\n        var sizeIndex = index - 1 >>> level & MASK;\n        if (sizeIndex >= this.array.length) {\n            return this;\n        }\n        var newChild;\n        if (level > 0) {\n            var oldChild = this.array[sizeIndex];\n            newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n            if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n                return this;\n            }\n        }\n        var editable = editableVNode(this, ownerID);\n        editable.array.splice(sizeIndex + 1);\n        if (newChild) {\n            editable.array[sizeIndex] = newChild;\n        }\n        return editable;\n    };\n    var DONE = {};\n    function iterateList(list, reverse) {\n        var left = list._origin;\n        var right = list._capacity;\n        var tailPos = getTailOffset(right);\n        var tail = list._tail;\n        return iterateNodeOrLeaf(list._root, list._level, 0);\n        function iterateNodeOrLeaf(node, level, offset) {\n            return level === 0 ? iterateLeaf(node, offset) : iterateNode(node, level, offset);\n        }\n        function iterateLeaf(node, offset) {\n            var array = offset === tailPos ? tail && tail.array : node && node.array;\n            var from = offset > left ? 0 : left - offset;\n            var to = right - offset;\n            if (to > SIZE) {\n                to = SIZE;\n            }\n            return function() {\n                if (from === to) {\n                    return DONE;\n                }\n                var idx = reverse ? --to : from++;\n                return array && array[idx];\n            };\n        }\n        function iterateNode(node, level, offset) {\n            var values;\n            var array = node && node.array;\n            var from = offset > left ? 0 : left - offset >> level;\n            var to = (right - offset >> level) + 1;\n            if (to > SIZE) {\n                to = SIZE;\n            }\n            return function() {\n                do {\n                    if (values) {\n                        var value = values();\n                        if (value !== DONE) {\n                            return value;\n                        }\n                        values = null;\n                    }\n                    if (from === to) {\n                        return DONE;\n                    }\n                    var idx = reverse ? --to : from++;\n                    values = iterateNodeOrLeaf(array && array[idx], level - SHIFT, offset + (idx << level));\n                }while (true);\n            };\n        }\n    }\n    function makeList(origin, capacity, level, root, tail, ownerID, hash) {\n        var list = Object.create(ListPrototype);\n        list.size = capacity - origin;\n        list._origin = origin;\n        list._capacity = capacity;\n        list._level = level;\n        list._root = root;\n        list._tail = tail;\n        list.__ownerID = ownerID;\n        list.__hash = hash;\n        list.__altered = false;\n        return list;\n    }\n    var EMPTY_LIST;\n    function emptyList() {\n        return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n    }\n    function updateList(list, index, value) {\n        index = wrapIndex(list, index);\n        if (index !== index) {\n            return list;\n        }\n        if (index >= list.size || index < 0) {\n            return list.withMutations(function(list) {\n                index < 0 ? setListBounds(list, index).set(0, value) : setListBounds(list, 0, index + 1).set(index, value);\n            });\n        }\n        index += list._origin;\n        var newTail = list._tail;\n        var newRoot = list._root;\n        var didAlter = MakeRef(DID_ALTER);\n        if (index >= getTailOffset(list._capacity)) {\n            newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n        } else {\n            newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);\n        }\n        if (!didAlter.value) {\n            return list;\n        }\n        if (list.__ownerID) {\n            list._root = newRoot;\n            list._tail = newTail;\n            list.__hash = undefined;\n            list.__altered = true;\n            return list;\n        }\n        return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n    }\n    function updateVNode(node, ownerID, level, index, value, didAlter) {\n        var idx = index >>> level & MASK;\n        var nodeHas = node && idx < node.array.length;\n        if (!nodeHas && value === undefined) {\n            return node;\n        }\n        var newNode;\n        if (level > 0) {\n            var lowerNode = node && node.array[idx];\n            var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);\n            if (newLowerNode === lowerNode) {\n                return node;\n            }\n            newNode = editableVNode(node, ownerID);\n            newNode.array[idx] = newLowerNode;\n            return newNode;\n        }\n        if (nodeHas && node.array[idx] === value) {\n            return node;\n        }\n        SetRef(didAlter);\n        newNode = editableVNode(node, ownerID);\n        if (value === undefined && idx === newNode.array.length - 1) {\n            newNode.array.pop();\n        } else {\n            newNode.array[idx] = value;\n        }\n        return newNode;\n    }\n    function editableVNode(node, ownerID) {\n        if (ownerID && node && ownerID === node.ownerID) {\n            return node;\n        }\n        return new VNode(node ? node.array.slice() : [], ownerID);\n    }\n    function listNodeFor(list, rawIndex) {\n        if (rawIndex >= getTailOffset(list._capacity)) {\n            return list._tail;\n        }\n        if (rawIndex < 1 << list._level + SHIFT) {\n            var node = list._root;\n            var level = list._level;\n            while(node && level > 0){\n                node = node.array[rawIndex >>> level & MASK];\n                level -= SHIFT;\n            }\n            return node;\n        }\n    }\n    function setListBounds(list, begin, end) {\n        // Sanitize begin & end using this shorthand for ToInt32(argument)\n        // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n        if (begin !== undefined) {\n            begin = begin | 0;\n        }\n        if (end !== undefined) {\n            end = end | 0;\n        }\n        var owner = list.__ownerID || new OwnerID();\n        var oldOrigin = list._origin;\n        var oldCapacity = list._capacity;\n        var newOrigin = oldOrigin + begin;\n        var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;\n        if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n            return list;\n        }\n        // If it's going to end after it starts, it's empty.\n        if (newOrigin >= newCapacity) {\n            return list.clear();\n        }\n        var newLevel = list._level;\n        var newRoot = list._root;\n        // New origin might need creating a higher root.\n        var offsetShift = 0;\n        while(newOrigin + offsetShift < 0){\n            newRoot = new VNode(newRoot && newRoot.array.length ? [\n                undefined,\n                newRoot\n            ] : [], owner);\n            newLevel += SHIFT;\n            offsetShift += 1 << newLevel;\n        }\n        if (offsetShift) {\n            newOrigin += offsetShift;\n            oldOrigin += offsetShift;\n            newCapacity += offsetShift;\n            oldCapacity += offsetShift;\n        }\n        var oldTailOffset = getTailOffset(oldCapacity);\n        var newTailOffset = getTailOffset(newCapacity);\n        // New size might need creating a higher root.\n        while(newTailOffset >= 1 << newLevel + SHIFT){\n            newRoot = new VNode(newRoot && newRoot.array.length ? [\n                newRoot\n            ] : [], owner);\n            newLevel += SHIFT;\n        }\n        // Locate or create the new tail.\n        var oldTail = list._tail;\n        var newTail = newTailOffset < oldTailOffset ? listNodeFor(list, newCapacity - 1) : newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;\n        // Merge Tail into tree.\n        if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {\n            newRoot = editableVNode(newRoot, owner);\n            var node = newRoot;\n            for(var level = newLevel; level > SHIFT; level -= SHIFT){\n                var idx = oldTailOffset >>> level & MASK;\n                node = node.array[idx] = editableVNode(node.array[idx], owner);\n            }\n            node.array[oldTailOffset >>> SHIFT & MASK] = oldTail;\n        }\n        // If the size has been reduced, there's a chance the tail needs to be trimmed.\n        if (newCapacity < oldCapacity) {\n            newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n        }\n        // If the new origin is within the tail, then we do not need a root.\n        if (newOrigin >= newTailOffset) {\n            newOrigin -= newTailOffset;\n            newCapacity -= newTailOffset;\n            newLevel = SHIFT;\n            newRoot = null;\n            newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n        // Otherwise, if the root has been trimmed, garbage collect.\n        } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n            offsetShift = 0;\n            // Identify the new top root node of the subtree of the old root.\n            while(newRoot){\n                var beginIndex = newOrigin >>> newLevel & MASK;\n                if (beginIndex !== newTailOffset >>> newLevel & MASK) {\n                    break;\n                }\n                if (beginIndex) {\n                    offsetShift += (1 << newLevel) * beginIndex;\n                }\n                newLevel -= SHIFT;\n                newRoot = newRoot.array[beginIndex];\n            }\n            // Trim the new sides of the new root.\n            if (newRoot && newOrigin > oldOrigin) {\n                newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n            }\n            if (newRoot && newTailOffset < oldTailOffset) {\n                newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);\n            }\n            if (offsetShift) {\n                newOrigin -= offsetShift;\n                newCapacity -= offsetShift;\n            }\n        }\n        if (list.__ownerID) {\n            list.size = newCapacity - newOrigin;\n            list._origin = newOrigin;\n            list._capacity = newCapacity;\n            list._level = newLevel;\n            list._root = newRoot;\n            list._tail = newTail;\n            list.__hash = undefined;\n            list.__altered = true;\n            return list;\n        }\n        return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n    }\n    function mergeIntoListWith(list, merger, iterables) {\n        var iters = [];\n        var maxSize = 0;\n        for(var ii = 0; ii < iterables.length; ii++){\n            var value = iterables[ii];\n            var iter = IndexedIterable(value);\n            if (iter.size > maxSize) {\n                maxSize = iter.size;\n            }\n            if (!isIterable(value)) {\n                iter = iter.map(function(v) {\n                    return fromJS(v);\n                });\n            }\n            iters.push(iter);\n        }\n        if (maxSize > list.size) {\n            list = list.setSize(maxSize);\n        }\n        return mergeIntoCollectionWith(list, merger, iters);\n    }\n    function getTailOffset(size) {\n        return size < SIZE ? 0 : size - 1 >>> SHIFT << SHIFT;\n    }\n    createClass(OrderedMap, Map);\n    // @pragma Construction\n    function OrderedMap(value) {\n        return value === null || value === undefined ? emptyOrderedMap() : isOrderedMap(value) ? value : emptyOrderedMap().withMutations(function(map) {\n            var iter = KeyedIterable(value);\n            assertNotInfinite(iter.size);\n            iter.forEach(function(v, k) {\n                return map.set(k, v);\n            });\n        });\n    }\n    OrderedMap.of = function() {\n        return this(arguments);\n    };\n    OrderedMap.prototype.toString = function() {\n        return this.__toString(\"OrderedMap {\", \"}\");\n    };\n    // @pragma Access\n    OrderedMap.prototype.get = function(k, notSetValue) {\n        var index = this._map.get(k);\n        return index !== undefined ? this._list.get(index)[1] : notSetValue;\n    };\n    // @pragma Modification\n    OrderedMap.prototype.clear = function() {\n        if (this.size === 0) {\n            return this;\n        }\n        if (this.__ownerID) {\n            this.size = 0;\n            this._map.clear();\n            this._list.clear();\n            return this;\n        }\n        return emptyOrderedMap();\n    };\n    OrderedMap.prototype.set = function(k, v) {\n        return updateOrderedMap(this, k, v);\n    };\n    OrderedMap.prototype.remove = function(k) {\n        return updateOrderedMap(this, k, NOT_SET);\n    };\n    OrderedMap.prototype.wasAltered = function() {\n        return this._map.wasAltered() || this._list.wasAltered();\n    };\n    OrderedMap.prototype.__iterate = function(fn, reverse) {\n        var this$0 = this;\n        return this._list.__iterate(function(entry) {\n            return entry && fn(entry[1], entry[0], this$0);\n        }, reverse);\n    };\n    OrderedMap.prototype.__iterator = function(type, reverse) {\n        return this._list.fromEntrySeq().__iterator(type, reverse);\n    };\n    OrderedMap.prototype.__ensureOwner = function(ownerID) {\n        if (ownerID === this.__ownerID) {\n            return this;\n        }\n        var newMap = this._map.__ensureOwner(ownerID);\n        var newList = this._list.__ensureOwner(ownerID);\n        if (!ownerID) {\n            this.__ownerID = ownerID;\n            this._map = newMap;\n            this._list = newList;\n            return this;\n        }\n        return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n    };\n    function isOrderedMap(maybeOrderedMap) {\n        return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n    }\n    OrderedMap.isOrderedMap = isOrderedMap;\n    OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;\n    OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n    function makeOrderedMap(map, list, ownerID, hash) {\n        var omap = Object.create(OrderedMap.prototype);\n        omap.size = map ? map.size : 0;\n        omap._map = map;\n        omap._list = list;\n        omap.__ownerID = ownerID;\n        omap.__hash = hash;\n        return omap;\n    }\n    var EMPTY_ORDERED_MAP;\n    function emptyOrderedMap() {\n        return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));\n    }\n    function updateOrderedMap(omap, k, v) {\n        var map = omap._map;\n        var list = omap._list;\n        var i = map.get(k);\n        var has = i !== undefined;\n        var newMap;\n        var newList;\n        if (v === NOT_SET) {\n            if (!has) {\n                return omap;\n            }\n            if (list.size >= SIZE && list.size >= map.size * 2) {\n                newList = list.filter(function(entry, idx) {\n                    return entry !== undefined && i !== idx;\n                });\n                newMap = newList.toKeyedSeq().map(function(entry) {\n                    return entry[0];\n                }).flip().toMap();\n                if (omap.__ownerID) {\n                    newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n                }\n            } else {\n                newMap = map.remove(k);\n                newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n            }\n        } else {\n            if (has) {\n                if (v === list.get(i)[1]) {\n                    return omap;\n                }\n                newMap = map;\n                newList = list.set(i, [\n                    k,\n                    v\n                ]);\n            } else {\n                newMap = map.set(k, list.size);\n                newList = list.set(list.size, [\n                    k,\n                    v\n                ]);\n            }\n        }\n        if (omap.__ownerID) {\n            omap.size = newMap.size;\n            omap._map = newMap;\n            omap._list = newList;\n            omap.__hash = undefined;\n            return omap;\n        }\n        return makeOrderedMap(newMap, newList);\n    }\n    createClass(ToKeyedSequence, KeyedSeq);\n    function ToKeyedSequence(indexed, useKeys) {\n        this._iter = indexed;\n        this._useKeys = useKeys;\n        this.size = indexed.size;\n    }\n    ToKeyedSequence.prototype.get = function(key, notSetValue) {\n        return this._iter.get(key, notSetValue);\n    };\n    ToKeyedSequence.prototype.has = function(key) {\n        return this._iter.has(key);\n    };\n    ToKeyedSequence.prototype.valueSeq = function() {\n        return this._iter.valueSeq();\n    };\n    ToKeyedSequence.prototype.reverse = function() {\n        var this$0 = this;\n        var reversedSequence = reverseFactory(this, true);\n        if (!this._useKeys) {\n            reversedSequence.valueSeq = function() {\n                return this$0._iter.toSeq().reverse();\n            };\n        }\n        return reversedSequence;\n    };\n    ToKeyedSequence.prototype.map = function(mapper, context) {\n        var this$0 = this;\n        var mappedSequence = mapFactory(this, mapper, context);\n        if (!this._useKeys) {\n            mappedSequence.valueSeq = function() {\n                return this$0._iter.toSeq().map(mapper, context);\n            };\n        }\n        return mappedSequence;\n    };\n    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {\n        var this$0 = this;\n        var ii;\n        return this._iter.__iterate(this._useKeys ? function(v, k) {\n            return fn(v, k, this$0);\n        } : (ii = reverse ? resolveSize(this) : 0, function(v) {\n            return fn(v, reverse ? --ii : ii++, this$0);\n        }), reverse);\n    };\n    ToKeyedSequence.prototype.__iterator = function(type, reverse) {\n        if (this._useKeys) {\n            return this._iter.__iterator(type, reverse);\n        }\n        var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n        var ii = reverse ? resolveSize(this) : 0;\n        return new Iterator(function() {\n            var step = iterator.next();\n            return step.done ? step : iteratorValue(type, reverse ? --ii : ii++, step.value, step);\n        });\n    };\n    ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;\n    createClass(ToIndexedSequence, IndexedSeq);\n    function ToIndexedSequence(iter) {\n        this._iter = iter;\n        this.size = iter.size;\n    }\n    ToIndexedSequence.prototype.includes = function(value) {\n        return this._iter.includes(value);\n    };\n    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {\n        var this$0 = this;\n        var iterations = 0;\n        return this._iter.__iterate(function(v) {\n            return fn(v, iterations++, this$0);\n        }, reverse);\n    };\n    ToIndexedSequence.prototype.__iterator = function(type, reverse) {\n        var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n        var iterations = 0;\n        return new Iterator(function() {\n            var step = iterator.next();\n            return step.done ? step : iteratorValue(type, iterations++, step.value, step);\n        });\n    };\n    createClass(ToSetSequence, SetSeq);\n    function ToSetSequence(iter) {\n        this._iter = iter;\n        this.size = iter.size;\n    }\n    ToSetSequence.prototype.has = function(key) {\n        return this._iter.includes(key);\n    };\n    ToSetSequence.prototype.__iterate = function(fn, reverse) {\n        var this$0 = this;\n        return this._iter.__iterate(function(v) {\n            return fn(v, v, this$0);\n        }, reverse);\n    };\n    ToSetSequence.prototype.__iterator = function(type, reverse) {\n        var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n        return new Iterator(function() {\n            var step = iterator.next();\n            return step.done ? step : iteratorValue(type, step.value, step.value, step);\n        });\n    };\n    createClass(FromEntriesSequence, KeyedSeq);\n    function FromEntriesSequence(entries) {\n        this._iter = entries;\n        this.size = entries.size;\n    }\n    FromEntriesSequence.prototype.entrySeq = function() {\n        return this._iter.toSeq();\n    };\n    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {\n        var this$0 = this;\n        return this._iter.__iterate(function(entry) {\n            // Check if entry exists first so array access doesn't throw for holes\n            // in the parent iteration.\n            if (entry) {\n                validateEntry(entry);\n                var indexedIterable = isIterable(entry);\n                return fn(indexedIterable ? entry.get(1) : entry[1], indexedIterable ? entry.get(0) : entry[0], this$0);\n            }\n        }, reverse);\n    };\n    FromEntriesSequence.prototype.__iterator = function(type, reverse) {\n        var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n        return new Iterator(function() {\n            while(true){\n                var step = iterator.next();\n                if (step.done) {\n                    return step;\n                }\n                var entry = step.value;\n                // Check if entry exists first so array access doesn't throw for holes\n                // in the parent iteration.\n                if (entry) {\n                    validateEntry(entry);\n                    var indexedIterable = isIterable(entry);\n                    return iteratorValue(type, indexedIterable ? entry.get(0) : entry[0], indexedIterable ? entry.get(1) : entry[1], step);\n                }\n            }\n        });\n    };\n    ToIndexedSequence.prototype.cacheResult = ToKeyedSequence.prototype.cacheResult = ToSetSequence.prototype.cacheResult = FromEntriesSequence.prototype.cacheResult = cacheResultThrough;\n    function flipFactory(iterable) {\n        var flipSequence = makeSequence(iterable);\n        flipSequence._iter = iterable;\n        flipSequence.size = iterable.size;\n        flipSequence.flip = function() {\n            return iterable;\n        };\n        flipSequence.reverse = function() {\n            var reversedSequence = iterable.reverse.apply(this); // super.reverse()\n            reversedSequence.flip = function() {\n                return iterable.reverse();\n            };\n            return reversedSequence;\n        };\n        flipSequence.has = function(key) {\n            return iterable.includes(key);\n        };\n        flipSequence.includes = function(key) {\n            return iterable.has(key);\n        };\n        flipSequence.cacheResult = cacheResultThrough;\n        flipSequence.__iterateUncached = function(fn, reverse) {\n            var this$0 = this;\n            return iterable.__iterate(function(v, k) {\n                return fn(k, v, this$0) !== false;\n            }, reverse);\n        };\n        flipSequence.__iteratorUncached = function(type, reverse) {\n            if (type === ITERATE_ENTRIES) {\n                var iterator = iterable.__iterator(type, reverse);\n                return new Iterator(function() {\n                    var step = iterator.next();\n                    if (!step.done) {\n                        var k = step.value[0];\n                        step.value[0] = step.value[1];\n                        step.value[1] = k;\n                    }\n                    return step;\n                });\n            }\n            return iterable.__iterator(type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES, reverse);\n        };\n        return flipSequence;\n    }\n    function mapFactory(iterable, mapper, context) {\n        var mappedSequence = makeSequence(iterable);\n        mappedSequence.size = iterable.size;\n        mappedSequence.has = function(key) {\n            return iterable.has(key);\n        };\n        mappedSequence.get = function(key, notSetValue) {\n            var v = iterable.get(key, NOT_SET);\n            return v === NOT_SET ? notSetValue : mapper.call(context, v, key, iterable);\n        };\n        mappedSequence.__iterateUncached = function(fn, reverse) {\n            var this$0 = this;\n            return iterable.__iterate(function(v, k, c) {\n                return fn(mapper.call(context, v, k, c), k, this$0) !== false;\n            }, reverse);\n        };\n        mappedSequence.__iteratorUncached = function(type, reverse) {\n            var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n            return new Iterator(function() {\n                var step = iterator.next();\n                if (step.done) {\n                    return step;\n                }\n                var entry = step.value;\n                var key = entry[0];\n                return iteratorValue(type, key, mapper.call(context, entry[1], key, iterable), step);\n            });\n        };\n        return mappedSequence;\n    }\n    function reverseFactory(iterable, useKeys) {\n        var reversedSequence = makeSequence(iterable);\n        reversedSequence._iter = iterable;\n        reversedSequence.size = iterable.size;\n        reversedSequence.reverse = function() {\n            return iterable;\n        };\n        if (iterable.flip) {\n            reversedSequence.flip = function() {\n                var flipSequence = flipFactory(iterable);\n                flipSequence.reverse = function() {\n                    return iterable.flip();\n                };\n                return flipSequence;\n            };\n        }\n        reversedSequence.get = function(key, notSetValue) {\n            return iterable.get(useKeys ? key : -1 - key, notSetValue);\n        };\n        reversedSequence.has = function(key) {\n            return iterable.has(useKeys ? key : -1 - key);\n        };\n        reversedSequence.includes = function(value) {\n            return iterable.includes(value);\n        };\n        reversedSequence.cacheResult = cacheResultThrough;\n        reversedSequence.__iterate = function(fn, reverse) {\n            var this$0 = this;\n            return iterable.__iterate(function(v, k) {\n                return fn(v, k, this$0);\n            }, !reverse);\n        };\n        reversedSequence.__iterator = function(type, reverse) {\n            return iterable.__iterator(type, !reverse);\n        };\n        return reversedSequence;\n    }\n    function filterFactory(iterable, predicate, context, useKeys) {\n        var filterSequence = makeSequence(iterable);\n        if (useKeys) {\n            filterSequence.has = function(key) {\n                var v = iterable.get(key, NOT_SET);\n                return v !== NOT_SET && !!predicate.call(context, v, key, iterable);\n            };\n            filterSequence.get = function(key, notSetValue) {\n                var v = iterable.get(key, NOT_SET);\n                return v !== NOT_SET && predicate.call(context, v, key, iterable) ? v : notSetValue;\n            };\n        }\n        filterSequence.__iterateUncached = function(fn, reverse) {\n            var this$0 = this;\n            var iterations = 0;\n            iterable.__iterate(function(v, k, c) {\n                if (predicate.call(context, v, k, c)) {\n                    iterations++;\n                    return fn(v, useKeys ? k : iterations - 1, this$0);\n                }\n            }, reverse);\n            return iterations;\n        };\n        filterSequence.__iteratorUncached = function(type, reverse) {\n            var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n            var iterations = 0;\n            return new Iterator(function() {\n                while(true){\n                    var step = iterator.next();\n                    if (step.done) {\n                        return step;\n                    }\n                    var entry = step.value;\n                    var key = entry[0];\n                    var value = entry[1];\n                    if (predicate.call(context, value, key, iterable)) {\n                        return iteratorValue(type, useKeys ? key : iterations++, value, step);\n                    }\n                }\n            });\n        };\n        return filterSequence;\n    }\n    function countByFactory(iterable, grouper, context) {\n        var groups = Map().asMutable();\n        iterable.__iterate(function(v, k) {\n            groups.update(grouper.call(context, v, k, iterable), 0, function(a) {\n                return a + 1;\n            });\n        });\n        return groups.asImmutable();\n    }\n    function groupByFactory(iterable, grouper, context) {\n        var isKeyedIter = isKeyed(iterable);\n        var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();\n        iterable.__iterate(function(v, k) {\n            groups.update(grouper.call(context, v, k, iterable), function(a) {\n                return a = a || [], a.push(isKeyedIter ? [\n                    k,\n                    v\n                ] : v), a;\n            });\n        });\n        var coerce = iterableClass(iterable);\n        return groups.map(function(arr) {\n            return reify(iterable, coerce(arr));\n        });\n    }\n    function sliceFactory(iterable, begin, end, useKeys) {\n        var originalSize = iterable.size;\n        // Sanitize begin & end using this shorthand for ToInt32(argument)\n        // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n        if (begin !== undefined) {\n            begin = begin | 0;\n        }\n        if (end !== undefined) {\n            end = end | 0;\n        }\n        if (wholeSlice(begin, end, originalSize)) {\n            return iterable;\n        }\n        var resolvedBegin = resolveBegin(begin, originalSize);\n        var resolvedEnd = resolveEnd(end, originalSize);\n        // begin or end will be NaN if they were provided as negative numbers and\n        // this iterable's size is unknown. In that case, cache first so there is\n        // a known size and these do not resolve to NaN.\n        if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n            return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);\n        }\n        // Note: resolvedEnd is undefined when the original sequence's length is\n        // unknown and this slice did not supply an end and should contain all\n        // elements after resolvedBegin.\n        // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n        var resolvedSize = resolvedEnd - resolvedBegin;\n        var sliceSize;\n        if (resolvedSize === resolvedSize) {\n            sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n        }\n        var sliceSeq = makeSequence(iterable);\n        // If iterable.size is undefined, the size of the realized sliceSeq is\n        // unknown at this point unless the number of items to slice is 0\n        sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;\n        if (!useKeys && isSeq(iterable) && sliceSize >= 0) {\n            sliceSeq.get = function(index, notSetValue) {\n                index = wrapIndex(this, index);\n                return index >= 0 && index < sliceSize ? iterable.get(index + resolvedBegin, notSetValue) : notSetValue;\n            };\n        }\n        sliceSeq.__iterateUncached = function(fn, reverse) {\n            var this$0 = this;\n            if (sliceSize === 0) {\n                return 0;\n            }\n            if (reverse) {\n                return this.cacheResult().__iterate(fn, reverse);\n            }\n            var skipped = 0;\n            var isSkipping = true;\n            var iterations = 0;\n            iterable.__iterate(function(v, k) {\n                if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n                    iterations++;\n                    return fn(v, useKeys ? k : iterations - 1, this$0) !== false && iterations !== sliceSize;\n                }\n            });\n            return iterations;\n        };\n        sliceSeq.__iteratorUncached = function(type, reverse) {\n            if (sliceSize !== 0 && reverse) {\n                return this.cacheResult().__iterator(type, reverse);\n            }\n            // Don't bother instantiating parent iterator if taking 0.\n            var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);\n            var skipped = 0;\n            var iterations = 0;\n            return new Iterator(function() {\n                while(skipped++ < resolvedBegin){\n                    iterator.next();\n                }\n                if (++iterations > sliceSize) {\n                    return iteratorDone();\n                }\n                var step = iterator.next();\n                if (useKeys || type === ITERATE_VALUES) {\n                    return step;\n                } else if (type === ITERATE_KEYS) {\n                    return iteratorValue(type, iterations - 1, undefined, step);\n                } else {\n                    return iteratorValue(type, iterations - 1, step.value[1], step);\n                }\n            });\n        };\n        return sliceSeq;\n    }\n    function takeWhileFactory(iterable, predicate, context) {\n        var takeSequence = makeSequence(iterable);\n        takeSequence.__iterateUncached = function(fn, reverse) {\n            var this$0 = this;\n            if (reverse) {\n                return this.cacheResult().__iterate(fn, reverse);\n            }\n            var iterations = 0;\n            iterable.__iterate(function(v, k, c) {\n                return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0);\n            });\n            return iterations;\n        };\n        takeSequence.__iteratorUncached = function(type, reverse) {\n            var this$0 = this;\n            if (reverse) {\n                return this.cacheResult().__iterator(type, reverse);\n            }\n            var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n            var iterating = true;\n            return new Iterator(function() {\n                if (!iterating) {\n                    return iteratorDone();\n                }\n                var step = iterator.next();\n                if (step.done) {\n                    return step;\n                }\n                var entry = step.value;\n                var k = entry[0];\n                var v = entry[1];\n                if (!predicate.call(context, v, k, this$0)) {\n                    iterating = false;\n                    return iteratorDone();\n                }\n                return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);\n            });\n        };\n        return takeSequence;\n    }\n    function skipWhileFactory(iterable, predicate, context, useKeys) {\n        var skipSequence = makeSequence(iterable);\n        skipSequence.__iterateUncached = function(fn, reverse) {\n            var this$0 = this;\n            if (reverse) {\n                return this.cacheResult().__iterate(fn, reverse);\n            }\n            var isSkipping = true;\n            var iterations = 0;\n            iterable.__iterate(function(v, k, c) {\n                if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n                    iterations++;\n                    return fn(v, useKeys ? k : iterations - 1, this$0);\n                }\n            });\n            return iterations;\n        };\n        skipSequence.__iteratorUncached = function(type, reverse) {\n            var this$0 = this;\n            if (reverse) {\n                return this.cacheResult().__iterator(type, reverse);\n            }\n            var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n            var skipping = true;\n            var iterations = 0;\n            return new Iterator(function() {\n                var step, k, v;\n                do {\n                    step = iterator.next();\n                    if (step.done) {\n                        if (useKeys || type === ITERATE_VALUES) {\n                            return step;\n                        } else if (type === ITERATE_KEYS) {\n                            return iteratorValue(type, iterations++, undefined, step);\n                        } else {\n                            return iteratorValue(type, iterations++, step.value[1], step);\n                        }\n                    }\n                    var entry = step.value;\n                    k = entry[0];\n                    v = entry[1];\n                    skipping && (skipping = predicate.call(context, v, k, this$0));\n                }while (skipping);\n                return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);\n            });\n        };\n        return skipSequence;\n    }\n    function concatFactory(iterable, values) {\n        var isKeyedIterable = isKeyed(iterable);\n        var iters = [\n            iterable\n        ].concat(values).map(function(v) {\n            if (!isIterable(v)) {\n                v = isKeyedIterable ? keyedSeqFromValue(v) : indexedSeqFromValue(Array.isArray(v) ? v : [\n                    v\n                ]);\n            } else if (isKeyedIterable) {\n                v = KeyedIterable(v);\n            }\n            return v;\n        }).filter(function(v) {\n            return v.size !== 0;\n        });\n        if (iters.length === 0) {\n            return iterable;\n        }\n        if (iters.length === 1) {\n            var singleton = iters[0];\n            if (singleton === iterable || isKeyedIterable && isKeyed(singleton) || isIndexed(iterable) && isIndexed(singleton)) {\n                return singleton;\n            }\n        }\n        var concatSeq = new ArraySeq(iters);\n        if (isKeyedIterable) {\n            concatSeq = concatSeq.toKeyedSeq();\n        } else if (!isIndexed(iterable)) {\n            concatSeq = concatSeq.toSetSeq();\n        }\n        concatSeq = concatSeq.flatten(true);\n        concatSeq.size = iters.reduce(function(sum, seq) {\n            if (sum !== undefined) {\n                var size = seq.size;\n                if (size !== undefined) {\n                    return sum + size;\n                }\n            }\n        }, 0);\n        return concatSeq;\n    }\n    function flattenFactory(iterable, depth, useKeys) {\n        var flatSequence = makeSequence(iterable);\n        flatSequence.__iterateUncached = function(fn, reverse) {\n            var iterations = 0;\n            var stopped = false;\n            function flatDeep(iter, currentDepth) {\n                var this$0 = this;\n                iter.__iterate(function(v, k) {\n                    if ((!depth || currentDepth < depth) && isIterable(v)) {\n                        flatDeep(v, currentDepth + 1);\n                    } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {\n                        stopped = true;\n                    }\n                    return !stopped;\n                }, reverse);\n            }\n            flatDeep(iterable, 0);\n            return iterations;\n        };\n        flatSequence.__iteratorUncached = function(type, reverse) {\n            var iterator = iterable.__iterator(type, reverse);\n            var stack = [];\n            var iterations = 0;\n            return new Iterator(function() {\n                while(iterator){\n                    var step = iterator.next();\n                    if (step.done !== false) {\n                        iterator = stack.pop();\n                        continue;\n                    }\n                    var v = step.value;\n                    if (type === ITERATE_ENTRIES) {\n                        v = v[1];\n                    }\n                    if ((!depth || stack.length < depth) && isIterable(v)) {\n                        stack.push(iterator);\n                        iterator = v.__iterator(type, reverse);\n                    } else {\n                        return useKeys ? step : iteratorValue(type, iterations++, v, step);\n                    }\n                }\n                return iteratorDone();\n            });\n        };\n        return flatSequence;\n    }\n    function flatMapFactory(iterable, mapper, context) {\n        var coerce = iterableClass(iterable);\n        return iterable.toSeq().map(function(v, k) {\n            return coerce(mapper.call(context, v, k, iterable));\n        }).flatten(true);\n    }\n    function interposeFactory(iterable, separator) {\n        var interposedSequence = makeSequence(iterable);\n        interposedSequence.size = iterable.size && iterable.size * 2 - 1;\n        interposedSequence.__iterateUncached = function(fn, reverse) {\n            var this$0 = this;\n            var iterations = 0;\n            iterable.__iterate(function(v, k) {\n                return (!iterations || fn(separator, iterations++, this$0) !== false) && fn(v, iterations++, this$0) !== false;\n            }, reverse);\n            return iterations;\n        };\n        interposedSequence.__iteratorUncached = function(type, reverse) {\n            var iterator = iterable.__iterator(ITERATE_VALUES, reverse);\n            var iterations = 0;\n            var step;\n            return new Iterator(function() {\n                if (!step || iterations % 2) {\n                    step = iterator.next();\n                    if (step.done) {\n                        return step;\n                    }\n                }\n                return iterations % 2 ? iteratorValue(type, iterations++, separator) : iteratorValue(type, iterations++, step.value, step);\n            });\n        };\n        return interposedSequence;\n    }\n    function sortFactory(iterable, comparator, mapper) {\n        if (!comparator) {\n            comparator = defaultComparator;\n        }\n        var isKeyedIterable = isKeyed(iterable);\n        var index = 0;\n        var entries = iterable.toSeq().map(function(v, k) {\n            return [\n                k,\n                v,\n                index++,\n                mapper ? mapper(v, k, iterable) : v\n            ];\n        }).toArray();\n        entries.sort(function(a, b) {\n            return comparator(a[3], b[3]) || a[2] - b[2];\n        }).forEach(isKeyedIterable ? function(v, i) {\n            entries[i].length = 2;\n        } : function(v, i) {\n            entries[i] = v[1];\n        });\n        return isKeyedIterable ? KeyedSeq(entries) : isIndexed(iterable) ? IndexedSeq(entries) : SetSeq(entries);\n    }\n    function maxFactory(iterable, comparator, mapper) {\n        if (!comparator) {\n            comparator = defaultComparator;\n        }\n        if (mapper) {\n            var entry = iterable.toSeq().map(function(v, k) {\n                return [\n                    v,\n                    mapper(v, k, iterable)\n                ];\n            }).reduce(function(a, b) {\n                return maxCompare(comparator, a[1], b[1]) ? b : a;\n            });\n            return entry && entry[0];\n        } else {\n            return iterable.reduce(function(a, b) {\n                return maxCompare(comparator, a, b) ? b : a;\n            });\n        }\n    }\n    function maxCompare(comparator, a, b) {\n        var comp = comparator(b, a);\n        // b is considered the new max if the comparator declares them equal, but\n        // they are not equal and b is in fact a nullish value.\n        return comp === 0 && b !== a && (b === undefined || b === null || b !== b) || comp > 0;\n    }\n    function zipWithFactory(keyIter, zipper, iters) {\n        var zipSequence = makeSequence(keyIter);\n        zipSequence.size = new ArraySeq(iters).map(function(i) {\n            return i.size;\n        }).min();\n        // Note: this a generic base implementation of __iterate in terms of\n        // __iterator which may be more generically useful in the future.\n        zipSequence.__iterate = function(fn, reverse) {\n            /* generic:\n      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        iterations++;\n        if (fn(step.value[1], step.value[0], this) === false) {\n          break;\n        }\n      }\n      return iterations;\n      */ // indexed:\n            var iterator = this.__iterator(ITERATE_VALUES, reverse);\n            var step;\n            var iterations = 0;\n            while(!(step = iterator.next()).done){\n                if (fn(step.value, iterations++, this) === false) {\n                    break;\n                }\n            }\n            return iterations;\n        };\n        zipSequence.__iteratorUncached = function(type, reverse) {\n            var iterators = iters.map(function(i) {\n                return i = Iterable(i), getIterator(reverse ? i.reverse() : i);\n            });\n            var iterations = 0;\n            var isDone = false;\n            return new Iterator(function() {\n                var steps;\n                if (!isDone) {\n                    steps = iterators.map(function(i) {\n                        return i.next();\n                    });\n                    isDone = steps.some(function(s) {\n                        return s.done;\n                    });\n                }\n                if (isDone) {\n                    return iteratorDone();\n                }\n                return iteratorValue(type, iterations++, zipper.apply(null, steps.map(function(s) {\n                    return s.value;\n                })));\n            });\n        };\n        return zipSequence;\n    }\n    // #pragma Helper Functions\n    function reify(iter, seq) {\n        return isSeq(iter) ? seq : iter.constructor(seq);\n    }\n    function validateEntry(entry) {\n        if (entry !== Object(entry)) {\n            throw new TypeError(\"Expected [K, V] tuple: \" + entry);\n        }\n    }\n    function resolveSize(iter) {\n        assertNotInfinite(iter.size);\n        return ensureSize(iter);\n    }\n    function iterableClass(iterable) {\n        return isKeyed(iterable) ? KeyedIterable : isIndexed(iterable) ? IndexedIterable : SetIterable;\n    }\n    function makeSequence(iterable) {\n        return Object.create((isKeyed(iterable) ? KeyedSeq : isIndexed(iterable) ? IndexedSeq : SetSeq).prototype);\n    }\n    function cacheResultThrough() {\n        if (this._iter.cacheResult) {\n            this._iter.cacheResult();\n            this.size = this._iter.size;\n            return this;\n        } else {\n            return Seq.prototype.cacheResult.call(this);\n        }\n    }\n    function defaultComparator(a, b) {\n        return a > b ? 1 : a < b ? -1 : 0;\n    }\n    function forceIterator(keyPath) {\n        var iter = getIterator(keyPath);\n        if (!iter) {\n            // Array might not be iterable in this environment, so we need a fallback\n            // to our wrapped type.\n            if (!isArrayLike(keyPath)) {\n                throw new TypeError(\"Expected iterable or array-like: \" + keyPath);\n            }\n            iter = getIterator(Iterable(keyPath));\n        }\n        return iter;\n    }\n    createClass(Record, KeyedCollection);\n    function Record(defaultValues, name) {\n        var hasInitialized;\n        var RecordType = function Record(values) {\n            if (values instanceof RecordType) {\n                return values;\n            }\n            if (!(this instanceof RecordType)) {\n                return new RecordType(values);\n            }\n            if (!hasInitialized) {\n                hasInitialized = true;\n                var keys = Object.keys(defaultValues);\n                setProps(RecordTypePrototype, keys);\n                RecordTypePrototype.size = keys.length;\n                RecordTypePrototype._name = name;\n                RecordTypePrototype._keys = keys;\n                RecordTypePrototype._defaultValues = defaultValues;\n            }\n            this._map = Map(values);\n        };\n        var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);\n        RecordTypePrototype.constructor = RecordType;\n        return RecordType;\n    }\n    Record.prototype.toString = function() {\n        return this.__toString(recordName(this) + \" {\", \"}\");\n    };\n    // @pragma Access\n    Record.prototype.has = function(k) {\n        return this._defaultValues.hasOwnProperty(k);\n    };\n    Record.prototype.get = function(k, notSetValue) {\n        if (!this.has(k)) {\n            return notSetValue;\n        }\n        var defaultVal = this._defaultValues[k];\n        return this._map ? this._map.get(k, defaultVal) : defaultVal;\n    };\n    // @pragma Modification\n    Record.prototype.clear = function() {\n        if (this.__ownerID) {\n            this._map && this._map.clear();\n            return this;\n        }\n        var RecordType = this.constructor;\n        return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));\n    };\n    Record.prototype.set = function(k, v) {\n        if (!this.has(k)) {\n            throw new Error('Cannot set unknown key \"' + k + '\" on ' + recordName(this));\n        }\n        var newMap = this._map && this._map.set(k, v);\n        if (this.__ownerID || newMap === this._map) {\n            return this;\n        }\n        return makeRecord(this, newMap);\n    };\n    Record.prototype.remove = function(k) {\n        if (!this.has(k)) {\n            return this;\n        }\n        var newMap = this._map && this._map.remove(k);\n        if (this.__ownerID || newMap === this._map) {\n            return this;\n        }\n        return makeRecord(this, newMap);\n    };\n    Record.prototype.wasAltered = function() {\n        return this._map.wasAltered();\n    };\n    Record.prototype.__iterator = function(type, reverse) {\n        var this$0 = this;\n        return KeyedIterable(this._defaultValues).map(function(_, k) {\n            return this$0.get(k);\n        }).__iterator(type, reverse);\n    };\n    Record.prototype.__iterate = function(fn, reverse) {\n        var this$0 = this;\n        return KeyedIterable(this._defaultValues).map(function(_, k) {\n            return this$0.get(k);\n        }).__iterate(fn, reverse);\n    };\n    Record.prototype.__ensureOwner = function(ownerID) {\n        if (ownerID === this.__ownerID) {\n            return this;\n        }\n        var newMap = this._map && this._map.__ensureOwner(ownerID);\n        if (!ownerID) {\n            this.__ownerID = ownerID;\n            this._map = newMap;\n            return this;\n        }\n        return makeRecord(this, newMap, ownerID);\n    };\n    var RecordPrototype = Record.prototype;\n    RecordPrototype[DELETE] = RecordPrototype.remove;\n    RecordPrototype.deleteIn = RecordPrototype.removeIn = MapPrototype.removeIn;\n    RecordPrototype.merge = MapPrototype.merge;\n    RecordPrototype.mergeWith = MapPrototype.mergeWith;\n    RecordPrototype.mergeIn = MapPrototype.mergeIn;\n    RecordPrototype.mergeDeep = MapPrototype.mergeDeep;\n    RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;\n    RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n    RecordPrototype.setIn = MapPrototype.setIn;\n    RecordPrototype.update = MapPrototype.update;\n    RecordPrototype.updateIn = MapPrototype.updateIn;\n    RecordPrototype.withMutations = MapPrototype.withMutations;\n    RecordPrototype.asMutable = MapPrototype.asMutable;\n    RecordPrototype.asImmutable = MapPrototype.asImmutable;\n    function makeRecord(likeRecord, map, ownerID) {\n        var record = Object.create(Object.getPrototypeOf(likeRecord));\n        record._map = map;\n        record.__ownerID = ownerID;\n        return record;\n    }\n    function recordName(record) {\n        return record._name || record.constructor.name || \"Record\";\n    }\n    function setProps(prototype, names) {\n        try {\n            names.forEach(setProp.bind(undefined, prototype));\n        } catch (error) {\n        // Object.defineProperty failed. Probably IE8.\n        }\n    }\n    function setProp(prototype, name) {\n        Object.defineProperty(prototype, name, {\n            get: function() {\n                return this.get(name);\n            },\n            set: function(value) {\n                invariant(this.__ownerID, \"Cannot set on an immutable record.\");\n                this.set(name, value);\n            }\n        });\n    }\n    createClass(Set, SetCollection);\n    // @pragma Construction\n    function Set(value) {\n        return value === null || value === undefined ? emptySet() : isSet(value) && !isOrdered(value) ? value : emptySet().withMutations(function(set) {\n            var iter = SetIterable(value);\n            assertNotInfinite(iter.size);\n            iter.forEach(function(v) {\n                return set.add(v);\n            });\n        });\n    }\n    Set.of = function() {\n        return this(arguments);\n    };\n    Set.fromKeys = function(value) {\n        return this(KeyedIterable(value).keySeq());\n    };\n    Set.prototype.toString = function() {\n        return this.__toString(\"Set {\", \"}\");\n    };\n    // @pragma Access\n    Set.prototype.has = function(value) {\n        return this._map.has(value);\n    };\n    // @pragma Modification\n    Set.prototype.add = function(value) {\n        return updateSet(this, this._map.set(value, true));\n    };\n    Set.prototype.remove = function(value) {\n        return updateSet(this, this._map.remove(value));\n    };\n    Set.prototype.clear = function() {\n        return updateSet(this, this._map.clear());\n    };\n    // @pragma Composition\n    Set.prototype.union = function() {\n        var iters = SLICE$0.call(arguments, 0);\n        iters = iters.filter(function(x) {\n            return x.size !== 0;\n        });\n        if (iters.length === 0) {\n            return this;\n        }\n        if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n            return this.constructor(iters[0]);\n        }\n        return this.withMutations(function(set) {\n            for(var ii = 0; ii < iters.length; ii++){\n                SetIterable(iters[ii]).forEach(function(value) {\n                    return set.add(value);\n                });\n            }\n        });\n    };\n    Set.prototype.intersect = function() {\n        var iters = SLICE$0.call(arguments, 0);\n        if (iters.length === 0) {\n            return this;\n        }\n        iters = iters.map(function(iter) {\n            return SetIterable(iter);\n        });\n        var originalSet = this;\n        return this.withMutations(function(set) {\n            originalSet.forEach(function(value) {\n                if (!iters.every(function(iter) {\n                    return iter.includes(value);\n                })) {\n                    set.remove(value);\n                }\n            });\n        });\n    };\n    Set.prototype.subtract = function() {\n        var iters = SLICE$0.call(arguments, 0);\n        if (iters.length === 0) {\n            return this;\n        }\n        iters = iters.map(function(iter) {\n            return SetIterable(iter);\n        });\n        var originalSet = this;\n        return this.withMutations(function(set) {\n            originalSet.forEach(function(value) {\n                if (iters.some(function(iter) {\n                    return iter.includes(value);\n                })) {\n                    set.remove(value);\n                }\n            });\n        });\n    };\n    Set.prototype.merge = function() {\n        return this.union.apply(this, arguments);\n    };\n    Set.prototype.mergeWith = function(merger) {\n        var iters = SLICE$0.call(arguments, 1);\n        return this.union.apply(this, iters);\n    };\n    Set.prototype.sort = function(comparator) {\n        // Late binding\n        return OrderedSet(sortFactory(this, comparator));\n    };\n    Set.prototype.sortBy = function(mapper, comparator) {\n        // Late binding\n        return OrderedSet(sortFactory(this, comparator, mapper));\n    };\n    Set.prototype.wasAltered = function() {\n        return this._map.wasAltered();\n    };\n    Set.prototype.__iterate = function(fn, reverse) {\n        var this$0 = this;\n        return this._map.__iterate(function(_, k) {\n            return fn(k, k, this$0);\n        }, reverse);\n    };\n    Set.prototype.__iterator = function(type, reverse) {\n        return this._map.map(function(_, k) {\n            return k;\n        }).__iterator(type, reverse);\n    };\n    Set.prototype.__ensureOwner = function(ownerID) {\n        if (ownerID === this.__ownerID) {\n            return this;\n        }\n        var newMap = this._map.__ensureOwner(ownerID);\n        if (!ownerID) {\n            this.__ownerID = ownerID;\n            this._map = newMap;\n            return this;\n        }\n        return this.__make(newMap, ownerID);\n    };\n    function isSet(maybeSet) {\n        return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);\n    }\n    Set.isSet = isSet;\n    var IS_SET_SENTINEL = \"@@__IMMUTABLE_SET__@@\";\n    var SetPrototype = Set.prototype;\n    SetPrototype[IS_SET_SENTINEL] = true;\n    SetPrototype[DELETE] = SetPrototype.remove;\n    SetPrototype.mergeDeep = SetPrototype.merge;\n    SetPrototype.mergeDeepWith = SetPrototype.mergeWith;\n    SetPrototype.withMutations = MapPrototype.withMutations;\n    SetPrototype.asMutable = MapPrototype.asMutable;\n    SetPrototype.asImmutable = MapPrototype.asImmutable;\n    SetPrototype.__empty = emptySet;\n    SetPrototype.__make = makeSet;\n    function updateSet(set, newMap) {\n        if (set.__ownerID) {\n            set.size = newMap.size;\n            set._map = newMap;\n            return set;\n        }\n        return newMap === set._map ? set : newMap.size === 0 ? set.__empty() : set.__make(newMap);\n    }\n    function makeSet(map, ownerID) {\n        var set = Object.create(SetPrototype);\n        set.size = map ? map.size : 0;\n        set._map = map;\n        set.__ownerID = ownerID;\n        return set;\n    }\n    var EMPTY_SET;\n    function emptySet() {\n        return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n    }\n    createClass(OrderedSet, Set);\n    // @pragma Construction\n    function OrderedSet(value) {\n        return value === null || value === undefined ? emptyOrderedSet() : isOrderedSet(value) ? value : emptyOrderedSet().withMutations(function(set) {\n            var iter = SetIterable(value);\n            assertNotInfinite(iter.size);\n            iter.forEach(function(v) {\n                return set.add(v);\n            });\n        });\n    }\n    OrderedSet.of = function() {\n        return this(arguments);\n    };\n    OrderedSet.fromKeys = function(value) {\n        return this(KeyedIterable(value).keySeq());\n    };\n    OrderedSet.prototype.toString = function() {\n        return this.__toString(\"OrderedSet {\", \"}\");\n    };\n    function isOrderedSet(maybeOrderedSet) {\n        return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n    }\n    OrderedSet.isOrderedSet = isOrderedSet;\n    var OrderedSetPrototype = OrderedSet.prototype;\n    OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;\n    OrderedSetPrototype.__empty = emptyOrderedSet;\n    OrderedSetPrototype.__make = makeOrderedSet;\n    function makeOrderedSet(map, ownerID) {\n        var set = Object.create(OrderedSetPrototype);\n        set.size = map ? map.size : 0;\n        set._map = map;\n        set.__ownerID = ownerID;\n        return set;\n    }\n    var EMPTY_ORDERED_SET;\n    function emptyOrderedSet() {\n        return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));\n    }\n    createClass(Stack, IndexedCollection);\n    // @pragma Construction\n    function Stack(value) {\n        return value === null || value === undefined ? emptyStack() : isStack(value) ? value : emptyStack().unshiftAll(value);\n    }\n    Stack.of = function() {\n        return this(arguments);\n    };\n    Stack.prototype.toString = function() {\n        return this.__toString(\"Stack [\", \"]\");\n    };\n    // @pragma Access\n    Stack.prototype.get = function(index, notSetValue) {\n        var head = this._head;\n        index = wrapIndex(this, index);\n        while(head && index--){\n            head = head.next;\n        }\n        return head ? head.value : notSetValue;\n    };\n    Stack.prototype.peek = function() {\n        return this._head && this._head.value;\n    };\n    // @pragma Modification\n    Stack.prototype.push = function() {\n        if (arguments.length === 0) {\n            return this;\n        }\n        var newSize = this.size + arguments.length;\n        var head = this._head;\n        for(var ii = arguments.length - 1; ii >= 0; ii--){\n            head = {\n                value: arguments[ii],\n                next: head\n            };\n        }\n        if (this.__ownerID) {\n            this.size = newSize;\n            this._head = head;\n            this.__hash = undefined;\n            this.__altered = true;\n            return this;\n        }\n        return makeStack(newSize, head);\n    };\n    Stack.prototype.pushAll = function(iter) {\n        iter = IndexedIterable(iter);\n        if (iter.size === 0) {\n            return this;\n        }\n        assertNotInfinite(iter.size);\n        var newSize = this.size;\n        var head = this._head;\n        iter.reverse().forEach(function(value) {\n            newSize++;\n            head = {\n                value: value,\n                next: head\n            };\n        });\n        if (this.__ownerID) {\n            this.size = newSize;\n            this._head = head;\n            this.__hash = undefined;\n            this.__altered = true;\n            return this;\n        }\n        return makeStack(newSize, head);\n    };\n    Stack.prototype.pop = function() {\n        return this.slice(1);\n    };\n    Stack.prototype.unshift = function() {\n        return this.push.apply(this, arguments);\n    };\n    Stack.prototype.unshiftAll = function(iter) {\n        return this.pushAll(iter);\n    };\n    Stack.prototype.shift = function() {\n        return this.pop.apply(this, arguments);\n    };\n    Stack.prototype.clear = function() {\n        if (this.size === 0) {\n            return this;\n        }\n        if (this.__ownerID) {\n            this.size = 0;\n            this._head = undefined;\n            this.__hash = undefined;\n            this.__altered = true;\n            return this;\n        }\n        return emptyStack();\n    };\n    Stack.prototype.slice = function(begin, end) {\n        if (wholeSlice(begin, end, this.size)) {\n            return this;\n        }\n        var resolvedBegin = resolveBegin(begin, this.size);\n        var resolvedEnd = resolveEnd(end, this.size);\n        if (resolvedEnd !== this.size) {\n            // super.slice(begin, end);\n            return IndexedCollection.prototype.slice.call(this, begin, end);\n        }\n        var newSize = this.size - resolvedBegin;\n        var head = this._head;\n        while(resolvedBegin--){\n            head = head.next;\n        }\n        if (this.__ownerID) {\n            this.size = newSize;\n            this._head = head;\n            this.__hash = undefined;\n            this.__altered = true;\n            return this;\n        }\n        return makeStack(newSize, head);\n    };\n    // @pragma Mutability\n    Stack.prototype.__ensureOwner = function(ownerID) {\n        if (ownerID === this.__ownerID) {\n            return this;\n        }\n        if (!ownerID) {\n            this.__ownerID = ownerID;\n            this.__altered = false;\n            return this;\n        }\n        return makeStack(this.size, this._head, ownerID, this.__hash);\n    };\n    // @pragma Iteration\n    Stack.prototype.__iterate = function(fn, reverse) {\n        if (reverse) {\n            return this.reverse().__iterate(fn);\n        }\n        var iterations = 0;\n        var node = this._head;\n        while(node){\n            if (fn(node.value, iterations++, this) === false) {\n                break;\n            }\n            node = node.next;\n        }\n        return iterations;\n    };\n    Stack.prototype.__iterator = function(type, reverse) {\n        if (reverse) {\n            return this.reverse().__iterator(type);\n        }\n        var iterations = 0;\n        var node = this._head;\n        return new Iterator(function() {\n            if (node) {\n                var value = node.value;\n                node = node.next;\n                return iteratorValue(type, iterations++, value);\n            }\n            return iteratorDone();\n        });\n    };\n    function isStack(maybeStack) {\n        return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);\n    }\n    Stack.isStack = isStack;\n    var IS_STACK_SENTINEL = \"@@__IMMUTABLE_STACK__@@\";\n    var StackPrototype = Stack.prototype;\n    StackPrototype[IS_STACK_SENTINEL] = true;\n    StackPrototype.withMutations = MapPrototype.withMutations;\n    StackPrototype.asMutable = MapPrototype.asMutable;\n    StackPrototype.asImmutable = MapPrototype.asImmutable;\n    StackPrototype.wasAltered = MapPrototype.wasAltered;\n    function makeStack(size, head, ownerID, hash) {\n        var map = Object.create(StackPrototype);\n        map.size = size;\n        map._head = head;\n        map.__ownerID = ownerID;\n        map.__hash = hash;\n        map.__altered = false;\n        return map;\n    }\n    var EMPTY_STACK;\n    function emptyStack() {\n        return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n    }\n    /**\n   * Contributes additional methods to a constructor\n   */ function mixin(ctor, methods) {\n        var keyCopier = function(key) {\n            ctor.prototype[key] = methods[key];\n        };\n        Object.keys(methods).forEach(keyCopier);\n        Object.getOwnPropertySymbols && Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n        return ctor;\n    }\n    Iterable.Iterator = Iterator;\n    mixin(Iterable, {\n        // ### Conversion to other types\n        toArray: function() {\n            assertNotInfinite(this.size);\n            var array = new Array(this.size || 0);\n            this.valueSeq().__iterate(function(v, i) {\n                array[i] = v;\n            });\n            return array;\n        },\n        toIndexedSeq: function() {\n            return new ToIndexedSequence(this);\n        },\n        toJS: function() {\n            return this.toSeq().map(function(value) {\n                return value && typeof value.toJS === \"function\" ? value.toJS() : value;\n            }).__toJS();\n        },\n        toJSON: function() {\n            return this.toSeq().map(function(value) {\n                return value && typeof value.toJSON === \"function\" ? value.toJSON() : value;\n            }).__toJS();\n        },\n        toKeyedSeq: function() {\n            return new ToKeyedSequence(this, true);\n        },\n        toMap: function() {\n            // Use Late Binding here to solve the circular dependency.\n            return Map(this.toKeyedSeq());\n        },\n        toObject: function() {\n            assertNotInfinite(this.size);\n            var object = {};\n            this.__iterate(function(v, k) {\n                object[k] = v;\n            });\n            return object;\n        },\n        toOrderedMap: function() {\n            // Use Late Binding here to solve the circular dependency.\n            return OrderedMap(this.toKeyedSeq());\n        },\n        toOrderedSet: function() {\n            // Use Late Binding here to solve the circular dependency.\n            return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n        },\n        toSet: function() {\n            // Use Late Binding here to solve the circular dependency.\n            return Set(isKeyed(this) ? this.valueSeq() : this);\n        },\n        toSetSeq: function() {\n            return new ToSetSequence(this);\n        },\n        toSeq: function() {\n            return isIndexed(this) ? this.toIndexedSeq() : isKeyed(this) ? this.toKeyedSeq() : this.toSetSeq();\n        },\n        toStack: function() {\n            // Use Late Binding here to solve the circular dependency.\n            return Stack(isKeyed(this) ? this.valueSeq() : this);\n        },\n        toList: function() {\n            // Use Late Binding here to solve the circular dependency.\n            return List(isKeyed(this) ? this.valueSeq() : this);\n        },\n        // ### Common JavaScript methods and properties\n        toString: function() {\n            return \"[Iterable]\";\n        },\n        __toString: function(head, tail) {\n            if (this.size === 0) {\n                return head + tail;\n            }\n            return head + \" \" + this.toSeq().map(this.__toStringMapper).join(\", \") + \" \" + tail;\n        },\n        // ### ES6 Collection methods (ES6 Array and Map)\n        concat: function() {\n            var values = SLICE$0.call(arguments, 0);\n            return reify(this, concatFactory(this, values));\n        },\n        includes: function(searchValue) {\n            return this.some(function(value) {\n                return is(value, searchValue);\n            });\n        },\n        entries: function() {\n            return this.__iterator(ITERATE_ENTRIES);\n        },\n        every: function(predicate, context) {\n            assertNotInfinite(this.size);\n            var returnValue = true;\n            this.__iterate(function(v, k, c) {\n                if (!predicate.call(context, v, k, c)) {\n                    returnValue = false;\n                    return false;\n                }\n            });\n            return returnValue;\n        },\n        filter: function(predicate, context) {\n            return reify(this, filterFactory(this, predicate, context, true));\n        },\n        find: function(predicate, context, notSetValue) {\n            var entry = this.findEntry(predicate, context);\n            return entry ? entry[1] : notSetValue;\n        },\n        findEntry: function(predicate, context) {\n            var found;\n            this.__iterate(function(v, k, c) {\n                if (predicate.call(context, v, k, c)) {\n                    found = [\n                        k,\n                        v\n                    ];\n                    return false;\n                }\n            });\n            return found;\n        },\n        findLastEntry: function(predicate, context) {\n            return this.toSeq().reverse().findEntry(predicate, context);\n        },\n        forEach: function(sideEffect, context) {\n            assertNotInfinite(this.size);\n            return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n        },\n        join: function(separator) {\n            assertNotInfinite(this.size);\n            separator = separator !== undefined ? \"\" + separator : \",\";\n            var joined = \"\";\n            var isFirst = true;\n            this.__iterate(function(v) {\n                isFirst ? isFirst = false : joined += separator;\n                joined += v !== null && v !== undefined ? v.toString() : \"\";\n            });\n            return joined;\n        },\n        keys: function() {\n            return this.__iterator(ITERATE_KEYS);\n        },\n        map: function(mapper, context) {\n            return reify(this, mapFactory(this, mapper, context));\n        },\n        reduce: function(reducer, initialReduction, context) {\n            assertNotInfinite(this.size);\n            var reduction;\n            var useFirst;\n            if (arguments.length < 2) {\n                useFirst = true;\n            } else {\n                reduction = initialReduction;\n            }\n            this.__iterate(function(v, k, c) {\n                if (useFirst) {\n                    useFirst = false;\n                    reduction = v;\n                } else {\n                    reduction = reducer.call(context, reduction, v, k, c);\n                }\n            });\n            return reduction;\n        },\n        reduceRight: function(reducer, initialReduction, context) {\n            var reversed = this.toKeyedSeq().reverse();\n            return reversed.reduce.apply(reversed, arguments);\n        },\n        reverse: function() {\n            return reify(this, reverseFactory(this, true));\n        },\n        slice: function(begin, end) {\n            return reify(this, sliceFactory(this, begin, end, true));\n        },\n        some: function(predicate, context) {\n            return !this.every(not(predicate), context);\n        },\n        sort: function(comparator) {\n            return reify(this, sortFactory(this, comparator));\n        },\n        values: function() {\n            return this.__iterator(ITERATE_VALUES);\n        },\n        // ### More sequential methods\n        butLast: function() {\n            return this.slice(0, -1);\n        },\n        isEmpty: function() {\n            return this.size !== undefined ? this.size === 0 : !this.some(function() {\n                return true;\n            });\n        },\n        count: function(predicate, context) {\n            return ensureSize(predicate ? this.toSeq().filter(predicate, context) : this);\n        },\n        countBy: function(grouper, context) {\n            return countByFactory(this, grouper, context);\n        },\n        equals: function(other) {\n            return deepEqual(this, other);\n        },\n        entrySeq: function() {\n            var iterable = this;\n            if (iterable._cache) {\n                // We cache as an entries array, so we can just return the cache!\n                return new ArraySeq(iterable._cache);\n            }\n            var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();\n            entriesSequence.fromEntrySeq = function() {\n                return iterable.toSeq();\n            };\n            return entriesSequence;\n        },\n        filterNot: function(predicate, context) {\n            return this.filter(not(predicate), context);\n        },\n        findLast: function(predicate, context, notSetValue) {\n            return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n        },\n        first: function() {\n            return this.find(returnTrue);\n        },\n        flatMap: function(mapper, context) {\n            return reify(this, flatMapFactory(this, mapper, context));\n        },\n        flatten: function(depth) {\n            return reify(this, flattenFactory(this, depth, true));\n        },\n        fromEntrySeq: function() {\n            return new FromEntriesSequence(this);\n        },\n        get: function(searchKey, notSetValue) {\n            return this.find(function(_, key) {\n                return is(key, searchKey);\n            }, undefined, notSetValue);\n        },\n        getIn: function(searchKeyPath, notSetValue) {\n            var nested = this;\n            // Note: in an ES6 environment, we would prefer:\n            // for (var key of searchKeyPath) {\n            var iter = forceIterator(searchKeyPath);\n            var step;\n            while(!(step = iter.next()).done){\n                var key = step.value;\n                nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;\n                if (nested === NOT_SET) {\n                    return notSetValue;\n                }\n            }\n            return nested;\n        },\n        groupBy: function(grouper, context) {\n            return groupByFactory(this, grouper, context);\n        },\n        has: function(searchKey) {\n            return this.get(searchKey, NOT_SET) !== NOT_SET;\n        },\n        hasIn: function(searchKeyPath) {\n            return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;\n        },\n        isSubset: function(iter) {\n            iter = typeof iter.includes === \"function\" ? iter : Iterable(iter);\n            return this.every(function(value) {\n                return iter.includes(value);\n            });\n        },\n        isSuperset: function(iter) {\n            iter = typeof iter.isSubset === \"function\" ? iter : Iterable(iter);\n            return iter.isSubset(this);\n        },\n        keySeq: function() {\n            return this.toSeq().map(keyMapper).toIndexedSeq();\n        },\n        last: function() {\n            return this.toSeq().reverse().first();\n        },\n        max: function(comparator) {\n            return maxFactory(this, comparator);\n        },\n        maxBy: function(mapper, comparator) {\n            return maxFactory(this, comparator, mapper);\n        },\n        min: function(comparator) {\n            return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);\n        },\n        minBy: function(mapper, comparator) {\n            return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);\n        },\n        rest: function() {\n            return this.slice(1);\n        },\n        skip: function(amount) {\n            return this.slice(Math.max(0, amount));\n        },\n        skipLast: function(amount) {\n            return reify(this, this.toSeq().reverse().skip(amount).reverse());\n        },\n        skipWhile: function(predicate, context) {\n            return reify(this, skipWhileFactory(this, predicate, context, true));\n        },\n        skipUntil: function(predicate, context) {\n            return this.skipWhile(not(predicate), context);\n        },\n        sortBy: function(mapper, comparator) {\n            return reify(this, sortFactory(this, comparator, mapper));\n        },\n        take: function(amount) {\n            return this.slice(0, Math.max(0, amount));\n        },\n        takeLast: function(amount) {\n            return reify(this, this.toSeq().reverse().take(amount).reverse());\n        },\n        takeWhile: function(predicate, context) {\n            return reify(this, takeWhileFactory(this, predicate, context));\n        },\n        takeUntil: function(predicate, context) {\n            return this.takeWhile(not(predicate), context);\n        },\n        valueSeq: function() {\n            return this.toIndexedSeq();\n        },\n        // ### Hashable Object\n        hashCode: function() {\n            return this.__hash || (this.__hash = hashIterable(this));\n        }\n    });\n    // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n    // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n    // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n    // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n    var IterablePrototype = Iterable.prototype;\n    IterablePrototype[IS_ITERABLE_SENTINEL] = true;\n    IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;\n    IterablePrototype.__toJS = IterablePrototype.toArray;\n    IterablePrototype.__toStringMapper = quoteString;\n    IterablePrototype.inspect = IterablePrototype.toSource = function() {\n        return this.toString();\n    };\n    IterablePrototype.chain = IterablePrototype.flatMap;\n    IterablePrototype.contains = IterablePrototype.includes;\n    // Temporary warning about using length\n    (function() {\n        try {\n            Object.defineProperty(IterablePrototype, \"length\", {\n                get: function() {\n                    if (!Iterable.noLengthWarning) {\n                        var stack;\n                        try {\n                            throw new Error();\n                        } catch (error) {\n                            stack = error.stack;\n                        }\n                        if (stack.indexOf(\"_wrapObject\") === -1) {\n                            console && console.warn && console.warn(\"iterable.length has been deprecated, \" + \"use iterable.size or iterable.count(). \" + \"This warning will become a silent error in a future version. \" + stack);\n                            return this.size;\n                        }\n                    }\n                }\n            });\n        } catch (e) {}\n    })();\n    mixin(KeyedIterable, {\n        // ### More sequential methods\n        flip: function() {\n            return reify(this, flipFactory(this));\n        },\n        findKey: function(predicate, context) {\n            var entry = this.findEntry(predicate, context);\n            return entry && entry[0];\n        },\n        findLastKey: function(predicate, context) {\n            return this.toSeq().reverse().findKey(predicate, context);\n        },\n        keyOf: function(searchValue) {\n            return this.findKey(function(value) {\n                return is(value, searchValue);\n            });\n        },\n        lastKeyOf: function(searchValue) {\n            return this.findLastKey(function(value) {\n                return is(value, searchValue);\n            });\n        },\n        mapEntries: function(mapper, context) {\n            var this$0 = this;\n            var iterations = 0;\n            return reify(this, this.toSeq().map(function(v, k) {\n                return mapper.call(context, [\n                    k,\n                    v\n                ], iterations++, this$0);\n            }).fromEntrySeq());\n        },\n        mapKeys: function(mapper, context) {\n            var this$0 = this;\n            return reify(this, this.toSeq().flip().map(function(k, v) {\n                return mapper.call(context, k, v, this$0);\n            }).flip());\n        }\n    });\n    var KeyedIterablePrototype = KeyedIterable.prototype;\n    KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;\n    KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;\n    KeyedIterablePrototype.__toJS = IterablePrototype.toObject;\n    KeyedIterablePrototype.__toStringMapper = function(v, k) {\n        return JSON.stringify(k) + \": \" + quoteString(v);\n    };\n    mixin(IndexedIterable, {\n        // ### Conversion to other types\n        toKeyedSeq: function() {\n            return new ToKeyedSequence(this, false);\n        },\n        // ### ES6 Collection methods (ES6 Array and Map)\n        filter: function(predicate, context) {\n            return reify(this, filterFactory(this, predicate, context, false));\n        },\n        findIndex: function(predicate, context) {\n            var entry = this.findEntry(predicate, context);\n            return entry ? entry[0] : -1;\n        },\n        indexOf: function(searchValue) {\n            var key = this.toKeyedSeq().keyOf(searchValue);\n            return key === undefined ? -1 : key;\n        },\n        lastIndexOf: function(searchValue) {\n            var key = this.toKeyedSeq().reverse().keyOf(searchValue);\n            return key === undefined ? -1 : key;\n        // var index =\n        // return this.toSeq().reverse().indexOf(searchValue);\n        },\n        reverse: function() {\n            return reify(this, reverseFactory(this, false));\n        },\n        slice: function(begin, end) {\n            return reify(this, sliceFactory(this, begin, end, false));\n        },\n        splice: function(index, removeNum /*, ...values*/ ) {\n            var numArgs = arguments.length;\n            removeNum = Math.max(removeNum | 0, 0);\n            if (numArgs === 0 || numArgs === 2 && !removeNum) {\n                return this;\n            }\n            // If index is negative, it should resolve relative to the size of the\n            // collection. However size may be expensive to compute if not cached, so\n            // only call count() if the number is in fact negative.\n            index = resolveBegin(index, index < 0 ? this.count() : this.size);\n            var spliced = this.slice(0, index);\n            return reify(this, numArgs === 1 ? spliced : spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum)));\n        },\n        // ### More collection methods\n        findLastIndex: function(predicate, context) {\n            var key = this.toKeyedSeq().findLastKey(predicate, context);\n            return key === undefined ? -1 : key;\n        },\n        first: function() {\n            return this.get(0);\n        },\n        flatten: function(depth) {\n            return reify(this, flattenFactory(this, depth, false));\n        },\n        get: function(index, notSetValue) {\n            index = wrapIndex(this, index);\n            return index < 0 || this.size === Infinity || this.size !== undefined && index > this.size ? notSetValue : this.find(function(_, key) {\n                return key === index;\n            }, undefined, notSetValue);\n        },\n        has: function(index) {\n            index = wrapIndex(this, index);\n            return index >= 0 && (this.size !== undefined ? this.size === Infinity || index < this.size : this.indexOf(index) !== -1);\n        },\n        interpose: function(separator) {\n            return reify(this, interposeFactory(this, separator));\n        },\n        interleave: function() {\n            var iterables = [\n                this\n            ].concat(arrCopy(arguments));\n            var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);\n            var interleaved = zipped.flatten(true);\n            if (zipped.size) {\n                interleaved.size = zipped.size * iterables.length;\n            }\n            return reify(this, interleaved);\n        },\n        last: function() {\n            return this.get(-1);\n        },\n        skipWhile: function(predicate, context) {\n            return reify(this, skipWhileFactory(this, predicate, context, false));\n        },\n        zip: function() {\n            var iterables = [\n                this\n            ].concat(arrCopy(arguments));\n            return reify(this, zipWithFactory(this, defaultZipper, iterables));\n        },\n        zipWith: function(zipper /*, ...iterables */ ) {\n            var iterables = arrCopy(arguments);\n            iterables[0] = this;\n            return reify(this, zipWithFactory(this, zipper, iterables));\n        }\n    });\n    IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;\n    IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;\n    mixin(SetIterable, {\n        // ### ES6 Collection methods (ES6 Array and Map)\n        get: function(value, notSetValue) {\n            return this.has(value) ? value : notSetValue;\n        },\n        includes: function(value) {\n            return this.has(value);\n        },\n        // ### More sequential methods\n        keySeq: function() {\n            return this.valueSeq();\n        }\n    });\n    SetIterable.prototype.has = IterablePrototype.includes;\n    // Mixin subclasses\n    mixin(KeyedSeq, KeyedIterable.prototype);\n    mixin(IndexedSeq, IndexedIterable.prototype);\n    mixin(SetSeq, SetIterable.prototype);\n    mixin(KeyedCollection, KeyedIterable.prototype);\n    mixin(IndexedCollection, IndexedIterable.prototype);\n    mixin(SetCollection, SetIterable.prototype);\n    // #pragma Helper functions\n    function keyMapper(v, k) {\n        return k;\n    }\n    function entryMapper(v, k) {\n        return [\n            k,\n            v\n        ];\n    }\n    function not(predicate) {\n        return function() {\n            return !predicate.apply(this, arguments);\n        };\n    }\n    function neg(predicate) {\n        return function() {\n            return -predicate.apply(this, arguments);\n        };\n    }\n    function quoteString(value) {\n        return typeof value === \"string\" ? JSON.stringify(value) : value;\n    }\n    function defaultZipper() {\n        return arrCopy(arguments);\n    }\n    function defaultNegComparator(a, b) {\n        return a < b ? 1 : a > b ? -1 : 0;\n    }\n    function hashIterable(iterable) {\n        if (iterable.size === Infinity) {\n            return 0;\n        }\n        var ordered = isOrdered(iterable);\n        var keyed = isKeyed(iterable);\n        var h = ordered ? 1 : 0;\n        var size = iterable.__iterate(keyed ? ordered ? function(v, k) {\n            h = 31 * h + hashMerge(hash(v), hash(k)) | 0;\n        } : function(v, k) {\n            h = h + hashMerge(hash(v), hash(k)) | 0;\n        } : ordered ? function(v) {\n            h = 31 * h + hash(v) | 0;\n        } : function(v) {\n            h = h + hash(v) | 0;\n        });\n        return murmurHashOfSize(size, h);\n    }\n    function murmurHashOfSize(size, h) {\n        h = imul(h, 0xCC9E2D51);\n        h = imul(h << 15 | h >>> -15, 0x1B873593);\n        h = imul(h << 13 | h >>> -13, 5);\n        h = (h + 0xE6546B64 | 0) ^ size;\n        h = imul(h ^ h >>> 16, 0x85EBCA6B);\n        h = imul(h ^ h >>> 13, 0xC2B2AE35);\n        h = smi(h ^ h >>> 16);\n        return h;\n    }\n    function hashMerge(a, b) {\n        return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int\n    }\n    var Immutable = {\n        Iterable: Iterable,\n        Seq: Seq,\n        Collection: Collection,\n        Map: Map,\n        OrderedMap: OrderedMap,\n        List: List,\n        Stack: Stack,\n        Set: Set,\n        OrderedSet: OrderedSet,\n        Record: Record,\n        Range: Range,\n        Repeat: Repeat,\n        is: is,\n        fromJS: fromJS\n    };\n    return Immutable;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/draft-js/node_modules/immutable/dist/immutable.js\n");

/***/ })

};
;